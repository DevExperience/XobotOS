using Sharpen;

namespace android.@internal
{
	[Sharpen.Sharpened]
	public sealed class R
	{
		public sealed class anim
		{
			public const int accelerate_decelerate_interpolator = unchecked((int)(0x010a0004)
				);

			/// <summary>Acceleration curve matching Flash's quadratic ease out function.</summary>
			/// <remarks>Acceleration curve matching Flash's quadratic ease out function.</remarks>
			public const int accelerate_interpolator = unchecked((int)(0x010a0005));

			public const int activity_close_enter = unchecked((int)(0x010a000d));

			public const int activity_close_exit = unchecked((int)(0x010a000e));

			public const int activity_open_enter = unchecked((int)(0x010a000f));

			public const int activity_open_exit = unchecked((int)(0x010a0010));

			public const int anticipate_interpolator = unchecked((int)(0x010a0007));

			public const int anticipate_overshoot_interpolator = unchecked((int)(0x010a0009));

			public const int app_starting_exit = unchecked((int)(0x010a0011));

			public const int bounce_interpolator = unchecked((int)(0x010a000a));

			public const int cycle_interpolator = unchecked((int)(0x010a000c));

			/// <summary>Acceleration curve matching Flash's quadratic ease in function.</summary>
			/// <remarks>Acceleration curve matching Flash's quadratic ease in function.</remarks>
			public const int decelerate_interpolator = unchecked((int)(0x010a0006));

			public const int dialog_enter = unchecked((int)(0x010a0012));

			public const int dialog_exit = unchecked((int)(0x010a0013));

			public const int fade_in = unchecked((int)(0x010a0000));

			public const int fade_out = unchecked((int)(0x010a0001));

			public const int fast_fade_in = unchecked((int)(0x010a0014));

			public const int fast_fade_out = unchecked((int)(0x010a0015));

			public const int grow_fade_in = unchecked((int)(0x010a0016));

			public const int grow_fade_in_center = unchecked((int)(0x010a0017));

			public const int grow_fade_in_from_bottom = unchecked((int)(0x010a0018));

			public const int input_method_enter = unchecked((int)(0x010a0019));

			public const int input_method_exit = unchecked((int)(0x010a001a));

			public const int input_method_extract_enter = unchecked((int)(0x010a001b));

			public const int input_method_extract_exit = unchecked((int)(0x010a001c));

			public const int input_method_fancy_enter = unchecked((int)(0x010a001d));

			public const int input_method_fancy_exit = unchecked((int)(0x010a001e));

			public const int linear_interpolator = unchecked((int)(0x010a000b));

			public const int lock_screen_behind_enter = unchecked((int)(0x010a001f));

			public const int lock_screen_enter = unchecked((int)(0x010a0020));

			public const int lock_screen_exit = unchecked((int)(0x010a0021));

			public const int options_panel_enter = unchecked((int)(0x010a0022));

			public const int options_panel_exit = unchecked((int)(0x010a0023));

			public const int overshoot_interpolator = unchecked((int)(0x010a0008));

			public const int push_down_in = unchecked((int)(0x010a0024));

			public const int push_down_in_no_alpha = unchecked((int)(0x010a0025));

			public const int push_down_out = unchecked((int)(0x010a0026));

			public const int push_down_out_no_alpha = unchecked((int)(0x010a0027));

			public const int push_up_in = unchecked((int)(0x010a0028));

			public const int push_up_out = unchecked((int)(0x010a0029));

			public const int recent_enter = unchecked((int)(0x010a002a));

			public const int recent_exit = unchecked((int)(0x010a002b));

			public const int screen_rotate_0_enter = unchecked((int)(0x010a002c));

			public const int screen_rotate_0_exit = unchecked((int)(0x010a002d));

			public const int screen_rotate_180_enter = unchecked((int)(0x010a002e));

			public const int screen_rotate_180_exit = unchecked((int)(0x010a002f));

			public const int screen_rotate_minus_90_enter = unchecked((int)(0x010a0030));

			public const int screen_rotate_minus_90_exit = unchecked((int)(0x010a0031));

			public const int screen_rotate_plus_90_enter = unchecked((int)(0x010a0032));

			public const int screen_rotate_plus_90_exit = unchecked((int)(0x010a0033));

			public const int search_bar_enter = unchecked((int)(0x010a0034));

			public const int search_bar_exit = unchecked((int)(0x010a0035));

			public const int shrink_fade_out = unchecked((int)(0x010a0036));

			public const int shrink_fade_out_center = unchecked((int)(0x010a0037));

			public const int shrink_fade_out_from_bottom = unchecked((int)(0x010a0038));

			public const int slide_in_child_bottom = unchecked((int)(0x010a0039));

			public const int slide_in_left = unchecked((int)(0x010a0002));

			public const int slide_in_right = unchecked((int)(0x010a003a));

			public const int slide_in_up = unchecked((int)(0x010a003b));

			public const int slide_out_down = unchecked((int)(0x010a003c));

			public const int slide_out_left = unchecked((int)(0x010a003d));

			public const int slide_out_right = unchecked((int)(0x010a0003));

			public const int submenu_enter = unchecked((int)(0x010a003e));

			public const int submenu_exit = unchecked((int)(0x010a003f));

			public const int task_close_enter = unchecked((int)(0x010a0040));

			public const int task_close_exit = unchecked((int)(0x010a0041));

			public const int task_open_enter = unchecked((int)(0x010a0042));

			public const int task_open_exit = unchecked((int)(0x010a0043));

			public const int toast_enter = unchecked((int)(0x010a0044));

			public const int toast_exit = unchecked((int)(0x010a0045));

			public const int translucent_enter = unchecked((int)(0x010a0046));

			public const int translucent_exit = unchecked((int)(0x010a0047));

			public const int wallpaper_close_enter = unchecked((int)(0x010a0048));

			public const int wallpaper_close_exit = unchecked((int)(0x010a0049));

			public const int wallpaper_enter = unchecked((int)(0x010a004a));

			public const int wallpaper_exit = unchecked((int)(0x010a004b));

			public const int wallpaper_intra_close_enter = unchecked((int)(0x010a004c));

			public const int wallpaper_intra_close_exit = unchecked((int)(0x010a004d));

			public const int wallpaper_intra_open_enter = unchecked((int)(0x010a004e));

			public const int wallpaper_intra_open_exit = unchecked((int)(0x010a004f));

			public const int wallpaper_open_enter = unchecked((int)(0x010a0050));

			public const int wallpaper_open_exit = unchecked((int)(0x010a0051));

			public const int window_move_from_decor = unchecked((int)(0x010a0052));
		}

		public sealed class animator
		{
			/// <summary>A simple fade-in animation.</summary>
			/// <remarks>A simple fade-in animation.</remarks>
			public const int fade_in = unchecked((int)(0x010b0000));

			/// <summary>A simple fade-out animation.</summary>
			/// <remarks>A simple fade-out animation.</remarks>
			public const int fade_out = unchecked((int)(0x010b0001));

			public const int fragment_close_enter = unchecked((int)(0x010b0002));

			public const int fragment_close_exit = unchecked((int)(0x010b0003));

			public const int fragment_fade_enter = unchecked((int)(0x010b0004));

			public const int fragment_fade_exit = unchecked((int)(0x010b0005));

			public const int fragment_open_enter = unchecked((int)(0x010b0006));

			public const int fragment_open_exit = unchecked((int)(0x010b0007));
		}

		public sealed class array
		{
			/// <summary>This string array should be overridden by the manufacture to present a list of carrier-id,locale.
			/// 	</summary>
			/// <remarks>
			/// This string array should be overridden by the manufacture to present a list of carrier-id,locale. The wifi regulatory domain is extracted from the locale information. This is used at startup to set system defaults by checking the system property ro.carrier for the carrier-id and searching through this array
			/// An Array of [[Carrier-ID]
			/// [default-locale]]
			/// </remarks>
			public const int carrier_properties = unchecked((int)(0x0107002d));

			/// <summary>
			/// Various locale-specific string resources for Contacts
			/// various string resources for Contacts
			/// </summary>
			public const int common_nicknames = unchecked((int)(0x0107002b));

			/// <summary>
			/// Array of output values for button backlight corresponding to the LUX values
			/// in the config_autoBrightnessLevels array.
			/// </summary>
			/// <remarks>
			/// Array of output values for button backlight corresponding to the LUX values
			/// in the config_autoBrightnessLevels array.  This array should have size one greater
			/// than the size of the config_autoBrightnessLevels array.
			/// This must be overridden in platform specific overlays
			/// </remarks>
			public const int config_autoBrightnessButtonBacklightValues = unchecked((int)(0x01070026
				));

			/// <summary>
			/// Array of output values for keyboard backlight corresponding to the LUX values
			/// in the config_autoBrightnessLevels array.
			/// </summary>
			/// <remarks>
			/// Array of output values for keyboard backlight corresponding to the LUX values
			/// in the config_autoBrightnessLevels array.  This array should have size one greater
			/// than the size of the config_autoBrightnessLevels array.
			/// This must be overridden in platform specific overlays
			/// </remarks>
			public const int config_autoBrightnessKeyboardBacklightValues = unchecked((int)(0x01070027
				));

			/// <summary>
			/// Array of output values for LCD backlight corresponding to the LUX values
			/// in the config_autoBrightnessLevels array.
			/// </summary>
			/// <remarks>
			/// Array of output values for LCD backlight corresponding to the LUX values
			/// in the config_autoBrightnessLevels array.  This array should have size one greater
			/// than the size of the config_autoBrightnessLevels array.
			/// This must be overridden in platform specific overlays
			/// </remarks>
			public const int config_autoBrightnessLcdBacklightValues = unchecked((int)(0x01070025
				));

			/// <summary>Array of light sensor LUX values to define our levels for auto backlight brightness support.
			/// 	</summary>
			/// <remarks>
			/// Array of light sensor LUX values to define our levels for auto backlight brightness support.
			/// The N entries of this array define N + 1 zones as follows:
			/// Zone 0:        0 &lt;= LUX &lt; array[0]
			/// Zone 1:        array[0] &lt;= LUX &lt; array[1]
			/// ...
			/// Zone N:        array[N - 1] &lt;= LUX &lt; array[N]
			/// Zone N + 1:    array[N] &lt;= LUX &lt; infinity
			/// Must be overridden in platform specific overlays
			/// </remarks>
			public const int config_autoBrightnessLevels = unchecked((int)(0x01070024));

			/// <summary>Set of NetworkInfo.getType() that reflect data usage.</summary>
			/// <remarks>
			/// Set of NetworkInfo.getType() that reflect data usage.
			/// TYPE_MOBILE_CBS
			/// </remarks>
			public const int config_data_usage_network_types = unchecked((int)(0x01070016));

			/// <summary>Vibrator pattern for a very short but reliable vibration for soft keyboard tap
			/// 	</summary>
			public const int config_keyboardTapVibePattern = unchecked((int)(0x01070020));

			/// <summary>Vibrator pattern for feedback about a long screen/key press</summary>
			public const int config_longPressVibePattern = unchecked((int)(0x0107001e));

			/// <summary>
			/// If the mobile hotspot feature requires provisioning, a package name and class name
			/// can be provided to launch a supported application that provisions the devices.
			/// </summary>
			/// <remarks>
			/// If the mobile hotspot feature requires provisioning, a package name and class name
			/// can be provided to launch a supported application that provisions the devices.
			/// Example Usage:
			/// String[] appDetails = getStringArray(R.array.config_mobile_hotspot_provision_app);
			/// Intent intent = new Intent(Intent.ACTION_MAIN);
			/// intent.setClassName(appDetails[0], appDetails[1]);
			/// startActivityForResult(intent, 0);
			/// public void onActivityResult(int requestCode, int resultCode, Intent intent) {
			/// super.onActivityResult(requestCode, resultCode, intent);
			/// if (requestCode == 0) {
			/// if (resultCode == Activity.RESULT_OK) {
			/// //Mobile hotspot provisioning successful
			/// } else {
			/// //Mobile hotspot provisioning failed
			/// }
			/// }
			/// See src/com/android/settings/TetherSettings.java for more details.
			/// The first element is the package name and the second element is the class name
			/// of the provisioning app
			/// <item>com.example.provisioning</item>
			/// <item>com.example.provisioning.Activity</item>
			/// </remarks>
			public const int config_mobile_hotspot_provision_app = unchecked((int)(0x0107001b
				));

			/// <summary>
			/// Array of ConnectivityManager.TYPE_xxxx constants for networks that may only
			/// be controlled by systemOrSignature apps.
			/// </summary>
			/// <remarks>
			/// Array of ConnectivityManager.TYPE_xxxx constants for networks that may only
			/// be controlled by systemOrSignature apps.
			/// </remarks>
			public const int config_protectedNetworks = unchecked((int)(0x01070014));

			/// <summary>Vibrator pattern for feedback about booting with safe mode disabled</summary>
			public const int config_safeModeDisabledVibePattern = unchecked((int)(0x01070021)
				);

			/// <summary>Vibrator pattern for feedback about booting with safe mode disabled</summary>
			public const int config_safeModeEnabledVibePattern = unchecked((int)(0x01070022));

			/// <summary>Vibrator pattern for feedback about hitting a scroll barrier</summary>
			public const int config_scrollBarrierVibePattern = unchecked((int)(0x01070023));

			/// <summary>National language locking shift tables to enable for SMS encoding.</summary>
			/// <remarks>
			/// National language locking shift tables to enable for SMS encoding.
			/// Decoding is always enabled. 3GPP TS 23.038 states that this feature
			/// should not be enabled until a formal request is issued by the relevant
			/// national regulatory body. Array elements are codes from the table above.
			/// Example 1: devices sold in Turkey must include table 1 after the
			/// Turkish Telecommunication Authority requires locking shift encoding
			/// to be enabled (est. July 2012). (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
			/// See also: http://www.mobitech.com.tr/tr/ersanozturkblog_en/index.php?entry=entry090223-160014
			/// Example 2: devices sold in India should include tables 4 through 13
			/// to enable use of the new Release 9 tables for Indic languages.
			/// </remarks>
			public const int config_sms_enabled_locking_shift_tables = unchecked((int)(0x0107002a
				));

			/// <summary>National Language Identifier codes for the following two config items.</summary>
			/// <remarks>
			/// National Language Identifier codes for the following two config items.
			/// (from 3GPP TS 23.038 V9.1.1 Table 6.2.1.2.4.1):
			/// 0  - reserved
			/// 1  - Turkish
			/// 2  - Spanish (single shift table only)
			/// 3  - Portuguese
			/// 4  - Bengali
			/// 5  - Gujarati
			/// 6  - Hindi
			/// 7  - Kannada
			/// 8  - Malayalam
			/// 9  - Oriya
			/// 10  - Punjabi
			/// 11  - Tamil
			/// 12  - Telugu
			/// 13  - Urdu
			/// 14+ - reserved
			/// National language single shift tables to enable for SMS encoding.
			/// Decoding is always enabled. 3GPP TS 23.038 states that this feature
			/// should not be enabled until a formal request is issued by the relevant
			/// national regulatory body. Array elements are codes from the table above.
			/// Example 1: devices sold in Turkey must include table 1 to conform with
			/// By-Law Number 27230. (http://www.btk.gov.tr/eng/pdf/2009/BY-LAW_SMS.pdf)
			/// Example 2: devices sold in India should include tables 4 through 13
			/// to enable use of the new Release 9 tables for Indic languages.
			/// </remarks>
			public const int config_sms_enabled_single_shift_tables = unchecked((int)(0x01070029
				));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Defines the slots for the right-hand side icons.  That is to say, the
			/// icons in the status bar that are not notifications.
			/// </remarks>
			public const int config_statusBarIcons = unchecked((int)(0x01070012));

			/// <summary>
			/// List of regexpressions describing the interface (if any) that represent tetherable
			/// bluetooth interfaces.
			/// </summary>
			/// <remarks>
			/// List of regexpressions describing the interface (if any) that represent tetherable
			/// bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
			/// should be empty.
			/// </remarks>
			public const int config_tether_bluetooth_regexs = unchecked((int)(0x01070019));

			/// <summary>Dhcp range (min, max) to use for tethering purposes</summary>
			public const int config_tether_dhcp_range = unchecked((int)(0x0107001a));

			/// <summary>
			/// Array of ConnectivityManager.TYPE_xxxx values allowable for tethering
			/// Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
			/// &lt;!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH
			/// Array of ConnectivityManager.TYPE_xxxx values allowable for tethering
			/// Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
			/// &lt;!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH
			/// </summary>
			public const int config_tether_upstream_types = unchecked((int)(0x0107001c));

			/// <summary>
			/// List of regexpressions describing the interface (if any) that represent tetherable
			/// USB interfaces.
			/// </summary>
			/// <remarks>
			/// List of regexpressions describing the interface (if any) that represent tetherable
			/// USB interfaces.  If the device doesn't want to support tething over USB this should
			/// be empty.  An example would be "usb.*"
			/// </remarks>
			public const int config_tether_usb_regexs = unchecked((int)(0x01070017));

			/// <summary>
			/// List of regexpressions describing the interface (if any) that represent tetherable
			/// Wifi interfaces.
			/// </summary>
			/// <remarks>
			/// List of regexpressions describing the interface (if any) that represent tetherable
			/// Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
			/// should be empty.  An example would be "softap.*"
			/// </remarks>
			public const int config_tether_wifi_regexs = unchecked((int)(0x01070018));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD
			/// Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD
			/// Do not translate. Defines the slots is Two Digit Number for dialing normally not USSD
			/// </remarks>
			public const int config_twoDigitNumberPattern = unchecked((int)(0x01070028));

			/// <summary>List of file paths for USB host busses to exclude from USB host support.
			/// 	</summary>
			/// <remarks>
			/// List of file paths for USB host busses to exclude from USB host support.
			/// For example, if the first USB bus on the device is used to communicate
			/// with the modem or some other restricted hardware, add "/dev/bus/usb/001/"
			/// to this list.  If this is empty, no parts of the host USB bus will be excluded.
			/// </remarks>
			public const int config_usbHostBlacklist = unchecked((int)(0x0107001d));

			/// <summary>Vibrator pattern for feedback about touching a virtual key</summary>
			public const int config_virtualKeyVibePattern = unchecked((int)(0x0107001f));

			/// <summary>Email address types from android.provider.Contacts.</summary>
			/// <remarks>Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example.
			/// 	</remarks>
			public const int emailAddressTypes = unchecked((int)(0x01070000));

			/// <summary>Instant Messenger ID types from android.provider.Contacts.</summary>
			/// <remarks>Instant Messenger ID types from android.provider.Contacts. This could be used when adding a new IM for a contact, for example.
			/// 	</remarks>
			public const int imAddressTypes = unchecked((int)(0x0107002c));

			/// <summary>Instant Message protocols/providers from android.provider.Contacts</summary>
			public const int imProtocols = unchecked((int)(0x01070001));

			public const int lockscreen_direction_descriptions = unchecked((int)(0x0107000d));

			public const int lockscreen_target_descriptions_when_silent = unchecked((int)(0x0107000c
				));

			public const int lockscreen_target_descriptions_when_soundon = unchecked((int)(0x0107000f
				));

			public const int lockscreen_target_descriptions_with_camera = unchecked((int)(0x01070011
				));

			/// <summary>
			/// Resources for MultiWaveView in LockScreen
			/// Resources for MultiWaveView in LockScreen
			/// </summary>
			public const int lockscreen_targets_when_silent = unchecked((int)(0x0107000b));

			public const int lockscreen_targets_when_soundon = unchecked((int)(0x0107000e));

			public const int lockscreen_targets_with_camera = unchecked((int)(0x01070010));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// </remarks>
			public const int maps_starting_lat_lng = unchecked((int)(0x01070007));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// Do not translate.
			/// </remarks>
			public const int maps_starting_zoom = unchecked((int)(0x01070008));

			/// <summary>XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.</summary>
			/// <remarks>
			/// XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
			/// Please don't copy them, copy anything else.
			/// This string array should be overridden by the device to present a list of network
			/// attributes.  This is used by the connectivity manager to decide which networks can coexist
			/// based on the hardware
			/// An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
			/// [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]
			/// the 5th element "resore-time" indicates the number of milliseconds to delay
			/// before automatically restore the default connection.  Set -1 if the connection
			/// does not require auto-restore.
			/// the 6th element indicates boot-time dependency-met value.
			/// </remarks>
			public const int networkAttributes = unchecked((int)(0x01070013));

			/// <summary>Organization types from android.provider.Contacts.</summary>
			/// <remarks>Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example.
			/// 	</remarks>
			public const int organizationTypes = unchecked((int)(0x01070002));

			/// <summary>Phone number types from android.provider.Contacts.</summary>
			/// <remarks>Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example.
			/// 	</remarks>
			public const int phoneTypes = unchecked((int)(0x01070003));

			/// <summary>Postal address types from android.provider.Contacts.</summary>
			/// <remarks>Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example.
			/// 	</remarks>
			public const int postalAddressTypes = unchecked((int)(0x01070004));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. These are all of the color state list resources that should be
			/// preloaded by the zygote process before it starts forking application processes.
			/// </remarks>
			public const int preloaded_color_state_lists = unchecked((int)(0x01070006));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. These are all of the drawable resources that should be preloaded by
			/// the zygote process before it starts forking application processes.
			/// </remarks>
			public const int preloaded_drawables = unchecked((int)(0x01070005));

			/// <summary>
			/// This string array should be overridden by the device to present a list of radio
			/// attributes.
			/// </summary>
			/// <remarks>
			/// This string array should be overridden by the device to present a list of radio
			/// attributes.  This is used by the connectivity manager to decide which networks can coexist
			/// based on the hardware
			/// An Array of "[ConnectivityManager connectionType],
			/// [# simultaneous connection types]"
			/// </remarks>
			public const int radioAttributes = unchecked((int)(0x01070015));

			/// <summary>Used in LocalePicker</summary>
			public const int special_locale_codes = unchecked((int)(0x01070009));

			/// <summary>Used in LocalePicker</summary>
			public const int special_locale_names = unchecked((int)(0x0107000a));
		}

		public sealed class attr
		{
			/// <summary>Default AbsListView style.</summary>
			/// <remarks>
			/// Default AbsListView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int absListViewStyle = unchecked((int)(0x0101006a));

			/// <summary>
			/// The event types this serivce would like to receive as specified in
			/// <see cref="android.view.accessibility.AccessibilityEvent">android.view.accessibility.AccessibilityEvent
			/// 	</see>
			/// . This setting
			/// can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>typeViewClicked</code></td><td>0x00000001</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_CLICKED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_CLICKED
			/// 	</see>
			/// events.</td></tr>
			/// <tr><td><code>typeViewLongClicked</code></td><td>0x00000002</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_LONG_CLICKED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_LONG_CLICKED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewSelected</code></td><td>0x00000004</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewFocused</code></td><td>0x00000008</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_FOCUSED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_FOCUSED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewTextChanged</code></td><td>0x00000010</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeWindowStateChanged</code></td><td>0x00000020</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED</see>
			/// events. </td></tr>
			/// <tr><td><code>typeNotificationStateChanged</code></td><td>0x00000040</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewHoverEnter</code></td><td>0x00000080</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_ENTER">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_ENTER
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewHoverExit</code></td><td>0x00000100</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_EXIT">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_EXIT
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeTouchExplorationGestureStart</code></td><td>0x00000200</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeTouchExplorationGestureEnd</code></td><td>0x00000400</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeWindowContentChanged</code></td><td>0x00000800</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewScrolled</code></td><td>0x000001000</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SCROLLED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SCROLLED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewTextSelectionChanged</code></td><td>0x000002000</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeAllMask</code></td><td>0xffffffff</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPES_ALL_MASK">android.view.accessibility.AccessibilityEvent.TYPES_ALL_MASK
			/// 	</see>
			/// i.e. all events. </td></tr>
			/// </table>
			/// </summary>
			public const int accessibilityEventTypes = unchecked((int)(0x01010380));

			/// <summary>
			/// The feedback types this serivce provides as specified in
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo">android.accessibilityservice.AccessibilityServiceInfo
			/// 	</see>
			/// . This setting
			/// can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>feedbackSpoken</code></td><td>0x00000001</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_SPOKEN"
			/// 	>android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_SPOKEN</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackHaptic</code></td><td>0x00000002</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_HAPTIC"
			/// 	>android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_HAPTIC</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackAudible</code></td><td>0x00000004</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_AUDIBLE
			/// 	">android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_AUDIBLE</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackVisual</code></td><td>0x00000008</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_VISUAL"
			/// 	>android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_VISUAL</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackGeneric</code></td><td>0x00000010</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_GENERIC
			/// 	">android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_GENERIC</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackAllMask</code></td><td>0xffffffff</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_ALL_MASK
			/// 	">android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_ALL_MASK</see>
			/// feedback. </td></tr>
			/// </table>
			/// </summary>
			public const int accessibilityFeedbackType = unchecked((int)(0x01010382));

			/// <summary>
			/// Additional flags as specified in
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo">android.accessibilityservice.AccessibilityServiceInfo
			/// 	</see>
			/// .
			/// This setting can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>flagDefault</code></td><td>0x00000001</td><td> Has flag
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.DEFAULT">android.accessibilityservice.AccessibilityServiceInfo.DEFAULT
			/// 	</see>
			/// </td></tr>
			/// </table>
			/// </summary>
			public const int accessibilityFlags = unchecked((int)(0x01010384));

			/// <summary>A preferences.xml file for authenticator-specific settings.</summary>
			/// <remarks>
			/// A preferences.xml file for authenticator-specific settings.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int accountPreferences = unchecked((int)(0x0101029f));

			/// <summary>The account type this authenticator handles.</summary>
			/// <remarks>
			/// The account type this authenticator handles.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int accountType = unchecked((int)(0x0101028f));

			/// <summary>
			/// The action name to assign to the Intent, as per
			/// <see cref="android.content.Intent.setAction(string)">Intent.setAction()</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int action = unchecked((int)(0x0101002d));

			/// <summary>Custom divider drawable to use for elements in the action bar.</summary>
			/// <remarks>
			/// Custom divider drawable to use for elements in the action bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarDivider = unchecked((int)(0x0101039b));

			/// <summary>Custom item state list drawable background for action bar items.</summary>
			/// <remarks>
			/// Custom item state list drawable background for action bar items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarItemBackground = unchecked((int)(0x0101039c));

			/// <summary>
			/// Size of the Action Bar, including the contextual
			/// bar used to present Action Modes.
			/// </summary>
			/// <remarks>
			/// Size of the Action Bar, including the contextual
			/// bar used to present Action Modes.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>wrap_content</code></td><td>0</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int actionBarSize = unchecked((int)(0x010102eb));

			/// <summary>Reference to a style for the split Action Bar.</summary>
			/// <remarks>
			/// Reference to a style for the split Action Bar. This style
			/// controls the split component that holds the menu/action
			/// buttons. actionBarStyle is still used for the primary
			/// bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarSplitStyle = unchecked((int)(0x01010388));

			/// <summary>
			/// Reference to a style for the Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Reference to a style for the Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarStyle = unchecked((int)(0x010102ce));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarTabBarStyle = unchecked((int)(0x010102f4));

			/// <summary>
			/// Default style for tabs within an action bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Default style for tabs within an action bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarTabStyle = unchecked((int)(0x010102f3));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarTabTextStyle = unchecked((int)(0x010102f5));

			/// <summary>
			/// Reference to a theme that should be used to inflate widgets
			/// and layouts destined for the action bar.
			/// </summary>
			/// <remarks>
			/// Reference to a theme that should be used to inflate widgets
			/// and layouts destined for the action bar. Most of the time
			/// this will be a reference to the current theme, but when
			/// the action bar has a significantly different contrast
			/// profile than the rest of the activity the difference
			/// can become important. If this is set to @null the current
			/// theme will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionBarWidgetTheme = unchecked((int)(0x01010397));

			/// <summary>Default action button style.</summary>
			/// <remarks>
			/// Default action button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionButtonStyle = unchecked((int)(0x010102d8));

			/// <summary>Default ActionBar dropdown style.</summary>
			/// <remarks>
			/// Default ActionBar dropdown style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionDropDownStyle = unchecked((int)(0x010102d7));

			/// <summary>An optional layout to be used as an action view.</summary>
			/// <remarks>
			/// An optional layout to be used as an action view.
			/// See
			/// <see cref="android.view.MenuItem.setActionView(android.view.View)">android.view.MenuItem.setActionView(android.view.View)
			/// 	</see>
			/// for more info.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionLayout = unchecked((int)(0x010102fb));

			/// <summary>
			/// TextAppearance style that will be applied to text that
			/// appears within action menu items.
			/// </summary>
			/// <remarks>
			/// TextAppearance style that will be applied to text that
			/// appears within action menu items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionMenuTextAppearance = unchecked((int)(0x01010360));

			/// <summary>Color for text that appears within action menu items.</summary>
			/// <remarks>
			/// Color for text that appears within action menu items.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int actionMenuTextColor = unchecked((int)(0x01010361));

			/// <summary>
			/// Background drawable to use for action mode UI
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Background drawable to use for action mode UI
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeBackground = unchecked((int)(0x010102db));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeCloseButtonStyle = unchecked((int)(0x010102f7));

			/// <summary>
			/// Drawable to use for the close action mode button
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the close action mode button
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeCloseDrawable = unchecked((int)(0x010102dc));

			/// <summary>
			/// Drawable to use for the Copy action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Copy action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeCopyDrawable = unchecked((int)(0x01010312));

			/// <summary>
			/// Drawable to use for the Cut action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Cut action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeCutDrawable = unchecked((int)(0x01010311));

			/// <summary>
			/// Drawable to use for the Find action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Find action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeFindDrawable = unchecked((int)(0x010103c1));

			/// <summary>
			/// Drawable to use for the Paste action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Paste action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModePasteDrawable = unchecked((int)(0x01010313));

			/// <summary>PopupWindow style to use for action modes when showing as a window overlay.
			/// 	</summary>
			/// <remarks>
			/// PopupWindow style to use for action modes when showing as a window overlay.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModePopupWindowStyle = unchecked((int)(0x010103c3));

			/// <summary>
			/// Drawable to use for the Select all action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Select all action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeSelectAllDrawable = unchecked((int)(0x0101037e));

			/// <summary>
			/// Drawable to use for the Share action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Share action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeShareDrawable = unchecked((int)(0x010103c0));

			/// <summary>
			/// Background drawable to use for action mode UI in the lower split bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Background drawable to use for action mode UI in the lower split bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeSplitBackground = unchecked((int)(0x0101039d));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeStyle = unchecked((int)(0x01010394));

			/// <summary>
			/// Drawable to use for the Web Search action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Drawable to use for the Web Search action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionModeWebSearchDrawable = unchecked((int)(0x010103c2));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int actionOverflowButtonStyle = unchecked((int)(0x010102f6));

			/// <summary>
			/// The name of an optional ActionProvider class to instantiate an action view
			/// and perform operations such as default action for that menu item.
			/// </summary>
			/// <remarks>
			/// The name of an optional ActionProvider class to instantiate an action view
			/// and perform operations such as default action for that menu item.
			/// See
			/// <see cref="android.view.MenuItem.setActionProvider(android.view.ActionProvider)">android.view.MenuItem.setActionProvider(android.view.ActionProvider)
			/// 	</see>
			/// for more info.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int actionProviderClass = unchecked((int)(0x01010389));

			/// <summary>
			/// The name of an optional View class to instantiate and use as an
			/// action view.
			/// </summary>
			/// <remarks>
			/// The name of an optional View class to instantiate and use as an
			/// action view. See
			/// <see cref="android.view.MenuItem.setActionView(android.view.View)">android.view.MenuItem.setActionView(android.view.View)
			/// 	</see>
			/// for more info.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int actionViewClass = unchecked((int)(0x010102fc));

			/// <summary>Drawable used as a background for activated items.</summary>
			/// <remarks>
			/// Drawable used as a background for activated items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int activatedBackgroundIndicator = unchecked((int)(0x010102fd));

			/// <summary>Default ActivityChooserView style.</summary>
			/// <remarks>
			/// Default ActivityChooserView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int activityChooserViewStyle = unchecked((int)(0x010103bf));

			/// <summary>
			/// When closing the current activity, this is the animation that is
			/// run on the next activity (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When closing the current activity, this is the animation that is
			/// run on the next activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int activityCloseEnterAnimation = unchecked((int)(0x010100ba));

			/// <summary>
			/// When closing the current activity, this is the animation that is
			/// run on the current activity (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When closing the current activity, this is the animation that is
			/// run on the current activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int activityCloseExitAnimation = unchecked((int)(0x010100bb));

			/// <summary>
			/// When opening a new activity, this is the animation that is
			/// run on the next activity (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity, this is the animation that is
			/// run on the next activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int activityOpenEnterAnimation = unchecked((int)(0x010100b8));

			/// <summary>
			/// When opening a new activity, this is the animation that is
			/// run on the previous activity (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity, this is the animation that is
			/// run on the previous activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int activityOpenExitAnimation = unchecked((int)(0x010100b9));

			/// <summary>
			/// Sets whether this ViewGroup's drawable states also include
			/// its children's drawable states.
			/// </summary>
			/// <remarks>
			/// Sets whether this ViewGroup's drawable states also include
			/// its children's drawable states.  This is used, for example, to
			/// make a group appear to be focused when its child EditText or button
			/// is focused.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int addStatesFromChildren = unchecked((int)(0x010100f0));

			/// <summary>
			/// Set this to true if you want the ImageView to adjust its bounds
			/// to preserve the aspect ratio of its drawable.
			/// </summary>
			/// <remarks>
			/// Set this to true if you want the ImageView to adjust its bounds
			/// to preserve the aspect ratio of its drawable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int adjustViewBounds = unchecked((int)(0x0101011e));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int alertDialogButtonGroupStyle = unchecked((int)(0x010103b2));

			/// <summary><p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int alertDialogCenterButtons = unchecked((int)(0x010103b3));

			/// <summary>
			/// Icon drawable to use for alerts
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Icon drawable to use for alerts
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int alertDialogIcon = unchecked((int)(0x01010355));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int alertDialogStyle = unchecked((int)(0x0101005d));

			/// <summary>Theme to use for alert dialogs spawned from this theme.</summary>
			/// <remarks>
			/// Theme to use for alert dialogs spawned from this theme.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int alertDialogTheme = unchecked((int)(0x01010309));

			/// <summary>Alignment constants.</summary>
			/// <remarks>
			/// Alignment constants.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>alignBounds</code></td><td>0</td><td> Align the bounds of the children.
			/// See
			/// <see cref="android.widget.GridLayout.ALIGN_BOUNDS">android.widget.GridLayout.ALIGN_BOUNDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>alignMargins</code></td><td>1</td><td> Align the margins of the children.
			/// See
			/// <see cref="android.widget.GridLayout.ALIGN_MARGINS">android.widget.GridLayout.ALIGN_MARGINS
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// </remarks>
			public const int alignmentMode = unchecked((int)(0x0101037a));

			/// <summary>Resource representing the term "All Contacts" (e.g.</summary>
			/// <remarks>
			/// Resource representing the term "All Contacts" (e.g. "All Friends" or
			/// "All connections"). Optional (Default is "All Contacts").
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allContactsName = unchecked((int)(0x010102cc));

			/// <summary>
			/// Whether to allow the application to participate in backup
			/// infrastructure.
			/// </summary>
			/// <remarks>
			/// Whether to allow the application to participate in backup
			/// infrastructure.  If this attribute is set to <code>false</code>, no backup
			/// of the application will ever be performed, even by a full-system backup that
			/// would otherwise cause all application data to be saved via adb.  The
			/// default value of this attribute is <code>true</code>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allowBackup = unchecked((int)(0x01010280));

			/// <summary>
			/// Option to let applications specify that user data can/cannot be
			/// cleared.
			/// </summary>
			/// <remarks>
			/// Option to let applications specify that user data can/cannot be
			/// cleared. This flag is turned on by default.
			/// <em>This attribute is usable only by applications
			/// included in the system image. Third-party apps cannot use it.</em>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allowClearUserData = unchecked((int)(0x01010005));

			/// <summary>
			/// true if the storage can be shared via USB mass storage
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// true if the storage can be shared via USB mass storage
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allowMassStorage = unchecked((int)(0x01010419));

			/// <summary>
			/// Set to true to tell the SyncManager that this SyncAdapter supports
			/// multiple simultaneous syncs for the same account type and authority.
			/// </summary>
			/// <remarks>
			/// Set to true to tell the SyncManager that this SyncAdapter supports
			/// multiple simultaneous syncs for the same account type and authority.
			/// Otherwise the SyncManager will be sure not to issue a start sync request
			/// to this SyncAdapter if the SyncAdapter is already syncing another account.
			/// Defaults to false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allowParallelSyncs = unchecked((int)(0x01010332));

			/// <summary>
			/// Indicates whether the drawer can be opened/closed by a single tap
			/// on the handle.
			/// </summary>
			/// <remarks>
			/// Indicates whether the drawer can be opened/closed by a single tap
			/// on the handle.  (If false, the user must drag or fling, or click
			/// using the trackball, to open/close the drawer.)  Default is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allowSingleTap = unchecked((int)(0x01010259));

			/// <summary>
			/// Specify that an activity can be moved out of a task it is in to
			/// the task it has an affinity for when appropriate.
			/// </summary>
			/// <remarks>
			/// Specify that an activity can be moved out of a task it is in to
			/// the task it has an affinity for when appropriate.  Use with the
			/// application tag (to supply a default for all activities in the
			/// application), or with an activity tag (to supply a specific
			/// setting for that component).
			/// <p>Normally when an application is started, it is associated with
			/// the task of the activity that started it and stays there for its
			/// entire lifetime.  You can use the allowTaskReparenting feature to force an
			/// activity to be re-parented to a different task when the task it is
			/// in goes to the background.  Typically this is used to cause the
			/// activities of an application to move back to the main task associated
			/// with that application.  The activity is re-parented to the task
			/// with the same
			/// <see cref="android.R.attr.taskAffinity">android.R.attr.taskAffinity</see>
			/// as it has.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int allowTaskReparenting = unchecked((int)(0x01010204));

			/// <summary>
			/// alpha property of the view, as a value between 0 (completely transparent) and 1
			/// (completely opaque).
			/// </summary>
			/// <remarks>
			/// alpha property of the view, as a value between 0 (completely transparent) and 1
			/// (completely opaque).
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int alpha = unchecked((int)(0x0101031f));

			/// <summary>The alphabetic shortcut key.</summary>
			/// <remarks>
			/// The alphabetic shortcut key.  This is the shortcut when using a keyboard
			/// with alphabetic keys.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int alphabeticShortcut = unchecked((int)(0x010101e3));

			/// <summary>
			/// Defines whether the ViewGroup should always draw its children using their
			/// drawing cache or not.
			/// </summary>
			/// <remarks>
			/// Defines whether the ViewGroup should always draw its children using their
			/// drawing cache or not. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int alwaysDrawnWithCache = unchecked((int)(0x010100ef));

			/// <summary>
			/// Specify whether an acitivty's task state should always be maintained
			/// by the system, or if it is allowed to reset the task to its initial
			/// state in certain situations.
			/// </summary>
			/// <remarks>
			/// Specify whether an acitivty's task state should always be maintained
			/// by the system, or if it is allowed to reset the task to its initial
			/// state in certain situations.
			/// <p>Normally the system will reset a task (remove all activities from
			/// the stack and reset the root activity) in certain situations when
			/// the user re-selects that task from the home screen.  Typically this
			/// will be done if the user hasn't visited that task for a certain
			/// amount of time, such as 30 minutes.
			/// <p>By setting this attribute, the user will always return to your
			/// task in its last state, regardless of how they get there.  This is
			/// useful, for example, in an application like the web browser where there
			/// is a lot of state (such as multiple open tabs) that the application
			/// would not like to lose.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int alwaysRetainTaskState = unchecked((int)(0x01010203));

			/// <summary>Angle of the gradient.</summary>
			/// <remarks>
			/// Angle of the gradient.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int angle = unchecked((int)(0x010101a0));

			/// <summary>
			/// Defines whether to animate the current View when the ViewAnimation
			/// is first displayed.
			/// </summary>
			/// <remarks>
			/// Defines whether to animate the current View when the ViewAnimation
			/// is first displayed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int animateFirstView = unchecked((int)(0x010102d5));

			/// <summary>
			/// Defines whether changes in layout (caused by adding and removing items) should
			/// cause a LayoutTransition to run.
			/// </summary>
			/// <remarks>
			/// Defines whether changes in layout (caused by adding and removing items) should
			/// cause a LayoutTransition to run. When this flag is set to true, a default
			/// LayoutTransition object will be set on the ViewGroup container and default
			/// animations will run when these layout changes occur.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int animateLayoutChanges = unchecked((int)(0x010102f2));

			/// <summary>
			/// Indicates whether the drawer should be opened/closed with an animation
			/// when the user clicks the handle.
			/// </summary>
			/// <remarks>
			/// Indicates whether the drawer should be opened/closed with an animation
			/// when the user clicks the handle. Default is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int animateOnClick = unchecked((int)(0x0101025c));

			/// <summary>Animation to use on each child.</summary>
			/// <remarks>
			/// Animation to use on each child.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int animation = unchecked((int)(0x010101cd));

			/// <summary>
			/// Defines whether layout animations should create a drawing cache for their
			/// children.
			/// </summary>
			/// <remarks>
			/// Defines whether layout animations should create a drawing cache for their
			/// children. Enabling the animation cache consumes more memory and requires
			/// a longer initialization but provides better performance. The animation
			/// cache is enabled by default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int animationCache = unchecked((int)(0x010100ed));

			/// <summary>
			/// Sets how long a transition animation should run (in milliseconds)
			/// when layout has changed.
			/// </summary>
			/// <remarks>
			/// Sets how long a transition animation should run (in milliseconds)
			/// when layout has changed.  Only relevant if animation is turned on.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int animationDuration = unchecked((int)(0x01010112));

			/// <summary>The order in which the animations will be started.</summary>
			/// <remarks>
			/// The order in which the animations will be started.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> Animations are started in the natural order. </td></tr>
			/// <tr><td><code>reverse</code></td><td>1</td><td> Animations are started in the reverse order. </td></tr>
			/// <tr><td><code>random</code></td><td>2</td><td> Animations are started randomly. </td></tr>
			/// </table>
			/// </remarks>
			public const int animationOrder = unchecked((int)(0x010101ce));

			/// <summary>
			/// Timeout between frames of animation in milliseconds
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// </summary>
			/// <remarks>
			/// Timeout between frames of animation in milliseconds
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int animationResolution = unchecked((int)(0x0101031a));

			/// <summary>Enables or disables antialiasing.</summary>
			/// <remarks>
			/// Enables or disables antialiasing.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int antialias = unchecked((int)(0x0101011a));

			/// <summary>
			/// Indicates whether the application can accommodate any screen
			/// density.
			/// </summary>
			/// <remarks>
			/// Indicates whether the application can accommodate any screen
			/// density.  Older applications are assumed to not be able to,
			/// new ones able to.  You can explicitly supply your abilities
			/// here.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int anyDensity = unchecked((int)(0x0101026c));

			/// <summary>Value is a string that specifies the Maps API Key to use.</summary>
			/// <remarks>
			/// Value is a string that specifies the Maps API Key to use.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int apiKey = unchecked((int)(0x01010211));

			/// <summary>Aspect to use when drawing LockPatternView.</summary>
			/// <remarks>
			/// Aspect to use when drawing LockPatternView. Choices are "square"(default), "lock_width"
			/// or "lock_height"
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int aspect = unchecked((int)(0x0101040b));

			/// <summary>Name of the author of this component, e.g.</summary>
			/// <remarks>
			/// Name of the author of this component, e.g. Google.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int author = unchecked((int)(0x010102b4));

			/// <summary>
			/// Specify the authorities under which this content provider can be
			/// found.
			/// </summary>
			/// <remarks>
			/// Specify the authorities under which this content provider can be
			/// found.  Multiple authorities may be supplied by separating them
			/// with a semicolon.  Authority names should use a Java-style naming
			/// convention (such as <code>com.google.provider.MyProvider</code>)
			/// in order to avoid conflicts.  Typically this name is the same
			/// as the class implementation describing the provider's data structure.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int authorities = unchecked((int)(0x01010018));

			/// <summary>The view id of the AppWidget subview which should be auto-advanced.</summary>
			/// <remarks>
			/// The view id of the AppWidget subview which should be auto-advanced.
			/// by the widget's host.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int autoAdvanceViewId = unchecked((int)(0x0101030f));

			/// <summary>Default AutoCompleteTextView style.</summary>
			/// <remarks>
			/// Default AutoCompleteTextView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int autoCompleteTextViewStyle = unchecked((int)(0x0101006b));

			/// <summary>
			/// Controls whether links such as urls and email addresses are
			/// automatically found and converted to clickable links.
			/// </summary>
			/// <remarks>
			/// Controls whether links such as urls and email addresses are
			/// automatically found and converted to clickable links.  The default
			/// value is "none", disabling this feature.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00</td><td> Match no patterns (default). </td></tr>
			/// <tr><td><code>web</code></td><td>0x01</td><td> Match Web URLs. </td></tr>
			/// <tr><td><code>email</code></td><td>0x02</td><td> Match email addresses. </td></tr>
			/// <tr><td><code>phone</code></td><td>0x04</td><td> Match phone numbers. </td></tr>
			/// <tr><td><code>map</code></td><td>0x08</td><td> Match map addresses. </td></tr>
			/// <tr><td><code>all</code></td><td>0x0f</td><td> Match all patterns (equivalent to web|email|phone|map). </td></tr>
			/// </table>
			/// </remarks>
			public const int autoLink = unchecked((int)(0x010100b0));

			/// <summary>
			/// When true, automatically start animating
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// When true, automatically start animating
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int autoStart = unchecked((int)(0x010102b5));

			/// <summary>
			/// If set, specifies that this TextView has a textual input method
			/// and automatically corrects some common spelling errors.
			/// </summary>
			/// <remarks>
			/// If set, specifies that this TextView has a textual input method
			/// and automatically corrects some common spelling errors.
			/// The default is "false".
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int autoText = unchecked((int)(0x0101016a));

			/// <summary>
			/// If provided and <code>true</code>, URLs entered in the search dialog while searching
			/// within this activity would be detected and treated as URLs (show a 'go' button in the
			/// keyboard and invoke the browser directly when user launches the URL instead of passing
			/// the URL to the activity).
			/// </summary>
			/// <remarks>
			/// If provided and <code>true</code>, URLs entered in the search dialog while searching
			/// within this activity would be detected and treated as URLs (show a 'go' button in the
			/// keyboard and invoke the browser directly when user launches the URL instead of passing
			/// the URL to the activity). If set to <code>false</code> any URLs entered are treated as
			/// normal query text.
			/// The default value is <code>false</code>. <i>Optional attribute.</i>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int autoUrlDetect = unchecked((int)(0x0101028c));

			/// <summary>A drawable to use as the background.</summary>
			/// <remarks>
			/// A drawable to use as the background.  This can be either a reference
			/// to a full drawable resource (such as a PNG image, 9-patch,
			/// XML state list description, etc), or a solid color such as "#ff000000"
			/// (black).
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int background = unchecked((int)(0x010100d4));

			/// <summary>Default background dim amount when a menu, dialog, or something similar pops up.
			/// 	</summary>
			/// <remarks>
			/// Default background dim amount when a menu, dialog, or something similar pops up.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int backgroundDimAmount = unchecked((int)(0x01010032));

			/// <summary>Control whether dimming behind the window is enabled.</summary>
			/// <remarks>
			/// Control whether dimming behind the window is enabled.  The default
			/// theme does not set this value, meaning it is based on whether the
			/// window is floating.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int backgroundDimEnabled = unchecked((int)(0x0101021f));

			/// <summary>Specifies a background drawable for the bottom component of a split action bar.
			/// 	</summary>
			/// <remarks>
			/// Specifies a background drawable for the bottom component of a split action bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int backgroundSplit = unchecked((int)(0x0101038b));

			/// <summary>Specifies a background drawable for a second stacked row of the action bar.
			/// 	</summary>
			/// <remarks>
			/// Specifies a background drawable for a second stacked row of the action bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int backgroundStacked = unchecked((int)(0x0101038a));

			/// <summary>
			/// The name of the class subclassing <code>BackupAgent</code> to manage
			/// backup and restore of the application's data on external storage.
			/// </summary>
			/// <remarks>
			/// The name of the class subclassing <code>BackupAgent</code> to manage
			/// backup and restore of the application's data on external storage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int backupAgent = unchecked((int)(0x0101027f));

			/// <summary>The offset of the baseline within this view.</summary>
			/// <remarks>
			/// The offset of the baseline within this view. See {see android.view.View#getBaseline}
			/// for details
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int baseline = unchecked((int)(0x0101031c));

			/// <summary>
			/// If true, the image view will be baseline aligned with based on its
			/// bottom edge.
			/// </summary>
			/// <remarks>
			/// If true, the image view will be baseline aligned with based on its
			/// bottom edge.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int baselineAlignBottom = unchecked((int)(0x01010122));

			/// <summary>
			/// When set to false, prevents the layout from aligning its children's
			/// baselines.
			/// </summary>
			/// <remarks>
			/// When set to false, prevents the layout from aligning its children's
			/// baselines. This attribute is particularly useful when the children
			/// use different values for gravity. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int baselineAligned = unchecked((int)(0x01010126));

			/// <summary>
			/// When a linear layout is part of another layout that is baseline
			/// aligned, it can specify which of its children to baseline align to
			/// (that is, which child TextView).
			/// </summary>
			/// <remarks>
			/// When a linear layout is part of another layout that is baseline
			/// aligned, it can specify which of its children to baseline align to
			/// (that is, which child TextView).
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int baselineAlignedChildIndex = unchecked((int)(0x01010127));

			/// <summary>Drawable to use as the icon bitmap.</summary>
			/// <remarks>
			/// Drawable to use as the icon bitmap.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int bitmap = unchecked((int)(0x01010410));

			/// <summary>Padding to use at the bottom of the prefs content.</summary>
			/// <remarks>
			/// Padding to use at the bottom of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int borderBottom = unchecked((int)(0x010103e6));

			/// <summary>Padding to use at the left of the prefs content.</summary>
			/// <remarks>
			/// Padding to use at the left of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int borderLeft = unchecked((int)(0x010103e7));

			/// <summary>Padding to use at the right of the prefs content.</summary>
			/// <remarks>
			/// Padding to use at the right of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int borderRight = unchecked((int)(0x010103e8));

			/// <summary>Padding to use at the top of the prefs content.</summary>
			/// <remarks>
			/// Padding to use at the top of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int borderTop = unchecked((int)(0x010103e5));

			/// <summary>Style for buttons without an explicit border, often used in groups.</summary>
			/// <remarks>
			/// Style for buttons without an explicit border, often used in groups.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int borderlessButtonStyle = unchecked((int)(0x0101032b));

			/// <summary>Amount of bottom padding inside the gradient shape.</summary>
			/// <remarks>
			/// Amount of bottom padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int bottom = unchecked((int)(0x010101b0));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int bottomBright = unchecked((int)(0x010100cd));

			/// <summary>Drawable to use for chevron animation on the bottom.</summary>
			/// <remarks>
			/// Drawable to use for chevron animation on the bottom. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int bottomChevronDrawable = unchecked((int)(0x01010402));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int bottomDark = unchecked((int)(0x010100c9));

			/// <summary>Radius of the bottom left corner.</summary>
			/// <remarks>
			/// Radius of the bottom left corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int bottomLeftRadius = unchecked((int)(0x010101ab));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int bottomMedium = unchecked((int)(0x010100ce));

			/// <summary>Extra offset for the handle at the bottom of the SlidingDrawer.</summary>
			/// <remarks>
			/// Extra offset for the handle at the bottom of the SlidingDrawer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int bottomOffset = unchecked((int)(0x01010257));

			/// <summary>Radius of the bottom right corner.</summary>
			/// <remarks>
			/// Radius of the bottom right corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int bottomRightRadius = unchecked((int)(0x010101ac));

			/// <summary>The short title for the bread crumb of this item.</summary>
			/// <remarks>
			/// The short title for the bread crumb of this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int breadCrumbShortTitle = unchecked((int)(0x01010304));

			/// <summary>The title for the bread crumb of this item.</summary>
			/// <remarks>
			/// The title for the bread crumb of this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int breadCrumbTitle = unchecked((int)(0x01010303));

			/// <summary>Determines the minimum type that getText() will return.</summary>
			/// <remarks>
			/// Determines the minimum type that getText() will return.
			/// The default is "normal".
			/// Note that EditText and LogTextBox always return Editable,
			/// even if you specify something less powerful here.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> Can return any CharSequence, possibly a
			/// Spanned one if the source text was Spanned. </td></tr>
			/// <tr><td><code>spannable</code></td><td>1</td><td> Can only return Spannable. </td></tr>
			/// <tr><td><code>editable</code></td><td>2</td><td> Can only return Spannable and Editable. </td></tr>
			/// </table>
			/// </remarks>
			public const int bufferType = unchecked((int)(0x0101014e));

			/// <summary>Drawable used for the button graphic (e.g.</summary>
			/// <remarks>
			/// Drawable used for the button graphic (e.g. checkbox, radio button, etc).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int button = unchecked((int)(0x01010107));

			/// <summary>
			/// Style for buttons within button bars
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Style for buttons within button bars
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int buttonBarButtonStyle = unchecked((int)(0x0101032f));

			/// <summary>
			/// Style for button bars
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Style for button bars
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int buttonBarStyle = unchecked((int)(0x0101032e));

			/// <summary>Normal Button style.</summary>
			/// <remarks>
			/// Normal Button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int buttonStyle = unchecked((int)(0x01010048));

			/// <summary>Button style to inset into an EditText.</summary>
			/// <remarks>
			/// Button style to inset into an EditText.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int buttonStyleInset = unchecked((int)(0x0101004a));

			/// <summary>Small Button style.</summary>
			/// <remarks>
			/// Small Button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int buttonStyleSmall = unchecked((int)(0x01010049));

			/// <summary>ToggleButton style.</summary>
			/// <remarks>
			/// ToggleButton style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int buttonStyleToggle = unchecked((int)(0x0101004b));

			/// <summary>
			/// Indicates that this list will always be drawn on top of solid, single-color
			/// opaque background.
			/// </summary>
			/// <remarks>
			/// Indicates that this list will always be drawn on top of solid, single-color
			/// opaque background. This allows the list to optimize drawing.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int cacheColorHint = unchecked((int)(0x01010101));

			/// <summary>Whether the calendar view is shown.</summary>
			/// <remarks>
			/// Whether the calendar view is shown.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int calendarViewShown = unchecked((int)(0x0101034c));

			/// <summary>The CalendarView style.</summary>
			/// <remarks>
			/// The CalendarView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int calendarViewStyle = unchecked((int)(0x0101035d));

			/// <summary>
			/// Flag whether the accessibility service wants to be able to retrieve the
			/// active window content.
			/// </summary>
			/// <remarks>
			/// Flag whether the accessibility service wants to be able to retrieve the
			/// active window content. This setting cannot be changed at runtime.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int canRetrieveWindowContent = unchecked((int)(0x01010385));

			/// <summary>
			/// A styled string, specifying the style to be used for showing
			/// inline candidate text when composing with an input method.
			/// </summary>
			/// <remarks>
			/// A styled string, specifying the style to be used for showing
			/// inline candidate text when composing with an input method.  The
			/// text itself will be ignored, but the style spans will be applied
			/// to the candidate text as it is edited.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// </remarks>
			public const int candidatesTextStyleSpans = unchecked((int)(0x01010230));

			/// <summary>
			/// Declare that this application can't participate in the normal
			/// state save/restore mechanism.
			/// </summary>
			/// <remarks>
			/// Declare that this application can't participate in the normal
			/// state save/restore mechanism.  Since it is not able to save and
			/// restore its state on demand,
			/// it can not participate in the normal activity lifecycle.  It will
			/// not be killed while in the background; the user must explicitly
			/// quit it.  Only one such app can be running at a time; if the user
			/// tries to launch a second such app, they will be prompted
			/// to quit the first before doing so.  While the
			/// application is running, the user will be informed of this.
			/// </remarks>
			/// <hide>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </hide>
			public const int cantSaveState = unchecked((int)(0x0101041c));

			/// <summary>
			/// If set, specifies that this TextView has a textual input method
			/// and should automatically capitalize what the user types.
			/// </summary>
			/// <remarks>
			/// If set, specifies that this TextView has a textual input method
			/// and should automatically capitalize what the user types.
			/// The default is "none".
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Don't automatically capitalize anything. </td></tr>
			/// <tr><td><code>sentences</code></td><td>1</td><td> Capitalize the first word of each sentence. </td></tr>
			/// <tr><td><code>words</code></td><td>2</td><td> Capitalize the first letter of every word. </td></tr>
			/// <tr><td><code>characters</code></td><td>3</td><td> Capitalize every character. </td></tr>
			/// </table>
			/// </remarks>
			[System.Obsolete]
			public const int capitalize = unchecked((int)(0x01010169));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int centerBright = unchecked((int)(0x010100cc));

			/// <summary>Optional center color.</summary>
			/// <remarks>
			/// Optional center color. For linear gradients, use centerX or centerY
			/// to place the center color.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int centerColor = unchecked((int)(0x0101020b));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int centerDark = unchecked((int)(0x010100c8));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int centerMedium = unchecked((int)(0x010100cf));

			/// <summary>X coordinate of the origin of the gradient within the shape.</summary>
			/// <remarks>
			/// X coordinate of the origin of the gradient within the shape.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int centerX = unchecked((int)(0x010101a2));

			/// <summary>Y coordinate of the origin of the gradient within the shape.</summary>
			/// <remarks>
			/// Y coordinate of the origin of the gradient within the shape.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int centerY = unchecked((int)(0x010101a3));

			/// <summary>Default style for CheckBoxPreference.</summary>
			/// <remarks>
			/// Default style for CheckBoxPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int checkBoxPreferenceStyle = unchecked((int)(0x0101008f));

			/// <summary>Drawable used for the check mark graphic.</summary>
			/// <remarks>
			/// Drawable used for the check mark graphic.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int checkMark = unchecked((int)(0x01010108));

			/// <summary>Whether the item is capable of displaying a check mark.</summary>
			/// <remarks>
			/// Whether the item is capable of displaying a check mark.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int checkable = unchecked((int)(0x010101e5));

			/// <summary>Whether the items are capable of displaying a check mark.</summary>
			/// <remarks>
			/// Whether the items are capable of displaying a check mark.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> The items are not checkable. </td></tr>
			/// <tr><td><code>all</code></td><td>1</td><td> The items are all checkable. </td></tr>
			/// <tr><td><code>single</code></td><td>2</td><td> The items are checkable and there will only be a single checked item in
			/// this group. </td></tr>
			/// </table>
			/// </remarks>
			public const int checkableBehavior = unchecked((int)(0x010101e0));

			/// <summary>Default Checkbox style.</summary>
			/// <remarks>
			/// Default Checkbox style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int checkboxStyle = unchecked((int)(0x0101006c));

			/// <summary>Indicates the initial checked state of this button.</summary>
			/// <remarks>
			/// Indicates the initial checked state of this button.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int @checked = unchecked((int)(0x01010106));

			/// <summary>
			/// The id of the child radio button that should be checked by default
			/// within this radio group.
			/// </summary>
			/// <remarks>
			/// The id of the child radio button that should be checked by default
			/// within this radio group.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int checkedButton = unchecked((int)(0x01010148));

			/// <summary>Drawable or color that is used as a divider for children.</summary>
			/// <remarks>
			/// Drawable or color that is used as a divider for children. (It will drawn
			/// below and above child items.) The height of this will be the same as
			/// the height of the normal list item divider.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int childDivider = unchecked((int)(0x01010111));

			/// <summary>Indicator shown beside the child View.</summary>
			/// <remarks>
			/// Indicator shown beside the child View. This can be a stateful Drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int childIndicator = unchecked((int)(0x0101010c));

			/// <summary>The left bound for a child's indicator.</summary>
			/// <remarks>
			/// The left bound for a child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int childIndicatorLeft = unchecked((int)(0x0101010f));

			/// <summary>The right bound for a child's indicator.</summary>
			/// <remarks>
			/// The right bound for a child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int childIndicatorRight = unchecked((int)(0x01010110));

			/// <summary>Defines the choice behavior for the view.</summary>
			/// <remarks>
			/// Defines the choice behavior for the view. By default, lists do not have
			/// any choice behavior. By setting the choiceMode to singleChoice, the list
			/// allows up to one item to be in a chosen state. By setting the choiceMode to
			/// multipleChoice, the list allows any number of items to be chosen.
			/// Finally, by setting the choiceMode to multipleChoiceModal the list allows
			/// any number of items to be chosen in a special selection mode.
			/// The application will supply a
			/// <see cref="android.widget.AbsListView.MultiChoiceModeListener">android.widget.AbsListView.MultiChoiceModeListener
			/// 	</see>
			/// using
			/// <see cref="android.widget.AbsListView.setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)
			/// 	">android.widget.AbsListView.setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)
			/// 	</see>
			/// to control the
			/// selection mode. This uses the
			/// <see cref="android.view.ActionMode">android.view.ActionMode</see>
			/// API.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Normal list that does not indicate choices. </td></tr>
			/// <tr><td><code>singleChoice</code></td><td>1</td><td> The list allows up to one choice. </td></tr>
			/// <tr><td><code>multipleChoice</code></td><td>2</td><td> The list allows multiple choices. </td></tr>
			/// <tr><td><code>multipleChoiceModal</code></td><td>3</td><td> The list allows multiple choices in a custom selection mode. </td></tr>
			/// </table>
			/// </remarks>
			public const int choiceMode = unchecked((int)(0x0101012b));

			/// <summary>
			/// Specify whether an activity's task should be cleared when it
			/// is re-launched from the home screen.
			/// </summary>
			/// <remarks>
			/// Specify whether an activity's task should be cleared when it
			/// is re-launched from the home screen.  As a result, every time the
			/// user starts the task, they will be brought to its root activity,
			/// regardless of whether they used BACK or HOME to last leave it.
			/// This flag only applies to activities that
			/// are used to start the root of a new task.
			/// <p>An example of the use of this flag would be for the case where
			/// a user launches activity A from home, and from there goes to
			/// activity B.  They now press home, and then return to activity A.
			/// Normally they would see activity B, since that is what they were
			/// last doing in A's task.  However, if A has set this flag to true,
			/// then upon going to the background all of the tasks on top of it (B
			/// in this case) are removed, so when the user next returns to A they
			/// will restart at its original activity.
			/// <p>When this option is used in conjunction with
			/// <see cref="android.R.attr.allowTaskReparenting">android.R.attr.allowTaskReparenting
			/// 	</see>
			/// , the allowTaskReparenting trumps the
			/// clear.  That is, all activities above the root activity of the
			/// task will be removed: those that have an affinity will be moved
			/// to the task they are associated with, otherwise they will simply
			/// be dropped as described here.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int clearTaskOnLaunch = unchecked((int)(0x01010015));

			/// <summary>Color of the outline of click feedback.</summary>
			/// <remarks>
			/// Color of the outline of click feedback.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int clickColor = unchecked((int)(0x010103ed));

			/// <summary>Defines whether this view reacts to click events.</summary>
			/// <remarks>
			/// Defines whether this view reacts to click events.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int clickable = unchecked((int)(0x010100e5));

			/// <summary>Defines whether a child is limited to draw inside of its bounds or not.</summary>
			/// <remarks>
			/// Defines whether a child is limited to draw inside of its bounds or not.
			/// This is useful with animations that scale the size of the children to more
			/// than 100% for instance. In such a case, this property should be set to false
			/// to allow the children to draw outside of their bounds. The default value of
			/// this property is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int clipChildren = unchecked((int)(0x010100ea));

			/// <summary>The orientation for the clip.</summary>
			/// <remarks>
			/// The orientation for the clip.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>1</td><td> Clip the drawable horizontally. </td></tr>
			/// <tr><td><code>vertical</code></td><td>2</td><td> Clip the drawable vertically. </td></tr>
			/// </table>
			/// </remarks>
			public const int clipOrientation = unchecked((int)(0x0101020a));

			/// <summary>
			/// Defines whether the ViewGroup will clip its drawing surface so as to exclude
			/// the padding area.
			/// </summary>
			/// <remarks>
			/// Defines whether the ViewGroup will clip its drawing surface so as to exclude
			/// the padding area. This property is set to true by default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int clipToPadding = unchecked((int)(0x010100eb));

			/// <summary>The unicode value or comma-separated values that this key outputs.</summary>
			/// <remarks>
			/// The unicode value or comma-separated values that this key outputs.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int codes = unchecked((int)(0x01010242));

			/// <summary>The zero-based index of the columns to collapse.</summary>
			/// <remarks>
			/// The zero-based index of the columns to collapse. The column indices
			/// must be separated by a comma: 1, 2, 5. Illegal and duplicate
			/// indices are ignored.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int collapseColumns = unchecked((int)(0x0101014b));

			/// <summary>Solid color for the gradient shape.</summary>
			/// <remarks>
			/// Solid color for the gradient shape.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int color = unchecked((int)(0x010101a5));

			/// <summary>
			/// Default highlight color for items that are
			/// activated.
			/// </summary>
			/// <remarks>
			/// Default highlight color for items that are
			/// activated. (Activated meaning persistent selection.)
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorActivatedHighlight = unchecked((int)(0x01010390));

			/// <summary>Color that matches (as closely as possible) the window background.</summary>
			/// <remarks>
			/// Color that matches (as closely as possible) the window background.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorBackground = unchecked((int)(0x01010031));

			/// <summary>
			/// This is a hint for a solid color that can be used for caching
			/// rendered views.
			/// </summary>
			/// <remarks>
			/// This is a hint for a solid color that can be used for caching
			/// rendered views.  This should be the color of the background when
			/// there is a solid background color; it should be null when the
			/// background is a texture or translucent.  When a device is able
			/// to use accelerated drawing (thus setting state_accelerated), the
			/// cache hint is ignored and always assumed to be transparent.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorBackgroundCacheHint = unchecked((int)(0x010102ab));

			/// <summary>
			/// Default highlight color for items that are
			/// focused.
			/// </summary>
			/// <remarks>
			/// Default highlight color for items that are
			/// focused. (Focused meaning cursor-based selection.)
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorFocusedHighlight = unchecked((int)(0x0101038f));

			/// <summary>Default color of foreground imagery.</summary>
			/// <remarks>
			/// Default color of foreground imagery.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorForeground = unchecked((int)(0x01010030));

			/// <summary>Default color of foreground imagery on an inverted background.</summary>
			/// <remarks>
			/// Default color of foreground imagery on an inverted background.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorForegroundInverse = unchecked((int)(0x01010206));

			/// <summary>Default highlight color for items that are long-pressed.</summary>
			/// <remarks>
			/// Default highlight color for items that are long-pressed.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorLongPressedHighlight = unchecked((int)(0x0101038e));

			/// <summary>
			/// Default highlight color for items in multiple selection
			/// mode.
			/// </summary>
			/// <remarks>
			/// Default highlight color for items in multiple selection
			/// mode.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorMultiSelectHighlight = unchecked((int)(0x01010391));

			/// <summary>Default highlight color for items that are pressed.</summary>
			/// <remarks>
			/// Default highlight color for items that are pressed.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int colorPressedHighlight = unchecked((int)(0x0101038d));

			/// <summary>The maxmimum number of columns to create when automatically positioning children.
			/// 	</summary>
			/// <remarks>
			/// The maxmimum number of columns to create when automatically positioning children.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int columnCount = unchecked((int)(0x01010377));

			/// <summary>
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each column.
			/// </summary>
			/// <remarks>
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each column.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int columnDelay = unchecked((int)(0x010101cf));

			/// <summary>
			/// When set to true, forces column boundaries to appear in the same order
			/// as column indices.
			/// </summary>
			/// <remarks>
			/// When set to true, forces column boundaries to appear in the same order
			/// as column indices.
			/// The default is true.
			/// See
			/// <see cref="android.widget.GridLayout.setColumnOrderPreserved(bool)">android.widget.GridLayout.setColumnOrderPreserved(bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int columnOrderPreserved = unchecked((int)(0x01010378));

			/// <summary>Specifies the fixed width for each column.</summary>
			/// <remarks>
			/// Specifies the fixed width for each column.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int columnWidth = unchecked((int)(0x01010117));

			/// <summary>
			/// Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the largest screens an application is
			/// compatible with.  This attribute provides the maximum
			/// "smallest screen width" (as per the -swNNNdp resource configuration)
			/// that the application is designed for.  If this value is smaller than
			/// the "smallest screen width" of the device it is running on, the user
			/// is offered to run it in a compatibility mode that emulates a
			/// smaller screen and zooms it to fit the screen. Currently the compatibility mode only
			/// emulates phone screens with a 320dp width, so compatibility mode is not applied if the
			/// value for compatibleWidthLimitDp is larger than 320.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int compatibleWidthLimitDp = unchecked((int)(0x01010365));

			/// <summary>Defines the hint displayed in the drop down menu.</summary>
			/// <remarks>
			/// Defines the hint displayed in the drop down menu.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int completionHint = unchecked((int)(0x01010172));

			/// <summary>Defines the hint view displayed in the drop down menu.</summary>
			/// <remarks>
			/// Defines the hint view displayed in the drop down menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int completionHintView = unchecked((int)(0x01010173));

			/// <summary>
			/// Defines the number of characters that the user must type before
			/// completion suggestions are displayed in a drop down menu.
			/// </summary>
			/// <remarks>
			/// Defines the number of characters that the user must type before
			/// completion suggestions are displayed in a drop down menu.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int completionThreshold = unchecked((int)(0x01010174));

			/// <summary>
			/// Specify one or more configuration changes that the activity will
			/// handle itself.
			/// </summary>
			/// <remarks>
			/// Specify one or more configuration changes that the activity will
			/// handle itself.  If not specified, the activity will be restarted
			/// if any of these configuration changes happen in the system.  Otherwise,
			/// the activity will remain running and its
			/// <see cref="android.app.Activity.onConfigurationChanged(android.content.res.Configuration)
			/// 	">Activity.onConfigurationChanged</see>
			/// method called with the new configuration.
			/// <p>Note that all of these configuration changes can impact the
			/// resource values seen by the application, so you will generally need
			/// to re-retrieve all resources (including view layouts, drawables, etc)
			/// to correctly handle any configuration change.
			/// <p>These values must be kept in sync with those in
			/// <see cref="android.content.pm.ActivityInfo">android.content.pm.ActivityInfo</see>
			/// and
			/// include/utils/ResourceTypes.h.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>mcc</code></td><td>0x0001</td><td> The IMSI MCC has changed, that is a SIM has been detected and
			/// updated the Mobile Country Code. </td></tr>
			/// <tr><td><code>mnc</code></td><td>0x0002</td><td> The IMSI MNC has changed, that is a SIM has been detected and
			/// updated the Mobile Network Code. </td></tr>
			/// <tr><td><code>locale</code></td><td>0x0004</td><td> The locale has changed, that is the user has selected a new
			/// language that text should be displayed in. </td></tr>
			/// <tr><td><code>touchscreen</code></td><td>0x0008</td><td> The touchscreen has changed.  Should never normally happen. </td></tr>
			/// <tr><td><code>keyboard</code></td><td>0x0010</td><td> The keyboard type has changed, for example the user has plugged
			/// in an external keyboard. </td></tr>
			/// <tr><td><code>keyboardHidden</code></td><td>0x0020</td><td> The keyboard or navigation accessibility has changed, for example
			/// the user has slid the keyboard out to expose it.  Note that
			/// despite its name, this applied to any accessibility: keyboard
			/// or navigation. </td></tr>
			/// <tr><td><code>navigation</code></td><td>0x0040</td><td> The navigation type has changed.  Should never normally happen. </td></tr>
			/// <tr><td><code>orientation</code></td><td>0x0080</td><td> The screen orientation has changed, that is the user has
			/// rotated the device. </td></tr>
			/// <tr><td><code>screenLayout</code></td><td>0x0100</td><td> The screen layout has changed.  This might be caused by a
			/// different display being activated. </td></tr>
			/// <tr><td><code>uiMode</code></td><td>0x0200</td><td> The global user interface mode has changed.  For example,
			/// going in or out of car mode, night mode changing, etc. </td></tr>
			/// <tr><td><code>screenSize</code></td><td>0x0400</td><td> The current available screen size has changed.  If applications don't
			/// target at least
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// then the activity will always handle this itself (the change
			/// will not result in a restart).  This represents a change in the
			/// currently available size, so will change when the user switches
			/// between landscape and portrait. </td></tr>
			/// <tr><td><code>smallestScreenSize</code></td><td>0x0800</td><td> The physical screen size has changed.  If applications don't
			/// target at least
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// then the activity will always handle this itself (the change
			/// will not result in a restart).  This represents a change in size
			/// regardless of orientation, so will only change when the actual
			/// physical screen size has changed such as switching to an external
			/// display. </td></tr>
			/// <tr><td><code>fontScale</code></td><td>0x40000000</td><td> The font scaling factor has changed, that is the user has
			/// selected a new global font size. </td></tr>
			/// </table>
			/// </remarks>
			public const int configChanges = unchecked((int)(0x0101001f));

			/// <summary>A class name in the AppWidget's package to be launched to configure.</summary>
			/// <remarks>
			/// A class name in the AppWidget's package to be launched to configure.
			/// If not supplied, then no activity will be launched.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int configure = unchecked((int)(0x0101025d));

			/// <summary>
			/// If true, the drawable's reported internal size will remain
			/// constant as the state changes; the size is the maximum of all
			/// of the states.
			/// </summary>
			/// <remarks>
			/// If true, the drawable's reported internal size will remain
			/// constant as the state changes; the size is the maximum of all
			/// of the states.  If false, the size will vary based on the
			/// current state.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int constantSize = unchecked((int)(0x01010196));

			/// <summary>Identifier for the child that represents the drawer's content.</summary>
			/// <remarks>
			/// Identifier for the child that represents the drawer's content.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int content = unchecked((int)(0x0101025b));

			/// <summary>the authority of a content provider.</summary>
			/// <remarks>
			/// the authority of a content provider.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int contentAuthority = unchecked((int)(0x01010290));

			/// <summary>Defines text that briefly describes content of the view.</summary>
			/// <remarks>
			/// Defines text that briefly describes content of the view. This property is used
			/// primarily for accessibility. Since some views do not have textual
			/// representation this attribute can be used for providing such.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int contentDescription = unchecked((int)(0x01010273));

			/// <summary>If true, the image will be cropped to fit within its padding.</summary>
			/// <remarks>
			/// If true, the image will be cropped to fit within its padding.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int cropToPadding = unchecked((int)(0x01010123));

			/// <summary>Makes the cursor visible (the default) or invisible.</summary>
			/// <remarks>
			/// Makes the cursor visible (the default) or invisible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int cursorVisible = unchecked((int)(0x01010152));

			/// <summary>Specifies a layout for custom navigation.</summary>
			/// <remarks>
			/// Specifies a layout for custom navigation. Overrides navigationMode.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int customNavigationLayout = unchecked((int)(0x010102d2));

			/// <summary>Account handles its own token storage and permissions.</summary>
			/// <remarks>
			/// Account handles its own token storage and permissions.
			/// Default to false
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int customTokens = unchecked((int)(0x0101033b));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int cycles = unchecked((int)(0x010101d4));

			/// <summary>Gap between dashes in the stroke.</summary>
			/// <remarks>
			/// Gap between dashes in the stroke.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dashGap = unchecked((int)(0x010101a7));

			/// <summary>Length of a dash in the stroke.</summary>
			/// <remarks>
			/// Length of a dash in the stroke.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dashWidth = unchecked((int)(0x010101a6));

			/// <summary>
			/// The data URI to assign to the Intent, as per
			/// <see cref="android.content.Intent.setData(System.Uri)">Intent.setData()</see>
			/// .
			/// <p><em>Note: scheme and host name matching in the Android framework is
			/// case-sensitive, unlike the formal RFC.  As a result,
			/// URIs here should always be normalized to use lower case letters
			/// for these elements (as well as other proper Uri normalization).</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int data = unchecked((int)(0x0101002e));

			/// <summary>The DatePicker style.</summary>
			/// <remarks>
			/// The DatePicker style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int datePickerStyle = unchecked((int)(0x0101035c));

			/// <summary>The text appearance for the calendar dates.</summary>
			/// <remarks>
			/// The text appearance for the calendar dates.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dateTextAppearance = unchecked((int)(0x01010349));

			/// <summary>
			/// Flag indicating whether the application can be debugged, even when
			/// running on a device that is running in user mode.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether the application can be debugged, even when
			/// running on a device that is running in user mode.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int debuggable = unchecked((int)(0x0101000f));

			/// <summary>
			/// The default value for the preference, which will be set either if persistence
			/// is off or persistence is on and the preference is not found in the persistent
			/// storage.
			/// </summary>
			/// <remarks>
			/// The default value for the preference, which will be set either if persistence
			/// is off or persistence is on and the preference is not found in the persistent
			/// storage.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// </remarks>
			public const int defaultValue = unchecked((int)(0x010101ed));

			/// <summary>
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each child.
			/// </summary>
			/// <remarks>
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each child.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int delay = unchecked((int)(0x010101cc));

			/// <summary>The key of another Preference that this Preference will depend on.</summary>
			/// <remarks>
			/// The key of another Preference that this Preference will depend on.  If the other
			/// Preference is not set or is off, this Preference will be disabled.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dependency = unchecked((int)(0x010101ec));

			/// <summary>
			/// Defines the relationship between the ViewGroup and its descendants
			/// when looking for a View to take focus.
			/// </summary>
			/// <remarks>
			/// Defines the relationship between the ViewGroup and its descendants
			/// when looking for a View to take focus.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>beforeDescendants</code></td><td>0</td><td> The ViewGroup will get focus before any of its descendants. </td></tr>
			/// <tr><td><code>afterDescendants</code></td><td>1</td><td> The ViewGroup will get focus only if none of its descendants want it. </td></tr>
			/// <tr><td><code>blocksDescendants</code></td><td>2</td><td> The ViewGroup will block its descendants from receiving focus. </td></tr>
			/// </table>
			/// </remarks>
			public const int descendantFocusability = unchecked((int)(0x010100f1));

			/// <summary>Descriptive text for the associated data.</summary>
			/// <remarks>
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int description = unchecked((int)(0x01010020));

			/// <summary>
			/// Special option for window animations: if this window is on top
			/// of a wallpaper, don't animate the wallpaper with it.
			/// </summary>
			/// <remarks>
			/// Special option for window animations: if this window is on top
			/// of a wallpaper, don't animate the wallpaper with it.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int detachWallpaper = unchecked((int)(0x010102a6));

			/// <summary>Column in data table that contains details for this data.</summary>
			/// <remarks>
			/// Column in data table that contains details for this data.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int detailColumn = unchecked((int)(0x010102a3));

			/// <summary>Flag indicating that detail should be built from SocialProvider.</summary>
			/// <remarks>
			/// Flag indicating that detail should be built from SocialProvider.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int detailSocialSummary = unchecked((int)(0x010102a4));

			/// <summary>
			/// Background that can be used behind parts of a UI that provide
			/// details on data the user is selecting.
			/// </summary>
			/// <remarks>
			/// Background that can be used behind parts of a UI that provide
			/// details on data the user is selecting.  For example, this is
			/// the background element of PreferenceActivity's embedded
			/// preference fragment.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int detailsElementBackground = unchecked((int)(0x0101034e));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dial = unchecked((int)(0x01010102));

			/// <summary>
			/// Window decor layout to use in dialog mode with custom titles
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Window decor layout to use in dialog mode with custom titles
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogCustomTitleDecorLayout = unchecked((int)(0x010103c7));

			/// <summary>The icon for the dialog.</summary>
			/// <remarks>
			/// The icon for the dialog.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogIcon = unchecked((int)(0x010101f4));

			/// <summary>A layout to be used as the content View for the dialog.</summary>
			/// <remarks>
			/// A layout to be used as the content View for the dialog. By default, this shouldn't
			/// be needed. If a custom DialogPreference is required, this should be set. For example,
			/// the EditTextPreference uses a layout with an EditText as this attribute.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogLayout = unchecked((int)(0x010101f7));

			/// <summary>The message in the dialog.</summary>
			/// <remarks>
			/// The message in the dialog. If a dialogLayout is provided and contains
			/// a TextView with ID android:id/message, this message will be placed in there.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dialogMessage = unchecked((int)(0x010101f3));

			/// <summary>Default style for DialogPreference.</summary>
			/// <remarks>
			/// Default style for DialogPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogPreferenceStyle = unchecked((int)(0x01010091));

			/// <summary>Theme to use for dialogs spawned from this theme.</summary>
			/// <remarks>
			/// Theme to use for dialogs spawned from this theme.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogTheme = unchecked((int)(0x01010308));

			/// <summary>The title in the dialog.</summary>
			/// <remarks>
			/// The title in the dialog.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dialogTitle = unchecked((int)(0x010101f2));

			/// <summary>
			/// Window decor layout to use in dialog mode with title only
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Window decor layout to use in dialog mode with title only
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogTitleDecorLayout = unchecked((int)(0x010103c8));

			/// <summary>
			/// Window decor layout to use in dialog mode with icons
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Window decor layout to use in dialog mode with icons
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dialogTitleIconsDecorLayout = unchecked((int)(0x010103c6));

			/// <summary>
			/// If set, specifies that this TextView has a numeric input method
			/// and that these specific characters are the ones that it will
			/// accept.
			/// </summary>
			/// <remarks>
			/// If set, specifies that this TextView has a numeric input method
			/// and that these specific characters are the ones that it will
			/// accept.
			/// If this is set, numeric is implied to be true.
			/// The default is false.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int digits = unchecked((int)(0x01010166));

			/// <summary>Direction of the animation in the grid.</summary>
			/// <remarks>
			/// Direction of the animation in the grid.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>left_to_right</code></td><td>0x0</td><td> Animates columns from left to right. </td></tr>
			/// <tr><td><code>right_to_left</code></td><td>0x1</td><td> Animates columns from right to left. </td></tr>
			/// <tr><td><code>top_to_bottom</code></td><td>0x0</td><td> Animates rows from top to bottom. </td></tr>
			/// <tr><td><code>bottom_to_top</code></td><td>0x2</td><td> Animates rows from bottom to top. </td></tr>
			/// </table>
			/// </remarks>
			public const int direction = unchecked((int)(0x010101d1));

			/// <summary>Reference to an array resource that be used to announce the directions with targets around the circle.
			/// 	</summary>
			/// <remarks>
			/// Reference to an array resource that be used to announce the directions with targets around the circle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int directionDescriptions = unchecked((int)(0x010103a1));

			/// <summary>Priority of the rows and columns.</summary>
			/// <remarks>
			/// Priority of the rows and columns. When the priority is none,
			/// both rows and columns have the same priority. When the priority is
			/// column, the animations will be applied on the columns first. The same
			/// goes for rows.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Rows and columns are animated at the same time. </td></tr>
			/// <tr><td><code>column</code></td><td>1</td><td> Columns are animated first. </td></tr>
			/// <tr><td><code>row</code></td><td>2</td><td> Rows are animated first. </td></tr>
			/// </table>
			/// </remarks>
			public const int directionPriority = unchecked((int)(0x010101d2));

			/// <summary>The state (true for on, or false for off) that causes dependents to be disabled.
			/// 	</summary>
			/// <remarks>
			/// The state (true for on, or false for off) that causes dependents to be disabled. By default,
			/// dependents will be disabled when this is unchecked, so the value of this preference is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int disableDependentsState = unchecked((int)(0x010101f1));

			/// <summary>Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
			/// 	</summary>
			/// <remarks>
			/// Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int disabledAlpha = unchecked((int)(0x01010033));

			/// <summary>Options affecting how the action bar is displayed.</summary>
			/// <remarks>
			/// Options affecting how the action bar is displayed.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>useLogo</code></td><td>0x1</td><td></td></tr>
			/// <tr><td><code>showHome</code></td><td>0x2</td><td></td></tr>
			/// <tr><td><code>homeAsUp</code></td><td>0x4</td><td></td></tr>
			/// <tr><td><code>showTitle</code></td><td>0x8</td><td></td></tr>
			/// <tr><td><code>showCustom</code></td><td>0x10</td><td></td></tr>
			/// <tr><td><code>disableHome</code></td><td>0x20</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int displayOptions = unchecked((int)(0x010102d0));

			/// <summary>
			/// Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).
			/// </summary>
			/// <remarks>
			/// Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dither = unchecked((int)(0x0101011c));

			/// <summary>Drawable or color to draw between list items.</summary>
			/// <remarks>
			/// Drawable or color to draw between list items.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int divider = unchecked((int)(0x01010129));

			/// <summary>Height of the divider.</summary>
			/// <remarks>
			/// Height of the divider. Will use the intrinsic height of the divider if this
			/// is not specified.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dividerHeight = unchecked((int)(0x0101012a));

			/// <summary>Drawable to use for generic horizontal dividers.</summary>
			/// <remarks>
			/// Drawable to use for generic horizontal dividers.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dividerHorizontal = unchecked((int)(0x0101032c));

			/// <summary>Size of padding on either end of a divider.</summary>
			/// <remarks>
			/// Size of padding on either end of a divider.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dividerPadding = unchecked((int)(0x0101032a));

			/// <summary>Drawable to use for generic vertical dividers.</summary>
			/// <remarks>
			/// Drawable to use for generic vertical dividers.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dividerVertical = unchecked((int)(0x0101030a));

			/// <summary>When set to true, the selector will be drawn over the selected item.</summary>
			/// <remarks>
			/// When set to true, the selector will be drawn over the selected item.
			/// Otherwise the selector is drawn behind the selected item. The default
			/// value is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int drawSelectorOnTop = unchecked((int)(0x010100fc));

			/// <summary>Reference to a drawable resource to use for the frame.</summary>
			/// <remarks>
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int drawable = unchecked((int)(0x01010199));

			/// <hide>
			/// The alpha value (0-255) set on the ImageView's drawable. Equivalent
			/// to calling ImageView.setAlpha(int), not the same as View.setAlpha(float).
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </hide>
			public const int drawableAlpha = unchecked((int)(0x010103e4));

			/// <summary>The drawable to be drawn below the text.</summary>
			/// <remarks>
			/// The drawable to be drawn below the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int drawableBottom = unchecked((int)(0x0101016e));

			/// <summary>The drawable to be drawn to the end of the text.</summary>
			/// <remarks>
			/// The drawable to be drawn to the end of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int drawableEnd = unchecked((int)(0x01010393));

			/// <summary>The drawable to be drawn to the left of the text.</summary>
			/// <remarks>
			/// The drawable to be drawn to the left of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int drawableLeft = unchecked((int)(0x0101016f));

			/// <summary>The padding between the drawables and the text.</summary>
			/// <remarks>
			/// The padding between the drawables and the text.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int drawablePadding = unchecked((int)(0x01010171));

			/// <summary>The drawable to be drawn to the right of the text.</summary>
			/// <remarks>
			/// The drawable to be drawn to the right of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int drawableRight = unchecked((int)(0x01010170));

			/// <summary>The drawable to be drawn to the start of the text.</summary>
			/// <remarks>
			/// The drawable to be drawn to the start of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int drawableStart = unchecked((int)(0x01010392));

			/// <summary>The drawable to be drawn above the text.</summary>
			/// <remarks>
			/// The drawable to be drawn above the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int drawableTop = unchecked((int)(0x0101016d));

			/// <summary>Defines the quality of translucent drawing caches.</summary>
			/// <remarks>
			/// Defines the quality of translucent drawing caches. This property is used
			/// only when the drawing cache is enabled and translucent. The default value is auto.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>auto</code></td><td>0</td><td> Lets the framework decide what quality level should be used
			/// for the drawing cache. </td></tr>
			/// <tr><td><code>low</code></td><td>1</td><td> Low quality. When set to low quality, the drawing cache uses a lower color
			/// depth, thus losing precision in rendering gradients, but uses less memory. </td></tr>
			/// <tr><td><code>high</code></td><td>2</td><td> High quality. When set to high quality, the drawing cache uses a higher
			/// color depth but uses more memory. </td></tr>
			/// </table>
			/// </remarks>
			public const int drawingCacheQuality = unchecked((int)(0x010100e8));

			/// <summary>View to anchor the auto-complete dropdown to.</summary>
			/// <remarks>
			/// View to anchor the auto-complete dropdown to. If not specified, the text view itself
			/// is used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dropDownAnchor = unchecked((int)(0x01010263));

			/// <summary>Specifies the basic height of the dropdown.</summary>
			/// <remarks>
			/// Specifies the basic height of the dropdown. Its value may
			/// be a dimension (such as "12dip") for a constant height,
			/// fill_parent or match_parent to fill the height of the
			/// screen, or wrap_content to match the height of
			/// the content of the drop down.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the height of the content. </td></tr>
			/// </table>
			/// </remarks>
			public const int dropDownHeight = unchecked((int)(0x01010283));

			/// <summary>Default style for drop down hints.</summary>
			/// <remarks>
			/// Default style for drop down hints.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dropDownHintAppearance = unchecked((int)(0x01010088));

			/// <summary>Amount of pixels by which the drop down should be offset horizontally.</summary>
			/// <remarks>
			/// Amount of pixels by which the drop down should be offset horizontally.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dropDownHorizontalOffset = unchecked((int)(0x010102ac));

			/// <summary>Default style for drop down items.</summary>
			/// <remarks>
			/// Default style for drop down items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dropDownItemStyle = unchecked((int)(0x01010086));

			/// <summary>Default ListView style for drop downs.</summary>
			/// <remarks>
			/// Default ListView style for drop downs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dropDownListViewStyle = unchecked((int)(0x0101006d));

			/// <summary>Selector in a drop down list.</summary>
			/// <remarks>
			/// Selector in a drop down list.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int dropDownSelector = unchecked((int)(0x01010175));

			/// <summary>Default dropdown Spinner style.</summary>
			/// <remarks>
			/// Default dropdown Spinner style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int dropDownSpinnerStyle = unchecked((int)(0x010102d6));

			/// <summary>Amount of pixels by which the drop down should be offset vertically.</summary>
			/// <remarks>
			/// Amount of pixels by which the drop down should be offset vertically.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dropDownVerticalOffset = unchecked((int)(0x010102ad));

			/// <summary>Specifies the basic width of the dropdown.</summary>
			/// <remarks>
			/// Specifies the basic width of the dropdown. Its value may
			/// be a dimension (such as "12dip") for a constant width,
			/// fill_parent or match_parent to match the width of the
			/// screen, or wrap_content to match the width of
			/// the anchored view.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fill the width of the screen.
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the width of the screen.
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the width of its anchor. </td></tr>
			/// </table>
			/// </remarks>
			public const int dropDownWidth = unchecked((int)(0x01010262));

			/// <summary>The preferred item height for dropdown lists.</summary>
			/// <remarks>
			/// The preferred item height for dropdown lists.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int dropdownListPreferredItemHeight = unchecked((int)(0x010103b0));

			/// <summary>
			/// When this attribute is set to true, the view gets its drawable state
			/// (focused, pressed, etc.) from its direct parent rather than from itself.
			/// </summary>
			/// <remarks>
			/// When this attribute is set to true, the view gets its drawable state
			/// (focused, pressed, etc.) from its direct parent rather than from itself.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int duplicateParentState = unchecked((int)(0x010100e9));

			/// <summary>Amount of time (in milliseconds) to display this frame.</summary>
			/// <remarks>
			/// Amount of time (in milliseconds) to display this frame.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int duration = unchecked((int)(0x01010198));

			/// <summary>EditText background drawable.</summary>
			/// <remarks>
			/// EditText background drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int editTextBackground = unchecked((int)(0x01010352));

			/// <summary>EditText text foreground color.</summary>
			/// <remarks>
			/// EditText text foreground color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int editTextColor = unchecked((int)(0x01010351));

			/// <summary>Default style for EditTextPreference.</summary>
			/// <remarks>
			/// Default style for EditTextPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int editTextPreferenceStyle = unchecked((int)(0x01010092));

			/// <summary>Default EditText style.</summary>
			/// <remarks>
			/// Default EditText style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int editTextStyle = unchecked((int)(0x0101006e));

			/// <summary>If set, specifies that this TextView has an input method.</summary>
			/// <remarks>
			/// If set, specifies that this TextView has an input method.
			/// It will be a textual one unless it has otherwise been specified.
			/// For TextView, this is false by default.  For EditText, it is
			/// true by default.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int editable = unchecked((int)(0x0101016b));

			/// <summary>
			/// Reference to an
			/// <see cref="android.R.styleable.InputExtras">&lt;input-extras&gt;</see>
			/// XML resource containing additional data to
			/// supply to an input method, which is private to the implementation
			/// of the input method.  This simply fills in
			/// the
			/// <see cref="android.view.inputmethod.EditorInfo.extras">EditorInfo.extras</see>
			/// field when the input
			/// method is connected.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int editorExtras = unchecked((int)(0x01010224));

			/// <summary>Where to ellipsize text.</summary>
			/// <remarks>
			/// Where to ellipsize text.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>start</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>middle</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>end</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>marquee</code></td><td>4</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int ellipsize = unchecked((int)(0x010100ab));

			/// <summary>Makes the TextView be exactly this many ems wide.</summary>
			/// <remarks>
			/// Makes the TextView be exactly this many ems wide.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int ems = unchecked((int)(0x01010158));

			/// <summary>
			/// true if the storage is emulated via the FUSE sdcard daemon
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// true if the storage is emulated via the FUSE sdcard daemon
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int emulated = unchecked((int)(0x01010417));

			/// <summary>Specifies whether the TextView is enabled or not.</summary>
			/// <remarks>
			/// Specifies whether the TextView is enabled or not.
			/// <deprecated>Use state_enabled instead</deprecated>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int enabled = unchecked((int)(0x0101000e));

			/// <summary>End color of the gradient.</summary>
			/// <remarks>
			/// End color of the gradient.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int endColor = unchecked((int)(0x0101019e));

			/// <summary>The last year (inclusive), for example "2010".</summary>
			/// <remarks>
			/// The last year (inclusive), for example "2010".
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int endYear = unchecked((int)(0x0101017d));

			/// <summary>Amount of time (in milliseconds) to fade in a new state drawable.</summary>
			/// <remarks>
			/// Amount of time (in milliseconds) to fade in a new state drawable.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int enterFadeDuration = unchecked((int)(0x0101030c));

			/// <summary>Reference to an array resource that will populate a list/adapter.</summary>
			/// <remarks>
			/// Reference to an array resource that will populate a list/adapter.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int entries = unchecked((int)(0x010100b2));

			/// <summary>
			/// The array to find the value to save for a preference when an entry from
			/// entries is selected.
			/// </summary>
			/// <remarks>
			/// The array to find the value to save for a preference when an entry from
			/// entries is selected. If a user clicks on the second item in entries, the
			/// second item in this array will be saved to the preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int entryValues = unchecked((int)(0x010101f8));

			/// <summary>Background used instead of errorMessageBackground when the popup has to be above.
			/// 	</summary>
			/// <remarks>
			/// Background used instead of errorMessageBackground when the popup has to be above.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int errorMessageAboveBackground = unchecked((int)(0x010103ae));

			/// <summary>Popup text displayed in TextView when setError is used.</summary>
			/// <remarks>
			/// Popup text displayed in TextView when setError is used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int errorMessageBackground = unchecked((int)(0x010103ad));

			/// <summary>
			/// Defines whether the overlay should intercept the motion events when a gesture
			/// is recognized.
			/// </summary>
			/// <remarks>
			/// Defines whether the overlay should intercept the motion events when a gesture
			/// is recognized.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int eventsInterceptionEnabled = unchecked((int)(0x0101027d));

			/// <summary>
			/// Indicates that an Activity should be excluded from the list of
			/// recently launched activities.
			/// </summary>
			/// <remarks>
			/// Indicates that an Activity should be excluded from the list of
			/// recently launched activities.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int excludeFromRecents = unchecked((int)(0x01010017));

			/// <summary>Amount of time (in milliseconds) to fade out an old state drawable.</summary>
			/// <remarks>
			/// Amount of time (in milliseconds) to fade out an old state drawable.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int exitFadeDuration = unchecked((int)(0x0101030d));

			/// <summary>The drawable to show in the button for expanding the activities overflow popup.
			/// 	</summary>
			/// <remarks>
			/// The drawable to show in the button for expanding the activities overflow popup.
			/// <strong>Note:</strong> Clients would like to set this drawable
			/// as a clue about the action the chosen activity will perform. For
			/// example, if share activity is to be chosen the drawable should
			/// give a clue that sharing is to be performed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int expandActivityOverflowButtonDrawable = unchecked((int)(0x010103fb
				));

			/// <summary>The preferred left bound for an expandable list child's indicator.</summary>
			/// <remarks>
			/// The preferred left bound for an expandable list child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int expandableListPreferredChildIndicatorLeft = unchecked((int)(0x01010052
				));

			/// <summary>The preferred right bound for an expandable list child's indicator.</summary>
			/// <remarks>
			/// The preferred right bound for an expandable list child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int expandableListPreferredChildIndicatorRight = unchecked((int)(0x01010053
				));

			/// <summary>The preferred left padding for an expandable list item that is a child.</summary>
			/// <remarks>
			/// The preferred left padding for an expandable list item that is a child.
			/// If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int expandableListPreferredChildPaddingLeft = unchecked((int)(0x0101004f
				));

			/// <summary>The preferred left bound for an expandable list item's indicator.</summary>
			/// <remarks>
			/// The preferred left bound for an expandable list item's indicator. For a child-specific
			/// indicator, use expandableListPreferredChildIndicatorLeft.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int expandableListPreferredItemIndicatorLeft = unchecked((int)(0x01010050
				));

			/// <summary>The preferred right bound for an expandable list item's indicator.</summary>
			/// <remarks>
			/// The preferred right bound for an expandable list item's indicator. For a child-specific
			/// indicator, use expandableListPreferredChildIndicatorRight.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int expandableListPreferredItemIndicatorRight = unchecked((int)(0x01010051
				));

			/// <summary>
			/// The preferred left padding for an expandable list item (for child-specific layouts,
			/// use expandableListPreferredChildPaddingLeft).
			/// </summary>
			/// <remarks>
			/// The preferred left padding for an expandable list item (for child-specific layouts,
			/// use expandableListPreferredChildPaddingLeft). This takes into account
			/// the indicator that will be shown to next to the item.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int expandableListPreferredItemPaddingLeft = unchecked((int)(0x0101004e
				));

			/// <summary>Default ExpandableListView style.</summary>
			/// <remarks>
			/// Default ExpandableListView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int expandableListViewStyle = unchecked((int)(0x0101006f));

			/// <summary>ExpandableListView with white background.</summary>
			/// <remarks>
			/// ExpandableListView with white background.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int expandableListViewWhiteStyle = unchecked((int)(0x010102b6));

			/// <summary>
			/// Flag indicating whether the given application component is available
			/// to other applications.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether the given application component is available
			/// to other applications.  If false, it can only be accessed by
			/// applications with its same user id (which usually means only by
			/// code in its own package).  If true, it can be invoked by external
			/// entities, though which ones can do so may be controlled through
			/// permissions.  The default value is false for activity, receiver,
			/// and service components that do not specify any intent filters; it
			/// is true for activity, receiver, and service components that do
			/// have intent filters (implying they expect to be invoked by others
			/// who do not know their particular component name) and for all
			/// content providers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int exported = unchecked((int)(0x01010010));

			/// <summary>This is the amount by which to multiply the tension.</summary>
			/// <remarks>
			/// This is the amount by which to multiply the tension.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int extraTension = unchecked((int)(0x0101026b));

			/// <summary>This is the amount of deceleration to add when easing in.</summary>
			/// <remarks>
			/// This is the amount of deceleration to add when easing in.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int factor = unchecked((int)(0x010101d3));

			/// <summary>
			/// Duration, in milliseconds, of the fade out effect after the user is done
			/// drawing a gesture.
			/// </summary>
			/// <remarks>
			/// Duration, in milliseconds, of the fade out effect after the user is done
			/// drawing a gesture.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fadeDuration = unchecked((int)(0x01010278));

			/// <summary>Defines whether the gesture will automatically fade out after being recognized.
			/// 	</summary>
			/// <remarks>
			/// Defines whether the gesture will automatically fade out after being recognized.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fadeEnabled = unchecked((int)(0x0101027e));

			/// <summary>
			/// Time, in milliseconds, to wait before the gesture fades out after the user
			/// is done drawing it.
			/// </summary>
			/// <remarks>
			/// Time, in milliseconds, to wait before the gesture fades out after the user
			/// is done drawing it.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fadeOffset = unchecked((int)(0x01010277));

			/// <summary>Defines whether to fade out scrollbars when they are not in use.</summary>
			/// <remarks>
			/// Defines whether to fade out scrollbars when they are not in use.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fadeScrollbars = unchecked((int)(0x010102aa));

			/// <summary>
			/// <deprecated>This attribute is deprecated and will be ignored as of</deprecated>
			/// API level
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// .
			/// Using fading edges may introduce noticeable performance
			/// degradations and should be used only when required by the application's
			/// visual design. To request fading edges with API level
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// and above,
			/// use the <code>requiresFadingEdge</code> attribute instead.}
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
			/// <tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
			/// </table>
			/// </summary>
			[System.Obsolete]
			public const int fadingEdge = unchecked((int)(0x010100df));

			/// <summary>Defines the length of the fading edges.</summary>
			/// <remarks>
			/// Defines the length of the fading edges.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fadingEdgeLength = unchecked((int)(0x010100e0));

			/// <summary>When set to true, the list will always show the fast scroll interface.</summary>
			/// <remarks>
			/// When set to true, the list will always show the fast scroll interface.
			/// This setting implies fastScrollEnabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fastScrollAlwaysVisible = unchecked((int)(0x01010335));

			/// <summary>
			/// Enables the fast scroll thumb that can be dragged to quickly scroll through
			/// the list.
			/// </summary>
			/// <remarks>
			/// Enables the fast scroll thumb that can be dragged to quickly scroll through
			/// the list.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fastScrollEnabled = unchecked((int)(0x01010226));

			/// <summary>Position of the fast scroll index overlay window.</summary>
			/// <remarks>
			/// Position of the fast scroll index overlay window.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>floating</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>atThumb</code></td><td>1</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int fastScrollOverlayPosition = unchecked((int)(0x0101033a));

			/// <summary>
			/// Drawable to use as the fast scroll index preview window background
			/// when shown on the left.
			/// </summary>
			/// <remarks>
			/// Drawable to use as the fast scroll index preview window background
			/// when shown on the left.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fastScrollPreviewBackgroundLeft = unchecked((int)(0x01010337));

			/// <summary>
			/// Drawable to use as the fast scroll index preview window background
			/// when shown on the right.
			/// </summary>
			/// <remarks>
			/// Drawable to use as the fast scroll index preview window background
			/// when shown on the right.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fastScrollPreviewBackgroundRight = unchecked((int)(0x01010338));

			/// <summary>Text color for the fast scroll index overlay.</summary>
			/// <remarks>
			/// Text color for the fast scroll index overlay. Make sure it
			/// plays nicely with fastScrollPreviewBackground[Left|Right].
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fastScrollTextColor = unchecked((int)(0x01010359));

			/// <summary>Drawable to use as the fast scroll thumb.</summary>
			/// <remarks>
			/// Drawable to use as the fast scroll thumb.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fastScrollThumbDrawable = unchecked((int)(0x01010336));

			/// <summary>Drawable to use as the track for the fast scroll thumb.</summary>
			/// <remarks>
			/// Drawable to use as the track for the fast scroll thumb.
			/// This may be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fastScrollTrackDrawable = unchecked((int)(0x01010339));

			/// <summary>Number of waves/chevrons to show in animation.</summary>
			/// <remarks>
			/// Number of waves/chevrons to show in animation.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int feedbackCount = unchecked((int)(0x01010408));

			/// <summary>
			/// When set to true, the animation transformation is applied after the animation is
			/// over.
			/// </summary>
			/// <remarks>
			/// When set to true, the animation transformation is applied after the animation is
			/// over. The default value is false. If fillEnabled is not set to true and the
			/// animation is not set on a View, fillAfter is assumed to be true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fillAfter = unchecked((int)(0x010101bd));

			/// <summary>
			/// When set to true or when fillEnabled is not set to true, the animation transformation
			/// is applied before the animation has started.
			/// </summary>
			/// <remarks>
			/// When set to true or when fillEnabled is not set to true, the animation transformation
			/// is applied before the animation has started. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fillBefore = unchecked((int)(0x010101bc));

			/// <summary>When set to true, the value of fillBefore is taken into account.</summary>
			/// <remarks>
			/// When set to true, the value of fillBefore is taken into account.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fillEnabled = unchecked((int)(0x0101024f));

			/// <summary>Defines whether the scrollview should stretch its content to fill the viewport.
			/// 	</summary>
			/// <remarks>
			/// Defines whether the scrollview should stretch its content to fill the viewport.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fillViewport = unchecked((int)(0x0101017a));

			/// <summary>Enables or disables bitmap filtering.</summary>
			/// <remarks>
			/// Enables or disables bitmap filtering. Filtering is used when the bitmap is
			/// shrunk or stretched to smooth its apperance.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int filter = unchecked((int)(0x0101011b));

			/// <summary>
			/// Specifies whether to filter touches when the view's window is obscured by
			/// another visible window.
			/// </summary>
			/// <remarks>
			/// Specifies whether to filter touches when the view's window is obscured by
			/// another visible window.  When set to true, the view will not receive touches
			/// whenever a toast, dialog or other window appears above the view's window.
			/// Refer to the
			/// <see cref="android.view.View">android.view.View</see>
			/// security documentation for more details.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int filterTouchesWhenObscured = unchecked((int)(0x010102c4));

			/// <summary>
			/// Specify whether an activity should be finished when a "close system
			/// windows" request has been made.
			/// </summary>
			/// <remarks>
			/// Specify whether an activity should be finished when a "close system
			/// windows" request has been made.  This happens, for example, when
			/// the home key is pressed, when the device is locked, when a system
			/// dialog showing recent applications is displayed, etc.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int finishOnCloseSystemDialogs = unchecked((int)(0x010102a7));

			/// <summary>
			/// Specify whether an activity should be finished when its task is
			/// brought to the foreground by relaunching from the home screen.
			/// </summary>
			/// <remarks>
			/// Specify whether an activity should be finished when its task is
			/// brought to the foreground by relaunching from the home screen.
			/// <p>If both this option and
			/// <see cref="android.R.attr.allowTaskReparenting">android.R.attr.allowTaskReparenting
			/// 	</see>
			/// are
			/// specified, the finish trumps the affinity: the affinity will be
			/// ignored and the activity simply finished.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int finishOnTaskLaunch = unchecked((int)(0x01010014));

			/// <summary>
			/// The first day of week according to
			/// <see cref="java.util.Calendar">java.util.Calendar</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int firstDayOfWeek = unchecked((int)(0x0101033d));

			/// <summary>
			/// Boolean internal attribute to adjust view layout based on
			/// system windows such as the status bar.
			/// </summary>
			/// <remarks>
			/// Boolean internal attribute to adjust view layout based on
			/// system windows such as the status bar.
			/// If true, adjusts the padding of this view to leave space for the system windows.
			/// Will only take effect if this view is in a non-embedded activity.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fitsSystemWindows = unchecked((int)(0x010100dd));

			/// <hide>
			/// Whether the number picker supports fligning.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </hide>
			public const int flingable = unchecked((int)(0x010103f5));

			/// <summary><p>Must be an integer value, such as "<code>100</code>".</summary>
			/// <remarks>
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int flipInterval = unchecked((int)(0x01010179));

			/// <summary>Boolean that controls whether a view can take focus.</summary>
			/// <remarks>
			/// Boolean that controls whether a view can take focus.  By default the user can not
			/// move focus to a view; by setting this attribute to true the view is
			/// allowed to take focus.  This value does not impact the behavior of
			/// directly calling
			/// <see cref="android.view.View.requestFocus()">android.view.View.requestFocus()</see>
			/// , which will
			/// always request focus regardless of this view.  It only impacts where
			/// focus navigation will try to move focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int focusable = unchecked((int)(0x010100da));

			/// <summary>Boolean that controls whether a view can take focus while in touch mode.
			/// 	</summary>
			/// <remarks>
			/// Boolean that controls whether a view can take focus while in touch mode.
			/// If this is true for a view, that view can gain focus when clicked on, and can keep
			/// focus if another view is clicked on that doesn't have this attribute set to true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int focusableInTouchMode = unchecked((int)(0x010100db));

			/// <summary>The color for the dates of the selected month.</summary>
			/// <remarks>
			/// The color for the dates of the selected month.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int focusedMonthDateColor = unchecked((int)(0x01010343));

			/// <summary>When set to false, the ListView will not draw the divider before each footer view.
			/// 	</summary>
			/// <remarks>
			/// When set to false, the ListView will not draw the divider before each footer view.
			/// The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int footerDividersEnabled = unchecked((int)(0x0101022f));

			/// <summary>Defines the drawable to draw over the content.</summary>
			/// <remarks>
			/// Defines the drawable to draw over the content. This can be used as an overlay.
			/// The foreground drawable participates in the padding of the content if the gravity
			/// is set to fill.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int foreground = unchecked((int)(0x01010109));

			/// <summary>Defines the gravity to apply to the foreground drawable.</summary>
			/// <remarks>
			/// Defines the gravity to apply to the foreground drawable. The gravity defaults
			/// to fill.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// </table>
			/// </remarks>
			public const int foregroundGravity = unchecked((int)(0x01010200));

			/// <summary>Defines whether the foreground drawable should be drawn inside the padding.
			/// 	</summary>
			/// <remarks>
			/// Defines whether the foreground drawable should be drawn inside the padding.
			/// This property is turned on by default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int foregroundInsidePadding = unchecked((int)(0x010103e3));

			/// <summary>
			/// Format string: if specified, the Chronometer will display this
			/// string, with the first "%s" replaced by the current timer value
			/// in "MM:SS" or "H:MM:SS" form.
			/// </summary>
			/// <remarks>
			/// Format string: if specified, the Chronometer will display this
			/// string, with the first "%s" replaced by the current timer value
			/// in "MM:SS" or "H:MM:SS" form.
			/// If no format string is specified, the Chronometer will simply display
			/// "MM:SS" or "H:MM:SS".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int format = unchecked((int)(0x01010105));

			/// <summary>The fragment that is displayed when the user selects this item.</summary>
			/// <remarks>
			/// The fragment that is displayed when the user selects this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fragment = unchecked((int)(0x010102e3));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fragmentCloseEnterAnimation = unchecked((int)(0x010102e7));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fragmentCloseExitAnimation = unchecked((int)(0x010102e8));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fragmentFadeEnterAnimation = unchecked((int)(0x010102e9));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fragmentFadeExitAnimation = unchecked((int)(0x010102ea));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fragmentOpenEnterAnimation = unchecked((int)(0x010102e5));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int fragmentOpenExitAnimation = unchecked((int)(0x010102e6));

			/// <summary><p>Must be an integer value, such as "<code>100</code>".</summary>
			/// <remarks>
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int frameDuration = unchecked((int)(0x010103f8));

			/// <summary><p>Must be an integer value, such as "<code>100</code>".</summary>
			/// <remarks>
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int framesCount = unchecked((int)(0x010103f9));

			/// <summary>
			/// If set, the text view will include its current complete text
			/// inside of its frozen icicle in addition to meta-data such as
			/// the current cursor position.
			/// </summary>
			/// <remarks>
			/// If set, the text view will include its current complete text
			/// inside of its frozen icicle in addition to meta-data such as
			/// the current cursor position.  By default this is disabled;
			/// it can be useful when the contents of a text view is not stored
			/// in a persistent place such as a content provider.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int freezesText = unchecked((int)(0x0101016c));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fromAlpha = unchecked((int)(0x010101ca));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fromDegrees = unchecked((int)(0x010101b3));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fromXDelta = unchecked((int)(0x010101c6));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fromXScale = unchecked((int)(0x010101c2));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fromYDelta = unchecked((int)(0x010101c8));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int fromYScale = unchecked((int)(0x010101c4));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int fullBright = unchecked((int)(0x010100ca));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int fullDark = unchecked((int)(0x010100c6));

			/// <summary>
			/// Flag indicating that an Instrumentation class should be run as a
			/// functional test.
			/// </summary>
			/// <remarks>
			/// Flag indicating that an Instrumentation class should be run as a
			/// functional test.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int functionalTest = unchecked((int)(0x01010023));

			/// <summary>The preferred background for gallery items.</summary>
			/// <remarks>
			/// The preferred background for gallery items. This should be set
			/// as the background of any Views you provide from the Adapter.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int galleryItemBackground = unchecked((int)(0x0101004c));

			/// <summary>Default Gallery style.</summary>
			/// <remarks>
			/// Default Gallery style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int galleryStyle = unchecked((int)(0x01010070));

			/// <summary>Color used to draw a gesture.</summary>
			/// <remarks>
			/// Color used to draw a gesture.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int gestureColor = unchecked((int)(0x01010275));

			/// <summary>Default GestureOverlayView style.</summary>
			/// <remarks>
			/// Default GestureOverlayView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int gestureOverlayViewStyle = unchecked((int)(0x010103b7));

			/// <summary>Minimum curve angle a stroke must contain before it is recognized as a gesture.
			/// 	</summary>
			/// <remarks>
			/// Minimum curve angle a stroke must contain before it is recognized as a gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int gestureStrokeAngleThreshold = unchecked((int)(0x0101027c));

			/// <summary>Minimum length of a stroke before it is recognized as a gesture.</summary>
			/// <remarks>
			/// Minimum length of a stroke before it is recognized as a gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int gestureStrokeLengthThreshold = unchecked((int)(0x0101027a));

			/// <summary>Squareness threshold of a stroke before it is recognized as a gesture.</summary>
			/// <remarks>
			/// Squareness threshold of a stroke before it is recognized as a gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int gestureStrokeSquarenessThreshold = unchecked((int)(0x0101027b));

			/// <summary>Defines the type of strokes that define a gesture.</summary>
			/// <remarks>
			/// Defines the type of strokes that define a gesture.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>single</code></td><td>0</td><td> A gesture is made of only one stroke. </td></tr>
			/// <tr><td><code>multiple</code></td><td>1</td><td> A gesture is made of multiple strokes. </td></tr>
			/// </table>
			/// </remarks>
			public const int gestureStrokeType = unchecked((int)(0x01010279));

			/// <summary>Width of the stroke used to draw the gesture.</summary>
			/// <remarks>
			/// Width of the stroke used to draw the gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int gestureStrokeWidth = unchecked((int)(0x01010274));

			/// <summary>The GLES driver version number needed by an application.</summary>
			/// <remarks>
			/// The GLES driver version number needed by an application.
			/// The higher 16 bits represent the major number and the lower 16 bits
			/// represent the minor number. For example for GL 1.2 referring to
			/// 0x00000102, the actual value should be set as 0x00010002.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int glEsVersion = unchecked((int)(0x01010281));

			/// <summary>Radius of the gradient, used only with radial gradient.</summary>
			/// <remarks>
			/// Radius of the gradient, used only with radial gradient.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int gradientRadius = unchecked((int)(0x010101a4));

			/// <summary>
			/// If true, the
			/// <see cref="android.content.Context.grantUriPermission(string, System.Uri, int)">Context.grantUriPermission
			/// 	</see>
			/// or corresponding Intent flags can
			/// be used to allow others to access specific URIs in the content
			/// provider, even if they do not have an explicit read or write
			/// permission.  If you are supporting this feature, you must be
			/// sure to call
			/// <see cref="android.content.Context.revokeUriPermission(System.Uri, int)">Context.revokeUriPermission
			/// 	</see>
			/// when URIs are deleted from your
			/// provider.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int grantUriPermissions = unchecked((int)(0x0101001b));

			/// <summary>
			/// Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.
			/// </summary>
			/// <remarks>
			/// Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// </remarks>
			public const int gravity = unchecked((int)(0x010100af));

			/// <summary>Default GridView style.</summary>
			/// <remarks>
			/// Default GridView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int gridViewStyle = unchecked((int)(0x01010071));

			/// <summary>Indicator shown beside the group View.</summary>
			/// <remarks>
			/// Indicator shown beside the group View. This can be a stateful Drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int groupIndicator = unchecked((int)(0x0101010b));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int hand_hour = unchecked((int)(0x01010103));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int hand_minute = unchecked((int)(0x01010104));

			/// <summary>Identifier for the child that represents the drawer's handle.</summary>
			/// <remarks>
			/// Identifier for the child that represents the drawer's handle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int handle = unchecked((int)(0x0101025a));

			/// <summary>Sets a drawable as the drag center.</summary>
			/// <remarks>
			/// Sets a drawable as the drag center.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int handleDrawable = unchecked((int)(0x010103fe));

			/// <summary>
			/// Flag indicating that an Instrumentation class wants to take care
			/// of starting/stopping profiling itself, rather than relying on
			/// the default behavior of profiling the complete time it is running.
			/// </summary>
			/// <remarks>
			/// Flag indicating that an Instrumentation class wants to take care
			/// of starting/stopping profiling itself, rather than relying on
			/// the default behavior of profiling the complete time it is running.
			/// This allows it to target profiling data at a specific set of
			/// operations.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int handleProfiling = unchecked((int)(0x01010022));

			/// <summary>
			/// Boolean that controls whether a view should have haptic feedback
			/// enabled for events such as long presses.
			/// </summary>
			/// <remarks>
			/// Boolean that controls whether a view should have haptic feedback
			/// enabled for events such as long presses.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hapticFeedbackEnabled = unchecked((int)(0x0101025e));

			/// <summary>
			/// <p>Flag indicating whether the application's rendering should be hardware
			/// accelerated if possible.
			/// </summary>
			/// <remarks>
			/// <p>Flag indicating whether the application's rendering should be hardware
			/// accelerated if possible. This flag is turned on by default for applications
			/// that are targeting
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// or later.</p>
			/// <p>This flag can be set on the application and any activity declared
			/// in the manifest. When enabled for the application, each activity is
			/// automatically assumed to be hardware accelerated. This flag can be
			/// overridden in the activity tags, either turning it off (if on for the
			/// application) or on (if off for the application.)</p>
			/// <p>When this flag is turned on for an activity (either directly or via
			/// the application tag), every window created from the activity, including
			/// the activity's own window, will be hardware accelerated, if possible.</p>
			/// <p>Please refer to the documentation of
			/// <see cref="android.view.WindowManagerClass.LayoutParams.FLAG_HARDWARE_ACCELERATED
			/// 	">android.view.WindowManagerClass.LayoutParams.FLAG_HARDWARE_ACCELERATED</see>
			/// for more information on how to control this flag programmatically.</p>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hardwareAccelerated = unchecked((int)(0x010102d3));

			/// <summary>Indicate whether this application contains code.</summary>
			/// <remarks>
			/// Indicate whether this application contains code.  If set to false,
			/// there is no code associated with it and thus the system will not
			/// try to load its code when launching components.  The default is true
			/// for normal behavior.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hasCode = unchecked((int)(0x0101000c));

			/// <summary>Default background for the menu header.</summary>
			/// <remarks>
			/// Default background for the menu header.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int headerBackground = unchecked((int)(0x0101012f));

			/// <summary>When set to false, the ListView will not draw the divider after each header view.
			/// 	</summary>
			/// <remarks>
			/// When set to false, the ListView will not draw the divider after each header view.
			/// The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int headerDividersEnabled = unchecked((int)(0x0101022e));

			/// <summary>Makes the TextView be exactly this many pixels tall.</summary>
			/// <remarks>
			/// Makes the TextView be exactly this many pixels tall.
			/// You could get the same effect by specifying this number in the
			/// layout parameters.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int height = unchecked((int)(0x01010155));

			/// <summary>Hint text to display when the text is empty.</summary>
			/// <remarks>
			/// Hint text to display when the text is empty.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hint = unchecked((int)(0x01010150));

			/// <summary>Size of target radius.</summary>
			/// <remarks>
			/// Size of target radius. Points within this distance of target center is a "hit".
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hitRadius = unchecked((int)(0x01010405));

			/// <summary>Specifies a drawable to use for the 'home as up' indicator.</summary>
			/// <remarks>
			/// Specifies a drawable to use for the 'home as up' indicator.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int homeAsUpIndicator = unchecked((int)(0x0101030b));

			/// <summary>Specifies a layout to use for the "home" section of the action bar.</summary>
			/// <remarks>
			/// Specifies a layout to use for the "home" section of the action bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int homeLayout = unchecked((int)(0x0101031d));

			/// <summary>Default horizontal divider between rows of menu items.</summary>
			/// <remarks>
			/// Default horizontal divider between rows of menu items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int horizontalDivider = unchecked((int)(0x0101012d));

			/// <summary>Default horizontal gap between keys.</summary>
			/// <remarks>
			/// Default horizontal gap between keys.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int horizontalGap = unchecked((int)(0x0101023f));

			/// <summary>Used to shift center of pattern horizontally.</summary>
			/// <remarks>
			/// Used to shift center of pattern horizontally.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int horizontalOffset = unchecked((int)(0x0101040a));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int horizontalProgressLayout = unchecked((int)(0x010103dc));

			/// <summary>Default HorizontalScrollView style.</summary>
			/// <remarks>
			/// Default HorizontalScrollView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int horizontalScrollViewStyle = unchecked((int)(0x01010353));

			/// <summary>Defines the default horizontal spacing between columns.</summary>
			/// <remarks>
			/// Defines the default horizontal spacing between columns.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int horizontalSpacing = unchecked((int)(0x01010114));

			/// <summary>
			/// Specify a URI authority host that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataAuthority(string, string)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// .
			/// <p><em>Note: host name matching in the Android framework is
			/// case-sensitive, unlike the formal RFC.  As a result,
			/// host names here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int host = unchecked((int)(0x01010028));

			/// <summary>X coordinate of the icon hot spot.</summary>
			/// <remarks>
			/// X coordinate of the icon hot spot.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hotSpotX = unchecked((int)(0x01010411));

			/// <summary>Y coordinate of the icon hot spot.</summary>
			/// <remarks>
			/// Y coordinate of the icon hot spot.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int hotSpotY = unchecked((int)(0x01010412));

			/// <summary>
			/// A Drawable resource providing a graphical representation of its
			/// associated item.
			/// </summary>
			/// <remarks>
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int icon = unchecked((int)(0x01010002));

			/// <summary>The icon to show in the popup preview.</summary>
			/// <remarks>
			/// The icon to show in the popup preview.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int iconPreview = unchecked((int)(0x01010249));

			/// <summary>The default state of the SearchView.</summary>
			/// <remarks>
			/// The default state of the SearchView. If true, it will be iconified when not in
			/// use and expanded when clicked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int iconifiedByDefault = unchecked((int)(0x010102fa));

			/// <summary>
			/// Supply an identifier name for this view, to later retrieve it
			/// with
			/// <see cref="android.view.View.findViewById(int)">View.findViewById()</see>
			/// or
			/// <see cref="android.app.Activity.findViewById(int)">Activity.findViewById()</see>
			/// .
			/// This must be a
			/// resource reference; typically you set this using the
			/// <code>@+</code> syntax to create a new ID resources.
			/// For example: <code>android:id="@+id/my_id"</code> which
			/// allows you to later retrieve the view
			/// with <code>findViewById(R.id.my_id)</code>.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int id = unchecked((int)(0x010100d0));

			/// <summary>Indicates what view should not be affected by gravity.</summary>
			/// <remarks>
			/// Indicates what view should not be affected by gravity.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int ignoreGravity = unchecked((int)(0x010101ff));

			/// <summary>The style resource to use for an ImageButton.</summary>
			/// <remarks>
			/// The style resource to use for an ImageButton.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int imageButtonStyle = unchecked((int)(0x01010072));

			/// <summary>The style resource to use for an ImageButton that is an image well.</summary>
			/// <remarks>
			/// The style resource to use for an ImageButton that is an image well.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int imageWellStyle = unchecked((int)(0x01010073));

			/// <summary>
			/// Supply a value for
			/// <see cref="android.view.inputmethod.EditorInfo.actionId">EditorInfo.actionId</see>
			/// used when an input method is connected to the text view.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int imeActionId = unchecked((int)(0x01010266));

			/// <summary>
			/// Supply a value for
			/// <see cref="android.view.inputmethod.EditorInfo.actionLabel">EditorInfo.actionLabel
			/// 	</see>
			/// used when an input method is connected to the text view.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int imeActionLabel = unchecked((int)(0x01010265));

			/// <summary>
			/// Animation to use when showing the fullscreen extract UI after
			/// it had previously been hidden.
			/// </summary>
			/// <remarks>
			/// Animation to use when showing the fullscreen extract UI after
			/// it had previously been hidden.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int imeExtractEnterAnimation = unchecked((int)(0x01010268));

			/// <summary>
			/// Animation to use when hiding the fullscreen extract UI after
			/// it had previously been shown.
			/// </summary>
			/// <remarks>
			/// Animation to use when hiding the fullscreen extract UI after
			/// it had previously been shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int imeExtractExitAnimation = unchecked((int)(0x01010269));

			/// <summary>
			/// Background to use for entire input method when it is being
			/// shown in fullscreen mode with the extract view, to ensure
			/// that it completely covers the application.
			/// </summary>
			/// <remarks>
			/// Background to use for entire input method when it is being
			/// shown in fullscreen mode with the extract view, to ensure
			/// that it completely covers the application.  This allows,
			/// for example, the candidate view to be hidden
			/// while in fullscreen mode without having the application show through
			/// behind it.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int imeFullscreenBackground = unchecked((int)(0x0101022c));

			/// <summary>
			/// Additional features you can enable in an IME associated with an editor
			/// to improve the integration with your application.
			/// </summary>
			/// <remarks>
			/// Additional features you can enable in an IME associated with an editor
			/// to improve the integration with your application.  The constants
			/// here correspond to those defined by
			/// <see cref="android.view.inputmethod.EditorInfo.imeOptions">android.view.inputmethod.EditorInfo.imeOptions
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
			/// <tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
			/// editor come up with its own if it can.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_NULL">android.view.inputmethod.EditorInfo.IME_NULL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NONE">android.view.inputmethod.EditorInfo.IME_ACTION_NONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
			/// operation to take the user to the target of the text they typed.
			/// Typically used, for example, when entering a URL.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_GO">android.view.inputmethod.EditorInfo.IME_ACTION_GO
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
			/// operation, taking the user to the results of searching for the text
			/// the have typed (in whatever context is appropriate).
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH">android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
			/// operation, delivering the text to its target.  This is typically used
			/// when composing a message.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEND">android.view.inputmethod.EditorInfo.IME_ACTION_SEND
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
			/// operation, taking the user to the next field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NEXT">android.view.inputmethod.EditorInfo.IME_ACTION_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
			/// operation, closing the soft input method.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_DONE">android.view.inputmethod.EditorInfo.IME_ACTION_DONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
			/// operation, taking the user to the previous field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS">android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
			/// into fullscreen mode.  Applications need to be aware that the flag is not
			/// a guarantee, and not all IMEs will respect it.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
			/// specifies there is something interesting that a backward navigation
			/// can focus on.  If the user selects the IME's facility to backward
			/// navigate, this will show up in the application as an actionPrevious
			/// at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
			/// interesting that a forward navigation can focus on. This is like using
			/// actionNext, except allows the IME to be multiline (with
			/// an enter key) as well as provide forward navigation.  Note that some
			/// IMEs may not be able to do this, especially when running on a small
			/// screen where there is little space.  In that case it does not need to
			/// present a UI for this option.  Like actionNext, if the
			/// user selects the IME's facility to forward navigate, this will show up
			/// in the application at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT">android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
			/// to show its extracted text UI.  For input methods that may be fullscreen,
			/// often when in landscape mode, this allows them to be smaller and let part
			/// of the application be shown behind.  Though there will likely be limited
			/// access to the application available from the user, it can make the
			/// experience of a (mostly) fullscreen IME less jarring.  Note that when
			/// this flag is specified the IME may <em>not</em> be set up to be able
			/// to display text, so it should only be used in situations where this is
			/// not needed.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI">android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
			/// action should not be available as an accessory button when the
			/// input method is full-screen.
			/// Note that by setting this flag, there can be cases where the action
			/// is simply never available to the user.  Setting this generally means
			/// that you think showing text being edited is more important than the
			/// action you have supplied.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
			/// this indicates that the action should not be available in-line as
			/// a replacement for the "enter" key.  Typically this is
			/// because the action has such a significant impact or is not recoverable
			/// enough that accidentally hitting it should be avoided, such as sending
			/// a message.    Note that
			/// <see cref="android.widget.TextView">android.widget.TextView</see>
			/// will
			/// automatically set this flag for you on multi-line text views.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// </remarks>
			public const int imeOptions = unchecked((int)(0x01010264));

			/// <summary>The extra value of the subtype.</summary>
			/// <remarks>
			/// The extra value of the subtype. This string can be any string and will be passed to
			/// the IME when the framework calls the IME with the subtype.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int imeSubtypeExtraValue = unchecked((int)(0x010102ee));

			/// <summary>The locale of the subtype.</summary>
			/// <remarks>
			/// The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
			/// and will be passed to the IME when the framework calls the IME
			/// with the subtype. This is also used by the framework to know the supported locales
			/// of the IME.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int imeSubtypeLocale = unchecked((int)(0x010102ec));

			/// <summary>The mode of the subtype.</summary>
			/// <remarks>
			/// The mode of the subtype. This string can be a mode (e.g. voice, keyboard...) and this
			/// string will be passed to the IME when the framework calls the IME with the
			/// subtype.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int imeSubtypeMode = unchecked((int)(0x010102ed));

			/// <summary>
			/// Flag declaring this activity to be 'immersive'; immersive activities
			/// should not be interrupted with other activities or notifications.
			/// </summary>
			/// <remarks>
			/// Flag declaring this activity to be 'immersive'; immersive activities
			/// should not be interrupted with other activities or notifications.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int immersive = unchecked((int)(0x010102c0));

			/// <summary>Identifier for the animation to use when a view is shown.</summary>
			/// <remarks>
			/// Identifier for the animation to use when a view is shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int inAnimation = unchecked((int)(0x01010177));

			/// <summary>
			/// Leave enough room for ascenders and descenders instead of
			/// using the font ascent and descent strictly.
			/// </summary>
			/// <remarks>
			/// Leave enough room for ascenders and descenders instead of
			/// using the font ascent and descent strictly.  (Normally true).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int includeFontPadding = unchecked((int)(0x0101015f));

			/// <summary>
			/// If provided and <code>true</code>, this searchable activity will be
			/// included in any global lists of search targets.
			/// </summary>
			/// <remarks>
			/// If provided and <code>true</code>, this searchable activity will be
			/// included in any global lists of search targets.
			/// The default value is <code>false</code>. <i>Optional attribute.</i>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int includeInGlobalSearch = unchecked((int)(0x0101026e));

			/// <summary>Allows to enable the indeterminate mode.</summary>
			/// <remarks>
			/// Allows to enable the indeterminate mode. In this mode the progress
			/// bar plays an infinite looping animation.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int indeterminate = unchecked((int)(0x01010139));

			/// <summary>
			/// Defines how the indeterminate mode should behave when the progress
			/// reaches max.
			/// </summary>
			/// <remarks>
			/// Defines how the indeterminate mode should behave when the progress
			/// reaches max.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>repeat</code></td><td>1</td><td> Progress starts over from 0. </td></tr>
			/// <tr><td><code>cycle</code></td><td>2</td><td> Progress keeps the current value and goes back to 0. </td></tr>
			/// </table>
			/// </remarks>
			public const int indeterminateBehavior = unchecked((int)(0x0101013e));

			/// <summary>Drawable used for the indeterminate mode.</summary>
			/// <remarks>
			/// Drawable used for the indeterminate mode.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int indeterminateDrawable = unchecked((int)(0x0101013b));

			/// <summary>Duration of the indeterminate animation.</summary>
			/// <remarks>
			/// Duration of the indeterminate animation.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int indeterminateDuration = unchecked((int)(0x0101013d));

			/// <summary>Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
			/// 	</summary>
			/// <remarks>
			/// Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int indeterminateOnly = unchecked((int)(0x0101013a));

			/// <summary>Specifies a style resource to use for an indeterminate progress spinner.
			/// 	</summary>
			/// <remarks>
			/// Specifies a style resource to use for an indeterminate progress spinner.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int indeterminateProgressStyle = unchecked((int)(0x01010318));

			/// <summary>The left bound for an item's indicator.</summary>
			/// <remarks>
			/// The left bound for an item's indicator. To specify a left bound specific to children,
			/// use childIndicatorLeft.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int indicatorLeft = unchecked((int)(0x0101010d));

			/// <summary>The right bound for an item's indicator.</summary>
			/// <remarks>
			/// The right bound for an item's indicator. To specify a right bound specific to children,
			/// use childIndicatorRight.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int indicatorRight = unchecked((int)(0x0101010e));

			/// <summary>Overrides the id of the inflated View with this value.</summary>
			/// <remarks>
			/// Overrides the id of the inflated View with this value.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int inflatedId = unchecked((int)(0x010100f3));

			/// <summary>
			/// Specify the order in which content providers hosted by a process
			/// are instantiated when that process is created.
			/// </summary>
			/// <remarks>
			/// Specify the order in which content providers hosted by a process
			/// are instantiated when that process is created.  Not needed unless
			/// you have providers with dependencies between each other, to make
			/// sure that they are created in the order needed by those dependencies.
			/// The value is a simple integer, with higher numbers being
			/// initialized first.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int initOrder = unchecked((int)(0x0101001a));

			/// <summary>The maximal number of items initially shown in the activity list.</summary>
			/// <remarks>
			/// The maximal number of items initially shown in the activity list.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int initialActivityCount = unchecked((int)(0x010103fa));

			/// <summary>A resource id of a layout.</summary>
			/// <remarks>
			/// A resource id of a layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int initialLayout = unchecked((int)(0x01010251));

			/// <summary>Inner radius of the ring.</summary>
			/// <remarks>
			/// Inner radius of the ring. When defined, innerRadiusRatio is ignored.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int innerRadius = unchecked((int)(0x0101025f));

			/// <summary>Inner radius of the ring expressed as a ratio of the ring's width.</summary>
			/// <remarks>
			/// Inner radius of the ring expressed as a ratio of the ring's width. For instance,
			/// if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
			/// This value is ignored if innerRadius is defined. Default value is 9.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int innerRadiusRatio = unchecked((int)(0x0101019b));

			/// <summary>
			/// If set, specifies that this TextView should use the specified
			/// input method (specified by fully-qualified class name).
			/// </summary>
			/// <remarks>
			/// If set, specifies that this TextView should use the specified
			/// input method (specified by fully-qualified class name).
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int inputMethod = unchecked((int)(0x01010168));

			/// <summary>
			/// The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.
			/// </summary>
			/// <remarks>
			/// The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.  The constants
			/// here correspond to those defined by
			/// <see cref="android.text.InputType">android.text.InputType</see>
			/// .  Generally you can select
			/// a single value, though some can be combined together as
			/// indicated.  Setting this attribute to anything besides
			/// <var>none</var> also implies that the text is editable.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
			/// <tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of all characters.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every word.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every sentence.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
			/// request auto-correction of text being input.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
			/// specify that this field will be doing its own auto-completion and
			/// talking with the input method appropriately.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
			/// allow multiple lines of text in the field.  If this flag is not set,
			/// the text field will be constrained to a single line.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that though the regular text view should not be multiple
			/// lines, the IME should provide multiple lines if it can.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that the IME should not show any
			/// dictionary-based word suggestions.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS">android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI">android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER">android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
			/// field in a contact entry.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a signed number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED">android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a decimal (fractional) number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL">android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_PHONE">android.text.InputTypeClass.TYPE_CLASS_PHONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// </remarks>
			public const int inputType = unchecked((int)(0x01010220));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int insetBottom = unchecked((int)(0x010101ba));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int insetLeft = unchecked((int)(0x010101b7));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int insetRight = unchecked((int)(0x010101b8));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int insetTop = unchecked((int)(0x010101b9));

			/// <summary>The default install location defined by an application.</summary>
			/// <remarks>
			/// The default install location defined by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>auto</code></td><td>0</td><td> Let the system decide ideal install location </td></tr>
			/// <tr><td><code>internalOnly</code></td><td>1</td><td> Explicitly request to be installed on internal phone storage
			/// only. </td></tr>
			/// <tr><td><code>preferExternal</code></td><td>2</td><td> Prefer to be installed on SD card. There is no guarantee that
			/// the system will honor this request. The application might end
			/// up being installed on internal storage if external media
			/// is unavailable or too full. </td></tr>
			/// </table>
			/// </remarks>
			public const int installLocation = unchecked((int)(0x010102b7));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int interpolator = unchecked((int)(0x01010141));

			/// <summary>
			/// Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
			/// for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
			/// </summary>
			/// <remarks>
			/// Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
			/// for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
			/// Defaults to false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isAlwaysSyncable = unchecked((int)(0x01010333));

			/// <summary>Set true if the subtype is auxiliary.</summary>
			/// <remarks>
			/// Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
			/// input method selection list in the settings app.
			/// InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
			/// chooses a target subtype.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isAuxiliary = unchecked((int)(0x0101037f));

			/// <summary>
			/// Set to true in all of the configurations for which this input
			/// method should be considered an option as the default.
			/// </summary>
			/// <remarks>
			/// Set to true in all of the configurations for which this input
			/// method should be considered an option as the default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isDefault = unchecked((int)(0x01010221));

			/// <summary>Whether this rating bar is an indicator (and non-changeable by the user).
			/// 	</summary>
			/// <remarks>
			/// Whether this rating bar is an indicator (and non-changeable by the user).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isIndicator = unchecked((int)(0x01010147));

			/// <summary>Whether this is a modifier key such as Alt or Shift.</summary>
			/// <remarks>
			/// Whether this is a modifier key such as Alt or Shift.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isModifier = unchecked((int)(0x01010246));

			/// <summary>Whether long-pressing on this key will make it repeat.</summary>
			/// <remarks>
			/// Whether long-pressing on this key will make it repeat.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isRepeatable = unchecked((int)(0x01010248));

			/// <summary>
			/// Set this if the view will serve as a scrolling container, meaing
			/// that it can be resized to shrink its overall window so that there
			/// will be space for an input method.
			/// </summary>
			/// <remarks>
			/// Set this if the view will serve as a scrolling container, meaing
			/// that it can be resized to shrink its overall window so that there
			/// will be space for an input method.  If not set, the default
			/// value will be true if "scrollbars" has the vertical scrollbar
			/// set, else it will be false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isScrollContainer = unchecked((int)(0x0101024e));

			/// <summary>Whether this is a toggle key.</summary>
			/// <remarks>
			/// Whether this is a toggle key.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int isSticky = unchecked((int)(0x01010247));

			/// <summary>Default background for each menu item.</summary>
			/// <remarks>
			/// Default background for each menu item.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int itemBackground = unchecked((int)(0x01010130));

			/// <summary>Default disabled icon alpha for each menu item that shows an icon.</summary>
			/// <remarks>
			/// Default disabled icon alpha for each menu item that shows an icon.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int itemIconDisabledAlpha = unchecked((int)(0x01010131));

			/// <summary>
			/// Specifies padding that should be applied to the left and right sides of
			/// system-provided items in the bar.
			/// </summary>
			/// <remarks>
			/// Specifies padding that should be applied to the left and right sides of
			/// system-provided items in the bar.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int itemPadding = unchecked((int)(0x0101032d));

			/// <summary>Default appearance of menu item text.</summary>
			/// <remarks>
			/// Default appearance of menu item text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int itemTextAppearance = unchecked((int)(0x0101012c));

			/// <summary>
			/// Controls whether the view's window should keep the screen on
			/// while visible.
			/// </summary>
			/// <remarks>
			/// Controls whether the view's window should keep the screen on
			/// while visible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keepScreenOn = unchecked((int)(0x01010216));

			/// <summary>The key to store the Preference value.</summary>
			/// <remarks>
			/// The key to store the Preference value.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int key = unchecked((int)(0x010101e8));

			/// <summary>Image for the key.</summary>
			/// <remarks>
			/// Image for the key. This image needs to be a StateListDrawable, with the following
			/// possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
			/// checkable+checked+pressed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int keyBackground = unchecked((int)(0x01010233));

			/// <summary>Key edge flags.</summary>
			/// <remarks>
			/// Key edge flags.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>left</code></td><td>1</td><td> Key is anchored to the left of the keyboard. </td></tr>
			/// <tr><td><code>right</code></td><td>2</td><td> Key is anchored to the right of the keyboard. </td></tr>
			/// </table>
			/// </remarks>
			public const int keyEdgeFlags = unchecked((int)(0x01010245));

			/// <summary>Default height of a key, in pixels or percentage of display width.</summary>
			/// <remarks>
			/// Default height of a key, in pixels or percentage of display width.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyHeight = unchecked((int)(0x0101023e));

			/// <summary>The icon to display on the key instead of the label.</summary>
			/// <remarks>
			/// The icon to display on the key instead of the label.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int keyIcon = unchecked((int)(0x0101024c));

			/// <summary>The label to display on the key.</summary>
			/// <remarks>
			/// The label to display on the key.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyLabel = unchecked((int)(0x0101024b));

			/// <summary>The string of characters to output when this key is pressed.</summary>
			/// <remarks>
			/// The string of characters to output when this key is pressed.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyOutputText = unchecked((int)(0x0101024a));

			/// <summary>Height of the key press feedback popup.</summary>
			/// <remarks>
			/// Height of the key press feedback popup.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyPreviewHeight = unchecked((int)(0x01010239));

			/// <summary>Layout resource for key press feedback.</summary>
			/// <remarks>
			/// Layout resource for key press feedback.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int keyPreviewLayout = unchecked((int)(0x01010237));

			/// <summary>Vertical offset of the key press feedback from the key.</summary>
			/// <remarks>
			/// Vertical offset of the key press feedback from the key.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyPreviewOffset = unchecked((int)(0x01010238));

			/// <summary>Color to use for the label in a key.</summary>
			/// <remarks>
			/// Color to use for the label in a key.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyTextColor = unchecked((int)(0x01010236));

			/// <summary>Size of the text for character keys.</summary>
			/// <remarks>
			/// Size of the text for character keys.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyTextSize = unchecked((int)(0x01010234));

			/// <summary>Default width of a key, in pixels or percentage of display width.</summary>
			/// <remarks>
			/// Default width of a key, in pixels or percentage of display width.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int keyWidth = unchecked((int)(0x0101023d));

			/// <summary>Mode of the keyboard.</summary>
			/// <remarks>
			/// Mode of the keyboard. If the mode doesn't match the
			/// requested keyboard mode, the row will be skipped.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int keyboardMode = unchecked((int)(0x0101024d));

			/// <summary>Default KeyboardView style.</summary>
			/// <remarks>
			/// Default KeyboardView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int keyboardViewStyle = unchecked((int)(0x010103fc));

			/// <summary>
			/// This enum provides the same keycode values as can be found in
			/// <see cref="android.view.KeyEvent">android.view.KeyEvent</see>
			/// .
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>KEYCODE_UNKNOWN</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SOFT_LEFT</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SOFT_RIGHT</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>KEYCODE_HOME</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BACK</code></td><td>4</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CALL</code></td><td>5</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ENDCALL</code></td><td>6</td><td></td></tr>
			/// <tr><td><code>KEYCODE_0</code></td><td>7</td><td></td></tr>
			/// <tr><td><code>KEYCODE_1</code></td><td>8</td><td></td></tr>
			/// <tr><td><code>KEYCODE_2</code></td><td>9</td><td></td></tr>
			/// <tr><td><code>KEYCODE_3</code></td><td>10</td><td></td></tr>
			/// <tr><td><code>KEYCODE_4</code></td><td>11</td><td></td></tr>
			/// <tr><td><code>KEYCODE_5</code></td><td>12</td><td></td></tr>
			/// <tr><td><code>KEYCODE_6</code></td><td>13</td><td></td></tr>
			/// <tr><td><code>KEYCODE_7</code></td><td>14</td><td></td></tr>
			/// <tr><td><code>KEYCODE_8</code></td><td>15</td><td></td></tr>
			/// <tr><td><code>KEYCODE_9</code></td><td>16</td><td></td></tr>
			/// <tr><td><code>KEYCODE_STAR</code></td><td>17</td><td></td></tr>
			/// <tr><td><code>KEYCODE_POUND</code></td><td>18</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_UP</code></td><td>19</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_DOWN</code></td><td>20</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_LEFT</code></td><td>21</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_RIGHT</code></td><td>22</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_CENTER</code></td><td>23</td><td></td></tr>
			/// <tr><td><code>KEYCODE_VOLUME_UP</code></td><td>24</td><td></td></tr>
			/// <tr><td><code>KEYCODE_VOLUME_DOWN</code></td><td>25</td><td></td></tr>
			/// <tr><td><code>KEYCODE_POWER</code></td><td>26</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CAMERA</code></td><td>27</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CLEAR</code></td><td>28</td><td></td></tr>
			/// <tr><td><code>KEYCODE_A</code></td><td>29</td><td></td></tr>
			/// <tr><td><code>KEYCODE_B</code></td><td>30</td><td></td></tr>
			/// <tr><td><code>KEYCODE_C</code></td><td>31</td><td></td></tr>
			/// <tr><td><code>KEYCODE_D</code></td><td>32</td><td></td></tr>
			/// <tr><td><code>KEYCODE_E</code></td><td>33</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F</code></td><td>34</td><td></td></tr>
			/// <tr><td><code>KEYCODE_G</code></td><td>35</td><td></td></tr>
			/// <tr><td><code>KEYCODE_H</code></td><td>36</td><td></td></tr>
			/// <tr><td><code>KEYCODE_I</code></td><td>37</td><td></td></tr>
			/// <tr><td><code>KEYCODE_J</code></td><td>38</td><td></td></tr>
			/// <tr><td><code>KEYCODE_K</code></td><td>39</td><td></td></tr>
			/// <tr><td><code>KEYCODE_L</code></td><td>40</td><td></td></tr>
			/// <tr><td><code>KEYCODE_M</code></td><td>41</td><td></td></tr>
			/// <tr><td><code>KEYCODE_N</code></td><td>42</td><td></td></tr>
			/// <tr><td><code>KEYCODE_O</code></td><td>43</td><td></td></tr>
			/// <tr><td><code>KEYCODE_P</code></td><td>44</td><td></td></tr>
			/// <tr><td><code>KEYCODE_Q</code></td><td>45</td><td></td></tr>
			/// <tr><td><code>KEYCODE_R</code></td><td>46</td><td></td></tr>
			/// <tr><td><code>KEYCODE_S</code></td><td>47</td><td></td></tr>
			/// <tr><td><code>KEYCODE_T</code></td><td>48</td><td></td></tr>
			/// <tr><td><code>KEYCODE_U</code></td><td>49</td><td></td></tr>
			/// <tr><td><code>KEYCODE_V</code></td><td>50</td><td></td></tr>
			/// <tr><td><code>KEYCODE_W</code></td><td>51</td><td></td></tr>
			/// <tr><td><code>KEYCODE_X</code></td><td>52</td><td></td></tr>
			/// <tr><td><code>KEYCODE_Y</code></td><td>53</td><td></td></tr>
			/// <tr><td><code>KEYCODE_Z</code></td><td>54</td><td></td></tr>
			/// <tr><td><code>KEYCODE_COMMA</code></td><td>55</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PERIOD</code></td><td>56</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ALT_LEFT</code></td><td>57</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ALT_RIGHT</code></td><td>58</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SHIFT_LEFT</code></td><td>59</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SHIFT_RIGHT</code></td><td>60</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TAB</code></td><td>61</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SPACE</code></td><td>62</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SYM</code></td><td>63</td><td></td></tr>
			/// <tr><td><code>KEYCODE_EXPLORER</code></td><td>64</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ENVELOPE</code></td><td>65</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ENTER</code></td><td>66</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DEL</code></td><td>67</td><td></td></tr>
			/// <tr><td><code>KEYCODE_GRAVE</code></td><td>68</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MINUS</code></td><td>69</td><td></td></tr>
			/// <tr><td><code>KEYCODE_EQUALS</code></td><td>70</td><td></td></tr>
			/// <tr><td><code>KEYCODE_LEFT_BRACKET</code></td><td>71</td><td></td></tr>
			/// <tr><td><code>KEYCODE_RIGHT_BRACKET</code></td><td>72</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BACKSLASH</code></td><td>73</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SEMICOLON</code></td><td>74</td><td></td></tr>
			/// <tr><td><code>KEYCODE_APOSTROPHE</code></td><td>75</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SLASH</code></td><td>76</td><td></td></tr>
			/// <tr><td><code>KEYCODE_AT</code></td><td>77</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUM</code></td><td>78</td><td></td></tr>
			/// <tr><td><code>KEYCODE_HEADSETHOOK</code></td><td>79</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FOCUS</code></td><td>80</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PLUS</code></td><td>81</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MENU</code></td><td>82</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NOTIFICATION</code></td><td>83</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SEARCH</code></td><td>84</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PLAY_PAUSE</code></td><td>85</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_STOP</code></td><td>86</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_NEXT</code></td><td>87</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PREVIOUS</code></td><td>88</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_REWIND</code></td><td>89</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_FAST_FORWARD</code></td><td>90</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MUTE</code></td><td>91</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PAGE_UP</code></td><td>92</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PAGE_DOWN</code></td><td>93</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PICTSYMBOLS</code></td><td>94</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SWITCH_CHARSET</code></td><td>95</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_A</code></td><td>96</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_B</code></td><td>97</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_C</code></td><td>98</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_X</code></td><td>99</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_Y</code></td><td>100</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_Z</code></td><td>101</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_L1</code></td><td>102</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_R1</code></td><td>103</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_L2</code></td><td>104</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_R2</code></td><td>105</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_THUMBL</code></td><td>106</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_THUMBR</code></td><td>107</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_START</code></td><td>108</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_SELECT</code></td><td>109</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_MODE</code></td><td>110</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ESCAPE</code></td><td>111</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FORWARD_DEL</code></td><td>112</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CTRL_LEFT</code></td><td>113</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CTRL_RIGHT</code></td><td>114</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CAPS_LOCK</code></td><td>115</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SCROLL_LOCK</code></td><td>116</td><td></td></tr>
			/// <tr><td><code>KEYCODE_META_LEFT</code></td><td>117</td><td></td></tr>
			/// <tr><td><code>KEYCODE_META_RIGHT</code></td><td>118</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FUNCTION</code></td><td>119</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SYSRQ</code></td><td>120</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BREAK</code></td><td>121</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MOVE_HOME</code></td><td>122</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MOVE_END</code></td><td>123</td><td></td></tr>
			/// <tr><td><code>KEYCODE_INSERT</code></td><td>124</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FORWARD</code></td><td>125</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PLAY</code></td><td>126</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PAUSE</code></td><td>127</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_CLOSE</code></td><td>128</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_EJECT</code></td><td>129</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_RECORD</code></td><td>130</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F1</code></td><td>131</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F2</code></td><td>132</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F3</code></td><td>133</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F4</code></td><td>134</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F5</code></td><td>135</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F6</code></td><td>136</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F7</code></td><td>137</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F8</code></td><td>138</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F9</code></td><td>139</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F10</code></td><td>140</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F11</code></td><td>141</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F12</code></td><td>142</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUM_LOCK</code></td><td>143</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_0</code></td><td>144</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_1</code></td><td>145</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_2</code></td><td>146</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_3</code></td><td>147</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_4</code></td><td>148</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_5</code></td><td>149</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_6</code></td><td>150</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_7</code></td><td>151</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_8</code></td><td>152</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_9</code></td><td>153</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_DIVIDE</code></td><td>154</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_MULTIPLY</code></td><td>155</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_SUBTRACT</code></td><td>156</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_ADD</code></td><td>157</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_DOT</code></td><td>158</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_COMMA</code></td><td>159</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_ENTER</code></td><td>160</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_EQUALS</code></td><td>161</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_LEFT_PAREN</code></td><td>162</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_RIGHT_PAREN</code></td><td>163</td><td></td></tr>
			/// <tr><td><code>KEYCODE_VOLUME_MUTE</code></td><td>164</td><td></td></tr>
			/// <tr><td><code>KEYCODE_INFO</code></td><td>165</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CHANNEL_UP</code></td><td>166</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CHANNEL_DOWN</code></td><td>167</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ZOOM_IN</code></td><td>168</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ZOOM_OUT</code></td><td>169</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TV</code></td><td>170</td><td></td></tr>
			/// <tr><td><code>KEYCODE_WINDOW</code></td><td>171</td><td></td></tr>
			/// <tr><td><code>KEYCODE_GUIDE</code></td><td>172</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DVR</code></td><td>173</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BOOKMARK</code></td><td>174</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CAPTIONS</code></td><td>175</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SETTINGS</code></td><td>176</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TV_POWER</code></td><td>177</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TV_INPUT</code></td><td>178</td><td></td></tr>
			/// <tr><td><code>KEYCODE_STB_POWER</code></td><td>179</td><td></td></tr>
			/// <tr><td><code>KEYCODE_STB_INPUT</code></td><td>180</td><td></td></tr>
			/// <tr><td><code>KEYCODE_AVR_POWER</code></td><td>181</td><td></td></tr>
			/// <tr><td><code>KEYCODE_AVR_INPUT</code></td><td>182</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_GRED</code></td><td>183</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_GREEN</code></td><td>184</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_YELLOW</code></td><td>185</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_BLUE</code></td><td>186</td><td></td></tr>
			/// <tr><td><code>KEYCODE_APP_SWITCH</code></td><td>187</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_1</code></td><td>188</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_2</code></td><td>189</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_3</code></td><td>190</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_4</code></td><td>191</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_5</code></td><td>192</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_6</code></td><td>193</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_7</code></td><td>194</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_8</code></td><td>195</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_9</code></td><td>196</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_10</code></td><td>197</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_11</code></td><td>198</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_12</code></td><td>199</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_13</code></td><td>200</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_14</code></td><td>201</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_15</code></td><td>202</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_16</code></td><td>203</td><td></td></tr>
			/// <tr><td><code>KEYCODE_LANGUAGE_SWITCH</code></td><td>204</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MANNER_MODE</code></td><td>205</td><td></td></tr>
			/// <tr><td><code>KEYCODE_3D_MODE</code></td><td>206</td><td></td></tr>
			/// </table>
			/// </summary>
			public const int keycode = unchecked((int)(0x010100c5));

			/// <summary>
			/// Whether the application in question should be terminated after its
			/// settings have been restored during a full-system restore operation.
			/// </summary>
			/// <remarks>
			/// Whether the application in question should be terminated after its
			/// settings have been restored during a full-system restore operation.
			/// Single-package restore operations will never cause the application to
			/// be shut down.  Full-system restore operations typically only occur once,
			/// when the phone is first set up.  Third-party applications will not usually
			/// need to use this attribute.
			/// <p>The default is <code>true</code>, which means that after the application
			/// has finished processing its data during a full-system restore, it will be
			/// terminated.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int killAfterRestore = unchecked((int)(0x0101029c));

			/// <summary>A user-legible name for the given item.</summary>
			/// <remarks>
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// </remarks>
			public const int label = unchecked((int)(0x01010001));

			/// <summary>Size of the text for custom keys with some text and no icon.</summary>
			/// <remarks>
			/// Size of the text for custom keys with some text and no icon.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int labelTextSize = unchecked((int)(0x01010235));

			/// <summary>
			/// Request that your application's processes be created with
			/// a large Dalvik heap.
			/// </summary>
			/// <remarks>
			/// Request that your application's processes be created with
			/// a large Dalvik heap.  This applies to <em>all</em> processes
			/// created for the application.  It only applies to the first
			/// application loaded into a process; if using a sharedUserId
			/// to allow multiple applications to use a process, they all must
			/// use this option consistently or will get unpredictable results.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int largeHeap = unchecked((int)(0x0101035a));

			/// <summary>Indicates whether the application supports larger screen form-factors.</summary>
			/// <remarks>
			/// Indicates whether the application supports larger screen form-factors.
			/// A large screen is defined as a screen that is significantly larger
			/// than a normal phone screen, and thus may require some special care
			/// on the application's part to make good use of it.  An example would
			/// be a VGA <em>normal density</em> screen, though even larger screens
			/// are certainly possible.  An application that does not support
			/// large screens will be placed as a postage stamp on such a
			/// screen, so that it retains the dimensions it was originally
			/// designed for.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int largeScreens = unchecked((int)(0x01010286));

			/// <summary>
			/// Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the screens an application is
			/// compatible with.  This attribute provides the maximum
			/// "smallest screen width" (as per the -swNNNdp resource configuration)
			/// that the application can work well on.  If this value is smaller than
			/// the "smallest screen width" of the device it is running on, the
			/// application will be forced in to screen compatibility mode with
			/// no way for the user to turn it off. Currently the compatibility mode only
			/// emulates phone screens with a 320dp width, so compatibility mode is not applied if the
			/// value for largestWidthLimitDp is larger than 320.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int largestWidthLimitDp = unchecked((int)(0x01010366));

			/// <summary>Specify how an activity should be launched.</summary>
			/// <remarks>
			/// Specify how an activity should be launched.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/fundamentals/tasks-and-back-stack.html"&gt;Tasks and Back
			/// Stack</a> document for important information on how these options impact
			/// the behavior of your application.
			/// <p>If this attribute is not specified, <code>standard</code> launch
			/// mode will be used.  Note that the particular launch behavior can
			/// be changed in some ways at runtime through the
			/// <see cref="android.content.Intent">android.content.Intent</see>
			/// flags
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP">android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP
			/// 	</see>
			/// ,
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_NEW_TASK">android.content.Intent.FLAG_ACTIVITY_NEW_TASK
			/// 	</see>
			/// , and
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK">android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK
			/// 	</see>
			/// .
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>standard</code></td><td>0</td><td> The default mode, which will usually create a new instance of
			/// the activity when it is started, though this behavior may change
			/// with the introduction of other options such as
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_NEW_TASK">Intent.FLAG_ACTIVITY_NEW_TASK
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>singleTop</code></td><td>1</td><td> If, when starting the activity, there is already an
			/// instance of the same activity class in the foreground that is
			/// interacting with the user, then
			/// re-use that instance.  This existing instance will receive a call to
			/// <see cref="android.app.Activity.onNewIntent(android.content.Intent)">Activity.onNewIntent()
			/// 	</see>
			/// with
			/// the new Intent that is being started. </td></tr>
			/// <tr><td><code>singleTask</code></td><td>2</td><td> If, when starting the activity, there is already a task running
			/// that starts with this activity, then instead of starting a new
			/// instance the current task is brought to the front.  The existing
			/// instance will receive a call to
			/// <see cref="android.app.Activity.onNewIntent(android.content.Intent)">Activity.onNewIntent()
			/// 	</see>
			/// with the new Intent that is being started, and with the
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT">Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT
			/// 	</see>
			/// flag set.  This is a superset
			/// of the singleTop mode, where if there is already an instance
			/// of the activity being started at the top of the stack, it will
			/// receive the Intent as described there (without the
			/// FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/fundamentals/tasks-and-back-stack.html"&gt;Tasks and Back
			/// Stack</a> document for more details about tasks.</td></tr>
			/// <tr><td><code>singleInstance</code></td><td>3</td><td> Only allow one instance of this activity to ever be
			/// running.  This activity gets a unique task with only itself running
			/// in it; if it is ever launched again with the same Intent, then that
			/// task will be brought forward and its
			/// <see cref="android.app.Activity.onNewIntent(android.content.Intent)">Activity.onNewIntent()
			/// 	</see>
			/// method called.  If this
			/// activity tries to start a new activity, that new activity will be
			/// launched in a separate task.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/fundamentals/tasks-and-back-stack.html"&gt;Tasks and Back
			/// Stack</a> document for more details about tasks.</td></tr>
			/// </table>
			/// </remarks>
			public const int launchMode = unchecked((int)(0x0101001d));

			/// <summary>Specifies the type of layer backing this view.</summary>
			/// <remarks>
			/// Specifies the type of layer backing this view. The default value is none.
			/// Refer to
			/// <see cref="android.view.View.setLayerType(int, android.graphics.Paint)">android.view.View.setLayerType(int, android.graphics.Paint)
			/// 	</see>
			/// for more information.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Don't use a layer. </td></tr>
			/// <tr><td><code>software</code></td><td>1</td><td> Use a software layer. Refer to
			/// <see cref="android.view.View.setLayerType(int, android.graphics.Paint)">
			/// for
			/// more information. </td></tr>
			/// <tr><td><code>hardware</code></td><td>2</td><td> Use a hardware layer. Refer to
			/// </see>
			/// {
			/// <see cref="android.view.View.setLayerType(int, android.graphics.Paint)">
			/// for
			/// more information. </td></tr>
			/// </table>
			/// </see>
			/// </remarks>
			public const int layerType = unchecked((int)(0x01010354));

			/// <summary>
			/// Supply an identifier for the layout resource to inflate when the ViewStub
			/// becomes visible or when forced to do so.
			/// </summary>
			/// <remarks>
			/// Supply an identifier for the layout resource to inflate when the ViewStub
			/// becomes visible or when forced to do so. The layout resource must be a
			/// valid reference to a layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout = unchecked((int)(0x010100f2));

			/// <summary>Defines the layout animation to use the first time the ViewGroup is laid out.
			/// 	</summary>
			/// <remarks>
			/// Defines the layout animation to use the first time the ViewGroup is laid out.
			/// Layout animations can also be started manually after the first layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layoutAnimation = unchecked((int)(0x010100ec));

			/// <summary>Defines the direction of layout drawing.</summary>
			/// <remarks>
			/// Defines the direction of layout drawing. This typically is associated with writing
			/// direction of the language script used. The possible values are "ltr" for Left-to-Right,
			/// "rtl" for Right-to-Left, "locale" and "inherit" from parent view. If there is nothing
			/// to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
			/// used in "en-US". The default for this attribute is "inherit".
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>ltr</code></td><td>0</td><td> Left-to-Right </td></tr>
			/// <tr><td><code>rtl</code></td><td>1</td><td> Right-to-Left </td></tr>
			/// <tr><td><code>inherit</code></td><td>2</td><td> Inherit from parent </td></tr>
			/// <tr><td><code>locale</code></td><td>3</td><td> Locale </td></tr>
			/// </table>
			/// </remarks>
			public const int layoutDirection = unchecked((int)(0x010103df));

			/// <summary>Positions the bottom edge of this view above the given anchor view ID.</summary>
			/// <remarks>
			/// Positions the bottom edge of this view above the given anchor view ID.
			/// Accommodates bottom margin of this view and top margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_above = unchecked((int)(0x01010184));

			/// <summary>Positions the baseline of this view on the baseline of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Positions the baseline of this view on the baseline of the given anchor view ID.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_alignBaseline = unchecked((int)(0x01010186));

			/// <summary>Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
			/// Accommodates bottom margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_alignBottom = unchecked((int)(0x0101018a));

			/// <summary>Makes the left edge of this view match the left edge of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Makes the left edge of this view match the left edge of the given anchor view ID.
			/// Accommodates left margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_alignLeft = unchecked((int)(0x01010187));

			/// <summary>If true, makes the bottom edge of this view match the bottom edge of the parent.
			/// 	</summary>
			/// <remarks>
			/// If true, makes the bottom edge of this view match the bottom edge of the parent.
			/// Accommodates bottom margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_alignParentBottom = unchecked((int)(0x0101018e));

			/// <summary>If true, makes the left edge of this view match the left edge of the parent.
			/// 	</summary>
			/// <remarks>
			/// If true, makes the left edge of this view match the left edge of the parent.
			/// Accommodates left margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_alignParentLeft = unchecked((int)(0x0101018b));

			/// <summary>If true, makes the right edge of this view match the right edge of the parent.
			/// 	</summary>
			/// <remarks>
			/// If true, makes the right edge of this view match the right edge of the parent.
			/// Accommodates right margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_alignParentRight = unchecked((int)(0x0101018d));

			/// <summary>If true, makes the top edge of this view match the top edge of the parent.
			/// 	</summary>
			/// <remarks>
			/// If true, makes the top edge of this view match the top edge of the parent.
			/// Accommodates top margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_alignParentTop = unchecked((int)(0x0101018c));

			/// <summary>Makes the right edge of this view match the right edge of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Makes the right edge of this view match the right edge of the given anchor view ID.
			/// Accommodates right margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_alignRight = unchecked((int)(0x01010189));

			/// <summary>Makes the top edge of this view match the top edge of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Makes the top edge of this view match the top edge of the given anchor view ID.
			/// Accommodates top margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_alignTop = unchecked((int)(0x01010188));

			/// <summary>
			/// If set to true, the parent will be used as the anchor when the anchor cannot be
			/// be found for layout_toLeftOf, layout_toRightOf, etc.
			/// </summary>
			/// <remarks>
			/// If set to true, the parent will be used as the anchor when the anchor cannot be
			/// be found for layout_toLeftOf, layout_toRightOf, etc.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_alignWithParentIfMissing = unchecked((int)(0x01010192));

			/// <summary>Positions the top edge of this view below the given anchor view ID.</summary>
			/// <remarks>
			/// Positions the top edge of this view below the given anchor view ID.
			/// Accommodates top margin of this view and bottom margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_below = unchecked((int)(0x01010185));

			/// <summary>If true, centers this child horizontally within its parent.</summary>
			/// <remarks>
			/// If true, centers this child horizontally within its parent.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_centerHorizontal = unchecked((int)(0x01010190));

			/// <summary>If true, centers this child horizontally and vertically within its parent.
			/// 	</summary>
			/// <remarks>
			/// If true, centers this child horizontally and vertically within its parent.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_centerInParent = unchecked((int)(0x0101018f));

			/// <summary>If true, centers this child vertically within its parent.</summary>
			/// <remarks>
			/// If true, centers this child vertically within its parent.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_centerVertical = unchecked((int)(0x01010191));

			/// <summary>The index of the column in which this child should be.</summary>
			/// <remarks>
			/// The index of the column in which this child should be.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_column = unchecked((int)(0x0101014c));

			/// <summary>
			/// The column span: the difference between the right and left
			/// boundaries delimiting the group of cells occupied by this view.
			/// </summary>
			/// <remarks>
			/// The column span: the difference between the right and left
			/// boundaries delimiting the group of cells occupied by this view.
			/// The default is one.
			/// See
			/// <see cref="android.widget.GridLayout.Spec">android.widget.GridLayout.Spec</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_columnSpan = unchecked((int)(0x0101037d));

			/// <summary>Standard gravity constant that a child can supply to its parent.</summary>
			/// <remarks>
			/// Standard gravity constant that a child can supply to its parent.
			/// Defines how to place the view, both its x- and y-axis, within its parent view group.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// </remarks>
			public const int layout_gravity = unchecked((int)(0x010100b3));

			/// <summary>Specifies the basic height of the view.</summary>
			/// <remarks>
			/// Specifies the basic height of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant height or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// </remarks>
			public const int layout_height = unchecked((int)(0x010100f5));

			/// <summary>
			/// Specifies extra space on the left, top, right and bottom
			/// sides of this view.
			/// </summary>
			/// <remarks>
			/// Specifies extra space on the left, top, right and bottom
			/// sides of this view. This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_margin = unchecked((int)(0x010100f6));

			/// <summary>Specifies extra space on the bottom side of this view.</summary>
			/// <remarks>
			/// Specifies extra space on the bottom side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_marginBottom = unchecked((int)(0x010100fa));

			/// <summary>Specifies extra space on the end side of this view.</summary>
			/// <remarks>
			/// Specifies extra space on the end side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_marginEnd = unchecked((int)(0x010103e2));

			/// <summary>Specifies extra space on the left side of this view.</summary>
			/// <remarks>
			/// Specifies extra space on the left side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_marginLeft = unchecked((int)(0x010100f7));

			/// <summary>Specifies extra space on the right side of this view.</summary>
			/// <remarks>
			/// Specifies extra space on the right side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_marginRight = unchecked((int)(0x010100f9));

			/// <summary>Specifies extra space on the start side of this view.</summary>
			/// <remarks>
			/// Specifies extra space on the start side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_marginStart = unchecked((int)(0x010103e1));

			/// <summary>Specifies extra space on the top side of this view.</summary>
			/// <remarks>
			/// Specifies extra space on the top side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_marginTop = unchecked((int)(0x010100f8));

			/// <summary>Padding to use at the top of the prefs content.</summary>
			/// <remarks>
			/// Padding to use at the top of the prefs content.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_removeBorders = unchecked((int)(0x010103e9));

			/// <summary>
			/// The row boundary delimiting the top of the group of cells
			/// occupied by this view.
			/// </summary>
			/// <remarks>
			/// The row boundary delimiting the top of the group of cells
			/// occupied by this view.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_row = unchecked((int)(0x0101037b));

			/// <summary>
			/// The row span: the difference between the bottom and top
			/// boundaries delimiting the group of cells occupied by this view.
			/// </summary>
			/// <remarks>
			/// The row span: the difference between the bottom and top
			/// boundaries delimiting the group of cells occupied by this view.
			/// The default is one.
			/// See
			/// <see cref="android.widget.GridLayout.Spec">android.widget.GridLayout.Spec</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_rowSpan = unchecked((int)(0x0101037c));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_scale = unchecked((int)(0x01010193));

			/// <summary>Defines how many columns this child should span.</summary>
			/// <remarks>
			/// Defines how many columns this child should span.  Must be &gt;= 1.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_span = unchecked((int)(0x0101014d));

			/// <summary>Positions the right edge of this view to the left of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Positions the right edge of this view to the left of the given anchor view ID.
			/// Accommodates right margin of this view and left margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_toLeftOf = unchecked((int)(0x01010182));

			/// <summary>Positions the left edge of this view to the right of the given anchor view ID.
			/// 	</summary>
			/// <remarks>
			/// Positions the left edge of this view to the right of the given anchor view ID.
			/// Accommodates left margin of this view and right margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int layout_toRightOf = unchecked((int)(0x01010183));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_weight = unchecked((int)(0x01010181));

			/// <summary>Specifies the basic width of the view.</summary>
			/// <remarks>
			/// Specifies the basic width of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant width or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// </remarks>
			public const int layout_width = unchecked((int)(0x010100f4));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_x = unchecked((int)(0x0101017f));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int layout_y = unchecked((int)(0x01010180));

			/// <summary>Amount of left padding inside the gradient shape.</summary>
			/// <remarks>
			/// Amount of left padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int left = unchecked((int)(0x010101ad));

			/// <summary>Drawable to use for chevron animation on the left.</summary>
			/// <remarks>
			/// Drawable to use for chevron animation on the left. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int leftChevronDrawable = unchecked((int)(0x010103ff));

			/// <summary>Extra spacing between lines of text.</summary>
			/// <remarks>
			/// Extra spacing between lines of text.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int lineSpacingExtra = unchecked((int)(0x01010217));

			/// <summary>Extra spacing between lines of text, as a multiplier.</summary>
			/// <remarks>
			/// Extra spacing between lines of text, as a multiplier.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int lineSpacingMultiplier = unchecked((int)(0x01010218));

			/// <summary>Makes the TextView be exactly this many lines tall.</summary>
			/// <remarks>
			/// Makes the TextView be exactly this many lines tall.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int lines = unchecked((int)(0x01010154));

			/// <summary>
			/// If set to false, keeps the movement method from being set
			/// to the link movement method even if autoLink causes links
			/// to be found.
			/// </summary>
			/// <remarks>
			/// If set to false, keeps the movement method from being set
			/// to the link movement method even if autoLink causes links
			/// to be found.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int linksClickable = unchecked((int)(0x010100b1));

			/// <summary>Drawable used as a background for selected list items.</summary>
			/// <remarks>
			/// Drawable used as a background for selected list items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listChoiceBackgroundIndicator = unchecked((int)(0x010102f0));

			/// <summary>Drawable to use for multiple choice indicators.</summary>
			/// <remarks>
			/// Drawable to use for multiple choice indicators.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listChoiceIndicatorMultiple = unchecked((int)(0x0101021a));

			/// <summary>Drawable to use for single choice indicators.</summary>
			/// <remarks>
			/// Drawable to use for single choice indicators.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listChoiceIndicatorSingle = unchecked((int)(0x01010219));

			/// <summary>The drawable for the list divider.</summary>
			/// <remarks>
			/// The drawable for the list divider.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listDivider = unchecked((int)(0x01010214));

			/// <summary>The list divider used in alert dialogs.</summary>
			/// <remarks>
			/// The list divider used in alert dialogs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listDividerAlertDialog = unchecked((int)(0x01010305));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listItemLayout = unchecked((int)(0x010103da));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listLayout = unchecked((int)(0x010103d7));

			/// <summary>Default ListPopupWindow style.</summary>
			/// <remarks>
			/// Default ListPopupWindow style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listPopupWindowStyle = unchecked((int)(0x010102ff));

			/// <summary>The preferred list item height.</summary>
			/// <remarks>
			/// The preferred list item height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int listPreferredItemHeight = unchecked((int)(0x0101004d));

			/// <summary>A larger, more robust list item height.</summary>
			/// <remarks>
			/// A larger, more robust list item height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int listPreferredItemHeightLarge = unchecked((int)(0x01010386));

			/// <summary>A smaller, sleeker list item height.</summary>
			/// <remarks>
			/// A smaller, sleeker list item height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int listPreferredItemHeightSmall = unchecked((int)(0x01010387));

			/// <summary>The preferred padding along the left edge of list items.</summary>
			/// <remarks>
			/// The preferred padding along the left edge of list items.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int listPreferredItemPaddingLeft = unchecked((int)(0x010103a3));

			/// <summary>The preferred padding along the right edge of list items.</summary>
			/// <remarks>
			/// The preferred padding along the right edge of list items.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int listPreferredItemPaddingRight = unchecked((int)(0x010103a4));

			/// <summary>Drawable used to indicate the currently selected item in the list.</summary>
			/// <remarks>
			/// Drawable used to indicate the currently selected item in the list.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int listSelector = unchecked((int)(0x010100fb));

			/// <summary>TextView style for list separators.</summary>
			/// <remarks>
			/// TextView style for list separators.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listSeparatorTextViewStyle = unchecked((int)(0x01010208));

			/// <summary>Default ListView style.</summary>
			/// <remarks>
			/// Default ListView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listViewStyle = unchecked((int)(0x01010074));

			/// <summary>ListView with white background.</summary>
			/// <remarks>
			/// ListView with white background.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int listViewWhiteStyle = unchecked((int)(0x01010075));

			/// <summary>
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item.
			/// </summary>
			/// <remarks>
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int logo = unchecked((int)(0x010102be));

			/// <summary>Defines whether this view reacts to long click events.</summary>
			/// <remarks>
			/// Defines whether this view reacts to long click events.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int longClickable = unchecked((int)(0x010100e6));

			/// <summary>
			/// Defines whether the animator loops to the first view once it
			/// has reached the end of the list.
			/// </summary>
			/// <remarks>
			/// Defines whether the animator loops to the first view once it
			/// has reached the end of the list.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int loopViews = unchecked((int)(0x01010307));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int majorWeightMax = unchecked((int)(0x010103f3));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int majorWeightMin = unchecked((int)(0x010103f1));

			/// <summary>
			/// Name of the activity to be launched to manage application's space on
			/// device.
			/// </summary>
			/// <remarks>
			/// Name of the activity to be launched to manage application's space on
			/// device. The specified activity gets automatically launched when the
			/// application's space needs to be managed and is usually invoked
			/// through user actions. Applications can thus provide their own custom
			/// behavior for managing space for various scenarios like out of memory
			/// conditions. This is an optional attribute and
			/// applications can choose not to specify a default activity to
			/// manage space.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int manageSpaceActivity = unchecked((int)(0x01010004));

			/// <summary>Default MapView style.</summary>
			/// <remarks>
			/// Default MapView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int mapViewStyle = unchecked((int)(0x0101008a));

			/// <summary>The number of times to repeat the marquee animation.</summary>
			/// <remarks>
			/// The number of times to repeat the marquee animation. Only applied if the
			/// TextView has marquee enabled.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>marquee_forever</code></td><td>-1</td><td> Indicates that marquee should repeat indefinitely. </td></tr>
			/// </table>
			/// </remarks>
			public const int marqueeRepeatLimit = unchecked((int)(0x0101021d));

			/// <summary>Defines the maximum value the progress can take.</summary>
			/// <remarks>
			/// Defines the maximum value the progress can take.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int max = unchecked((int)(0x01010136));

			/// <summary>The minimal date shown by this calendar view in mm/dd/yyyy format.</summary>
			/// <remarks>
			/// The minimal date shown by this calendar view in mm/dd/yyyy format.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxDate = unchecked((int)(0x01010340));

			/// <summary>Makes the TextView be at most this many ems wide.</summary>
			/// <remarks>
			/// Makes the TextView be at most this many ems wide.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxEms = unchecked((int)(0x01010157));

			/// <summary>
			/// maximum file size for the volume in megabytes, zero or unspecified if it is unbounded
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// </summary>
			/// <remarks>
			/// maximum file size for the volume in megabytes, zero or unspecified if it is unbounded
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxFileSize = unchecked((int)(0x0101041a));

			/// <summary>An optional argument to supply a maximum height for this view.</summary>
			/// <remarks>
			/// An optional argument to supply a maximum height for this view.
			/// See {see android.widget.ImageView#setMaxHeight} for details.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxHeight = unchecked((int)(0x01010120));

			/// <summary>Defines the maximum number of items to show.</summary>
			/// <remarks>
			/// Defines the maximum number of items to show.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxItems = unchecked((int)(0x010103eb));

			/// <summary>Defines the maximum number of items per row.</summary>
			/// <remarks>
			/// Defines the maximum number of items per row.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxItemsPerRow = unchecked((int)(0x01010134));

			/// <summary>
			/// Set an input filter to constrain the text length to the
			/// specified number.
			/// </summary>
			/// <remarks>
			/// Set an input filter to constrain the text length to the
			/// specified number.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxLength = unchecked((int)(0x01010160));

			/// <summary>The maximum level allowed for this item.</summary>
			/// <remarks>
			/// The maximum level allowed for this item.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxLevel = unchecked((int)(0x010101b2));

			/// <summary>Makes the TextView be at most this many lines tall.</summary>
			/// <remarks>
			/// Makes the TextView be at most this many lines tall.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxLines = unchecked((int)(0x01010153));

			/// <summary>Defines the maximum number of rows displayed.</summary>
			/// <remarks>
			/// Defines the maximum number of rows displayed.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxRows = unchecked((int)(0x01010133));

			/// <summary>
			/// This is the maximum SDK version number that an application works
			/// on.
			/// </summary>
			/// <remarks>
			/// This is the maximum SDK version number that an application works
			/// on.  You can use this to ensure your application is filtered out
			/// of later versions of the platform when you know you have
			/// incompatibility with them.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxSdkVersion = unchecked((int)(0x01010271));

			/// <summary>An optional argument to supply a maximum width for this view.</summary>
			/// <remarks>
			/// An optional argument to supply a maximum width for this view.
			/// See {see android.widget.ImageView#setMaxWidth} for details.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int maxWidth = unchecked((int)(0x0101011f));

			/// <summary>
			/// Determines whether to measure all children or just those in
			/// the VISIBLE or INVISIBLE state when measuring.
			/// </summary>
			/// <remarks>
			/// Determines whether to measure all children or just those in
			/// the VISIBLE or INVISIBLE state when measuring. Defaults to false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int measureAllChildren = unchecked((int)(0x0101010a));

			/// <summary>
			/// When set to true, all children with a weight will be considered having
			/// the minimum size of the largest child.
			/// </summary>
			/// <remarks>
			/// When set to true, all children with a weight will be considered having
			/// the minimum size of the largest child. If false, all children are
			/// measured normally.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int measureWithLargestChild = unchecked((int)(0x010102d4));

			/// <summary>The category applied to all items within this group.</summary>
			/// <remarks>
			/// The category applied to all items within this group.
			/// (This will be or'ed with the orderInCategory attribute.)
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>container</code></td><td>0x00010000</td><td> Items are part of a container. </td></tr>
			/// <tr><td><code>system</code></td><td>0x00020000</td><td> Items are provided by the system. </td></tr>
			/// <tr><td><code>secondary</code></td><td>0x00030000</td><td> Items are user-supplied secondary (infrequently used). </td></tr>
			/// <tr><td><code>alternative</code></td><td>0x00040000</td><td> Items are alternative actions. </td></tr>
			/// </table>
			/// </remarks>
			public const int menuCategory = unchecked((int)(0x010101de));

			/// <summary>
			/// Specify a MIME type that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataType(string)">IntentFilter.addDataType()
			/// 	</see>
			/// .
			/// <p><em>Note: MIME type matching in the Android framework is
			/// case-sensitive, unlike formal RFC MIME types.  As a result,
			/// MIME types here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int mimeType = unchecked((int)(0x01010026));

			/// <summary>The minimal date shown by this calendar view in mm/dd/yyyy format.</summary>
			/// <remarks>
			/// The minimal date shown by this calendar view in mm/dd/yyyy format.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minDate = unchecked((int)(0x0101033f));

			/// <summary>Makes the TextView be at least this many ems wide.</summary>
			/// <remarks>
			/// Makes the TextView be at least this many ems wide.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minEms = unchecked((int)(0x0101015a));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minHeight = unchecked((int)(0x01010140));

			/// <summary>The minimum level allowed for this item.</summary>
			/// <remarks>
			/// The minimum level allowed for this item.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minLevel = unchecked((int)(0x010101b1));

			/// <summary>Makes the TextView be at least this many lines tall.</summary>
			/// <remarks>
			/// Makes the TextView be at least this many lines tall.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minLines = unchecked((int)(0x01010156));

			/// <summary>Minimum height that the AppWidget can be resized to.</summary>
			/// <remarks>
			/// Minimum height that the AppWidget can be resized to.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minResizeHeight = unchecked((int)(0x01010396));

			/// <summary>Minimum width that the AppWidget can be resized to.</summary>
			/// <remarks>
			/// Minimum width that the AppWidget can be resized to.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minResizeWidth = unchecked((int)(0x01010395));

			/// <summary>
			/// This is the minimum SDK version number that the application
			/// requires.
			/// </summary>
			/// <remarks>
			/// This is the minimum SDK version number that the application
			/// requires.  This number is an abstract integer, from the list
			/// in
			/// <see cref="android.os.Build.VERSION_CODES">android.os.Build.VERSION_CODES</see>
			/// If
			/// not supplied, the application will work on any SDK.  This
			/// may also be string (such as "Donut") if the application was built
			/// against a development branch, in which case it will only work against
			/// the development builds.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minSdkVersion = unchecked((int)(0x0101020c));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minWidth = unchecked((int)(0x0101013f));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minorWeightMax = unchecked((int)(0x010103f4));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int minorWeightMin = unchecked((int)(0x010103f2));

			/// <summary>
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>oneLine</code></td><td>1</td><td> Always show only the first line.
			/// </summary>
			/// <remarks>
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>oneLine</code></td><td>1</td><td> Always show only the first line. </td></tr>
			/// <tr><td><code>collapsing</code></td><td>2</td><td> When selected show both lines, otherwise show only the first line.
			/// This is the default mode. </td></tr>
			/// <tr><td><code>twoLine</code></td><td>3</td><td> Always show both lines. </td></tr>
			/// </table>
			/// </remarks>
			public const int mode = unchecked((int)(0x0101017e));

			/// <summary>'More' icon.</summary>
			/// <remarks>
			/// 'More' icon.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int moreIcon = unchecked((int)(0x01010135));

			/// <summary>
			/// path to mount point for the storage
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// </summary>
			/// <remarks>
			/// path to mount point for the storage
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int mountPoint = unchecked((int)(0x01010413));

			/// <summary>
			/// number of megabytes of storage MTP should reserve for free storage
			/// (used for emulated storage that is shared with system's data partition)
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// </summary>
			/// <remarks>
			/// number of megabytes of storage MTP should reserve for free storage
			/// (used for emulated storage that is shared with system's data partition)
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int mtpReserve = unchecked((int)(0x01010418));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int multiChoiceItemLayout = unchecked((int)(0x010103d8));

			/// <summary>
			/// Specify whether a component is allowed to have multiple instances
			/// of itself running in different processes.
			/// </summary>
			/// <remarks>
			/// Specify whether a component is allowed to have multiple instances
			/// of itself running in different processes.  Use with the activity
			/// and provider tags.
			/// <p>Normally the system will ensure that all instances of a particular
			/// component are only running in a single process.  You can use this
			/// attribute to disable that behavior, allowing the system to create
			/// instances wherever they are used (provided permissions allow it).
			/// This is most often used with content providers, so that instances
			/// of a provider can be created in each client process, allowing them
			/// to be used without performing IPC.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int multiprocess = unchecked((int)(0x01010013));

			/// <summary>A unique name for the given item.</summary>
			/// <remarks>
			/// A unique name for the given item.  This must use a Java-style naming
			/// convention to ensure the name is unique, for example
			/// "com.mycompany.MyName".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int name = unchecked((int)(0x01010003));

			/// <summary>The type of navigation to use.</summary>
			/// <remarks>
			/// The type of navigation to use.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> Normal static title text </td></tr>
			/// <tr><td><code>listMode</code></td><td>1</td><td> The action bar will use a selection list for navigation. </td></tr>
			/// <tr><td><code>tabMode</code></td><td>2</td><td> The action bar will use a series of horizontal tabs for navigation. </td></tr>
			/// </table>
			/// </remarks>
			public const int navigationMode = unchecked((int)(0x010102cf));

			/// <summary>The negative button text for the dialog.</summary>
			/// <remarks>
			/// The negative button text for the dialog. Set to @null to hide the negative button.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int negativeButtonText = unchecked((int)(0x010101f6));

			/// <summary>
			/// Option to let applications specify that user data should
			/// never be encrypted if an Encrypted File System solution
			/// is enabled.
			/// </summary>
			/// <remarks>
			/// Option to let applications specify that user data should
			/// never be encrypted if an Encrypted File System solution
			/// is enabled. Specifically, this is an "opt-out" feature, meaning
			/// that, by default, user data will be encrypted if the EFS feature
			/// is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int neverEncrypt = unchecked((int)(0x0101041b));

			/// <summary>
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_DOWN">android.view.View.FOCUS_DOWN</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int nextFocusDown = unchecked((int)(0x010100e4));

			/// <summary>
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_FORWARD">android.view.View.FOCUS_FORWARD</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int nextFocusForward = unchecked((int)(0x0101033c));

			/// <summary>
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_LEFT">android.view.View.FOCUS_LEFT</see>
			/// .
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int nextFocusLeft = unchecked((int)(0x010100e1));

			/// <summary>
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_RIGHT">android.view.View.FOCUS_RIGHT</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int nextFocusRight = unchecked((int)(0x010100e2));

			/// <summary>
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_UP">android.view.View.FOCUS_UP</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int nextFocusUp = unchecked((int)(0x010100e3));

			/// <summary>Specify whether an activity should be kept in its history stack.</summary>
			/// <remarks>
			/// Specify whether an activity should be kept in its history stack.
			/// If this attribute is set, then as soon as the user navigates away
			/// from the activity it will be finished and they will no longer be
			/// able to return to it.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int noHistory = unchecked((int)(0x0101022d));

			/// <summary>
			/// Indicates whether an application supports the normal screen
			/// form-factors.
			/// </summary>
			/// <remarks>
			/// Indicates whether an application supports the normal screen
			/// form-factors.  Traditionally this is an HVGA normal density
			/// screen, but WQVGA low density and WVGA high density are also
			/// considered to be normal.  This attribute is true by default,
			/// and applications currently should leave it that way.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int normalScreens = unchecked((int)(0x01010285));

			/// <summary>
			/// The minimal period in milliseconds between two accessibility events of the same type
			/// are sent to this serivce.
			/// </summary>
			/// <remarks>
			/// The minimal period in milliseconds between two accessibility events of the same type
			/// are sent to this serivce. This setting can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int notificationTimeout = unchecked((int)(0x01010383));

			/// <summary>Defines how many columns to show.</summary>
			/// <remarks>
			/// Defines how many columns to show.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>auto_fit</code></td><td>-1</td><td> Display as many columns as possible to fill the available space. </td></tr>
			/// </table>
			/// </remarks>
			public const int numColumns = unchecked((int)(0x01010118));

			/// <summary>The number of stars (or rating items) to show.</summary>
			/// <remarks>
			/// The number of stars (or rating items) to show.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int numStars = unchecked((int)(0x01010144));

			/// <summary>NumberPicker down button style.</summary>
			/// <remarks>
			/// NumberPicker down button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int numberPickerDownButtonStyle = unchecked((int)(0x010103bc));

			/// <summary>NumberPicker input text style.</summary>
			/// <remarks>
			/// NumberPicker input text style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int numberPickerInputTextStyle = unchecked((int)(0x010103bd));

			/// <summary>NumberPicker style.</summary>
			/// <remarks>
			/// NumberPicker style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int numberPickerStyle = unchecked((int)(0x010103ba));

			/// <summary>NumberPicker up button style.</summary>
			/// <remarks>
			/// NumberPicker up button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int numberPickerUpButtonStyle = unchecked((int)(0x010103bb));

			/// <summary>If set, specifies that this TextView has a numeric input method.</summary>
			/// <remarks>
			/// If set, specifies that this TextView has a numeric input method.
			/// The default is false.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>integer</code></td><td>0x01</td><td> Input is numeric. </td></tr>
			/// <tr><td><code>signed</code></td><td>0x003</td><td> Input is numeric, with sign allowed. </td></tr>
			/// <tr><td><code>decimal</code></td><td>0x05</td><td> Input is numeric, with decimals allowed. </td></tr>
			/// </table>
			/// </remarks>
			[System.Obsolete]
			public const int numeric = unchecked((int)(0x01010165));

			/// <summary>The numeric shortcut key.</summary>
			/// <remarks>
			/// The numeric shortcut key.  This is the shortcut when using a numeric (e.g., 12-key)
			/// keyboard.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int numericShortcut = unchecked((int)(0x010101e4));

			/// <summary>
			/// Name of the method in this View's context to invoke when the view is
			/// clicked.
			/// </summary>
			/// <remarks>
			/// Name of the method in this View's context to invoke when the view is
			/// clicked. This name must correspond to a public method that takes
			/// exactly one parameter of type View. For instance, if you specify
			/// <code>android:onClick="sayHello"</code>, you must declare a
			/// <code>public void sayHello(View v)</code> method of your context
			/// (typically, your Activity).
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int onClick = unchecked((int)(0x0101026f));

			/// <summary>
			/// If true, the animation will only run a single time and then
			/// stop.
			/// </summary>
			/// <remarks>
			/// If true, the animation will only run a single time and then
			/// stop.  If false (the default), it will continually run,
			/// restarting at the first frame after the last has finished.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int oneshot = unchecked((int)(0x01010197));

			/// <summary>Indicates the opacity of the layer.</summary>
			/// <remarks>
			/// Indicates the opacity of the layer. This can be useful to allow the
			/// system to enable drawing optimizations. The default value is
			/// translucent.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>opaque</code></td><td>-1</td><td> Indicates that the layer is opaque and contains no transparent
			/// nor translucent pixels. </td></tr>
			/// <tr><td><code>transparent</code></td><td>-2</td><td> The layer is completely transparent (no pixel will be drawn.) </td></tr>
			/// <tr><td><code>translucent</code></td><td>-3</td><td> The layer has translucent pixels. </td></tr>
			/// </table>
			/// </remarks>
			public const int opacity = unchecked((int)(0x0101031e));

			/// <summary>The order for the Preference (lower values are to be ordered first).</summary>
			/// <remarks>
			/// The order for the Preference (lower values are to be ordered first). If this is not
			/// specified, the default orderin will be alphabetic.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int order = unchecked((int)(0x010101ea));

			/// <summary>The order within the category applied to all items within this group.</summary>
			/// <remarks>
			/// The order within the category applied to all items within this group.
			/// (This will be or'ed with the category attribute.)
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int orderInCategory = unchecked((int)(0x010101df));

			/// <summary>Name of the property being animated.</summary>
			/// <remarks>
			/// Name of the property being animated.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>together</code></td><td>0</td><td> child animations should be played together. </td></tr>
			/// <tr><td><code>sequentially</code></td><td>1</td><td> child animations should be played sequentially, in the same order as the xml. </td></tr>
			/// </table>
			/// </remarks>
			public const int ordering = unchecked((int)(0x010102e2));

			/// <summary>Whether to order the Preference under this group as they appear in the XML file.
			/// 	</summary>
			/// <remarks>
			/// Whether to order the Preference under this group as they appear in the XML file.
			/// If this is false, the ordering will follow the Preference order attribute and
			/// default to alphabetic for those without the order attribute.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int orderingFromXml = unchecked((int)(0x010101e7));

			/// <summary>Standard orientation constant.</summary>
			/// <remarks>
			/// Standard orientation constant.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// </remarks>
			public const int orientation = unchecked((int)(0x010100c4));

			/// <summary>Identifier for the animation to use when a view is hidden.</summary>
			/// <remarks>
			/// Identifier for the animation to use when a view is hidden.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int outAnimation = unchecked((int)(0x01010178));

			/// <summary>Outer radius of target circle.</summary>
			/// <remarks>
			/// Outer radius of target circle. Icons will be drawn on this circle.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int outerRadius = unchecked((int)(0x01010404));

			/// <summary>Drawable to draw below list content.</summary>
			/// <remarks>
			/// Drawable to draw below list content.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int overScrollFooter = unchecked((int)(0x010102c3));

			/// <summary>Drawable to draw above list content.</summary>
			/// <remarks>
			/// Drawable to draw above list content.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int overScrollHeader = unchecked((int)(0x010102c2));

			/// <summary>Defines over-scrolling behavior.</summary>
			/// <remarks>
			/// Defines over-scrolling behavior. This property is used only if the
			/// View is scrollable. Over-scrolling is the ability for the user to
			/// receive feedback when attempting to scroll beyond meaningful content.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>always</code></td><td>0</td><td> Always show over-scroll effects, even if the content fits entirely
			/// within the available space. </td></tr>
			/// <tr><td><code>ifContentScrolls</code></td><td>1</td><td> Only show over-scroll effects if the content is large
			/// enough to meaningfully scroll. </td></tr>
			/// <tr><td><code>never</code></td><td>2</td><td> Never show over-scroll effects. </td></tr>
			/// </table>
			/// </remarks>
			public const int overScrollMode = unchecked((int)(0x010102c1));

			/// <summary>
			/// Set true when this subtype should be selected by default if no other subtypes are
			/// selected explicitly.
			/// </summary>
			/// <remarks>
			/// Set true when this subtype should be selected by default if no other subtypes are
			/// selected explicitly. Note that a subtype with this parameter being true will
			/// not be shown in the subtypes list.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int overridesImplicitlyEnabledSubtype = unchecked((int)(0x010103a2));

			/// <summary>Comma separated package names from which this serivce would like to receive events (leave out for all packages).
			/// 	</summary>
			/// <remarks>
			/// Comma separated package names from which this serivce would like to receive events (leave out for all packages).
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int packageNames = unchecked((int)(0x01010381));

			/// <summary>Sets the padding, in pixels, of all four edges.</summary>
			/// <remarks>
			/// Sets the padding, in pixels, of all four edges.  Padding is defined as
			/// space between the edges of the view and the view's content. A views size
			/// will include it's padding.  If a
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// is provided, the padding will initially be set to that (0 if the
			/// drawable does not have padding).  Explicitly setting a padding value
			/// will override the corresponding padding found in the background.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int padding = unchecked((int)(0x010100d5));

			/// <summary>
			/// Sets the padding, in pixels, of the bottom edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int paddingBottom = unchecked((int)(0x010100d9));

			/// <summary>
			/// Sets the padding, in pixels, of the end edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int paddingEnd = unchecked((int)(0x010103de));

			/// <summary>
			/// Sets the padding, in pixels, of the left edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int paddingLeft = unchecked((int)(0x010100d6));

			/// <summary>
			/// Sets the padding, in pixels, of the right edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int paddingRight = unchecked((int)(0x010100d8));

			/// <summary>
			/// Sets the padding, in pixels, of the start edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int paddingStart = unchecked((int)(0x010103dd));

			/// <summary>
			/// Sets the padding, in pixels, of the top edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int paddingTop = unchecked((int)(0x010100d7));

			/// <summary>The background of a panel when it is inset from the left and right edges of the screen.
			/// 	</summary>
			/// <remarks>
			/// The background of a panel when it is inset from the left and right edges of the screen.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int panelBackground = unchecked((int)(0x0101005e));

			/// <summary>Color that matches (as closely as possible) the panel background.</summary>
			/// <remarks>
			/// Color that matches (as closely as possible) the panel background.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int panelColorBackground = unchecked((int)(0x01010061));

			/// <summary>Default color of foreground panel imagery.</summary>
			/// <remarks>
			/// Default color of foreground panel imagery.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int panelColorForeground = unchecked((int)(0x01010060));

			/// <summary>The background of a panel when it extends to the left and right edges of the screen.
			/// 	</summary>
			/// <remarks>
			/// The background of a panel when it extends to the left and right edges of the screen.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int panelFullBackground = unchecked((int)(0x0101005f));

			/// <summary><p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int panelMenuIsCompact = unchecked((int)(0x010103b4));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int panelMenuListTheme = unchecked((int)(0x010103b6));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int panelMenuListWidth = unchecked((int)(0x010103b5));

			/// <summary>Default appearance of panel text.</summary>
			/// <remarks>
			/// Default appearance of panel text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int panelTextAppearance = unchecked((int)(0x01010062));

			/// <summary>
			/// Whether the characters of the field are displayed as
			/// password dots instead of themselves.
			/// </summary>
			/// <remarks>
			/// Whether the characters of the field are displayed as
			/// password dots instead of themselves.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int password = unchecked((int)(0x0101015c));

			/// <summary>
			/// Specify a URI path that must exactly match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int path = unchecked((int)(0x0101002a));

			/// <summary>
			/// Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .
			/// Note that because '\' is used as an escape character when
			/// reading the string from XML (before it is parsed as a pattern),
			/// you will need to double-escape: for example a literal "*" would
			/// be written as "\\*" and a literal "\" would be written as
			/// "\\\\".  This is basically the same as what you would need to
			/// write if constructing the string in Java code.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int pathPattern = unchecked((int)(0x0101002c));

			/// <summary>
			/// Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int pathPrefix = unchecked((int)(0x0101002b));

			/// <summary>
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.
			/// </summary>
			/// <remarks>
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int permission = unchecked((int)(0x01010006));

			/// <summary>
			/// Specified the name of a group that this permission is associated
			/// with.
			/// </summary>
			/// <remarks>
			/// Specified the name of a group that this permission is associated
			/// with.  The group must have been defined with the
			/// <see cref="android.R.styleable.AndroidManifestPermissionGroup">permission-group</see>
			/// tag.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int permissionGroup = unchecked((int)(0x0101000a));

			/// <summary>Flag to control special persistent mode of an application.</summary>
			/// <remarks>
			/// Flag to control special persistent mode of an application.  This should
			/// not normally be used by applications; it requires that the system keep
			/// your application running at all times.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int persistent = unchecked((int)(0x0101000d));

			/// <summary>Defines the persistence of the drawing cache.</summary>
			/// <remarks>
			/// Defines the persistence of the drawing cache. The drawing cache might be
			/// enabled by a ViewGroup for all its children in specific situations (for
			/// instance during a scrolling.) This property lets you persist the cache
			/// in memory after its initial usage. Persisting the cache consumes more
			/// memory but may prevent frequent garbage collection is the cache is created
			/// over and over again. By default the persistence is set to scrolling.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x0</td><td> The drawing cache is not persisted after use. </td></tr>
			/// <tr><td><code>animation</code></td><td>0x1</td><td> The drawing cache is persisted after a layout animation. </td></tr>
			/// <tr><td><code>scrolling</code></td><td>0x2</td><td> The drawing cache is persisted after a scroll. </td></tr>
			/// <tr><td><code>all</code></td><td>0x3</td><td> The drawing cache is always persisted. </td></tr>
			/// </table>
			/// </remarks>
			public const int persistentDrawingCache = unchecked((int)(0x010100ee));

			/// <summary>
			/// If set, specifies that this TextView has a phone number input
			/// method.
			/// </summary>
			/// <remarks>
			/// If set, specifies that this TextView has a phone number input
			/// method. The default is false.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int phoneNumber = unchecked((int)(0x01010167));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int pivotX = unchecked((int)(0x010101b5));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int pivotY = unchecked((int)(0x010101b6));

			/// <summary>
			/// Reference to a pointer icon drawable with STYLE_ARROW
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Reference to a pointer icon drawable with STYLE_ARROW
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int pointerIconArrow = unchecked((int)(0x0101040c));

			/// <summary>
			/// Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int pointerIconSpotAnchor = unchecked((int)(0x0101040f));

			/// <summary>
			/// Reference to a pointer icon drawable with STYLE_SPOT_HOVER
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Reference to a pointer icon drawable with STYLE_SPOT_HOVER
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int pointerIconSpotHover = unchecked((int)(0x0101040d));

			/// <summary>
			/// Reference to a pointer icon drawable with STYLE_SPOT_TOUCH
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Reference to a pointer icon drawable with STYLE_SPOT_TOUCH
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int pointerIconSpotTouch = unchecked((int)(0x0101040e));

			/// <summary>
			/// Reference to the Pointer style
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Reference to the Pointer style
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int pointerStyle = unchecked((int)(0x010103d6));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int popupAnimationStyle = unchecked((int)(0x010102c9));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int popupBackground = unchecked((int)(0x01010176));

			/// <summary>The characters to display in the popup keyboard.</summary>
			/// <remarks>
			/// The characters to display in the popup keyboard.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int popupCharacters = unchecked((int)(0x01010244));

			/// <summary>The XML keyboard layout of any popup keyboard.</summary>
			/// <remarks>
			/// The XML keyboard layout of any popup keyboard.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int popupKeyboard = unchecked((int)(0x01010243));

			/// <summary>Layout resource for popup keyboards.</summary>
			/// <remarks>
			/// Layout resource for popup keyboards.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int popupLayout = unchecked((int)(0x0101023b));

			/// <summary>Default PopupMenu style.</summary>
			/// <remarks>
			/// Default PopupMenu style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int popupMenuStyle = unchecked((int)(0x01010300));

			/// <summary>
			/// Reference to a layout to use for displaying a prompt in the dropdown for
			/// spinnerMode="dropdown".
			/// </summary>
			/// <remarks>
			/// Reference to a layout to use for displaying a prompt in the dropdown for
			/// spinnerMode="dropdown". This layout must contain a TextView with the id
			/// </remarks>
			/// <android>
			/// :id/text1 to be populated with the prompt text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </android>
			public const int popupPromptView = unchecked((int)(0x010103ef));

			/// <summary>Default PopupWindow style.</summary>
			/// <remarks>
			/// Default PopupWindow style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int popupWindowStyle = unchecked((int)(0x01010076));

			/// <summary>
			/// Specify a URI authority port that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataAuthority(string, string)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// .  If a host is supplied
			/// but not a port, any port is matched.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int port = unchecked((int)(0x01010029));

			/// <summary>The positive button text for the dialog.</summary>
			/// <remarks>
			/// The positive button text for the dialog. Set to @null to hide the positive button.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int positiveButtonText = unchecked((int)(0x010101f5));

			/// <summary>Default style for PreferenceCategory.</summary>
			/// <remarks>
			/// Default style for PreferenceCategory.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceCategoryStyle = unchecked((int)(0x0101008c));

			/// <summary>Default style for Headers pane in PreferenceActivity.</summary>
			/// <remarks>
			/// Default style for Headers pane in PreferenceActivity.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceFragmentStyle = unchecked((int)(0x010103c4));

			/// <summary>Preference frame layout styles.</summary>
			/// <remarks>
			/// Preference frame layout styles.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceFrameLayoutStyle = unchecked((int)(0x010103d4));

			/// <summary>Default style for informational Preference.</summary>
			/// <remarks>
			/// Default style for informational Preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceInformationStyle = unchecked((int)(0x0101008d));

			/// <summary>The preference layout that has the child/tabbed effect.</summary>
			/// <remarks>
			/// The preference layout that has the child/tabbed effect.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceLayoutChild = unchecked((int)(0x01010094));

			/// <summary>
			/// Preference panel style
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Preference panel style
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferencePanelStyle = unchecked((int)(0x010103c5));

			/// <summary>Default style for PreferenceScreen.</summary>
			/// <remarks>
			/// Default style for PreferenceScreen.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceScreenStyle = unchecked((int)(0x0101008b));

			/// <summary>Default style for Preference.</summary>
			/// <remarks>
			/// Default style for Preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int preferenceStyle = unchecked((int)(0x0101008e));

			/// <summary>Whether space should be reserved in layout when an icon is missing.</summary>
			/// <remarks>
			/// Whether space should be reserved in layout when an icon is missing.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int preserveIconSpacing = unchecked((int)(0x010103ea));

			/// <summary>A preview of what the AppWidget will look like after it's configured.</summary>
			/// <remarks>
			/// A preview of what the AppWidget will look like after it's configured.
			/// If not supplied, the AppWidget's icon will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int previewImage = unchecked((int)(0x010102da));

			/// <summary>
			/// true if the storage is the primary external storage
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// true if the storage is the primary external storage
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int primary = unchecked((int)(0x01010415));

			/// <summary>
			/// Specify the relative importance or ability in handling a particular
			/// Intent.
			/// </summary>
			/// <remarks>
			/// Specify the relative importance or ability in handling a particular
			/// Intent.  For receivers, this controls the order in which they are
			/// executed to receive a broadcast (note that for
			/// asynchronous broadcasts, this order is ignored).  For activities,
			/// this provides information about how good an activity is handling an
			/// Intent; when multiple activities match an intent and have different
			/// priorities, only those with the higher priority value will be
			/// considered a match.
			/// <p>Only use if you really need to impose some specific
			/// order in which the broadcasts are received, or want to forcibly
			/// place an activity to always be preferred over others.  The value is a
			/// single integer, with higher numbers considered to be better.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int priority = unchecked((int)(0x0101001c));

			/// <summary>
			/// An addition content type description to supply to the input
			/// method attached to the text view, which is private to the
			/// implementation of the input method.
			/// </summary>
			/// <remarks>
			/// An addition content type description to supply to the input
			/// method attached to the text view, which is private to the
			/// implementation of the input method.  This simply fills in
			/// the
			/// <see cref="android.view.inputmethod.EditorInfo.privateImeOptions">EditorInfo.privateImeOptions
			/// 	</see>
			/// field when the input
			/// method is connected.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int privateImeOptions = unchecked((int)(0x01010223));

			/// <summary>Specify a specific process that the associated code is to run in.</summary>
			/// <remarks>
			/// Specify a specific process that the associated code is to run in.
			/// Use with the application tag (to supply a default process for all
			/// application components), or with the activity, receiver, service,
			/// or provider tag (to supply a specific icon for that component).
			/// <p>Application components are normally run in a single process that
			/// is created for the entire application.  You can use this tag to modify
			/// where they run.  If the process name begins with a ':' character,
			/// a new process private to that application will be created when needed
			/// to run that component (allowing you to spread your application across
			/// multiple processes).  If the process name begins with a lower-case
			/// character, the component will be run in a global process of that name,
			/// provided that you have permission to do so, allowing multiple
			/// applications to share one process to reduce resource usage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int process = unchecked((int)(0x01010011));

			/// <summary>Defines the default progress value, between 0 and max.</summary>
			/// <remarks>
			/// Defines the default progress value, between 0 and max.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int progress = unchecked((int)(0x01010137));

			/// <summary>Specifies the horizontal padding on either end for an embedded progress bar.
			/// 	</summary>
			/// <remarks>
			/// Specifies the horizontal padding on either end for an embedded progress bar.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int progressBarPadding = unchecked((int)(0x01010319));

			/// <summary>Default ProgressBar style.</summary>
			/// <remarks>
			/// Default ProgressBar style. This is a medium circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyle = unchecked((int)(0x01010077));

			/// <summary>Horizontal ProgressBar style.</summary>
			/// <remarks>
			/// Horizontal ProgressBar style. This is a horizontal progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleHorizontal = unchecked((int)(0x01010078));

			/// <summary>Inverse ProgressBar style.</summary>
			/// <remarks>
			/// Inverse ProgressBar style. This is a medium circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleInverse = unchecked((int)(0x01010287));

			/// <summary>Large ProgressBar style.</summary>
			/// <remarks>
			/// Large ProgressBar style. This is a large circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleLarge = unchecked((int)(0x0101007a));

			/// <summary>Large inverse ProgressBar style.</summary>
			/// <remarks>
			/// Large inverse ProgressBar style. This is a large circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleLargeInverse = unchecked((int)(0x01010289));

			/// <summary>Small ProgressBar style.</summary>
			/// <remarks>
			/// Small ProgressBar style. This is a small circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleSmall = unchecked((int)(0x01010079));

			/// <summary>Small inverse ProgressBar style.</summary>
			/// <remarks>
			/// Small inverse ProgressBar style. This is a small circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleSmallInverse = unchecked((int)(0x01010288));

			/// <summary>Small ProgressBar in title style.</summary>
			/// <remarks>
			/// Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressBarStyleSmallTitle = unchecked((int)(0x0101020f));

			/// <summary>Drawable used for the progress mode.</summary>
			/// <remarks>
			/// Drawable used for the progress mode.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressDrawable = unchecked((int)(0x0101013c));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int progressLayout = unchecked((int)(0x010103db));

			/// <summary>The prompt to display when the spinner's dialog is shown.</summary>
			/// <remarks>
			/// The prompt to display when the spinner's dialog is shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int prompt = unchecked((int)(0x0101017b));

			/// <summary>Name of the property being animated.</summary>
			/// <remarks>
			/// Name of the property being animated.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int propertyName = unchecked((int)(0x010102e1));

			/// <summary>
			/// Characterizes the potential risk implied in a permission and
			/// indicates the procedure the system should follow when determining
			/// whether to grant the permission to an application requesting it.
			/// </summary>
			/// <remarks>
			/// Characterizes the potential risk implied in a permission and
			/// indicates the procedure the system should follow when determining
			/// whether to grant the permission to an application requesting it.
			/// <see cref="android.Manifest.permission">Standard permissions</see>
			/// have a predefined and
			/// permanent protectionLevel. If you are creating a custom permission in an
			/// application, you can define a protectionLevel attribute with one of the
			/// values listed below. If no protectionLevel is defined for a custom
			/// permission, the system assigns the default ("normal").
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> A lower-risk permission that gives an application access to isolated
			/// application-level features, with minimal risk to other applications,
			/// the system, or the user. The system automatically grants this type
			/// of permission to a requesting application at installation, without
			/// asking for the user's explicit approval (though the user always
			/// has the option to review these permissions before installing). </td></tr>
			/// <tr><td><code>dangerous</code></td><td>1</td><td> A higher-risk permission that would give a requesting application
			/// access to private user data or control over the device that can
			/// negatively impact the user.  Because this type of permission
			/// introduces potential risk, the system may not automatically
			/// grant it to the requesting application.  For example, any dangerous
			/// permissions requested by an application may be displayed to the
			/// user and require confirmation before proceeding, or some other
			/// approach may be taken to avoid the user automatically allowing
			/// the use of such facilities.  </td></tr>
			/// <tr><td><code>signature</code></td><td>2</td><td> A permission that the system is to grant only if the requesting
			/// application is signed with the same certificate as the application
			/// that declared the permission. If the certificates match, the system
			/// automatically grants the permission without notifying the user or
			/// asking for the user's explicit approval. </td></tr>
			/// <tr><td><code>signatureOrSystem</code></td><td>3</td><td> A permission that the system is to grant only to packages in the
			/// Android system image <em>or</em> that are signed with the same
			/// certificates. Please avoid using this option, as the
			/// signature protection level should be sufficient for most needs and
			/// works regardless of exactly where applications are installed.  This
			/// permission is used for certain special situations where multiple
			/// vendors have applications built in to a system image which need
			/// to share specific features explicitly because they are being built
			/// together. </td></tr>
			/// </table>
			/// </remarks>
			public const int protectionLevel = unchecked((int)(0x01010009));

			/// <summary>The attribute that holds a Base64-encoded public key.</summary>
			/// <remarks>
			/// The attribute that holds a Base64-encoded public key.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int publicKey = unchecked((int)(0x010103a6));

			/// <summary>
			/// If you wish to handle an action key during normal search query entry, you
			/// must define an action string here.
			/// </summary>
			/// <remarks>
			/// If you wish to handle an action key during normal search query entry, you
			/// must define an action string here.  This will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to your
			/// searchable activity.  To examine the string, use
			/// <see cref="android.content.Intent.getStringExtra(string)">getStringExtra(SearchManager.ACTION_MSG)
			/// 	</see>
			/// .
			/// <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int queryActionMsg = unchecked((int)(0x010101db));

			/// <summary>
			/// If provided and <code>true</code>, this searchable activity will be invoked for all
			/// queries in a particular session.
			/// </summary>
			/// <remarks>
			/// If provided and <code>true</code>, this searchable activity will be invoked for all
			/// queries in a particular session. If set to <code>false</code> and the activity
			/// returned zero results for a query, it will not be invoked again in that session for
			/// supersets of that zero-results query. For example, if the activity returned zero
			/// results for "bo", it would not be queried again for "bob".
			/// The default value is <code>false</code>. <i>Optional attribute.</i>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int queryAfterZeroResults = unchecked((int)(0x01010282));

			/// <summary>An optional query hint string to be displayed in the empty query field.</summary>
			/// <remarks>
			/// An optional query hint string to be displayed in the empty query field.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int queryHint = unchecked((int)(0x01010358));

			/// <summary>Drawable used as an overlay on top of quickcontact photos.</summary>
			/// <remarks>
			/// Drawable used as an overlay on top of quickcontact photos.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeOverlay = unchecked((int)(0x010103b8));

			/// <summary>Default quickcontact badge style with large quickcontact window.</summary>
			/// <remarks>
			/// Default quickcontact badge style with large quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeStyleSmallWindowLarge = unchecked((int)(0x010102b3
				));

			/// <summary>Default quickcontact badge style with medium quickcontact window.</summary>
			/// <remarks>
			/// Default quickcontact badge style with medium quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeStyleSmallWindowMedium = unchecked((int)(0x010102b2
				));

			/// <summary>Default quickcontact badge style with small quickcontact window.</summary>
			/// <remarks>
			/// Default quickcontact badge style with small quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeStyleSmallWindowSmall = unchecked((int)(0x010102b1
				));

			/// <summary>Default quickcontact badge style with large quickcontact window.</summary>
			/// <remarks>
			/// Default quickcontact badge style with large quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeStyleWindowLarge = unchecked((int)(0x010102b0));

			/// <summary>Default quickcontact badge style with medium quickcontact window.</summary>
			/// <remarks>
			/// Default quickcontact badge style with medium quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeStyleWindowMedium = unchecked((int)(0x010102af)
				);

			/// <summary>Default quickcontact badge style with small quickcontact window.</summary>
			/// <remarks>
			/// Default quickcontact badge style with small quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int quickContactBadgeStyleWindowSmall = unchecked((int)(0x010102ae));

			/// <summary>
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>modeSmall</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>modeMedium</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>modeLarge</code></td><td>3</td><td></td></tr>
			/// </table>
			/// </summary>
			public const int quickContactWindowSize = unchecked((int)(0x010103f0));

			/// <summary>Default RadioButton style.</summary>
			/// <remarks>
			/// Default RadioButton style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int radioButtonStyle = unchecked((int)(0x0101007e));

			/// <summary>Defines the radius of the four corners.</summary>
			/// <remarks>
			/// Defines the radius of the four corners.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int radius = unchecked((int)(0x010101a8));

			/// <summary>The rating to set by default.</summary>
			/// <remarks>
			/// The rating to set by default.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rating = unchecked((int)(0x01010145));

			/// <summary>Default RatingBar style.</summary>
			/// <remarks>
			/// Default RatingBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int ratingBarStyle = unchecked((int)(0x0101007c));

			/// <summary>Indicator RatingBar style.</summary>
			/// <remarks>
			/// Indicator RatingBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int ratingBarStyleIndicator = unchecked((int)(0x01010210));

			/// <summary>Small indicator RatingBar style.</summary>
			/// <remarks>
			/// Small indicator RatingBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int ratingBarStyleSmall = unchecked((int)(0x0101007d));

			/// <summary>
			/// A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for read-only
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int readPermission = unchecked((int)(0x01010007));

			/// <summary>
			/// true if the storage is removable
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// true if the storage is removable
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int removable = unchecked((int)(0x01010416));

			/// <summary>Defines how many times the animation should repeat.</summary>
			/// <remarks>
			/// Defines how many times the animation should repeat. The default value is 0.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>infinite</code></td><td>-1</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int repeatCount = unchecked((int)(0x010101bf));

			/// <summary>
			/// Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite.
			/// </summary>
			/// <remarks>
			/// Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite. The default value is restart.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
			/// <tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
			/// </table>
			/// </remarks>
			public const int repeatMode = unchecked((int)(0x010101c0));

			/// <summary>
			/// Application's requirement for five way navigation
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// Application's requirement for five way navigation
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int reqFiveWayNav = unchecked((int)(0x01010232));

			/// <summary>
			/// Application's requirement for a hard keyboard
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// </summary>
			/// <remarks>
			/// Application's requirement for a hard keyboard
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int reqHardKeyboard = unchecked((int)(0x01010229));

			/// <summary>The input method preferred by an application.</summary>
			/// <remarks>
			/// The input method preferred by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>undefined</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>nokeys</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>qwerty</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>twelvekey</code></td><td>3</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int reqKeyboardType = unchecked((int)(0x01010228));

			/// <summary>The navigation device preferred by an application.</summary>
			/// <remarks>
			/// The navigation device preferred by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>undefined</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>nonav</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>dpad</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>trackball</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>wheel</code></td><td>4</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int reqNavigation = unchecked((int)(0x0101022a));

			/// <summary>The touch screen type used by an application.</summary>
			/// <remarks>
			/// The touch screen type used by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>undefined</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>notouch</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>stylus</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>finger</code></td><td>3</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int reqTouchScreen = unchecked((int)(0x01010227));

			/// <summary>Specify whether this feature is required for the application.</summary>
			/// <remarks>
			/// Specify whether this feature is required for the application.
			/// The default is true, meaning the application requires the
			/// feature, and does not want to be installed on devices that
			/// don't support it.  If you set this to false, then this will
			/// not impose a restriction on where the application can be
			/// installed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int required = unchecked((int)(0x0101028e));

			/// <summary>Defines which edges should be faded on scrolling.</summary>
			/// <remarks>
			/// Defines which edges should be faded on scrolling.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
			/// <tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
			/// </table>
			/// </remarks>
			public const int requiresFadingEdge = unchecked((int)(0x010103a5));

			/// <summary>
			/// Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the minimum screen size an application is
			/// compatible with.  This attribute provides the required minimum
			/// "smallest screen width" (as per the -swNNNdp resource configuration)
			/// that the application can run on.  For example, a typical phone
			/// screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
			/// smallest screen width of the device is below the value supplied here,
			/// then the application is considered incompatible with that device.
			/// If not supplied, then any old smallScreens, normalScreens, largeScreens,
			/// or xlargeScreens attributes will be used instead.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int requiresSmallestWidthDp = unchecked((int)(0x01010364));

			/// <summary>Color of the res-out outline.</summary>
			/// <remarks>
			/// Color of the res-out outline.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int resOutColor = unchecked((int)(0x010103ec));

			/// <summary>
			/// Optional parameter which indicates if and how this widget can be
			/// resized.
			/// </summary>
			/// <remarks>
			/// Optional parameter which indicates if and how this widget can be
			/// resized.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x0</td><td></td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x1</td><td></td></tr>
			/// <tr><td><code>vertical</code></td><td>0x2</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int resizeMode = unchecked((int)(0x01010363));

			/// <summary>
			/// Indicates whether the application can resize itself to newer
			/// screen sizes.
			/// </summary>
			/// <remarks>
			/// Indicates whether the application can resize itself to newer
			/// screen sizes.  This is mostly used to distinguish between old
			/// applications that may not be compatible with newly introduced
			/// screen sizes and newer applications that should be; it will be
			/// set for you automatically based on whether you are targeting
			/// a newer platform that supports more screens.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int resizeable = unchecked((int)(0x0101028d));

			/// <summary>Resource identifier to assign to this piece of named meta-data.</summary>
			/// <remarks>
			/// Resource identifier to assign to this piece of named meta-data.
			/// The resource identifier can later be retrieved from the meta data
			/// Bundle through
			/// <see cref="android.os.Bundle.getInt(string)">Bundle.getInt</see>
			/// .
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int resource = unchecked((int)(0x01010025));

			/// <summary>
			/// Indicate that the application is prepared to attempt a restore of any
			/// backed-up dataset, even if the backup is apparently from a newer version
			/// of the application than is currently installed on the device.
			/// </summary>
			/// <remarks>
			/// Indicate that the application is prepared to attempt a restore of any
			/// backed-up dataset, even if the backup is apparently from a newer version
			/// of the application than is currently installed on the device.  Setting
			/// this attribute to <code>true</code> will permit the Backup Manager to
			/// attempt restore even when a version mismatch suggests that the data are
			/// incompatible.  <em>Use with caution!</em>
			/// <p>The default value of this attribute is <code>false</code>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int restoreAnyVersion = unchecked((int)(0x010102ba));

			[System.ObsoleteAttribute(@"This attribute is not used by the Android operating system. <p>Must be a boolean value, either ""<code>true</code>"" or ""<code>false</code>"". <p>This may also be a reference to a resource (in the form ""<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>"") or theme attribute (in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"") containing a value of this type."
				)]
			public const int restoreNeedsApplication = unchecked((int)(0x0101029d));

			/// <summary>Amount of right padding inside the gradient shape.</summary>
			/// <remarks>
			/// Amount of right padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int right = unchecked((int)(0x010101af));

			/// <summary>Drawable to use for chevron animation on the right.</summary>
			/// <remarks>
			/// Drawable to use for chevron animation on the right. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int rightChevronDrawable = unchecked((int)(0x01010400));

			/// <summary>Default style for RingtonePreference.</summary>
			/// <remarks>
			/// Default style for RingtonePreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int ringtonePreferenceStyle = unchecked((int)(0x01010093));

			/// <summary>Which ringtone type(s) to show in the picker.</summary>
			/// <remarks>
			/// Which ringtone type(s) to show in the picker.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>ringtone</code></td><td>1</td><td> Ringtones. </td></tr>
			/// <tr><td><code>notification</code></td><td>2</td><td> Notification sounds. </td></tr>
			/// <tr><td><code>alarm</code></td><td>4</td><td> Alarm sounds. </td></tr>
			/// <tr><td><code>all</code></td><td>7</td><td> All available ringtone sounds. </td></tr>
			/// </table>
			/// </remarks>
			public const int ringtoneType = unchecked((int)(0x010101f9));

			/// <summary>rotation of the view, in degrees.</summary>
			/// <remarks>
			/// rotation of the view, in degrees.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rotation = unchecked((int)(0x01010326));

			/// <summary>rotation of the view around the x axis, in degrees.</summary>
			/// <remarks>
			/// rotation of the view around the x axis, in degrees.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rotationX = unchecked((int)(0x01010327));

			/// <summary>rotation of the view around the y axis, in degrees.</summary>
			/// <remarks>
			/// rotation of the view around the y axis, in degrees.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rotationY = unchecked((int)(0x01010328));

			/// <summary>The maxmimum number of rows to create when automatically positioning children.
			/// 	</summary>
			/// <remarks>
			/// The maxmimum number of rows to create when automatically positioning children.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rowCount = unchecked((int)(0x01010375));

			/// <summary>
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each row.
			/// </summary>
			/// <remarks>
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each row.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rowDelay = unchecked((int)(0x010101d0));

			/// <summary>Row edge flags.</summary>
			/// <remarks>
			/// Row edge flags.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>4</td><td> Row is anchored to the top of the keyboard. </td></tr>
			/// <tr><td><code>bottom</code></td><td>8</td><td> Row is anchored to the bottom of the keyboard. </td></tr>
			/// </table>
			/// </remarks>
			public const int rowEdgeFlags = unchecked((int)(0x01010241));

			/// <summary>Defines the height of each row.</summary>
			/// <remarks>
			/// Defines the height of each row.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rowHeight = unchecked((int)(0x01010132));

			/// <summary>
			/// When set to true, forces row boundaries to appear in the same order
			/// as row indices.
			/// </summary>
			/// <remarks>
			/// When set to true, forces row boundaries to appear in the same order
			/// as row indices.
			/// The default is true.
			/// See
			/// <see cref="android.widget.GridLayout.setRowOrderPreserved(bool)">android.widget.GridLayout.setRowOrderPreserved(bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int rowOrderPreserved = unchecked((int)(0x01010376));

			/// <summary>
			/// If unset, no state will be saved for this view when it is being
			/// frozen.
			/// </summary>
			/// <remarks>
			/// If unset, no state will be saved for this view when it is being
			/// frozen. The default is true, allowing the view to be saved
			/// (however it also must have an ID assigned to it for its
			/// state to be saved).  Setting this to false only disables the
			/// state for this view, not for its children which may still
			/// be saved.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int saveEnabled = unchecked((int)(0x010100e7));

			/// <summary>Specifies where the drawable is positioned after scaling.</summary>
			/// <remarks>
			/// Specifies where the drawable is positioned after scaling. The default value is
			/// left.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// </table>
			/// </remarks>
			public const int scaleGravity = unchecked((int)(0x010101fe));

			/// <summary>Scale height, expressed as a percentage of the drawable's bound.</summary>
			/// <remarks>
			/// Scale height, expressed as a percentage of the drawable's bound. The value's
			/// format is XX%. For instance: 100%, 12.5%, etc.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scaleHeight = unchecked((int)(0x010101fd));

			/// <summary>
			/// Controls how the image should be resized or moved to match the size
			/// of this ImageView.
			/// </summary>
			/// <remarks>
			/// Controls how the image should be resized or moved to match the size
			/// of this ImageView.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>matrix</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>fitXY</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>fitStart</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>fitCenter</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>fitEnd</code></td><td>4</td><td></td></tr>
			/// <tr><td><code>center</code></td><td>5</td><td></td></tr>
			/// <tr><td><code>centerCrop</code></td><td>6</td><td></td></tr>
			/// <tr><td><code>centerInside</code></td><td>7</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int scaleType = unchecked((int)(0x0101011d));

			/// <summary>Scale width, expressed as a percentage of the drawable's bound.</summary>
			/// <remarks>
			/// Scale width, expressed as a percentage of the drawable's bound. The value's
			/// format is XX%. For instance: 100%, 12.5%, etc.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scaleWidth = unchecked((int)(0x010101fc));

			/// <summary>scale of the view in the x direction.</summary>
			/// <remarks>
			/// scale of the view in the x direction.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scaleX = unchecked((int)(0x01010324));

			/// <summary>scale of the view in the y direction.</summary>
			/// <remarks>
			/// scale of the view in the y direction.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scaleY = unchecked((int)(0x01010325));

			/// <summary>
			/// Specify a URI scheme that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataScheme(string)">IntentFilter.addDataScheme()
			/// 	</see>
			/// .
			/// <p><em>Note: scheme matching in the Android framework is
			/// case-sensitive, unlike the formal RFC.  As a result,
			/// schemes here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int scheme = unchecked((int)(0x01010027));

			/// <summary>
			/// Specifies a compatible screen density, as per the device
			/// configuration screen density bins.
			/// </summary>
			/// <remarks>
			/// Specifies a compatible screen density, as per the device
			/// configuration screen density bins.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>ldpi</code></td><td>120</td><td> A low density screen, approximately 120dpi. </td></tr>
			/// <tr><td><code>mdpi</code></td><td>160</td><td> A medium density screen, approximately 160dpi. </td></tr>
			/// <tr><td><code>hdpi</code></td><td>240</td><td> A high density screen, approximately 240dpi. </td></tr>
			/// <tr><td><code>xhdpi</code></td><td>320</td><td> An extra high density screen, approximately 320dpi. </td></tr>
			/// </table>
			/// </remarks>
			public const int screenDensity = unchecked((int)(0x010102cb));

			/// <summary>Specify the orientation an activity should be run in.</summary>
			/// <remarks>
			/// Specify the orientation an activity should be run in.  If not
			/// specified, it will run in the current preferred orientation
			/// of the screen.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>unspecified</code></td><td>-1</td><td> No preference specified: let the system decide the best
			/// orientation.  This will either be the orientation selected
			/// by the activity below, or the user's preferred orientation
			/// if this activity is the bottom of a task. If the user
			/// explicitly turned off sensor based orientation through settings
			/// sensor based device rotation will be ignored. If not by default
			/// sensor based orientation will be taken into account and the
			/// orientation will changed based on how the user rotates the device </td></tr>
			/// <tr><td><code>landscape</code></td><td>0</td><td> Would like to have the screen in a landscape orientation: that
			/// is, with the display wider than it is tall, ignoring sensor data. </td></tr>
			/// <tr><td><code>portrait</code></td><td>1</td><td> Would like to have the screen in a portrait orientation: that
			/// is, with the display taller than it is wide, ignoring sensor data. </td></tr>
			/// <tr><td><code>user</code></td><td>2</td><td> Use the user's current preferred orientation of the handset. </td></tr>
			/// <tr><td><code>behind</code></td><td>3</td><td> Keep the screen in the same orientation as whatever is behind
			/// this activity. </td></tr>
			/// <tr><td><code>sensor</code></td><td>4</td><td> Orientation is determined by a physical orientation sensor:
			/// the display will rotate based on how the user moves the device. </td></tr>
			/// <tr><td><code>nosensor</code></td><td>5</td><td> Always ignore orientation determined by orientation sensor:
			/// the display will not rotate when the user moves the device. </td></tr>
			/// <tr><td><code>sensorLandscape</code></td><td>6</td><td> Would like to have the screen in landscape orientation, but can
			/// use the sensor to change which direction the screen is facing. </td></tr>
			/// <tr><td><code>sensorPortait</code></td><td>7</td><td> Would like to have the screen in portrait orientation, but can
			/// use the sensor to change which direction the screen is facing. </td></tr>
			/// <tr><td><code>reverseLandscape</code></td><td>8</td><td> Would like to have the screen in landscape orientation, turned in
			/// the opposite direction from normal landscape. </td></tr>
			/// <tr><td><code>reversePortait</code></td><td>9</td><td> Would like to have the screen in portrait orientation, turned in
			/// the opposite direction from normal portrait. </td></tr>
			/// <tr><td><code>fullSensor</code></td><td>10</td><td> Orientation is determined by a physical orientation sensor:
			/// the display will rotate based on how the user moves the device.
			/// This allows any of the 4 possible rotations, regardless of what
			/// the device will normally do (for example some devices won't
			/// normally use 180 degree rotation). </td></tr>
			/// </table>
			/// </remarks>
			public const int screenOrientation = unchecked((int)(0x0101001e));

			/// <summary>
			/// Specifies a compatible screen size, as per the device
			/// configuration screen size bins.
			/// </summary>
			/// <remarks>
			/// Specifies a compatible screen size, as per the device
			/// configuration screen size bins.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>small</code></td><td>200</td><td> A small screen configuration, at least 240x320db. </td></tr>
			/// <tr><td><code>normal</code></td><td>300</td><td> A normal screen configuration, at least 320x480db. </td></tr>
			/// <tr><td><code>large</code></td><td>400</td><td> A large screen configuration, at least 400x530db. </td></tr>
			/// <tr><td><code>xlarge</code></td><td>500</td><td> An extra large screen configuration, at least 600x800db. </td></tr>
			/// </table>
			/// </remarks>
			public const int screenSize = unchecked((int)(0x010102ca));

			/// <summary>
			/// Whether the text is allowed to be wider than the view (and
			/// therefore can be scrolled horizontally).
			/// </summary>
			/// <remarks>
			/// Whether the text is allowed to be wider than the view (and
			/// therefore can be scrolled horizontally).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollHorizontally = unchecked((int)(0x0101015b));

			/// <summary>Default ScrollView style.</summary>
			/// <remarks>
			/// Default ScrollView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int scrollViewStyle = unchecked((int)(0x01010080));

			/// <summary>The initial horizontal scroll offset, in pixels.</summary>
			/// <remarks>
			/// The initial horizontal scroll offset, in pixels.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollX = unchecked((int)(0x010100d2));

			/// <summary>The initial vertical scroll offset, in pixels.</summary>
			/// <remarks>
			/// The initial vertical scroll offset, in pixels.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollY = unchecked((int)(0x010100d3));

			/// <summary>Defines whether the horizontal scrollbar track should always be drawn.</summary>
			/// <remarks>
			/// Defines whether the horizontal scrollbar track should always be drawn.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollbarAlwaysDrawHorizontalTrack = unchecked((int)(0x01010068)
				);

			/// <summary>Defines whether the vertical scrollbar track should always be drawn.</summary>
			/// <remarks>
			/// Defines whether the vertical scrollbar track should always be drawn.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollbarAlwaysDrawVerticalTrack = unchecked((int)(0x01010069));

			/// <summary>Defines the delay in milliseconds that a scrollbar waits before fade out.
			/// 	</summary>
			/// <remarks>
			/// Defines the delay in milliseconds that a scrollbar waits before fade out.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollbarDefaultDelayBeforeFade = unchecked((int)(0x010102a9));

			/// <summary>Defines the delay in milliseconds that a scrollbar takes to fade out.</summary>
			/// <remarks>
			/// Defines the delay in milliseconds that a scrollbar takes to fade out.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollbarFadeDuration = unchecked((int)(0x010102a8));

			/// <summary>Sets the width of vertical scrollbars and height of horizontal scrollbars.
			/// 	</summary>
			/// <remarks>
			/// Sets the width of vertical scrollbars and height of horizontal scrollbars.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollbarSize = unchecked((int)(0x01010063));

			/// <summary>Controls the scrollbar style and position.</summary>
			/// <remarks>
			/// Controls the scrollbar style and position. The scrollbars can be overlaid or
			/// inset. When inset, they add to the padding of the view. And the
			/// scrollbars can be drawn inside the padding area or on the edge of
			/// the view. For example, if a view has a background drawable and you
			/// want to draw the scrollbars inside the padding specified by the
			/// drawable, you can use insideOverlay or insideInset. If you want them
			/// to appear at the edge of the view, ignoring the padding, then you can
			/// use outsideOverlay or outsideInset.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>insideOverlay</code></td><td>0x0</td><td> Inside the padding and overlaid </td></tr>
			/// <tr><td><code>insideInset</code></td><td>0x01000000</td><td> Inside the padding and inset </td></tr>
			/// <tr><td><code>outsideOverlay</code></td><td>0x02000000</td><td> Edge of the view and overlaid </td></tr>
			/// <tr><td><code>outsideInset</code></td><td>0x03000000</td><td> Edge of the view and inset </td></tr>
			/// </table>
			/// </remarks>
			public const int scrollbarStyle = unchecked((int)(0x0101007f));

			/// <summary>Defines the horizontal scrollbar thumb drawable.</summary>
			/// <remarks>
			/// Defines the horizontal scrollbar thumb drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int scrollbarThumbHorizontal = unchecked((int)(0x01010064));

			/// <summary>Defines the vertical scrollbar thumb drawable.</summary>
			/// <remarks>
			/// Defines the vertical scrollbar thumb drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int scrollbarThumbVertical = unchecked((int)(0x01010065));

			/// <summary>Defines the horizontal scrollbar track drawable.</summary>
			/// <remarks>
			/// Defines the horizontal scrollbar track drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int scrollbarTrackHorizontal = unchecked((int)(0x01010066));

			/// <summary>Defines the vertical scrollbar track drawable.</summary>
			/// <remarks>
			/// Defines the vertical scrollbar track drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int scrollbarTrackVertical = unchecked((int)(0x01010067));

			/// <summary>Defines which scrollbars should be displayed on scrolling or not.</summary>
			/// <remarks>
			/// Defines which scrollbars should be displayed on scrolling or not.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> No scrollbar is displayed. </td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x00000100</td><td> Displays horizontal scrollbar only. </td></tr>
			/// <tr><td><code>vertical</code></td><td>0x00000200</td><td> Displays vertical scrollbar only. </td></tr>
			/// </table>
			/// </remarks>
			public const int scrollbars = unchecked((int)(0x010100de));

			/// <summary>When set to true, the list uses a drawing cache during scrolling.</summary>
			/// <remarks>
			/// When set to true, the list uses a drawing cache during scrolling.
			/// This makes the rendering faster but uses more memory. The default
			/// value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int scrollingCache = unchecked((int)(0x010100fe));

			/// <summary>If supplied, this string will be displayed as the text of the "Search" button.
			/// 	</summary>
			/// <remarks>
			/// If supplied, this string will be displayed as the text of the "Search" button.
			/// <i>Optional attribute.</i>
			/// <deprecated>
			/// This will create a non-standard UI appearance, because the search bar UI is
			/// changing to use only icons for its buttons.
			/// </deprecated>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int searchButtonText = unchecked((int)(0x01010205));

			/// <summary>
			/// Theme to use for Search Dialogs
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Theme to use for Search Dialogs
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchDialogTheme = unchecked((int)(0x010103d3));

			/// <summary>
			/// SearchView dropdown background
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView dropdown background
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchDropdownBackground = unchecked((int)(0x010103ca));

			/// <summary>Additional features are controlled by mode bits in this field.</summary>
			/// <remarks>
			/// Additional features are controlled by mode bits in this field.  Omitting
			/// this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>showSearchLabelAsBadge</code></td><td>0x04</td><td> If set, this flag enables the display of the search target (label) within the
			/// search bar.  If neither bad mode is selected, no badge will be shown. </td></tr>
			/// <tr><td><code>showSearchIconAsBadge</code></td><td>0x08</td><td><strong>This is deprecated.</strong><br/>The default
			/// application icon is now always used, so this option is
			/// obsolete.</td></tr>
			/// <tr><td><code>queryRewriteFromData</code></td><td>0x10</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
			/// be considered as the text for suggestion query rewriting.  This should only
			/// be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
			/// inspection and editing - typically, HTTP/HTTPS Uri's. </td></tr>
			/// <tr><td><code>queryRewriteFromText</code></td><td>0x20</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
			/// be considered as the text for suggestion query rewriting.  This should be used
			/// for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
			/// values are not suitable for user inspection and editing. </td></tr>
			/// </table>
			/// </remarks>
			public const int searchMode = unchecked((int)(0x010101d5));

			/// <summary>The list item height for search results.</summary>
			/// <remarks>
			/// The list item height for search results. @hide
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int searchResultListItemHeight = unchecked((int)(0x010103af));

			/// <summary>
			/// If provided, this string will be used to describe the searchable item in the
			/// searchable items settings within system search settings.
			/// </summary>
			/// <remarks>
			/// If provided, this string will be used to describe the searchable item in the
			/// searchable items settings within system search settings. <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int searchSettingsDescription = unchecked((int)(0x0101028a));

			/// <summary>
			/// If provided, this is the trigger indicating that the searchable activity
			/// provides suggestions as well.
			/// </summary>
			/// <remarks>
			/// If provided, this is the trigger indicating that the searchable activity
			/// provides suggestions as well.  The value must be a fully-qualified content provider
			/// authority (e.g. "com.example.android.apis.SuggestionProvider") and should match the
			/// "android:authorities" tag in your content provider's manifest entry.  <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int searchSuggestAuthority = unchecked((int)(0x010101d6));

			/// <summary>
			/// If provided, and not overridden by an action in the selected suggestion, this
			/// string will be placed in the action field of the
			/// <see cref="android.content.Intent">Intent</see>
			/// when the user clicks a suggestion.  <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int searchSuggestIntentAction = unchecked((int)(0x010101d9));

			/// <summary>
			/// If provided, and not overridden by an action in the selected suggestion, this
			/// string will be placed in the data field of the
			/// <see cref="android.content.Intent">Intent</see>
			/// when the user clicks a suggestion.  <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int searchSuggestIntentData = unchecked((int)(0x010101da));

			/// <summary>
			/// If provided, this will be inserted in the suggestions query Uri, after the authority
			/// you have provide but before the standard suggestions path.
			/// </summary>
			/// <remarks>
			/// If provided, this will be inserted in the suggestions query Uri, after the authority
			/// you have provide but before the standard suggestions path. <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int searchSuggestPath = unchecked((int)(0x010101d7));

			/// <summary>
			/// If provided, suggestion queries will be passed into your query function
			/// as the <i>selection</i> parameter.
			/// </summary>
			/// <remarks>
			/// If provided, suggestion queries will be passed into your query function
			/// as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
			/// database, and will contain a single question mark, which represents the actual query
			/// string that has been typed by the user.  If not provided, then the user query text
			/// will be appended to the query Uri (after an additional "/".)  <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int searchSuggestSelection = unchecked((int)(0x010101d8));

			/// <summary>
			/// If provided, this is the minimum number of characters needed to trigger
			/// search suggestions.
			/// </summary>
			/// <remarks>
			/// If provided, this is the minimum number of characters needed to trigger
			/// search suggestions. The default value is 0. <i>Optional attribute.</i>
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int searchSuggestThreshold = unchecked((int)(0x0101026d));

			/// <summary>
			/// SearchView close button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView close button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewCloseIcon = unchecked((int)(0x010103cb));

			/// <summary>
			/// SearchView query refinement icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView query refinement icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewEditQuery = unchecked((int)(0x010103cf));

			/// <summary>
			/// SearchView query refinement icon background
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView query refinement icon background
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewEditQueryBackground = unchecked((int)(0x010103d0));

			/// <summary>
			/// SearchView Go button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView Go button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewGoIcon = unchecked((int)(0x010103cc));

			/// <summary>
			/// SearchView Search icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView Search icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewSearchIcon = unchecked((int)(0x010103cd));

			/// <summary>
			/// SearchView text field background for the left section
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView text field background for the left section
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewTextField = unchecked((int)(0x010103d1));

			/// <summary>
			/// SearchView text field background for the right section
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView text field background for the right section
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewTextFieldRight = unchecked((int)(0x010103d2));

			/// <summary>
			/// SearchView Voice button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// SearchView Voice button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int searchViewVoiceIcon = unchecked((int)(0x010103ce));

			/// <summary>Search widget more corpus result item background.</summary>
			/// <remarks>
			/// Search widget more corpus result item background.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int searchWidgetCorpusItemBackground = unchecked((int)(0x010103a7));

			/// <summary>Defines the secondary progress value, between 0 and max.</summary>
			/// <remarks>
			/// Defines the secondary progress value, between 0 and max. This progress is drawn between
			/// the primary progress and the background.  It can be ideal for media scenarios such as
			/// showing the buffering progress while the default progress shows the play progress.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int secondaryProgress = unchecked((int)(0x01010138));

			/// <summary>Default SeekBar style.</summary>
			/// <remarks>
			/// Default SeekBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int seekBarStyle = unchecked((int)(0x0101007b));

			/// <summary>
			/// Style for segmented buttons - a container that houses several buttons
			/// with the appearance of a singel button broken into segments.
			/// </summary>
			/// <remarks>
			/// Style for segmented buttons - a container that houses several buttons
			/// with the appearance of a singel button broken into segments.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int segmentedButtonStyle = unchecked((int)(0x01010330));

			/// <summary>
			/// If the text is selectable, select it all when the view takes
			/// focus instead of moving the cursor to the start or end.
			/// </summary>
			/// <remarks>
			/// If the text is selectable, select it all when the view takes
			/// focus instead of moving the cursor to the start or end.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int selectAllOnFocus = unchecked((int)(0x0101015e));

			/// <summary>Whether the Preference is selectable.</summary>
			/// <remarks>
			/// Whether the Preference is selectable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int selectable = unchecked((int)(0x010101e6));

			/// <summary>Background drawable for standalone items that need focus/pressed states.
			/// 	</summary>
			/// <remarks>
			/// Background drawable for standalone items that need focus/pressed states.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int selectableItemBackground = unchecked((int)(0x0101030e));

			/// <summary>Drawable for the vertical bar shown at the beggining and at the end of a selected date.
			/// 	</summary>
			/// <remarks>
			/// Drawable for the vertical bar shown at the beggining and at the end of a selected date.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int selectedDateVerticalBar = unchecked((int)(0x01010347));

			/// <summary>The background color for the selected week.</summary>
			/// <remarks>
			/// The background color for the selected week.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int selectedWeekBackgroundColor = unchecked((int)(0x01010342));

			/// <hide>
			/// The divider for making the selection area.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </hide>
			public const int selectionDivider = unchecked((int)(0x010103f6));

			/// <hide>
			/// The height of the selection divider.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </hide>
			public const int selectionDividerHeight = unchecked((int)(0x010103f7));

			/// <summary>
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// </summary>
			/// <remarks>
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int settingsActivity = unchecked((int)(0x01010225));

			/// <summary>Place a shadow of the specified color behind the text.</summary>
			/// <remarks>
			/// Place a shadow of the specified color behind the text.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shadowColor = unchecked((int)(0x01010161));

			/// <summary>Horizontal offset of the shadow.</summary>
			/// <remarks>
			/// Horizontal offset of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shadowDx = unchecked((int)(0x01010162));

			/// <summary>Vertical offset of the shadow.</summary>
			/// <remarks>
			/// Vertical offset of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shadowDy = unchecked((int)(0x01010163));

			/// <summary>Radius of the shadow.</summary>
			/// <remarks>
			/// Radius of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shadowRadius = unchecked((int)(0x01010164));

			/// <summary>Indicates what shape to fill with a gradient.</summary>
			/// <remarks>
			/// Indicates what shape to fill with a gradient.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>rectangle</code></td><td>0</td><td> Rectangle shape, with optional rounder corners. </td></tr>
			/// <tr><td><code>oval</code></td><td>1</td><td> Oval shape. </td></tr>
			/// <tr><td><code>line</code></td><td>2</td><td> Line shape. </td></tr>
			/// <tr><td><code>ring</code></td><td>3</td><td> Ring shape. </td></tr>
			/// </table>
			/// </remarks>
			public const int shape = unchecked((int)(0x0101019a));

			/// <summary><p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shareInterpolator = unchecked((int)(0x010101bb));

			/// <summary>
			/// Specify the name of a user ID that will be shared between multiple
			/// packages.
			/// </summary>
			/// <remarks>
			/// Specify the name of a user ID that will be shared between multiple
			/// packages.  By default, each package gets its own unique user-id.
			/// By setting this value on two or more packages, each of these packages
			/// will be given a single shared user ID, so they can for example run
			/// in the same process.  Note that for them to actually get the same
			/// user ID, they must also be signed with the same signature.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int sharedUserId = unchecked((int)(0x0101000b));

			/// <summary>Specify a label for the shared user UID of this package.</summary>
			/// <remarks>
			/// Specify a label for the shared user UID of this package.  This is
			/// only used if you have also used android:sharedUserId.  This must
			/// be a reference to a string resource; it can not be an explicit
			/// string.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int sharedUserLabel = unchecked((int)(0x01010261));

			/// <summary>
			/// Whether the view of this Preference should be disabled when
			/// this Preference is disabled.
			/// </summary>
			/// <remarks>
			/// Whether the view of this Preference should be disabled when
			/// this Preference is disabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shouldDisableView = unchecked((int)(0x010101ee));

			/// <summary>How this item should display in the Action Bar, if present.</summary>
			/// <remarks>
			/// How this item should display in the Action Bar, if present.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>never</code></td><td>0</td><td> Never show this item in an action bar, show it in the overflow menu instead.
			/// Mutually exclusive with "ifRoom" and "always". </td></tr>
			/// <tr><td><code>ifRoom</code></td><td>1</td><td> Show this item in an action bar if there is room for it as determined
			/// by the system. Favor this option over "always" where possible.
			/// Mutually exclusive with "never" and "always". </td></tr>
			/// <tr><td><code>always</code></td><td>2</td><td> Always show this item in an actionbar, even if it would override
			/// the system's limits of how much stuff to put there. This may make
			/// your action bar look bad on some screens. In most cases you should
			/// use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never". </td></tr>
			/// <tr><td><code>withText</code></td><td>4</td><td> When this item is shown as an action in the action bar, show a text
			/// label with it even if it has an icon representation. </td></tr>
			/// <tr><td><code>collapseActionView</code></td><td>8</td><td> This item's action view collapses to a normal menu
			/// item. When expanded, the action view takes over a
			/// larger segment of its container. </td></tr>
			/// </table>
			/// </remarks>
			public const int showAsAction = unchecked((int)(0x010102d9));

			/// <summary>Whether to show an item for a default sound.</summary>
			/// <remarks>
			/// Whether to show an item for a default sound.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int showDefault = unchecked((int)(0x010101fa));

			/// <summary>Setting for which dividers to show.</summary>
			/// <remarks>
			/// Setting for which dividers to show.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>beginning</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>middle</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>end</code></td><td>4</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int showDividers = unchecked((int)(0x01010329));

			/// <summary>Whether to show an item for 'Silent'.</summary>
			/// <remarks>
			/// Whether to show an item for 'Silent'.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int showSilent = unchecked((int)(0x010101fb));

			/// <summary>Whether do show week numbers.</summary>
			/// <remarks>
			/// Whether do show week numbers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int showWeekNumber = unchecked((int)(0x0101033e));

			/// <summary>The number of weeks to be shown.</summary>
			/// <remarks>
			/// The number of weeks to be shown.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shownWeekCount = unchecked((int)(0x01010341));

			/// <summary>The zero-based index of the columns to shrink.</summary>
			/// <remarks>
			/// The zero-based index of the columns to shrink. The column indices
			/// must be separated by a comma: 1, 2, 5. Illegal and duplicate
			/// indices are ignored. You can shrink all columns by using the
			/// value "*" instead. Note that a column can be marked stretchable
			/// and shrinkable at the same time.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int shrinkColumns = unchecked((int)(0x0101014a));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int singleChoiceItemLayout = unchecked((int)(0x010103d9));

			/// <summary>
			/// Constrains the text to a single horizontally scrolling line
			/// instead of letting it wrap onto multiple lines, and advances
			/// focus instead of inserting a newline when you press the
			/// enter key.
			/// </summary>
			/// <remarks>
			/// Constrains the text to a single horizontally scrolling line
			/// instead of letting it wrap onto multiple lines, and advances
			/// focus instead of inserting a newline when you press the
			/// enter key.  Note: for editable text views, it is better
			/// to control this using the textMultiLine flag in the inputType
			/// attribute.  (If both singleLine and inputType are supplied,
			/// the inputType flags will override the value of singleLine.)
			/// <deprecated>
			/// This attribute is deprecated and is replaced by the textMultiLine flag
			/// in the inputType attribute.  Use caution when altering existing layouts, as the
			/// default value of singeLine is false (multi-line mode), but if you specify any
			/// value for inputType, the default is single-line mode.  (If both singleLine and
			/// inputType attributes are found,  the inputType flags will override the value of
			/// singleLine.)
			/// </deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			[System.Obsolete]
			public const int singleLine = unchecked((int)(0x0101015d));

			/// <summary>Smaller icon of the authenticator.</summary>
			/// <remarks>
			/// Smaller icon of the authenticator.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int smallIcon = unchecked((int)(0x0101029e));

			/// <summary>Indicates whether the application supports smaller screen form-factors.</summary>
			/// <remarks>
			/// Indicates whether the application supports smaller screen form-factors.
			/// A small screen is defined as one with a smaller aspect ratio than
			/// the traditional HVGA screen; that is, for a portrait screen, less
			/// tall than an HVGA screen.  In practice, this means a QVGA low
			/// density or VGA high density screen.  An application that does
			/// not support small screens <em>will not be available</em> for
			/// small screen devices, since there is little the platform can do
			/// to make such an application work on a smaller screen.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int smallScreens = unchecked((int)(0x01010284));

			/// <summary>
			/// When set to true, the list will use a more refined calculation
			/// method based on the pixels height of the items visible on screen.
			/// </summary>
			/// <remarks>
			/// When set to true, the list will use a more refined calculation
			/// method based on the pixels height of the items visible on screen. This
			/// property is set to true by default but should be set to false if your adapter
			/// will display items of varying heights. When this property is set to true and
			/// your adapter displays items of varying heights, the scrollbar thumb will
			/// change size as the user scrolls through the list. When set to fale, the list
			/// will use only the number of items in the adapter and the number of items visible
			/// on screen to determine the scrollbar's properties.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int smoothScrollbar = unchecked((int)(0x01010231));

			/// <summary>How close we need to be before snapping to a target.</summary>
			/// <remarks>
			/// How close we need to be before snapping to a target.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int snapMargin = unchecked((int)(0x01010407));

			/// <hide>
			/// Color for the solid color background if such for optimized rendering.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </hide>
			public const int solidColor = unchecked((int)(0x0101034a));

			/// <summary>
			/// Boolean that controls whether a view should have sound effects
			/// enabled for events such as clicking and touching.
			/// </summary>
			/// <remarks>
			/// Boolean that controls whether a view should have sound effects
			/// enabled for events such as clicking and touching.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int soundEffectsEnabled = unchecked((int)(0x01010215));

			/// <summary><p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int spacing = unchecked((int)(0x01010113));

			/// <summary>Default style for spinner drop down items.</summary>
			/// <remarks>
			/// Default style for spinner drop down items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int spinnerDropDownItemStyle = unchecked((int)(0x01010087));

			/// <summary>Default spinner item style.</summary>
			/// <remarks>
			/// Default spinner item style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int spinnerItemStyle = unchecked((int)(0x01010089));

			/// <summary>Display mode for spinner options.</summary>
			/// <remarks>
			/// Display mode for spinner options.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>dialog</code></td><td>0</td><td> Spinner options will be presented to the user as a dialog window. </td></tr>
			/// <tr><td><code>dropdown</code></td><td>1</td><td> Spinner options will be presented to the user as an inline dropdown
			/// anchored to the spinner widget itself. </td></tr>
			/// </table>
			/// </remarks>
			public const int spinnerMode = unchecked((int)(0x010102f1));

			/// <summary>Default Spinner style.</summary>
			/// <remarks>
			/// Default Spinner style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int spinnerStyle = unchecked((int)(0x01010081));

			/// <summary>Whether the spinners are shown.</summary>
			/// <remarks>
			/// Whether the spinners are shown.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int spinnersShown = unchecked((int)(0x0101034b));

			/// <summary>
			/// Sets whether this ViewGroup should split MotionEvents
			/// to separate child views during touch event dispatch.
			/// </summary>
			/// <remarks>
			/// Sets whether this ViewGroup should split MotionEvents
			/// to separate child views during touch event dispatch.
			/// If false (default), touch events will be dispatched to
			/// the child view where the first pointer went down until
			/// the last pointer goes up.
			/// If true, touch events may be dispatched to multiple children.
			/// MotionEvents for each pointer will be dispatched to the child
			/// view where the initial ACTION_DOWN event happened.
			/// See
			/// <see cref="android.view.ViewGroup.setMotionEventSplittingEnabled(bool)">android.view.ViewGroup.setMotionEventSplittingEnabled(bool)
			/// 	</see>
			/// for more information.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int splitMotionEvents = unchecked((int)(0x010102ef));

			/// <summary>Sets a drawable as the content of this ImageView.</summary>
			/// <remarks>
			/// Sets a drawable as the content of this ImageView.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int src = unchecked((int)(0x01010119));

			/// <summary>Used by ListView and GridView to stack their content from the bottom.</summary>
			/// <remarks>
			/// Used by ListView and GridView to stack their content from the bottom.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int stackFromBottom = unchecked((int)(0x010100fd));

			/// <summary>Default StackView style.</summary>
			/// <remarks>
			/// Default StackView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int stackViewStyle = unchecked((int)(0x010103b9));

			/// <summary>Default Star style.</summary>
			/// <remarks>
			/// Default Star style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int starStyle = unchecked((int)(0x01010082));

			/// <summary>Start color of the gradient.</summary>
			/// <remarks>
			/// Start color of the gradient.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int startColor = unchecked((int)(0x0101019d));

			/// <summary>Delay in milliseconds before the animation runs, once start time is reached.
			/// 	</summary>
			/// <remarks>
			/// Delay in milliseconds before the animation runs, once start time is reached.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int startOffset = unchecked((int)(0x010101be));

			/// <summary>The first year (inclusive), for example "1940".</summary>
			/// <remarks>
			/// The first year (inclusive), for example "1940".
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int startYear = unchecked((int)(0x0101017c));

			/// <summary>
			/// Indicates that an Activity does not need to have its freeze state
			/// (as returned by
			/// <see cref="android.app.Activity.onSaveInstanceState(android.os.Bundle)">android.app.Activity.onSaveInstanceState(android.os.Bundle)
			/// 	</see>
			/// retained in order to be restarted.  Generally you use this for activities
			/// that do not store any state.  When this flag is set, if for some reason
			/// the activity is killed before it has a chance to save its state,
			/// then the system will not remove it from the activity stack like
			/// it normally would.  Instead, the next time the user navigates to
			/// it its
			/// <see cref="android.app.Activity.onCreate(android.os.Bundle)">android.app.Activity.onCreate(android.os.Bundle)
			/// 	</see>
			/// method will be called
			/// with a null icicle, just like it was starting for the first time.
			/// <p>This is used by the Home activity to make sure it does not get
			/// removed if it crashes for some reason.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int stateNotNeeded = unchecked((int)(0x01010016));

			/// <summary>State identifier indicating the popup will be above the anchor.</summary>
			/// <remarks>
			/// State identifier indicating the popup will be above the anchor.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int state_above_anchor = unchecked((int)(0x010100aa));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// indicating that the Drawable is in a view that is hardware accelerated.
			/// This means that the device can at least render a full-screen scaled
			/// bitmap with one layer of text and bitmaps composited on top of it
			/// at 60fps.  When this is set, the colorBackgroundCacheHint will be
			/// ignored even if it specifies a solid color, since that optimization
			/// is not needed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_accelerated = unchecked((int)(0x0101031b));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view or its parent has been "activated" meaning the user has currently
			/// marked it as being of interest.  This is an alternative representation of
			/// state_checked for when the state should be propagated down the view hierarchy.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_activated = unchecked((int)(0x010102fe));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_active = unchecked((int)(0x010100a2));

			/// <summary>State identifier indicating that the object <var>may</var> display a check mark.
			/// 	</summary>
			/// <remarks>
			/// State identifier indicating that the object <var>may</var> display a check mark.
			/// See
			/// <see cref="state_checked">state_checked</see>
			/// for the identifier that indicates whether it is
			/// actually checked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int state_checkable = unchecked((int)(0x0101009f));

			/// <summary>State identifier indicating that the object is currently checked.</summary>
			/// <remarks>
			/// State identifier indicating that the object is currently checked.  See
			/// <see cref="state_checkable">state_checkable</see>
			/// for an additional identifier that can indicate if
			/// any object may ever display a check, regardless of whether state_checked is
			/// currently set.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int state_checked = unchecked((int)(0x010100a0));

			/// <summary>
			/// State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that the Drawable is in a view that is capable of accepting a drop of
			/// the content currently being manipulated in a drag-and-drop operation.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_drag_can_accept = unchecked((int)(0x01010368));

			/// <summary>
			/// State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that a drag operation (for which the Drawable's view is a valid recipient)
			/// is currently positioned over the Drawable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_drag_hovered = unchecked((int)(0x01010369));

			/// <summary>State identifier indicating the group is empty (has no children).</summary>
			/// <remarks>
			/// State identifier indicating the group is empty (has no children).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int state_empty = unchecked((int)(0x010100a9));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_enabled = unchecked((int)(0x0101009e));

			/// <summary>State identifier indicating the group is expanded.</summary>
			/// <remarks>
			/// State identifier indicating the group is expanded.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int state_expanded = unchecked((int)(0x010100a8));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_first = unchecked((int)(0x010100a4));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_focused = unchecked((int)(0x0101009c));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a pointer is hovering over the view.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_hovered = unchecked((int)(0x01010367));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_last = unchecked((int)(0x010100a6));

			/// <summary>
			/// State for
			/// <see cref="android.inputmethodservice.KeyboardView">KeyboardView</see>
			/// key preview background.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_long_pressable = unchecked((int)(0x0101023c));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_middle = unchecked((int)(0x010100a5));

			/// <summary>State identifier indicating a TextView has a multi-line layout.</summary>
			/// <remarks>
			/// State identifier indicating a TextView has a multi-line layout.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int state_multiline = unchecked((int)(0x0101034d));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when the user is pressing down in a view.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_pressed = unchecked((int)(0x010100a7));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view (or one of its parents) is currently selected.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_selected = unchecked((int)(0x010100a1));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_single = unchecked((int)(0x010100a3));

			/// <summary>
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view's window has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int state_window_focused = unchecked((int)(0x0101009d));

			/// <summary>A resource id of a static drawable.</summary>
			/// <remarks>
			/// A resource id of a static drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int staticWallpaperPreview = unchecked((int)(0x01010331));

			/// <summary>The step size of the rating.</summary>
			/// <remarks>
			/// The step size of the rating.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int stepSize = unchecked((int)(0x01010146));

			/// <summary>
			/// If set to true, this service with be automatically stopped
			/// when the user remove a task rooted in an activity owned by
			/// the application.
			/// </summary>
			/// <remarks>
			/// If set to true, this service with be automatically stopped
			/// when the user remove a task rooted in an activity owned by
			/// the application.  The default is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int stopWithTask = unchecked((int)(0x0101036a));

			/// <summary>
			/// user visible description of the storage
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// </summary>
			/// <remarks>
			/// user visible description of the storage
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int storageDescription = unchecked((int)(0x01010414));

			/// <summary>Different audio stream types.</summary>
			/// <remarks>
			/// Different audio stream types.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>voice</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>system</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>ring</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>music</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>alarm</code></td><td>4</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int streamType = unchecked((int)(0x01010209));

			/// <summary>The zero-based index of the columns to stretch.</summary>
			/// <remarks>
			/// The zero-based index of the columns to stretch. The column indices
			/// must be separated by a comma: 1, 2, 5. Illegal and duplicate
			/// indices are ignored. You can stretch all columns by using the
			/// value "*" instead. Note that a column can be marked stretchable
			/// and shrinkable at the same time.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int stretchColumns = unchecked((int)(0x01010149));

			/// <summary>Defines how columns should stretch to fill the available empty space, if any.
			/// 	</summary>
			/// <remarks>
			/// Defines how columns should stretch to fill the available empty space, if any.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Stretching is disabled. </td></tr>
			/// <tr><td><code>spacingWidth</code></td><td>1</td><td> The spacing between each column is stretched. </td></tr>
			/// <tr><td><code>columnWidth</code></td><td>2</td><td> Each column is stretched equally. </td></tr>
			/// <tr><td><code>spacingWidthUniform</code></td><td>3</td><td> The spacing between each column is uniformly stretched.. </td></tr>
			/// </table>
			/// </remarks>
			public const int stretchMode = unchecked((int)(0x01010116));

			/// <summary>
			/// Specifies subtitle text used for navigationMode="normal"
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// </summary>
			/// <remarks>
			/// Specifies subtitle text used for navigationMode="normal"
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int subtitle = unchecked((int)(0x010102d1));

			/// <summary>Specifies a style to use for subtitle text.</summary>
			/// <remarks>
			/// Specifies a style to use for subtitle text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int subtitleTextStyle = unchecked((int)(0x010102f9));

			/// <summary>The extra value of the subtype.</summary>
			/// <remarks>
			/// The extra value of the subtype. This string can be any string and will be passed to
			/// the SpellChecker.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int subtypeExtraValue = unchecked((int)(0x0101039a));

			/// <summary>The locale of the subtype.</summary>
			/// <remarks>
			/// The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
			/// This is also used by the framework to know the supported locales
			/// of the spell checker.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int subtypeLocale = unchecked((int)(0x01010399));

			/// <summary>
			/// If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, there are two ways to handle this.
			/// </summary>
			/// <remarks>
			/// If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
			/// can handle the action key, you can simply define the action message using this
			/// attribute.  This will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to your
			/// searchable activity.  To examine the string, use
			/// <see cref="android.content.Intent.getStringExtra(string)">getStringExtra(SearchManager.ACTION_MSG)
			/// 	</see>
			/// .
			/// <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int suggestActionMsg = unchecked((int)(0x010101dc));

			/// <summary>
			/// If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, but you do not wish to enable this action key for every suggestion,
			/// then you can use this attribute to control it on a suggestion-by-suggestion basis.
			/// </summary>
			/// <remarks>
			/// If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, but you do not wish to enable this action key for every suggestion,
			/// then you can use this attribute to control it on a suggestion-by-suggestion basis.
			/// First, you must define a column (and name it here) where your suggestions will include
			/// the action string.  Then, in your content provider, you must provide this column, and
			/// when desired, provide data in this column.
			/// The search manager will look at your suggestion cursor, using the string
			/// provided here in order to select a column, and will use that to select a string from
			/// the cursor.  That string will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to
			/// your searchable activity.  To examine the string, use
			/// <see cref="android.content.Intent.getStringExtra(string)">getStringExtra(SearchManager.ACTION_MSG)
			/// 	</see>
			/// .  <i>If the data does not exist for the
			/// selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int suggestActionMsgColumn = unchecked((int)(0x010101dd));

			/// <summary>The summary for the item.</summary>
			/// <remarks>
			/// The summary for the item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int summary = unchecked((int)(0x010101e9));

			/// <summary>Column in data table that summarizes this data.</summary>
			/// <remarks>
			/// Column in data table that summarizes this data.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int summaryColumn = unchecked((int)(0x010102a2));

			/// <summary>
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is unchecked.
			/// </summary>
			/// <remarks>
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is unchecked. If separate on/off summaries are not
			/// needed, the summary attribute can be used instead.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int summaryOff = unchecked((int)(0x010101f0));

			/// <summary>
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is checked.
			/// </summary>
			/// <remarks>
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is checked. If separate on/off summaries are not
			/// needed, the summary attribute can be used instead.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int summaryOn = unchecked((int)(0x010101ef));

			/// <summary><p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int supportsUploading = unchecked((int)(0x0101029b));

			/// <summary>
			/// Minimum width for the switch component
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// </summary>
			/// <remarks>
			/// Minimum width for the switch component
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int switchMinWidth = unchecked((int)(0x01010370));

			/// <summary>
			/// Minimum space between the switch and caption text
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// </summary>
			/// <remarks>
			/// Minimum space between the switch and caption text
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int switchPadding = unchecked((int)(0x01010371));

			/// <summary>Default style for switch preferences.</summary>
			/// <remarks>
			/// Default style for switch preferences.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int switchPreferenceStyle = unchecked((int)(0x0101036d));

			/// <summary>Default style for the Switch widget.</summary>
			/// <remarks>
			/// Default style for the Switch widget.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int switchStyle = unchecked((int)(0x010103d5));

			/// <summary>TextAppearance style for text displayed on the switch thumb.</summary>
			/// <remarks>
			/// TextAppearance style for text displayed on the switch thumb.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int switchTextAppearance = unchecked((int)(0x0101036e));

			/// <summary>The text used on the switch itself when in the "off" state.</summary>
			/// <remarks>
			/// The text used on the switch itself when in the "off" state.
			/// This should be a very SHORT string, as it appears in a small space.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int switchTextOff = unchecked((int)(0x0101036c));

			/// <summary>The text used on the switch itself when in the "on" state.</summary>
			/// <remarks>
			/// The text used on the switch itself when in the "on" state.
			/// This should be a very SHORT string, as it appears in a small space.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int switchTextOn = unchecked((int)(0x0101036b));

			/// <summary>
			/// Flag indicating whether this content provider would like to
			/// participate in data synchronization.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether this content provider would like to
			/// participate in data synchronization.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int syncable = unchecked((int)(0x01010019));

			/// <summary>Layout used to organize each tab's content.</summary>
			/// <remarks>
			/// Layout used to organize each tab's content.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int tabLayout = unchecked((int)(0x010103ee));

			/// <summary>Determines whether the strip under the tab indicators is drawn or not.</summary>
			/// <remarks>
			/// Determines whether the strip under the tab indicators is drawn or not.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int tabStripEnabled = unchecked((int)(0x010102bd));

			/// <summary>Drawable used to draw the left part of the strip underneath the tabs.</summary>
			/// <remarks>
			/// Drawable used to draw the left part of the strip underneath the tabs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int tabStripLeft = unchecked((int)(0x010102bb));

			/// <summary>Drawable used to draw the right part of the strip underneath the tabs.</summary>
			/// <remarks>
			/// Drawable used to draw the right part of the strip underneath the tabs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int tabStripRight = unchecked((int)(0x010102bc));

			/// <summary>Default TabWidget style.</summary>
			/// <remarks>
			/// Default TabWidget style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int tabWidgetStyle = unchecked((int)(0x01010083));

			/// <summary>
			/// Supply a tag for this view containing a String, to be retrieved
			/// later with
			/// <see cref="android.view.View.getTag()">View.getTag()</see>
			/// or
			/// searched for with
			/// <see cref="android.view.View.findViewWithTag(object)">View.findViewWithTag()</see>
			/// .  It is generally preferable to use
			/// IDs (through the android:id attribute) instead of tags because
			/// they are faster and allow for compile-time type checking.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int tag = unchecked((int)(0x010100d1));

			/// <summary>The name of the activity this alias should launch.</summary>
			/// <remarks>
			/// The name of the activity this alias should launch.  The activity
			/// must be in the same manifest as the alias, and have been defined
			/// in that manifest before the alias here.  This must use a Java-style
			/// naming convention to ensure the name is unique, for example
			/// "com.mycompany.MyName".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int targetActivity = unchecked((int)(0x01010202));

			/// <summary>
			/// The class part of the ComponentName to assign to the Intent, as per
			/// <see cref="android.content.Intent.setComponent(android.content.ComponentName)">Intent.setComponent()
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int targetClass = unchecked((int)(0x0101002f));

			/// <summary>Reference to an array resource that be used as description for the targets around the circle.
			/// 	</summary>
			/// <remarks>
			/// Reference to an array resource that be used as description for the targets around the circle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int targetDescriptions = unchecked((int)(0x010103a0));

			/// <summary>Reference to an array resource that be shown as targets around a circle.
			/// 	</summary>
			/// <remarks>
			/// Reference to an array resource that be shown as targets around a circle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int targetDrawables = unchecked((int)(0x010103fd));

			/// <summary>
			/// The name of the application package that an Instrumentation object
			/// will run against.
			/// </summary>
			/// <remarks>
			/// The name of the application package that an Instrumentation object
			/// will run against.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int targetPackage = unchecked((int)(0x01010021));

			/// <summary>This is the SDK version number that the application is targeting.</summary>
			/// <remarks>
			/// This is the SDK version number that the application is targeting.
			/// It is able to run on older versions (down to minSdkVersion), but
			/// was explicitly tested to work with the version specified here.
			/// Specifying this version allows the platform to disable compatibility
			/// code that are not required or enable newer features that are not
			/// available to older applications.  This may also be a string
			/// (such as "Donut") if this is built against a development
			/// branch, in which case minSdkVersion is also forced to be that
			/// string.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int targetSdkVersion = unchecked((int)(0x01010270));

			/// <summary>Specify a task name that activities have an "affinity" to.</summary>
			/// <remarks>
			/// Specify a task name that activities have an "affinity" to.
			/// Use with the application tag (to supply a default affinity for all
			/// activities in the application), or with the activity tag (to supply
			/// a specific affinity for that component).
			/// <p>The default value for this attribute is the same as the package
			/// name, indicating that all activities in the manifest should generally
			/// be considered a single "application" to the user.  You can use this
			/// attribute to modify that behavior: either giving them an affinity
			/// for another task, if the activities are intended to be part of that
			/// task from the user's perspective, or using an empty string for
			/// activities that have no affinity to a task.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int taskAffinity = unchecked((int)(0x01010012));

			/// <summary>
			/// When closing the last activity of a task, this is the animation that is
			/// run on the activity of the next task (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When closing the last activity of a task, this is the animation that is
			/// run on the activity of the next task (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskCloseEnterAnimation = unchecked((int)(0x010100be));

			/// <summary>
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskCloseExitAnimation = unchecked((int)(0x010100bf));

			/// <summary>
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the new task (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the new task (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskOpenEnterAnimation = unchecked((int)(0x010100bc));

			/// <summary>
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskOpenExitAnimation = unchecked((int)(0x010100bd));

			/// <summary>
			/// When sending the current task to the background, this is the
			/// animation that is run on the top activity of the task behind
			/// it (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When sending the current task to the background, this is the
			/// animation that is run on the top activity of the task behind
			/// it (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskToBackEnterAnimation = unchecked((int)(0x010100c2));

			/// <summary>
			/// When sending the current task to the background, this is the
			/// animation that is run on the top activity of the current task
			/// (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When sending the current task to the background, this is the
			/// animation that is run on the top activity of the current task
			/// (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskToBackExitAnimation = unchecked((int)(0x010100c3));

			/// <summary>
			/// When bringing an existing task to the foreground, this is the
			/// animation that is run on the top activity of the task being brought
			/// to the foreground (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When bringing an existing task to the foreground, this is the
			/// animation that is run on the top activity of the task being brought
			/// to the foreground (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskToFrontEnterAnimation = unchecked((int)(0x010100c0));

			/// <summary>
			/// When bringing an existing task to the foreground, this is the
			/// animation that is run on the current foreground activity
			/// (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When bringing an existing task to the foreground, this is the
			/// animation that is run on the current foreground activity
			/// (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int taskToFrontExitAnimation = unchecked((int)(0x010100c1));

			/// <summary>This is the amount of tension.</summary>
			/// <remarks>
			/// This is the amount of tension.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int tension = unchecked((int)(0x0101026a));

			/// <summary>Option to indicate this application is only for testing purposes.</summary>
			/// <remarks>
			/// Option to indicate this application is only for testing purposes.
			/// For example, it may expose functionality or data outside of itself
			/// that would cause a security hole, but is useful for testing.  This
			/// kind of application can not be installed without the
			/// INSTALL_ALLOW_TEST flag, which means only through adb install.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int testOnly = unchecked((int)(0x01010272));

			/// <summary>Text to display.</summary>
			/// <remarks>
			/// Text to display.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int text = unchecked((int)(0x0101014f));

			/// <summary>Present the text in ALL CAPS.</summary>
			/// <remarks>
			/// Present the text in ALL CAPS. This may use a small-caps form when available.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textAllCaps = unchecked((int)(0x0101038c));

			/// <summary>Default appearance of text: color, typeface, size, and style.</summary>
			/// <remarks>
			/// Default appearance of text: color, typeface, size, and style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearance = unchecked((int)(0x01010034));

			/// <summary>
			/// The underline color and thickness for auto correction suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// The underline color and thickness for auto correction suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceAutoCorrectionSuggestion = unchecked((int)(0x010103aa
				));

			/// <summary>Text color, typeface, size, and style for the text inside of a button.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for the text inside of a button.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceButton = unchecked((int)(0x01010207));

			/// <summary>
			/// The underline color and thickness for easy correct suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// The underline color and thickness for easy correct suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceEasyCorrectSuggestion = unchecked((int)(0x010103a8
				));

			/// <summary>
			/// Default appearance of text against an inverted background:
			/// color, typeface, size, and style.
			/// </summary>
			/// <remarks>
			/// Default appearance of text against an inverted background:
			/// color, typeface, size, and style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceInverse = unchecked((int)(0x01010035));

			/// <summary>Text color, typeface, size, and style for "large" text.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for "large" text. Defaults to primary text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceLarge = unchecked((int)(0x01010040));

			/// <summary>Text color, typeface, size, and style for "large" inverse text.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceLargeInverse = unchecked((int)(0x01010043));

			/// <summary>Text color, typeface, size, and style for the text inside of a popup menu.
			/// 	</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for the text inside of a popup menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceLargePopupMenu = unchecked((int)(0x01010301));

			/// <summary>The preferred TextAppearance for the primary text of list items.</summary>
			/// <remarks>
			/// The preferred TextAppearance for the primary text of list items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceListItem = unchecked((int)(0x0101039e));

			/// <summary>The preferred TextAppearance for the primary text of small list items.</summary>
			/// <remarks>
			/// The preferred TextAppearance for the primary text of small list items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceListItemSmall = unchecked((int)(0x0101039f));

			/// <summary>Text color, typeface, size, and style for "medium" text.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceMedium = unchecked((int)(0x01010041));

			/// <summary>Text color, typeface, size, and style for "medium" inverse text.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceMediumInverse = unchecked((int)(0x01010044));

			/// <summary>
			/// The underline color and thickness for misspelled suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// The underline color and thickness for misspelled suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceMisspelledSuggestion = unchecked((int)(0x010103a9)
				);

			/// <summary>Text color, typeface, size, and style for system search result subtitle.
			/// 	</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceSearchResultSubtitle = unchecked((int)(0x010102a0)
				);

			/// <summary>Text color, typeface, size, and style for system search result title.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceSearchResultTitle = unchecked((int)(0x010102a1));

			/// <summary>Text color, typeface, size, and style for "small" text.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceSmall = unchecked((int)(0x01010042));

			/// <summary>Text color, typeface, size, and style for "small" inverse text.</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceSmallInverse = unchecked((int)(0x01010045));

			/// <summary>Text color, typeface, size, and style for small text inside of a popup menu.
			/// 	</summary>
			/// <remarks>
			/// Text color, typeface, size, and style for small text inside of a popup menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textAppearanceSmallPopupMenu = unchecked((int)(0x01010302));

			/// <summary>Drawable to use for check marks.</summary>
			/// <remarks>
			/// Drawable to use for check marks.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textCheckMark = unchecked((int)(0x01010046));

			/// <summary>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textCheckMarkInverse = unchecked((int)(0x01010047));

			/// <summary>Color of text (usually same as colorForeground).</summary>
			/// <remarks>
			/// Color of text (usually same as colorForeground).
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColor = unchecked((int)(0x01010098));

			/// <summary>Color of list item text in alert dialogs.</summary>
			/// <remarks>
			/// Color of list item text in alert dialogs.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorAlertDialogListItem = unchecked((int)(0x01010306));

			/// <summary>Color of highlighted text.</summary>
			/// <remarks>
			/// Color of highlighted text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorHighlight = unchecked((int)(0x01010099));

			/// <summary>Color of highlighted text, when used in a light theme.</summary>
			/// <remarks>
			/// Color of highlighted text, when used in a light theme.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorHighlightInverse = unchecked((int)(0x0101034f));

			/// <summary>Color of hint text (displayed when the field is empty).</summary>
			/// <remarks>
			/// Color of hint text (displayed when the field is empty).
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorHint = unchecked((int)(0x0101009a));

			/// <summary>Inverse hint text color.</summary>
			/// <remarks>
			/// Inverse hint text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorHintInverse = unchecked((int)(0x0101003f));

			/// <summary>Color of link text (URLs).</summary>
			/// <remarks>
			/// Color of link text (URLs).
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorLink = unchecked((int)(0x0101009b));

			/// <summary>Color of link text (URLs), when used in a light theme.</summary>
			/// <remarks>
			/// Color of link text (URLs), when used in a light theme.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorLinkInverse = unchecked((int)(0x01010350));

			/// <summary>The most prominent text color.</summary>
			/// <remarks>
			/// The most prominent text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorPrimary = unchecked((int)(0x01010036));

			/// <summary>Bright text color.</summary>
			/// <remarks>
			/// Bright text color. Only differentiates based on the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorPrimaryDisableOnly = unchecked((int)(0x01010037));

			/// <summary>Primary inverse text color, useful for inverted backgrounds.</summary>
			/// <remarks>
			/// Primary inverse text color, useful for inverted backgrounds.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorPrimaryInverse = unchecked((int)(0x01010039));

			/// <summary>Bright inverse text color.</summary>
			/// <remarks>
			/// Bright inverse text color. Only differentiates based on the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorPrimaryInverseDisableOnly = unchecked((int)(0x0101028b)
				);

			/// <summary>Bright inverse text color.</summary>
			/// <remarks>
			/// Bright inverse text color. This does not differentiate the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorPrimaryInverseNoDisable = unchecked((int)(0x0101003d));

			/// <summary>Bright text color.</summary>
			/// <remarks>
			/// Bright text color. This does not differentiate the disabled state. As an example,
			/// buttons use this since they display the disabled state via the background and not the
			/// foreground text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorPrimaryNoDisable = unchecked((int)(0x0101003b));

			/// <summary>Text color for urls in search suggestions, used by things like global search and the browser.
			/// 	</summary>
			/// <remarks>
			/// Text color for urls in search suggestions, used by things like global search and the browser. @hide
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorSearchUrl = unchecked((int)(0x01010267));

			/// <summary>Secondary text color.</summary>
			/// <remarks>
			/// Secondary text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorSecondary = unchecked((int)(0x01010038));

			/// <summary>Secondary inverse text color, useful for inverted backgrounds.</summary>
			/// <remarks>
			/// Secondary inverse text color, useful for inverted backgrounds.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorSecondaryInverse = unchecked((int)(0x0101003a));

			/// <summary>Dim inverse text color.</summary>
			/// <remarks>
			/// Dim inverse text color. This does not differentiate the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorSecondaryInverseNoDisable = unchecked((int)(0x0101003e)
				);

			/// <summary>Dim text color.</summary>
			/// <remarks>
			/// Dim text color. This does not differentiate the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorSecondaryNoDisable = unchecked((int)(0x0101003c));

			/// <summary>Tertiary text color.</summary>
			/// <remarks>
			/// Tertiary text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorTertiary = unchecked((int)(0x01010212));

			/// <summary>Tertiary inverse text color, useful for inverted backgrounds.</summary>
			/// <remarks>
			/// Tertiary inverse text color, useful for inverted backgrounds.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textColorTertiaryInverse = unchecked((int)(0x01010213));

			/// <summary>Reference to a drawable that will be drawn under the insertion cursor.</summary>
			/// <remarks>
			/// Reference to a drawable that will be drawn under the insertion cursor.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textCursorDrawable = unchecked((int)(0x01010362));

			/// <summary>Direction of the text.</summary>
			/// <remarks>
			/// Direction of the text. A heuristic is used to determine the resolved text direction
			/// of paragraphs.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>inherit</code></td><td>0</td><td> Default </td></tr>
			/// <tr><td><code>firstStrong</code></td><td>1</td><td> Default for the root view. The first strong directional character determines the
			/// paragraph direction.  If there is no strong directional character, the paragraph
			/// direction is the view’s resolved layout direction. </td></tr>
			/// <tr><td><code>anyRtl</code></td><td>2</td><td> The paragraph direction is RTL if it contains any strong RTL character, otherwise
			/// it is LTR if it contains any strong LTR characters.  If there are neither, the
			/// paragraph direction is the view’s resolved layout direction. </td></tr>
			/// <tr><td><code>charCount</code></td><td>3</td><td> The paragraph direction is the same as the one held by a 60% majority of the
			/// characters. If there is no majority then the paragraph direction is the resolved
			/// layout direction of the View. </td></tr>
			/// <tr><td><code>ltr</code></td><td>4</td><td> The paragraph direction is left to right. </td></tr>
			/// <tr><td><code>rtl</code></td><td>5</td><td> The paragraph direction is right to left. </td></tr>
			/// </table>
			/// </remarks>
			public const int textDirection = unchecked((int)(0x010103e0));

			/// <summary>Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
			/// 	</summary>
			/// <remarks>
			/// Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textEditNoPasteWindowLayout = unchecked((int)(0x01010315));

			/// <summary>
			/// The layout of the view that is displayed on top of the cursor to paste inside a
			/// TextEdit field.
			/// </summary>
			/// <remarks>
			/// The layout of the view that is displayed on top of the cursor to paste inside a
			/// TextEdit field.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textEditPasteWindowLayout = unchecked((int)(0x01010314));

			/// <summary>Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
			/// 	</summary>
			/// <remarks>
			/// Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textEditSideNoPasteWindowLayout = unchecked((int)(0x0101035f));

			/// <summary>
			/// Used instead of textEditPasteWindowLayout when the window is moved on the side of the
			/// insertion cursor because it would be clipped if it were positioned on top.
			/// </summary>
			/// <remarks>
			/// Used instead of textEditPasteWindowLayout when the window is moved on the side of the
			/// insertion cursor because it would be clipped if it were positioned on top.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textEditSidePasteWindowLayout = unchecked((int)(0x0101035e));

			/// <summary>Layout of the TextView item that will populate the suggestion popup window.
			/// 	</summary>
			/// <remarks>
			/// Layout of the TextView item that will populate the suggestion popup window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textEditSuggestionItemLayout = unchecked((int)(0x01010374));

			/// <summary>When set to true, the list will filter results as the user types.</summary>
			/// <remarks>
			/// When set to true, the list will filter results as the user types. The
			/// List's adapter must support the Filterable interface for this to work.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textFilterEnabled = unchecked((int)(0x010100ff));

			/// <summary>Indicates that the content of a non-editable TextView can be selected.</summary>
			/// <remarks>
			/// Indicates that the content of a non-editable TextView can be selected.
			/// Default value is false. EditText content is always selectable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textIsSelectable = unchecked((int)(0x01010316));

			/// <summary>The text for the button when it is not checked.</summary>
			/// <remarks>
			/// The text for the button when it is not checked.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textOff = unchecked((int)(0x01010125));

			/// <summary>The text for the button when it is checked.</summary>
			/// <remarks>
			/// The text for the button when it is checked.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textOn = unchecked((int)(0x01010124));

			/// <summary>Sets the horizontal scaling factor for the text.</summary>
			/// <remarks>
			/// Sets the horizontal scaling factor for the text.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textScaleX = unchecked((int)(0x01010151));

			/// <summary>
			/// Reference to a drawable that will be used to display a text selection
			/// anchor for positioning the cursor within text.
			/// </summary>
			/// <remarks>
			/// Reference to a drawable that will be used to display a text selection
			/// anchor for positioning the cursor within text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textSelectHandle = unchecked((int)(0x010102c7));

			/// <summary>
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the left side of a selection region.
			/// </summary>
			/// <remarks>
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the left side of a selection region.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textSelectHandleLeft = unchecked((int)(0x010102c5));

			/// <summary>
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the right side of a selection region.
			/// </summary>
			/// <remarks>
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the right side of a selection region.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textSelectHandleRight = unchecked((int)(0x010102c6));

			/// <summary>
			/// Reference to a style that will be used for the window containing a text
			/// selection anchor.
			/// </summary>
			/// <remarks>
			/// Reference to a style that will be used for the window containing a text
			/// selection anchor.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textSelectHandleWindowStyle = unchecked((int)(0x010102c8));

			/// <summary>Size of text.</summary>
			/// <remarks>
			/// Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
			/// Supported values include the following:<p/>
			/// <ul>
			/// <li><b>px</b> Pixels</li>
			/// <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See
			/// <see cref="android.util.DisplayMetrics">android.util.DisplayMetrics</see>
			/// for more information.</li>
			/// <li><b>pt</b> Points</li>
			/// <li><b>dip</b> Device independent pixels. See
			/// <see cref="android.util.DisplayMetrics">android.util.DisplayMetrics</see>
			/// for more information.</li>
			/// </ul>
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int textSize = unchecked((int)(0x01010095));

			/// <summary>Default text typeface style.</summary>
			/// <remarks>
			/// Default text typeface style.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>bold</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>italic</code></td><td>2</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int textStyle = unchecked((int)(0x01010097));

			/// <summary>
			/// Reference to a style that will be used for the window containing a list of possible
			/// text suggestions in an EditText.
			/// </summary>
			/// <remarks>
			/// Reference to a style that will be used for the window containing a list of possible
			/// text suggestions in an EditText.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textSuggestionsWindowStyle = unchecked((int)(0x01010373));

			/// <summary>
			/// The underline color
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// The underline color
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int textUnderlineColor = unchecked((int)(0x010103ab));

			/// <summary>
			/// The underline thickness
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// The underline thickness
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// </remarks>
			public const int textUnderlineThickness = unchecked((int)(0x010103ac));

			/// <summary>Default TextView style.</summary>
			/// <remarks>
			/// Default TextView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int textViewStyle = unchecked((int)(0x01010084));

			/// <summary>The overall theme to use for an activity.</summary>
			/// <remarks>
			/// The overall theme to use for an activity.  Use with either the
			/// application tag (to supply a default theme for all activities) or
			/// the activity tag (to supply a specific theme for that activity).
			/// <p>This automatically sets
			/// your activity's Context to use this theme, and may also be used
			/// for "starting" animations prior to the activity being launched (to
			/// better match what the activity actually looks like).  It is a reference
			/// to a style resource defining the theme.  If not set, the default
			/// system theme will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int theme = unchecked((int)(0x01010000));

			/// <summary>Thickness of the ring.</summary>
			/// <remarks>
			/// Thickness of the ring. When defined, thicknessRatio is ignored.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int thickness = unchecked((int)(0x01010260));

			/// <summary>Thickness of the ring expressed as a ratio of the ring's width.</summary>
			/// <remarks>
			/// Thickness of the ring expressed as a ratio of the ring's width. For instance,
			/// if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
			/// This value is ignored if innerRadius is defined. Default value is 3.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int thicknessRatio = unchecked((int)(0x0101019c));

			/// <summary>Draws the thumb on a seekbar.</summary>
			/// <remarks>
			/// Draws the thumb on a seekbar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int thumb = unchecked((int)(0x01010142));

			/// <summary>An offset for the thumb that allows it to extend out of the range of the track.
			/// 	</summary>
			/// <remarks>
			/// An offset for the thumb that allows it to extend out of the range of the track.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int thumbOffset = unchecked((int)(0x01010143));

			/// <summary>Amount of padding on either side of text within the switch thumb.</summary>
			/// <remarks>
			/// Amount of padding on either side of text within the switch thumb.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int thumbTextPadding = unchecked((int)(0x01010372));

			/// <summary>Reference to a the wallpaper's thumbnail bitmap.</summary>
			/// <remarks>
			/// Reference to a the wallpaper's thumbnail bitmap.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int thumbnail = unchecked((int)(0x010102a5));

			/// <summary>Defines the tile mode.</summary>
			/// <remarks>
			/// Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
			/// Gravity is ignored when the tile mode is enabled.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
			/// <tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
			/// <tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap in both direction. </td></tr>
			/// <tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image horizontally and vertically, alternating
			/// mirror images so that adjacent images always seam. </td></tr>
			/// </table>
			/// </remarks>
			public const int tileMode = unchecked((int)(0x01010201));

			/// <summary>The TimePicker style.</summary>
			/// <remarks>
			/// The TimePicker style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int timePickerStyle = unchecked((int)(0x010103be));

			/// <summary>Set a tinting color for the image.</summary>
			/// <remarks>
			/// Set a tinting color for the image.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int tint = unchecked((int)(0x01010121));

			/// <summary>The title associated with the item.</summary>
			/// <remarks>
			/// The title associated with the item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int title = unchecked((int)(0x010101e1));

			/// <summary>The condensed title associated with the item.</summary>
			/// <remarks>
			/// The condensed title associated with the item.  This is used in situations where the
			/// normal title may be too long to be displayed.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int titleCondensed = unchecked((int)(0x010101e2));

			/// <summary>Specifies a style to use for title text.</summary>
			/// <remarks>
			/// Specifies a style to use for title text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int titleTextStyle = unchecked((int)(0x010102f8));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int toAlpha = unchecked((int)(0x010101cb));

			/// <summary><p>Must be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int toDegrees = unchecked((int)(0x010101b4));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int toXDelta = unchecked((int)(0x010101c7));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int toXScale = unchecked((int)(0x010101c3));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int toYDelta = unchecked((int)(0x010101c9));

			/// <summary><p>May be a floating point value, such as "<code>1.2</code>".</summary>
			/// <remarks>
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int toYScale = unchecked((int)(0x010101c5));

			/// <summary>
			/// Background to use for toasts
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// Background to use for toasts
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int toastFrameBackground = unchecked((int)(0x010103c9));

			/// <summary>Amount of top padding inside the gradient shape.</summary>
			/// <remarks>
			/// Amount of top padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int top = unchecked((int)(0x010101ae));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int topBright = unchecked((int)(0x010100cb));

			/// <summary>Drawable to use for chevron animation on the top.</summary>
			/// <remarks>
			/// Drawable to use for chevron animation on the top. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int topChevronDrawable = unchecked((int)(0x01010401));

			/// <summary>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <remarks>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int topDark = unchecked((int)(0x010100c7));

			/// <summary>Radius of the top left corner.</summary>
			/// <remarks>
			/// Radius of the top left corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int topLeftRadius = unchecked((int)(0x010101a9));

			/// <summary>Extra offset for the handle at the top of the SlidingDrawer.</summary>
			/// <remarks>
			/// Extra offset for the handle at the top of the SlidingDrawer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int topOffset = unchecked((int)(0x01010258));

			/// <summary>Radius of the top right corner.</summary>
			/// <remarks>
			/// Radius of the top right corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int topRightRadius = unchecked((int)(0x010101aa));

			/// <summary>Drawable to use as the "track" that the switch thumb slides within.</summary>
			/// <remarks>
			/// Drawable to use as the "track" that the switch thumb slides within.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int track = unchecked((int)(0x0101036f));

			/// <summary>Sets the transcript mode for the list.</summary>
			/// <remarks>
			/// Sets the transcript mode for the list. In transcript mode, the list
			/// scrolls to the bottom to make new items visible when they are added.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>disabled</code></td><td>0</td><td> Disables transcript mode. This is the default value. </td></tr>
			/// <tr><td><code>normal</code></td><td>1</td><td> The list will automatically scroll to the bottom when
			/// a data set change notification is received and only if the last item is
			/// already visible on screen. </td></tr>
			/// <tr><td><code>alwaysScroll</code></td><td>2</td><td> The list will automatically scroll to the bottom, no matter what items
			/// are currently visible. </td></tr>
			/// </table>
			/// </remarks>
			public const int transcriptMode = unchecked((int)(0x01010100));

			/// <summary>x location of the pivot point around which the view will rotate and scale.
			/// 	</summary>
			/// <remarks>
			/// x location of the pivot point around which the view will rotate and scale.
			/// This xml attribute sets the pivotX property of the View.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int transformPivotX = unchecked((int)(0x01010320));

			/// <summary>y location of the pivot point around which the view will rotate and scale.
			/// 	</summary>
			/// <remarks>
			/// y location of the pivot point around which the view will rotate and scale.
			/// This xml attribute sets the pivotY property of the View.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int transformPivotY = unchecked((int)(0x01010321));

			/// <summary>translation in x of the view.</summary>
			/// <remarks>
			/// translation in x of the view. This value is added post-layout to the left
			/// property of the view, which is set by its layout.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int translationX = unchecked((int)(0x01010322));

			/// <summary>translation in y of the view.</summary>
			/// <remarks>
			/// translation in y of the view. This value is added post-layout to the left
			/// property of the view, which is set by its layout.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int translationY = unchecked((int)(0x01010323));

			/// <summary>Type of gradient.</summary>
			/// <remarks>
			/// Type of gradient. The default type is linear.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>linear</code></td><td>0</td><td> Linear gradient. </td></tr>
			/// <tr><td><code>radial</code></td><td>1</td><td> Radial, or circular, gradient. </td></tr>
			/// <tr><td><code>sweep</code></td><td>2</td><td> Sweep, or angled or diamond, gradient. </td></tr>
			/// </table>
			/// </remarks>
			public const int type = unchecked((int)(0x010101a1));

			/// <summary>Default text typeface.</summary>
			/// <remarks>
			/// Default text typeface.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>sans</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>serif</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>monospace</code></td><td>3</td><td></td></tr>
			/// </table>
			/// </remarks>
			public const int typeface = unchecked((int)(0x01010096));

			/// <summary>Extra options for an activity's UI.</summary>
			/// <remarks>
			/// Extra options for an activity's UI. Applies to either the
			/// <code>&lt;activity&gt;</code>
			/// or
			/// <code>&lt;application&gt;</code>
			/// tag. If specified on the
			/// <code>&lt;application&gt;</code>
			/// tag these will be considered defaults for all activities in the
			/// application.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> No extra UI options. This is the default. </td></tr>
			/// <tr><td><code>splitActionBarWhenNarrow</code></td><td>1</td><td> Split the options menu into a separate bar at the bottom of
			/// the screen when severely constrained for horizontal space.
			/// (e.g. portrait mode on a phone.) Instead of a small number
			/// of action buttons appearing in the action bar at the top
			/// of the screen, the action bar will split into the top navigation
			/// section and the bottom menu section. Menu items will not be
			/// split across the two bars; they will always appear together. </td></tr>
			/// </table>
			/// </remarks>
			public const int uiOptions = unchecked((int)(0x01010398));

			/// <summary>Color used to draw the user's strokes until we are sure it's a gesture.</summary>
			/// <remarks>
			/// Color used to draw the user's strokes until we are sure it's a gesture.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int uncertainGestureColor = unchecked((int)(0x01010276));

			/// <summary>The color for the dates of an unfocused month.</summary>
			/// <remarks>
			/// The color for the dates of an unfocused month.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int unfocusedMonthDateColor = unchecked((int)(0x01010344));

			/// <summary>Sets the alpha on the items that are not selected.</summary>
			/// <remarks>
			/// Sets the alpha on the items that are not selected.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int unselectedAlpha = unchecked((int)(0x0101020e));

			/// <summary>Update period in milliseconds, or 0 if the AppWidget will update itself.
			/// 	</summary>
			/// <remarks>
			/// Update period in milliseconds, or 0 if the AppWidget will update itself.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int updatePeriodMillis = unchecked((int)(0x01010250));

			/// <summary>
			/// When set to true, tells GridLayout to use default margins when none are specified
			/// in a view's layout parameters.
			/// </summary>
			/// <remarks>
			/// When set to true, tells GridLayout to use default margins when none are specified
			/// in a view's layout parameters.
			/// The default value is false.
			/// See
			/// <see cref="android.widget.GridLayout.setUseDefaultMargins(bool)">android.widget.GridLayout.setUseDefaultMargins(bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int useDefaultMargins = unchecked((int)(0x01010379));

			/// <summary>Use the drawable's intrinsic width and height as minimum size values.</summary>
			/// <remarks>
			/// Use the drawable's intrinsic width and height as minimum size values.
			/// Useful if the target drawable is a 9-patch or otherwise should not be scaled
			/// down beyond a minimum size.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int useIntrinsicSizeAsMinimum = unchecked((int)(0x01010310));

			/// <summary><p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int useLevel = unchecked((int)(0x0101019f));

			/// <summary><p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// 	</summary>
			/// <remarks>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int userVisible = unchecked((int)(0x01010291));

			/// <summary>Concrete value to assign to this piece of named meta-data.</summary>
			/// <remarks>
			/// Concrete value to assign to this piece of named meta-data.
			/// The data can later be retrieved from the meta data Bundle
			/// through
			/// <see cref="android.os.Bundle.getString(string)">Bundle.getString</see>
			/// ,
			/// <see cref="android.os.Bundle.getInt(string)">Bundle.getInt</see>
			/// ,
			/// <see cref="android.os.Bundle.getBoolean(string)">Bundle.getBoolean</see>
			/// ,
			/// or
			/// <see cref="android.os.Bundle.getFloat(string)">Bundle.getFloat</see>
			/// depending
			/// on the type used here.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int value = unchecked((int)(0x01010024));

			/// <summary>Value the animation starts from.</summary>
			/// <remarks>
			/// Value the animation starts from.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int valueFrom = unchecked((int)(0x010102de));

			/// <summary>Value the animation animates to.</summary>
			/// <remarks>
			/// Value the animation animates to.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int valueTo = unchecked((int)(0x010102df));

			/// <summary>The type of valueFrom and valueTo.</summary>
			/// <remarks>
			/// The type of valueFrom and valueTo.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>floatType</code></td><td>0</td><td> valueFrom and valueTo are floats. This is the default value is valueType is
			/// unspecified. Note that if either valueFrom or valueTo represent colors
			/// (beginning with "#"), then this attribute is ignored and the color values are
			/// interpreted as integers. </td></tr>
			/// <tr><td><code>intType</code></td><td>1</td><td> valueFrom and valueTo are integers. </td></tr>
			/// </table>
			/// </remarks>
			public const int valueType = unchecked((int)(0x010102e0));

			/// <summary>
			/// If true, allows the drawable's padding to change based on the
			/// current state that is selected.
			/// </summary>
			/// <remarks>
			/// If true, allows the drawable's padding to change based on the
			/// current state that is selected.  If false, the padding will
			/// stay the same (based on the maximum padding of all the states).
			/// Enabling this feature requires that the owner of the drawable
			/// deal with performing layout when the state changes, which is
			/// often not supported.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int variablePadding = unchecked((int)(0x01010195));

			/// <summary>Internal version code.</summary>
			/// <remarks>
			/// Internal version code.  This is the number used to determine whether
			/// one version is more recent than another: it has no other meaning than
			/// that higher numbers are more recent.  You could use this number to
			/// encode a "x.y" in the lower and upper 16 bits, make it a build
			/// number, simply increase it by one each time a new version is
			/// released, or define it however else you want, as long as each
			/// successive version has a higher number.  This is not a version
			/// number generally shown to the user, that is usually supplied
			/// with
			/// <see cref="android.R.attr.versionName">android.R.attr.versionName</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int versionCode = unchecked((int)(0x0101021b));

			/// <summary>The text shown to the user to indicate the version they have.</summary>
			/// <remarks>
			/// The text shown to the user to indicate the version they have.  This
			/// is used for no other purpose than display to the user; the actual
			/// significant version number is given by
			/// <see cref="android.R.attr.versionCode">android.R.attr.versionCode</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int versionName = unchecked((int)(0x0101021c));

			/// <summary>Amount to offset the touch Y coordinate by, for bias correction.</summary>
			/// <remarks>
			/// Amount to offset the touch Y coordinate by, for bias correction.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int verticalCorrection = unchecked((int)(0x0101023a));

			/// <summary>Default vertical divider between menu items.</summary>
			/// <remarks>
			/// Default vertical divider between menu items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int verticalDivider = unchecked((int)(0x0101012e));

			/// <summary>Default vertical gap between rows of keys.</summary>
			/// <remarks>
			/// Default vertical gap between rows of keys.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int verticalGap = unchecked((int)(0x01010240));

			/// <summary>Used to shift center of pattern vertically.</summary>
			/// <remarks>
			/// Used to shift center of pattern vertically.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int verticalOffset = unchecked((int)(0x01010409));

			/// <summary>Determines which side the vertical scroll bar should be placed on.</summary>
			/// <remarks>
			/// Determines which side the vertical scroll bar should be placed on.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>defaultPosition</code></td><td>0</td><td> Place the scroll bar wherever the system default determines. </td></tr>
			/// <tr><td><code>left</code></td><td>1</td><td> Place the scroll bar on the left. </td></tr>
			/// <tr><td><code>right</code></td><td>2</td><td> Place the scroll bar on the right. </td></tr>
			/// </table>
			/// </remarks>
			public const int verticalScrollbarPosition = unchecked((int)(0x01010334));

			/// <summary>Defines the default vertical spacing between rows.</summary>
			/// <remarks>
			/// Defines the default vertical spacing between rows.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int verticalSpacing = unchecked((int)(0x01010115));

			/// <summary>Tactile feedback duration for actions.</summary>
			/// <remarks>
			/// Tactile feedback duration for actions. Set to '0' for no vibration.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int vibrationDuration = unchecked((int)(0x01010406));

			/// <summary>Controls the initial visibility of the view.</summary>
			/// <remarks>
			/// Controls the initial visibility of the view.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>visible</code></td><td>0</td><td> Visible on screen; the default value. </td></tr>
			/// <tr><td><code>invisible</code></td><td>1</td><td> Not displayed, but taken into account during layout (space is left for it). </td></tr>
			/// <tr><td><code>gone</code></td><td>2</td><td> Completely hidden, as if the view had not been added. </td></tr>
			/// </table>
			/// </remarks>
			public const int visibility = unchecked((int)(0x010100dc));

			/// <summary>
			/// Provides initial visibility state of the drawable; the default
			/// value is false.
			/// </summary>
			/// <remarks>
			/// Provides initial visibility state of the drawable; the default
			/// value is false.  See
			/// <see cref="android.graphics.drawable.Drawable.setVisible(bool, bool)">android.graphics.drawable.Drawable.setVisible(bool, bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int visible = unchecked((int)(0x01010194));

			/// <summary>
			/// Flag indicating whether the application requests the VM to operate in
			/// the safe mode.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether the application requests the VM to operate in
			/// the safe mode.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int vmSafeMode = unchecked((int)(0x010102b8));

			/// <summary>
			/// If provided, this specifies the spoken language to be expected, and that it will be
			/// different than the one set in the
			/// <see cref="System.Globalization.CultureInfo.CurrentCulture()">System.Globalization.CultureInfo.CurrentCulture()
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int voiceLanguage = unchecked((int)(0x01010255));

			/// <summary>
			/// If provided, this specifies the language model that should be used by the
			/// voice recognition system.
			/// </summary>
			/// <remarks>
			/// If provided, this specifies the language model that should be used by the
			/// voice recognition system.  See
			/// <see cref="android.speech.RecognizerIntent.EXTRA_LANGUAGE_MODEL"></see>
			/// for more information.
			/// If not provided, the default value
			/// <see cref="android.speech.RecognizerIntent.LANGUAGE_MODEL_FREE_FORM"></see>
			/// will be used.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int voiceLanguageModel = unchecked((int)(0x01010253));

			/// <summary>
			/// If provided, enforces the maximum number of results to return, including the "best"
			/// result which will always be provided as the SEARCH intent's primary query.
			/// </summary>
			/// <remarks>
			/// If provided, enforces the maximum number of results to return, including the "best"
			/// result which will always be provided as the SEARCH intent's primary query.  Must be one
			/// or greater.  If not provided, the recognizer will choose how many results to return.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int voiceMaxResults = unchecked((int)(0x01010256));

			/// <summary>If provided, this specifies a prompt that will be displayed during voice input.
			/// 	</summary>
			/// <remarks>
			/// If provided, this specifies a prompt that will be displayed during voice input.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int voicePromptText = unchecked((int)(0x01010254));

			/// <summary>Voice search features are controlled by mode bits in this field.</summary>
			/// <remarks>
			/// Voice search features are controlled by mode bits in this field.  Omitting
			/// this field, or setting to zero, provides default behavior.
			/// If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
			/// also be set.  <i>Optional attribute.</i>
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>showVoiceSearchButton</code></td><td>0x01</td><td> If set, display a voice search button.  This only takes effect if voice search is
			/// available on the device. </td></tr>
			/// <tr><td><code>launchWebSearch</code></td><td>0x02</td><td> If set, the voice search button will take the user directly to a built-in
			/// voice web search activity.  Most applications will not use this flag, as it
			/// will take the user away from the activity in which search was invoked. </td></tr>
			/// <tr><td><code>launchRecognizer</code></td><td>0x04</td><td> If set, the voice search button will take the user directly to a built-in
			/// voice recording activity.  This activity will prompt the user to speak,
			/// transcribe the spoken text, and forward the resulting query
			/// text to the searchable activity, just as if the user had typed it into
			/// the search UI and clicked the search button. </td></tr>
			/// </table>
			/// </remarks>
			public const int voiceSearchMode = unchecked((int)(0x01010252));

			/// <summary>
			/// When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the new activity (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the new activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperCloseEnterAnimation = unchecked((int)(0x01010295));

			/// <summary>
			/// When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the old wallpaper activity (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the old wallpaper activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperCloseExitAnimation = unchecked((int)(0x01010296));

			/// <summary>
			/// When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the previous activity
			/// (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the previous activity
			/// (which is entering the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperIntraCloseEnterAnimation = unchecked((int)(0x01010299));

			/// <summary>
			/// When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperIntraCloseExitAnimation = unchecked((int)(0x0101029a));

			/// <summary>
			/// When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the new activity
			/// (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the new activity
			/// (which is entering the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperIntraOpenEnterAnimation = unchecked((int)(0x01010297));

			/// <summary>
			/// When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperIntraOpenExitAnimation = unchecked((int)(0x01010298));

			/// <summary>
			/// When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the new wallpaper activity (which is entering the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the new wallpaper activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperOpenEnterAnimation = unchecked((int)(0x01010293));

			/// <summary>
			/// When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the current activity (which is exiting the screen).
			/// </summary>
			/// <remarks>
			/// When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the current activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int wallpaperOpenExitAnimation = unchecked((int)(0x01010294));

			/// <summary>Drawable to use for wave ripple animation.</summary>
			/// <remarks>
			/// Drawable to use for wave ripple animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int waveDrawable = unchecked((int)(0x01010403));

			/// <summary>Default WebTextView style.</summary>
			/// <remarks>
			/// Default WebTextView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int webTextViewStyle = unchecked((int)(0x010102b9));

			/// <summary>Default WebView style.</summary>
			/// <remarks>
			/// Default WebView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int webViewStyle = unchecked((int)(0x01010085));

			/// <summary>The text appearance for the week day abbreviation of the calendar header.
			/// 	</summary>
			/// <remarks>
			/// The text appearance for the week day abbreviation of the calendar header.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int weekDayTextAppearance = unchecked((int)(0x01010348));

			/// <summary>The color for the week numbers.</summary>
			/// <remarks>
			/// The color for the week numbers.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int weekNumberColor = unchecked((int)(0x01010345));

			/// <summary>The color for the sepatator line between weeks.</summary>
			/// <remarks>
			/// The color for the sepatator line between weeks.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </remarks>
			public const int weekSeparatorLineColor = unchecked((int)(0x01010346));

			/// <summary>Defines the maximum weight sum.</summary>
			/// <remarks>
			/// Defines the maximum weight sum. If unspecified, the sum is computed
			/// by adding the layout_weight of all of the children. This can be
			/// used for instance to give a single child 50% of the total available
			/// space by giving it a layout_weight of 0.5 and setting the weightSum
			/// to 1.0.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int weightSum = unchecked((int)(0x01010128));

			/// <summary>The layout for the controllable widget portion of a Preference.</summary>
			/// <remarks>
			/// The layout for the controllable widget portion of a Preference. This is inflated
			/// into the layout for a Preference and should be used more frequently than
			/// the layout attribute. For example, a checkbox preference would specify
			/// a custom layout (consisting of just the CheckBox) here.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int widgetLayout = unchecked((int)(0x010101eb));

			/// <summary>Makes the TextView be exactly this many pixels wide.</summary>
			/// <remarks>
			/// Makes the TextView be exactly this many pixels wide.
			/// You could get the same effect by specifying this number in the
			/// layout parameters.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int width = unchecked((int)(0x01010159));

			/// <summary>
			/// Flag indicating whether this window should have an Action Bar
			/// in place of the usual title bar.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether this window should have an Action Bar
			/// in place of the usual title bar.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowActionBar = unchecked((int)(0x010102cd));

			/// <summary>
			/// Flag indicating whether this window's Action Bar should overlay
			/// application content.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether this window's Action Bar should overlay
			/// application content. Does nothing if the window would not
			/// have an Action Bar.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowActionBarOverlay = unchecked((int)(0x010102e4));

			/// <summary>
			/// Flag indicating whether action modes should overlay window content
			/// when there is not reserved space for their UI (such as an Action Bar).
			/// </summary>
			/// <remarks>
			/// Flag indicating whether action modes should overlay window content
			/// when there is not reserved space for their UI (such as an Action Bar).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowActionModeOverlay = unchecked((int)(0x010102dd));

			/// <summary>
			/// Reference to a style resource holding
			/// the set of window animations to use, which can be
			/// any of the attributes defined by
			/// <see cref="android.R.styleable.WindowAnimation">android.R.styleable.WindowAnimation
			/// 	</see>
			/// .
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			public const int windowAnimationStyle = unchecked((int)(0x010100ae));

			/// <summary>Drawable to use as the overall window background.</summary>
			/// <remarks>
			/// Drawable to use as the overall window background.  As of
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB">android.os.Build.VERSION_CODES.HONEYCOMB
			/// 	</see>
			/// , this may
			/// be a selector that uses state_accelerated to pick a non-solid
			/// color when running on devices that can draw such a bitmap
			/// with complex compositing on top at 60fps.
			/// <p>There are a few special considerations to use when setting this
			/// drawable:
			/// <ul>
			/// <li> This information will be used to infer the pixel format
			/// for your window's surface.  If the drawable has any
			/// non-opaque pixels, your window will be translucent
			/// (32 bpp).
			/// <li> If you want to draw the entire background
			/// yourself, you should set this drawable to some solid
			/// color that closely matches that background (so the
			/// system's preview of your window will match), and
			/// then in code manually set your window's background to
			/// null so it will not be drawn.
			/// </ul>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowBackground = unchecked((int)(0x01010054));

			/// <summary>
			/// Control whether a container should automatically close itself if
			/// the user touches outside of it.
			/// </summary>
			/// <remarks>
			/// Control whether a container should automatically close itself if
			/// the user touches outside of it.  This only applies to activities
			/// and dialogs.
			/// <p>Note: this attribute will only be respected for applications
			/// that are targeting
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB">android.os.Build.VERSION_CODES.HONEYCOMB
			/// 	</see>
			/// or later.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowCloseOnTouchOutside = unchecked((int)(0x0101035b));

			/// <summary>
			/// This Drawable is overlaid over the foreground of the Window's content area, usually
			/// to place a shadow below the title.
			/// </summary>
			/// <remarks>
			/// This Drawable is overlaid over the foreground of the Window's content area, usually
			/// to place a shadow below the title.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowContentOverlay = unchecked((int)(0x01010059));

			/// <summary>Flag allowing you to disable the preview animation for a window.</summary>
			/// <remarks>
			/// Flag allowing you to disable the preview animation for a window.
			/// The default value is false; if set to true, the system can never
			/// use the window's theme to show a preview of it before your
			/// actual instance is shown to the user.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowDisablePreview = unchecked((int)(0x01010222));

			/// <summary>
			/// Flag indicating that this window should allow touches to be split
			/// across other windows that also support split touch.
			/// </summary>
			/// <remarks>
			/// Flag indicating that this window should allow touches to be split
			/// across other windows that also support split touch.
			/// The default value is true for applications with a targetSdkVersion
			/// of Honeycomb or newer; false otherwise.
			/// When this flag is false, the first pointer that goes down determines
			/// the window to which all subsequent touches go until all pointers go up.
			/// When this flag is true, each pointer (not necessarily the first) that
			/// goes down determines the window to which all subsequent touches of that
			/// pointer will go until that pointers go up thereby enabling touches
			/// with multiple pointers to be split across multiple windows.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowEnableSplitTouch = unchecked((int)(0x01010317));

			/// <summary>The animation used when a window is being added.</summary>
			/// <remarks>
			/// The animation used when a window is being added.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowEnterAnimation = unchecked((int)(0x010100b4));

			/// <summary>The animation used when a window is being removed.</summary>
			/// <remarks>
			/// The animation used when a window is being removed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowExitAnimation = unchecked((int)(0x010100b5));

			/// <summary>Drawable to use as a frame around the window.</summary>
			/// <remarks>
			/// Drawable to use as a frame around the window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowFrame = unchecked((int)(0x01010055));

			/// <summary>Flag indicating whether this window should fill the entire screen.</summary>
			/// <remarks>
			/// Flag indicating whether this window should fill the entire screen.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowFullscreen = unchecked((int)(0x0101020d));

			/// <summary>The animation used when a window is going from VISIBLE to INVISIBLE.</summary>
			/// <remarks>
			/// The animation used when a window is going from VISIBLE to INVISIBLE.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowHideAnimation = unchecked((int)(0x010100b7));

			/// <summary>Flag indicating whether this is a floating window.</summary>
			/// <remarks>
			/// Flag indicating whether this is a floating window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowIsFloating = unchecked((int)(0x01010057));

			/// <summary>Flag indicating whether this is a translucent window.</summary>
			/// <remarks>
			/// Flag indicating whether this is a translucent window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowIsTranslucent = unchecked((int)(0x01010058));

			/// <summary>
			/// The minimum width the window is allowed to be, along the major
			/// axis of the screen.
			/// </summary>
			/// <remarks>
			/// The minimum width the window is allowed to be, along the major
			/// axis of the screen.  That is, when in landscape.  Can be either
			/// an absolute dimension or a fraction of the screen size in that
			/// dimension.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowMinWidthMajor = unchecked((int)(0x01010356));

			/// <summary>
			/// The minimum width the window is allowed to be, along the minor
			/// axis of the screen.
			/// </summary>
			/// <remarks>
			/// The minimum width the window is allowed to be, along the minor
			/// axis of the screen.  That is, when in portrait.  Can be either
			/// an absolute dimension or a fraction of the screen size in that
			/// dimension.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowMinWidthMinor = unchecked((int)(0x01010357));

			/// <summary>Flag indicating that this window should not be displayed at all.</summary>
			/// <remarks>
			/// Flag indicating that this window should not be displayed at all.
			/// The default value is false; if set to true, and this window is
			/// the main window of an Activity, then it will never actually
			/// be added to the window manager.  This means that your activity
			/// must immediately quit without waiting for user interaction,
			/// because there will be no such interaction coming.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowNoDisplay = unchecked((int)(0x0101021e));

			/// <summary>Flag indicating whether there should be no title on this window.</summary>
			/// <remarks>
			/// Flag indicating whether there should be no title on this window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowNoTitle = unchecked((int)(0x01010056));

			/// <summary>The animation used when a window is going from INVISIBLE to VISIBLE.</summary>
			/// <remarks>
			/// The animation used when a window is going from INVISIBLE to VISIBLE.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowShowAnimation = unchecked((int)(0x010100b6));

			/// <summary>
			/// Flag indicating that this window's background should be the
			/// user's current wallpaper.
			/// </summary>
			/// <remarks>
			/// Flag indicating that this window's background should be the
			/// user's current wallpaper.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowShowWallpaper = unchecked((int)(0x01010292));

			/// <summary>
			/// Defines the default soft input state that this window would
			/// like when it is displayed.
			/// </summary>
			/// <remarks>
			/// Defines the default soft input state that this window would
			/// like when it is displayed.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
			/// is the default. </td></tr>
			/// <tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
			/// last was. </td></tr>
			/// <tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
			/// the system will automatically select between resize and pan
			/// modes, depending
			/// on whether the content of the window has any layout views
			/// that can scroll their contents.  If there is such a view,
			/// then the window will be resized, with the assumption being
			/// that the resizeable area can be reduced to make room for
			/// the input UI. </td></tr>
			/// <tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
			/// reduced to make room for the soft input area. </td></tr>
			/// <tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
			/// instead pan the contents of the window as focus moves inside
			/// of it so that the user can see what they are typing.  This is
			/// generally less desireable than panning because the user may
			/// need to close the input area to get at and interact with
			/// parts of the window. </td></tr>
			/// <tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
			/// soft input area; the window is never adjusted for it. </td></tr>
			/// </table>
			/// </remarks>
			public const int windowSoftInputMode = unchecked((int)(0x0101022b));

			/// <summary>
			/// Flag indicating that the action bar should be split to provide more
			/// room for elements.
			/// </summary>
			/// <remarks>
			/// Flag indicating that the action bar should be split to provide more
			/// room for elements.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowSplitActionBar = unchecked((int)(0x010103b1));

			/// <summary>The style resource to use for a window's title area.</summary>
			/// <remarks>
			/// The style resource to use for a window's title area.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowTitleBackgroundStyle = unchecked((int)(0x0101005c));

			/// <summary>The style resource to use for a window's title bar height.</summary>
			/// <remarks>
			/// The style resource to use for a window's title bar height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int windowTitleSize = unchecked((int)(0x0101005a));

			/// <summary>The style resource to use for a window's title text.</summary>
			/// <remarks>
			/// The style resource to use for a window's title text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int windowTitleStyle = unchecked((int)(0x0101005b));

			/// <summary>
			/// A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for write
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			public const int writePermission = unchecked((int)(0x01010008));

			/// <summary>A coordinate in the X dimension.</summary>
			/// <remarks>
			/// A coordinate in the X dimension.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int x = unchecked((int)(0x010100ac));

			/// <summary>Indicates whether the application supports extra large screen form-factors.
			/// 	</summary>
			/// <remarks>
			/// Indicates whether the application supports extra large screen form-factors.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int xlargeScreens = unchecked((int)(0x010102bf));

			/// <summary>A coordinate in the Y dimension.</summary>
			/// <remarks>
			/// A coordinate in the Y dimension.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </remarks>
			public const int y = unchecked((int)(0x010100ad));

			/// <summary>Default style for YesNoPreference.</summary>
			/// <remarks>
			/// Default style for YesNoPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </remarks>
			public const int yesNoPreferenceStyle = unchecked((int)(0x01010090));

			/// <summary>
			/// Allows for an adjustment of the Z ordering of the content being
			/// animated for the duration of the animation.
			/// </summary>
			/// <remarks>
			/// Allows for an adjustment of the Z ordering of the content being
			/// animated for the duration of the animation.  The default value is normal.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> The content being animated be kept in its current Z order. </td></tr>
			/// <tr><td><code>top</code></td><td>1</td><td> The content being animated is forced on top of all other
			/// content for the duration of the animation. </td></tr>
			/// <tr><td><code>bottom</code></td><td>-1</td><td> The content being animated is forced under all other
			/// content for the duration of the animation. </td></tr>
			/// </table>
			/// </remarks>
			public const int zAdjustment = unchecked((int)(0x010101c1));
		}

		public sealed class @bool
		{
			/// <summary>
			/// Default value used to block data calls if ims is not
			/// connected.
			/// </summary>
			/// <remarks>
			/// Default value used to block data calls if ims is not
			/// connected.  If you use the ims apn DCT will block
			/// any other apn from connecting until ims apn is connected
			/// </remarks>
			public const int ImsConnectedDefaultValue = unchecked((int)(0x01110007));

			public const int action_bar_embed_tabs = unchecked((int)(0x01110000));

			public const int action_bar_expanded_action_views_exclusive = unchecked((int)(0x01110004
				));

			/// <summary>Whether action menu items should be displayed in ALLCAPS or not.</summary>
			/// <remarks>
			/// Whether action menu items should be displayed in ALLCAPS or not.
			/// Defaults to true. If this is not appropriate for specific locales
			/// it should be disabled in that locale's resources.
			/// </remarks>
			public const int config_actionMenuItemAllCaps = unchecked((int)(0x0111002e));

			/// <summary>
			/// Whether action menu items should obey the "withText" showAsAction
			/// flag.
			/// </summary>
			/// <remarks>
			/// Whether action menu items should obey the "withText" showAsAction
			/// flag. This may be set to false for situations where space is
			/// extremely limited.
			/// </remarks>
			public const int config_allowActionMenuItemTextWithIcon = unchecked((int)(0x0111002f
				));

			/// <summary>
			/// XXXXXX END OF RESOURCES USING WRONG NAMING CONVENTION
			/// If true, the screen can be rotated via the accelerometer in all 4
			/// rotations as the default behavior.
			/// </summary>
			/// <remarks>
			/// XXXXXX END OF RESOURCES USING WRONG NAMING CONVENTION
			/// If true, the screen can be rotated via the accelerometer in all 4
			/// rotations as the default behavior.
			/// If true, the screen can be rotated via the accelerometer in all 4
			/// rotations as the default behavior.
			/// </remarks>
			public const int config_allowAllRotations = unchecked((int)(0x01110013));

			/// <summary>Set to true if the RSSI should always display CDMA signal strength even on EVDO
			/// 	</summary>
			public const int config_alwaysUseCdmaRssi = unchecked((int)(0x0111002b));

			/// <summary>If this is true, the screen will fade off.</summary>
			/// <remarks>If this is true, the screen will fade off.</remarks>
			public const int config_animateScreenLights = unchecked((int)(0x01110012));

			/// <summary>Don't name config resources like this.</summary>
			/// <remarks>Don't name config resources like this.  It should look like config_annoyDianne
			/// 	</remarks>
			public const int config_annoy_dianne = unchecked((int)(0x01110010));

			/// <summary>Flag indicating whether the we should enable the automatic brightness in Settings.
			/// 	</summary>
			/// <remarks>
			/// Flag indicating whether the we should enable the automatic brightness in Settings.
			/// Software implementation will be used if config_hardware_auto_brightness_available is not set
			/// </remarks>
			public const int config_automatic_brightness_available = unchecked((int)(0x0111000f
				));

			/// <summary>Indicate whether the SD card is accessible without removing the battery.
			/// 	</summary>
			/// <remarks>Indicate whether the SD card is accessible without removing the battery.
			/// 	</remarks>
			public const int config_batterySdCardAccessibility = unchecked((int)(0x01110017));

			/// <summary>
			/// Boolean indicating if current platform supports quick switch-on/off of
			/// Bluetooth Module
			/// </summary>
			public const int config_bluetooth_adapter_quick_switch = unchecked((int)(0x01110021
				));

			/// <summary>
			/// Boolean indicating if current platform supports bluetooth SCO for off call
			/// use cases
			/// </summary>
			public const int config_bluetooth_sco_off_call = unchecked((int)(0x0111001f));

			/// <summary>
			/// Boolean indicating if current platform supports bluetooth wide band
			/// speech
			/// </summary>
			public const int config_bluetooth_wide_band_speech = unchecked((int)(0x01110020));

			/// <summary>Enables built-in SIP phone capability</summary>
			public const int config_built_in_sip_phone = unchecked((int)(0x01110025));

			/// <summary>
			/// Flag indicating whether the keyguard should be bypassed when
			/// the slider is open.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether the keyguard should be bypassed when
			/// the slider is open.  This can be set or unset depending how easily
			/// the slider can be opened (for example, in a pocket or purse).
			/// </remarks>
			public const int config_bypass_keyguard_if_slider_open = unchecked((int)(0x0111000e
				));

			/// <summary>
			/// Control whether being in the car dock should enable accelerometer based
			/// screen orientation.
			/// </summary>
			/// <remarks>
			/// Control whether being in the car dock should enable accelerometer based
			/// screen orientation.  This defaults to true because putting a device in
			/// a car dock make the accelerometer more a physical input (like a lid).
			/// </remarks>
			public const int config_carDockEnablesAccelerometer = unchecked((int)(0x01110016)
				);

			/// <summary>
			/// Whether dialogs should close automatically when the user touches outside
			/// of them.
			/// </summary>
			/// <remarks>
			/// Whether dialogs should close automatically when the user touches outside
			/// of them.  This should not normally be modified.
			/// </remarks>
			public const int config_closeDialogWhenTouchOutside = unchecked((int)(0x0111000a)
				);

			/// <summary>
			/// Control whether being in the desk dock should enable accelerometer
			/// based screen orientation.
			/// </summary>
			/// <remarks>
			/// Control whether being in the desk dock should enable accelerometer
			/// based screen orientation.  Note this should probably default to true
			/// like car dock, but we haven't had a chance to test it.
			/// </remarks>
			public const int config_deskDockEnablesAccelerometer = unchecked((int)(0x01110015
				));

			/// <summary>Allow the menu hard key to be disabled in LockScreen on some devices</summary>
			public const int config_disableMenuKeyInLockScreen = unchecked((int)(0x0111001a));

			/// <summary>
			/// If this value is true, duplicate Source/Destination port fields
			/// in WDP header of some carriers OMADM wap push are supported.
			/// </summary>
			/// <remarks>
			/// If this value is true, duplicate Source/Destination port fields
			/// in WDP header of some carriers OMADM wap push are supported.
			/// ex: MSGTYPE-TotalSegments-CurrentSegment
			/// -SourcePortDestPort-SourcePortDestPort-OMADM PDU
			/// If false, not supported.
			/// </remarks>
			public const int config_duplicate_port_omadm_wappush = unchecked((int)(0x0111002c
				));

			/// <summary>Don't show lock screen before unlock screen (PIN/pattern/password)</summary>
			public const int config_enableLockBeforeUnlockScreen = unchecked((int)(0x0111001b
				));

			/// <summary>
			/// Diable lockscreen rotation by default
			/// Enable lockscreen rotation
			/// </summary>
			public const int config_enableLockScreenRotation = unchecked((int)(0x0111001c));

			/// <summary>Enable puk unlockscreen by default.</summary>
			/// <remarks>
			/// Enable puk unlockscreen by default.
			/// If unlock screen is disabled, the puk should be unlocked through Emergency Dialer
			/// </remarks>
			public const int config_enable_puk_unlock_screen = unchecked((int)(0x0111001d));

			/// <summary>Is the notification LED intrusive? Used to decide if there should be a disable option
			/// 	</summary>
			public const int config_intrusiveNotificationLed = unchecked((int)(0x01110019));

			/// <summary>If this value is true, The mms content-disposition field is supported correctly.
			/// 	</summary>
			/// <remarks>
			/// If this value is true, The mms content-disposition field is supported correctly.
			/// If false, Content-disposition fragments are ignored
			/// </remarks>
			public const int config_mms_content_disposition_support = unchecked((int)(0x0111002a
				));

			/// <summary>
			/// If true, the direction rotation is applied to get to an application's requested
			/// orientation is reversed.
			/// </summary>
			/// <remarks>
			/// If true, the direction rotation is applied to get to an application's requested
			/// orientation is reversed.  Normally, the model is that landscape is
			/// clockwise from portrait; thus on a portrait device an app requesting
			/// landscape will cause a clockwise rotation, and on a landscape device an
			/// app requesting portrait will cause a counter-clockwise rotation.  Setting
			/// true here reverses that logic.
			/// </remarks>
			public const int config_reverseDefaultRotation = unchecked((int)(0x01110014));

			/// <summary>
			/// Flag indicating whether the surface flinger has limited
			/// alpha compositing functionality in hardware.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether the surface flinger has limited
			/// alpha compositing functionality in hardware.  If set, the window
			/// manager will disable alpha trasformation in animations where not
			/// strictly needed.
			/// </remarks>
			public const int config_sf_limitedAlpha = unchecked((int)(0x01110006));

			/// <summary>
			/// Flag indicating whether the surface flinger is inefficient
			/// at performing a blur.
			/// </summary>
			/// <remarks>
			/// Flag indicating whether the surface flinger is inefficient
			/// at performing a blur.  Used by parts of the UI to turn off
			/// the blur effect where it isn't worth the performance hit.
			/// As of Honeycomb, blurring is not supported anymore.
			/// </remarks>
			public const int config_sf_slowBlur = unchecked((int)(0x01110008));

			/// <summary>
			/// Sets whether menu shortcuts should be displayed on panel menus when
			/// a keyboard is present.
			/// </summary>
			/// <remarks>
			/// Sets whether menu shortcuts should be displayed on panel menus when
			/// a keyboard is present.
			/// </remarks>
			public const int config_showMenuShortcutsWhenKeyboardPresent = unchecked((int)(0x01110027
				));

			/// <summary>Whether a software navigation bar should be shown.</summary>
			/// <remarks>
			/// Whether a software navigation bar should be shown. NOTE: in the future this may be
			/// autodetected from the Configuration.
			/// </remarks>
			public const int config_showNavigationBar = unchecked((int)(0x0111002d));

			/// <summary>Enables SIP on WIFI only</summary>
			public const int config_sip_wifi_only = unchecked((int)(0x01110024));

			/// <summary>Flag indicating whether the current device allows sms service.</summary>
			/// <remarks>
			/// Flag indicating whether the current device allows sms service.
			/// If true, this means that the device supports both sending and
			/// receiving sms via the telephony network.
			/// This can be overridden to false for "data only" devices
			/// which can't send and receive sms message.
			/// Note: Disable SMS also disable voicemail waiting sms,
			/// cell broadcasting sms, and MMS.
			/// </remarks>
			public const int config_sms_capable = unchecked((int)(0x01110023));

			/// <summary>If this value is true, Sms encoded as octet is decoded by utf8 decoder.</summary>
			/// <remarks>
			/// If this value is true, Sms encoded as octet is decoded by utf8 decoder.
			/// If false, decoded by Latin decoder.
			/// </remarks>
			public const int config_sms_utf8_support = unchecked((int)(0x01110029));

			/// <summary>Enables swipe versus poly-finger touch disambiguation in the KeyboardView
			/// 	</summary>
			public const int config_swipeDisambiguation = unchecked((int)(0x0111001e));

			/// <summary>The VoiceMail default value is displayed to my own number if it is true</summary>
			public const int config_telephony_use_own_number_for_voicemail = unchecked((int)(
				0x01110028));

			/// <summary>Enables or disables fading edges when marquee is enabled in TextView.</summary>
			/// <remarks>Enables or disables fading edges when marquee is enabled in TextView.</remarks>
			public const int config_ui_enableFadingMarquee = unchecked((int)(0x01110009));

			/// <summary>If this is true, the screen will come on when you unplug usb/power/whatever.
			/// 	</summary>
			/// <remarks>If this is true, the screen will come on when you unplug usb/power/whatever.
			/// 	</remarks>
			public const int config_unplugTurnsOnScreen = unchecked((int)(0x01110011));

			public const int config_use_strict_phone_number_comparation = unchecked((int)(0x01110018
				));

			/// <summary>Flag indicating whether the current device is "voice capable".</summary>
			/// <remarks>
			/// Flag indicating whether the current device is "voice capable".
			/// If true, this means that the device supports circuit-switched
			/// (i.e. voice) phone calls over the telephony network, and is
			/// allowed to display the in-call UI while a cellular voice call is
			/// active.  This can be overridden to false for "data only" devices
			/// which can't make voice calls and don't support any in-call UI.
			/// Note: this flag is subtly different from the
			/// PackageManager.FEATURE_TELEPHONY system feature, which is
			/// available on *any* device with a telephony radio, even if the
			/// device is data-only.
			/// </remarks>
			public const int config_voice_capable = unchecked((int)(0x01110022));

			/// <summary>Boolean indicating whether the wifi chipset supports background scanning mechanism.
			/// 	</summary>
			/// <remarks>
			/// Boolean indicating whether the wifi chipset supports background scanning mechanism.
			/// This mechanism allows the host to remain in suspend state and the dongle to actively
			/// scan and wake the host when a configured SSID is detected by the dongle. This chipset
			/// capability can provide power savings when wifi needs to be always kept on.
			/// The driver commands needed to support the feature are BGSCAN-START and BGSCAN-STOP
			/// </remarks>
			public const int config_wifi_background_scan_support = unchecked((int)(0x0111000d
				));

			/// <summary>Boolean indicating whether the wifi chipset has dual frequency band support
			/// 	</summary>
			public const int config_wifi_dual_band_support = unchecked((int)(0x0111000b));

			/// <summary>Boolean indicating whether the wifi chipset has p2p support</summary>
			public const int config_wifi_p2p_support = unchecked((int)(0x0111000c));

			/// <hide>DO NOT TRANSLATE. Workaround for resource race condition in lockscreen.</hide>
			/// <hide>DO NOT TRANSLATE. Workaround for resource race condition in lockscreen</hide>
			public const int lockscreen_isPortrait = unchecked((int)(0x01110030));

			public const int preferences_prefer_dual_pane = unchecked((int)(0x01110002));

			public const int show_ongoing_ime_switcher = unchecked((int)(0x01110003));

			/// <summary>
			/// Boolean indicating if restoring network selection should be skipped
			/// The restoring is handled by modem if it is true
			/// </summary>
			public const int skip_restoring_network_selection = unchecked((int)(0x01110026));

			public const int split_action_bar_is_narrow = unchecked((int)(0x01110001));

			public const int target_honeycomb_needs_options_menu = unchecked((int)(0x01110005
				));
		}

		public sealed class color
		{
			public const int background_dark = unchecked((int)(0x0106000e));

			public const int background_holo_dark = unchecked((int)(0x01060046));

			public const int background_holo_light = unchecked((int)(0x01060047));

			public const int background_light = unchecked((int)(0x0106000f));

			public const int black = unchecked((int)(0x0106000c));

			public const int bright_foreground_dark = unchecked((int)(0x0106001d));

			public const int bright_foreground_dark_disabled = unchecked((int)(0x0106001f));

			public const int bright_foreground_dark_inverse = unchecked((int)(0x01060021));

			public const int bright_foreground_disabled_holo_dark = unchecked((int)(0x0106004a
				));

			public const int bright_foreground_disabled_holo_light = unchecked((int)(0x0106004b
				));

			public const int bright_foreground_holo_dark = unchecked((int)(0x01060048));

			public const int bright_foreground_holo_light = unchecked((int)(0x01060049));

			public const int bright_foreground_inverse_holo_dark = unchecked((int)(0x0106004c
				));

			public const int bright_foreground_inverse_holo_light = unchecked((int)(0x0106004d
				));

			public const int bright_foreground_light = unchecked((int)(0x0106001e));

			public const int bright_foreground_light_disabled = unchecked((int)(0x01060020));

			public const int bright_foreground_light_inverse = unchecked((int)(0x01060022));

			/// <summary>Default color for notification LED.</summary>
			/// <remarks>Default color for notification LED.</remarks>
			public const int config_defaultNotificationColor = unchecked((int)(0x01060063));

			public const int darker_gray = unchecked((int)(0x01060000));

			public const int dim_foreground_dark = unchecked((int)(0x01060023));

			public const int dim_foreground_dark_disabled = unchecked((int)(0x01060024));

			public const int dim_foreground_dark_inverse = unchecked((int)(0x01060025));

			public const int dim_foreground_dark_inverse_disabled = unchecked((int)(0x01060026
				));

			public const int dim_foreground_disabled_holo_dark = unchecked((int)(0x0106004f));

			public const int dim_foreground_disabled_holo_light = unchecked((int)(0x01060054)
				);

			public const int dim_foreground_holo_dark = unchecked((int)(0x0106004e));

			public const int dim_foreground_holo_light = unchecked((int)(0x01060053));

			public const int dim_foreground_inverse_disabled_holo_dark = unchecked((int)(0x01060051
				));

			public const int dim_foreground_inverse_disabled_holo_light = unchecked((int)(0x01060056
				));

			public const int dim_foreground_inverse_holo_dark = unchecked((int)(0x01060050));

			public const int dim_foreground_inverse_holo_light = unchecked((int)(0x01060055));

			public const int dim_foreground_light = unchecked((int)(0x01060028));

			public const int dim_foreground_light_disabled = unchecked((int)(0x01060029));

			public const int dim_foreground_light_inverse = unchecked((int)(0x0106002a));

			public const int dim_foreground_light_inverse_disabled = unchecked((int)(0x0106002b
				));

			/// <summary>FaceLock</summary>
			public const int facelock_color_background = unchecked((int)(0x01060045));

			public const int group_button_dialog_focused_holo_dark = unchecked((int)(0x0106005d
				));

			public const int group_button_dialog_focused_holo_light = unchecked((int)(0x0106005f
				));

			public const int group_button_dialog_pressed_holo_dark = unchecked((int)(0x0106005c
				));

			public const int group_button_dialog_pressed_holo_light = unchecked((int)(0x0106005e
				));

			public const int highlighted_text_dark = unchecked((int)(0x0106002d));

			public const int highlighted_text_holo_dark = unchecked((int)(0x01060058));

			public const int highlighted_text_holo_light = unchecked((int)(0x01060059));

			public const int highlighted_text_light = unchecked((int)(0x0106002e));

			public const int hint_foreground_dark = unchecked((int)(0x01060027));

			public const int hint_foreground_holo_dark = unchecked((int)(0x01060052));

			public const int hint_foreground_holo_light = unchecked((int)(0x01060057));

			public const int hint_foreground_light = unchecked((int)(0x0106002c));

			/// <summary>A really bright Holo shade of blue</summary>
			public const int holo_blue_bright = unchecked((int)(0x0106001b));

			/// <summary>A dark Holo shade of blue</summary>
			public const int holo_blue_dark = unchecked((int)(0x01060013));

			/// <summary>A light Holo shade of blue</summary>
			public const int holo_blue_light = unchecked((int)(0x01060012));

			/// <summary>A dark Holo shade of green</summary>
			public const int holo_green_dark = unchecked((int)(0x01060015));

			/// <summary>A light Holo shade of green</summary>
			public const int holo_green_light = unchecked((int)(0x01060014));

			/// <summary>A dark Holo shade of orange</summary>
			public const int holo_orange_dark = unchecked((int)(0x01060019));

			/// <summary>A light Holo shade of orange</summary>
			public const int holo_orange_light = unchecked((int)(0x01060018));

			/// <summary>A Holo shade of purple</summary>
			public const int holo_purple = unchecked((int)(0x0106001a));

			/// <summary>A dark Holo shade of red</summary>
			public const int holo_red_dark = unchecked((int)(0x01060017));

			/// <summary>A light Holo shade of red</summary>
			public const int holo_red_light = unchecked((int)(0x01060016));

			public const int keyguard_text_color_decline = unchecked((int)(0x01060040));

			/// <summary>keyguard tab</summary>
			public const int keyguard_text_color_normal = unchecked((int)(0x0106003c));

			public const int keyguard_text_color_soundoff = unchecked((int)(0x0106003e));

			public const int keyguard_text_color_soundon = unchecked((int)(0x0106003f));

			public const int keyguard_text_color_unlock = unchecked((int)(0x0106003d));

			public const int legacy_long_pressed_highlight = unchecked((int)(0x01060062));

			public const int legacy_pressed_highlight = unchecked((int)(0x01060060));

			public const int legacy_selected_highlight = unchecked((int)(0x01060061));

			/// <summary>For settings framework</summary>
			public const int lighter_gray = unchecked((int)(0x01060032));

			public const int link_text_dark = unchecked((int)(0x0106002f));

			public const int link_text_holo_dark = unchecked((int)(0x0106005a));

			public const int link_text_holo_light = unchecked((int)(0x0106005b));

			public const int link_text_light = unchecked((int)(0x01060030));

			public const int lockscreen_clock_am_pm = unchecked((int)(0x01060043));

			/// <summary>
			/// keyguard clock
			/// keyguard clock
			/// </summary>
			public const int lockscreen_clock_background = unchecked((int)(0x01060041));

			public const int lockscreen_clock_foreground = unchecked((int)(0x01060042));

			public const int lockscreen_owner_info = unchecked((int)(0x01060044));

			/// <summary>For security permissions</summary>
			public const int perms_dangerous_grp_color = unchecked((int)(0x01060033));

			public const int perms_dangerous_perm_color = unchecked((int)(0x01060034));

			public const int primary_text_dark = unchecked((int)(0x01060001));

			public const int primary_text_dark_disable_only = unchecked((int)(0x01060064));

			public const int primary_text_dark_focused = unchecked((int)(0x01060065));

			public const int primary_text_dark_nodisable = unchecked((int)(0x01060002));

			public const int primary_text_disable_only_holo_dark = unchecked((int)(0x01060066
				));

			public const int primary_text_disable_only_holo_light = unchecked((int)(0x01060067
				));

			public const int primary_text_focused_holo_dark = unchecked((int)(0x01060068));

			public const int primary_text_holo_dark = unchecked((int)(0x01060069));

			public const int primary_text_holo_light = unchecked((int)(0x0106006a));

			public const int primary_text_light = unchecked((int)(0x01060003));

			public const int primary_text_light_disable_only = unchecked((int)(0x0106006b));

			public const int primary_text_light_nodisable = unchecked((int)(0x01060004));

			public const int primary_text_nodisable_holo_dark = unchecked((int)(0x0106006c));

			public const int primary_text_nodisable_holo_light = unchecked((int)(0x0106006d));

			public const int safe_mode_text = unchecked((int)(0x0106001c));

			public const int search_url_text = unchecked((int)(0x0106006e));

			public const int search_url_text_holo = unchecked((int)(0x0106006f));

			/// <summary>For search-related UIs</summary>
			public const int search_url_text_normal = unchecked((int)(0x01060036));

			public const int search_url_text_pressed = unchecked((int)(0x01060038));

			public const int search_url_text_selected = unchecked((int)(0x01060037));

			public const int search_widget_corpus_item_background = unchecked((int)(0x01060039
				));

			public const int secondary_text_dark = unchecked((int)(0x01060005));

			public const int secondary_text_dark_nodisable = unchecked((int)(0x01060006));

			public const int secondary_text_holo_dark = unchecked((int)(0x01060070));

			public const int secondary_text_holo_light = unchecked((int)(0x01060071));

			public const int secondary_text_light = unchecked((int)(0x01060007));

			public const int secondary_text_light_nodisable = unchecked((int)(0x01060008));

			public const int secondary_text_nodisable_holo_dark = unchecked((int)(0x01060072)
				);

			public const int secondary_text_nodisable_holo_light = unchecked((int)(0x01060073
				));

			public const int secondary_text_nofocus = unchecked((int)(0x01060074));

			public const int shadow = unchecked((int)(0x01060035));

			/// <summary>SlidingTab</summary>
			public const int sliding_tab_text_color_active = unchecked((int)(0x0106003a));

			public const int sliding_tab_text_color_shadow = unchecked((int)(0x0106003b));

			public const int suggestion_highlight_text = unchecked((int)(0x01060031));

			public const int tab_indicator_text = unchecked((int)(0x01060009));

			public const int tab_indicator_text_v4 = unchecked((int)(0x01060075));

			public const int tertiary_text_dark = unchecked((int)(0x01060010));

			public const int tertiary_text_holo_dark = unchecked((int)(0x01060076));

			public const int tertiary_text_holo_light = unchecked((int)(0x01060077));

			public const int tertiary_text_light = unchecked((int)(0x01060011));

			public const int transparent = unchecked((int)(0x0106000d));

			public const int white = unchecked((int)(0x0106000b));

			public const int widget_edittext_dark = unchecked((int)(0x0106000a));
		}

		public sealed class dimen
		{
			/// <summary>Default height of an action bar.</summary>
			/// <remarks>
			/// Default height of an action bar.
			/// Default height of an action bar.
			/// Default height of an action bar.
			/// </remarks>
			public const int action_bar_default_height = unchecked((int)(0x01050030));

			/// <summary>Vertical padding around action bar icons.</summary>
			/// <remarks>
			/// Vertical padding around action bar icons.
			/// Vertical padding around action bar icons.
			/// Vertical padding around action bar icons.
			/// </remarks>
			public const int action_bar_icon_vertical_padding = unchecked((int)(0x01050031));

			/// <summary>
			/// Bottom margin for action bar subtitles
			/// Bottom margin for action bar subtitles
			/// Bottom margin for action bar subtitles
			/// </summary>
			public const int action_bar_subtitle_bottom_margin = unchecked((int)(0x01050035));

			/// <summary>
			/// Text size for action bar subtitles
			/// Text size for action bar subtitles
			/// Text size for action bar subtitles
			/// </summary>
			public const int action_bar_subtitle_text_size = unchecked((int)(0x01050033));

			/// <summary>
			/// Top margin for action bar subtitles
			/// Top margin for action bar subtitles
			/// Top margin for action bar subtitles
			/// </summary>
			public const int action_bar_subtitle_top_margin = unchecked((int)(0x01050034));

			/// <summary>
			/// Text size for action bar titles
			/// Text size for action bar titles
			/// Text size for action bar titles
			/// </summary>
			public const int action_bar_title_text_size = unchecked((int)(0x01050032));

			/// <summary>Minimum popup width for selecting an activity in ActivityChooserDialog/ActivityChooserView.
			/// 	</summary>
			/// <remarks>Minimum popup width for selecting an activity in ActivityChooserDialog/ActivityChooserView.
			/// 	</remarks>
			public const int activity_chooser_popup_min_width = unchecked((int)(0x0105003a));

			/// <summary>
			/// Dialog button bar height
			/// Dialog button bar height
			/// </summary>
			public const int alert_dialog_button_bar_height = unchecked((int)(0x0105002f));

			/// <summary>Dialog title height</summary>
			public const int alert_dialog_title_height = unchecked((int)(0x0105002e));

			/// <summary>
			/// The standard size (both width and height) of an application icon that
			/// will be displayed in the app launcher and elsewhere.
			/// </summary>
			/// <remarks>
			/// The standard size (both width and height) of an application icon that
			/// will be displayed in the app launcher and elsewhere.
			/// </remarks>
			public const int app_icon_size = unchecked((int)(0x01050000));

			/// <summary>The maximum width we would prefer dialogs to be.</summary>
			/// <remarks>
			/// The maximum width we would prefer dialogs to be.  0 if there is no
			/// maximum (let them grow as large as the screen).  Actual values are
			/// specified for -large and -xlarge configurations.
			/// see comment in values/config.xml
			/// see comment in values/config.xml
			/// </remarks>
			public const int config_prefDialogWidth = unchecked((int)(0x01050007));

			public const int default_app_widget_padding_bottom = unchecked((int)(0x01050044));

			/// <summary>Default padding to apply to AppWidgetHostViews containing widgets targeting API level 14 and up.
			/// 	</summary>
			/// <remarks>Default padding to apply to AppWidgetHostViews containing widgets targeting API level 14 and up.
			/// 	</remarks>
			public const int default_app_widget_padding_left = unchecked((int)(0x01050041));

			public const int default_app_widget_padding_right = unchecked((int)(0x01050043));

			public const int default_app_widget_padding_top = unchecked((int)(0x01050042));

			/// <summary>The default gap between components in a layout.</summary>
			/// <remarks>The default gap between components in a layout.</remarks>
			public const int default_gap = unchecked((int)(0x0105003b));

			/// <summary>
			/// The platform's desired minimum size for a dialog's width when it
			/// is along the major axis (that is the screen is landscape).
			/// </summary>
			/// <remarks>
			/// The platform's desired minimum size for a dialog's width when it
			/// is along the major axis (that is the screen is landscape).  This may
			/// be either a fraction or a dimension.
			/// </remarks>
			public const int dialog_min_width_major = unchecked((int)(0x01050003));

			/// <summary>
			/// The platform's desired minimum size for a dialog's width when it
			/// is along the minor axis (that is the screen is portrait).
			/// </summary>
			/// <remarks>
			/// The platform's desired minimum size for a dialog's width when it
			/// is along the minor axis (that is the screen is portrait).  This may
			/// be either a fraction or a dimension.
			/// </remarks>
			public const int dialog_min_width_minor = unchecked((int)(0x01050004));

			/// <summary>Width of the icon in a dropdown list</summary>
			public const int dropdownitem_icon_width = unchecked((int)(0x0105003e));

			/// <summary>Text padding for dropdown items</summary>
			public const int dropdownitem_text_padding_left = unchecked((int)(0x0105003c));

			/// <summary>Text padding for dropdown items</summary>
			public const int dropdownitem_text_padding_right = unchecked((int)(0x0105003d));

			/// <summary>Size of the fastscroll hint letter</summary>
			public const int fastscroll_overlay_size = unchecked((int)(0x01050011));

			/// <summary>Height of the fastscroll thumb</summary>
			public const int fastscroll_thumb_height = unchecked((int)(0x01050013));

			/// <summary>Width of the fastscroll thumb</summary>
			public const int fastscroll_thumb_width = unchecked((int)(0x01050012));

			/// <summary>Size of clock font in LockScreen on Unsecure unlock screen.</summary>
			/// <remarks>
			/// Size of clock font in LockScreen on Unsecure unlock screen.
			/// Size of clock font in LockScreen on Unsecure unlock screen.
			/// </remarks>
			public const int keyguard_lockscreen_clock_font_size = unchecked((int)(0x01050036
				));

			/// <summary>Size of top margin on Clock font to edge on unlock LockScreen</summary>
			public const int keyguard_lockscreen_status_line_clockfont_top_margin = unchecked(
				(int)(0x01050039));

			/// <summary>Size of right margin on Unsecure unlock LockScreen</summary>
			public const int keyguard_lockscreen_status_line_font_right_margin = unchecked((int
				)(0x01050038));

			/// <summary>Size of status line font on Unsecure unlock LockScreen.</summary>
			/// <remarks>Size of status line font on Unsecure unlock LockScreen.</remarks>
			public const int keyguard_lockscreen_status_line_font_size = unchecked((int)(0x01050037
				));

			/// <summary>Size of clock font in LockScreen.</summary>
			/// <remarks>Size of clock font in LockScreen.</remarks>
			public const int keyguard_pattern_unlock_clock_font_size = unchecked((int)(0x01050046
				));

			/// <summary>Size of status line font in LockScreen.</summary>
			/// <remarks>Size of status line font in LockScreen.</remarks>
			public const int keyguard_pattern_unlock_status_line_font_size = unchecked((int)(
				0x01050047));

			/// <summary>Min width for a tablet device</summary>
			public const int min_xlarge_screen_width = unchecked((int)(0x01050014));

			/// <summary>Default distance from each snap target that MultiWaveView considers a "hit"
			/// 	</summary>
			public const int multiwaveview_hit_radius = unchecked((int)(0x0105001c));

			/// <summary>Default distance beyond which MultiWaveView snaps to the target radius</summary>
			public const int multiwaveview_snap_margin = unchecked((int)(0x0105001b));

			/// <summary>Default target placement radius for MultiWaveView</summary>
			public const int multiwaveview_target_placement_radius = unchecked((int)(0x0105001a
				));

			/// <summary>Height of the horizontal navigation bar on devices that require it</summary>
			public const int navigation_bar_height = unchecked((int)(0x0105000b));

			/// <summary>Width of the vertical navigation bar on devices that require it</summary>
			public const int navigation_bar_width = unchecked((int)(0x0105000c));

			/// <summary>The width of the big icons in notifications.</summary>
			/// <remarks>The width of the big icons in notifications.</remarks>
			public const int notification_large_icon_height = unchecked((int)(0x01050006));

			/// <summary>The width of the big icons in notifications.</summary>
			/// <remarks>The width of the big icons in notifications.</remarks>
			public const int notification_large_icon_width = unchecked((int)(0x01050005));

			/// <summary>
			/// keyboardHeight = key_height*4 + key_bottom_gap*3
			/// keyboardHeight = key_height*4 + key_bottom_gap*3
			/// </summary>
			public const int password_keyboard_height = unchecked((int)(0x01050045));

			/// <summary>Default horizontal gap between keys in the password keyboard (used by keyguard)
			/// 	</summary>
			public const int password_keyboard_horizontalGap = unchecked((int)(0x01050018));

			/// <summary>
			/// Default height of a key in the password keyboard for alpha (used by keyguard)
			/// Default height of a key in the password keyboard for alpha
			/// Default height of a key in the password keyboard for alpha
			/// Default height of a key in the password keyboard for alpha
			/// Default height of a key in the password keyboard for alpha
			/// </summary>
			public const int password_keyboard_key_height_alpha = unchecked((int)(0x01050015)
				);

			/// <summary>
			/// Default height of a key in the password keyboard for numeric (used by keyguard)
			/// Default height of a key in the password keyboard for numeric
			/// Default height of a key in the password keyboard for numeric
			/// Default height of a key in the password keyboard for numeric
			/// </summary>
			public const int password_keyboard_key_height_numeric = unchecked((int)(0x01050016
				));

			/// <summary>
			/// Default correction for the space key in the password keyboard  (used by keyguard)
			/// Default correction for the space key in the password keyboard
			/// </summary>
			public const int password_keyboard_spacebar_vertical_correction = unchecked((int)
				(0x01050017));

			/// <summary>Default vertical gap between keys in the password keyboard (used by keyguard)
			/// 	</summary>
			public const int password_keyboard_verticalGap = unchecked((int)(0x01050019));

			/// <summary>
			/// Padding to the left of the preference panel breadcrumb
			/// Padding to the left of the preference panel breadcrumb
			/// Padding to the left of the preference panel breadcrumb
			/// </summary>
			public const int preference_breadcrumb_paddingLeft = unchecked((int)(0x01050024));

			/// <summary>
			/// Padding to the right of the preference panel breadcrumb
			/// Padding to the right of the preference panel breadcrumb
			/// Padding to the right of the preference panel breadcrumb
			/// </summary>
			public const int preference_breadcrumb_paddingRight = unchecked((int)(0x01050025)
				);

			public const int preference_child_padding_side = unchecked((int)(0x0105002b));

			/// <summary>
			/// Preference fragment padding, bottom
			/// Preference fragment padding, bottom
			/// Preference fragment padding, bottom
			/// </summary>
			public const int preference_fragment_padding_bottom = unchecked((int)(0x01050022)
				);

			/// <summary>
			/// Preference fragment padding, sides
			/// Preference fragment padding, sides
			/// Preference fragment padding, sides
			/// </summary>
			public const int preference_fragment_padding_side = unchecked((int)(0x01050023));

			/// <summary>Minimum space to allocate to the left of a preference item for an icon.</summary>
			/// <remarks>
			/// Minimum space to allocate to the left of a preference item for an icon.
			/// This helps in aligning titles when some items have icons and some don't. When space is
			/// at a premium, we don't pre-allocate any space.
			/// Minimum space to allocate to the left of a preference item for an icon.
			/// This helps in aligning titles when some items have icons and some don't. When space is
			/// at a premium, we don't pre-allocate any space.
			/// </remarks>
			public const int preference_icon_minWidth = unchecked((int)(0x01050026));

			public const int preference_item_padding_inner = unchecked((int)(0x0105002a));

			/// <summary>outsideOverlay</summary>
			public const int preference_item_padding_side = unchecked((int)(0x01050029));

			/// <summary>Preference activity bottom margin</summary>
			public const int preference_screen_bottom_margin = unchecked((int)(0x01050020));

			public const int preference_screen_header_padding_side = unchecked((int)(0x01050028
				));

			/// <summary>
			/// Preference activity, vertical padding for the header list
			/// Preference activity, vertical padding for the header list
			/// </summary>
			public const int preference_screen_header_vertical_padding = unchecked((int)(0x01050027
				));

			/// <summary>
			/// Preference activity side margins
			/// Increase size (used to be 0 for dual pane
			/// Preference activity side margins
			/// </summary>
			public const int preference_screen_side_margin = unchecked((int)(0x0105001d));

			/// <summary>
			/// Preference activity side margins negative
			/// Compensate for double margin : preference_screen_side_margin + 4 (frame background shadow) = -preference_screen_side_margin_negative
			/// Preference activity side margins negative
			/// Compensate for double margin : preference_screen_side_margin + 4 (frame background shadow) = -preference_screen_side_margin_negative
			/// </summary>
			public const int preference_screen_side_margin_negative = unchecked((int)(0x0105001e
				));

			/// <summary>Preference activity top margin</summary>
			public const int preference_screen_top_margin = unchecked((int)(0x0105001f));

			/// <summary>
			/// Preference widget area width (to the left of the text)
			/// Preference UI dimensions for larger screens.
			/// </summary>
			/// <remarks>
			/// Preference widget area width (to the left of the text)
			/// Preference UI dimensions for larger screens.
			/// </remarks>
			public const int preference_widget_width = unchecked((int)(0x01050021));

			/// <summary>Preferred width of the search view.</summary>
			/// <remarks>Preferred width of the search view.</remarks>
			public const int search_view_preferred_width = unchecked((int)(0x0105002d));

			/// <summary>Minimum width of the search view text entry area.</summary>
			/// <remarks>
			/// Minimum width of the search view text entry area.
			/// Minimum width of the search view text entry area.
			/// Minimum width of the search view text entry area.
			/// Minimum width of the search view text entry area.
			/// </remarks>
			public const int search_view_text_min_width = unchecked((int)(0x0105002c));

			/// <summary>
			/// Size of the giant number (unread count) in the notifications
			/// Size of the giant number (unread count) in the notifications
			/// Size of the giant number (unread count) in the notifications
			/// </summary>
			public const int status_bar_content_number_size = unchecked((int)(0x0105000e));

			/// <summary>Margin at the edge of the screen to ignore touch events for in the windowshade.
			/// 	</summary>
			/// <remarks>Margin at the edge of the screen to ignore touch events for in the windowshade.
			/// 	</remarks>
			public const int status_bar_edge_ignore = unchecked((int)(0x01050010));

			/// <summary>
			/// Height of the status bar
			/// Height of the status bar
			/// Height of the status bar
			/// </summary>
			public const int status_bar_height = unchecked((int)(0x01050009));

			/// <summary>
			/// Height of notification icons in the status bar
			/// Width and height of a single notification icon in the status bar
			/// Width and height of a single notification icon in the status bar
			/// </summary>
			public const int status_bar_icon_size = unchecked((int)(0x0105000d));

			/// <summary>Height of the system bar (combined status + navigation, used on large screens)
			/// 	</summary>
			public const int system_bar_height = unchecked((int)(0x0105000a));

			/// <summary>Height of notification icons in the system bar</summary>
			public const int system_bar_icon_size = unchecked((int)(0x0105000f));

			/// <summary>Default width for a textview error popup</summary>
			public const int textview_error_popup_default_width = unchecked((int)(0x0105003f)
				);

			/// <summary>The height that is used when creating thumbnails of applications.</summary>
			/// <remarks>
			/// The height that is used when creating thumbnails of applications.
			/// The height that is used when creating thumbnails of applications.
			/// The height that is used when creating thumbnails of applications.
			/// </remarks>
			public const int thumbnail_height = unchecked((int)(0x01050001));

			/// <summary>The width that is used when creating thumbnails of applications.</summary>
			/// <remarks>
			/// The width that is used when creating thumbnails of applications.
			/// The width that is used when creating thumbnails of applications.
			/// The width that is used when creating thumbnails of applications.
			/// </remarks>
			public const int thumbnail_width = unchecked((int)(0x01050002));

			public const int toast_y_offset = unchecked((int)(0x01050008));

			/// <summary>Volume panel y offset</summary>
			public const int volume_panel_top = unchecked((int)(0x01050040));
		}

		public sealed class drawable
		{
			public const int ab_bottom_solid_dark_holo = unchecked((int)(0x0108009e));

			public const int ab_bottom_solid_inverse_holo = unchecked((int)(0x0108009f));

			public const int ab_bottom_solid_light_holo = unchecked((int)(0x010800a0));

			public const int ab_bottom_transparent_dark_holo = unchecked((int)(0x010800a1));

			public const int ab_bottom_transparent_light_holo = unchecked((int)(0x010800a2));

			public const int ab_share_pack_holo_dark = unchecked((int)(0x010800a3));

			public const int ab_share_pack_holo_light = unchecked((int)(0x010800b4));

			public const int ab_solid_dark_holo = unchecked((int)(0x010800b5));

			public const int ab_solid_light_holo = unchecked((int)(0x010800b6));

			public const int ab_solid_shadow_holo = unchecked((int)(0x010800b7));

			public const int ab_stacked_solid_dark_holo = unchecked((int)(0x010800b8));

			public const int ab_stacked_solid_inverse_holo = unchecked((int)(0x010800b9));

			public const int ab_stacked_solid_light_holo = unchecked((int)(0x010800ba));

			public const int ab_stacked_transparent_dark_holo = unchecked((int)(0x010800bb));

			public const int ab_stacked_transparent_light_holo = unchecked((int)(0x010800bc));

			public const int ab_transparent_dark_holo = unchecked((int)(0x010800bd));

			public const int ab_transparent_light_holo = unchecked((int)(0x010800be));

			public const int action_bar_background = unchecked((int)(0x010800bf));

			public const int action_bar_divider = unchecked((int)(0x010800c0));

			public const int activated_background = unchecked((int)(0x010800c1));

			public const int activated_background_holo_dark = unchecked((int)(0x010800c2));

			public const int activated_background_holo_light = unchecked((int)(0x010800c3));

			public const int activated_background_light = unchecked((int)(0x010800c4));

			public const int activity_title_bar = unchecked((int)(0x010800c5));

			public const int alert_dark_frame = unchecked((int)(0x01080000));

			public const int alert_light_frame = unchecked((int)(0x01080001));

			public const int app_icon_background = unchecked((int)(0x010800c6));

			public const int arrow_down_float = unchecked((int)(0x01080002));

			public const int arrow_up_float = unchecked((int)(0x01080003));

			public const int background_cache_hint_selector_holo_dark = unchecked((int)(0x010800c7
				));

			public const int background_cache_hint_selector_holo_light = unchecked((int)(0x010800c8
				));

			public const int background_holo_dark = unchecked((int)(0x010800c9));

			public const int background_holo_light = unchecked((int)(0x010800ca));

			public const int battery_charge_background = unchecked((int)(0x010800cb));

			public const int blank_tile = unchecked((int)(0x010800cc));

			public const int bottom_bar = unchecked((int)(0x0108009a));

			public const int box = unchecked((int)(0x010800cd));

			public const int btn_browser_zoom_fit_page = unchecked((int)(0x010800ce));

			public const int btn_browser_zoom_page_overview = unchecked((int)(0x010800cf));

			public const int btn_cab_done_default_holo_dark = unchecked((int)(0x010800d0));

			public const int btn_cab_done_default_holo_light = unchecked((int)(0x010800d1));

			public const int btn_cab_done_focused_holo_dark = unchecked((int)(0x010800d2));

			public const int btn_cab_done_focused_holo_light = unchecked((int)(0x010800d3));

			public const int btn_cab_done_holo_dark = unchecked((int)(0x010800d4));

			public const int btn_cab_done_holo_light = unchecked((int)(0x010800d5));

			public const int btn_cab_done_pressed_holo_dark = unchecked((int)(0x010800d6));

			public const int btn_cab_done_pressed_holo_light = unchecked((int)(0x010800d7));

			public const int btn_check = unchecked((int)(0x010800d8));

			public const int btn_check_buttonless_off = unchecked((int)(0x010800d9));

			public const int btn_check_buttonless_on = unchecked((int)(0x010800da));

			public const int btn_check_holo_dark = unchecked((int)(0x010800db));

			public const int btn_check_holo_light = unchecked((int)(0x010800dc));

			public const int btn_check_label_background = unchecked((int)(0x010800dd));

			public const int btn_check_off = unchecked((int)(0x010800de));

			public const int btn_check_off_disable = unchecked((int)(0x010800df));

			public const int btn_check_off_disable_focused = unchecked((int)(0x010800e0));

			public const int btn_check_off_disable_focused_holo_dark = unchecked((int)(0x010800e1
				));

			public const int btn_check_off_disable_focused_holo_light = unchecked((int)(0x010800e2
				));

			public const int btn_check_off_disable_holo_dark = unchecked((int)(0x010800e3));

			public const int btn_check_off_disable_holo_light = unchecked((int)(0x010800e4));

			public const int btn_check_off_disabled_focused_holo_dark = unchecked((int)(0x010800e5
				));

			public const int btn_check_off_disabled_focused_holo_light = unchecked((int)(0x010800e6
				));

			public const int btn_check_off_disabled_holo_dark = unchecked((int)(0x010800e7));

			public const int btn_check_off_disabled_holo_light = unchecked((int)(0x010800e8));

			public const int btn_check_off_focused_holo_dark = unchecked((int)(0x010800e9));

			public const int btn_check_off_focused_holo_light = unchecked((int)(0x010800ea));

			public const int btn_check_off_holo = unchecked((int)(0x010800eb));

			public const int btn_check_off_holo_dark = unchecked((int)(0x010800ec));

			public const int btn_check_off_holo_light = unchecked((int)(0x010800ed));

			public const int btn_check_off_normal_holo_dark = unchecked((int)(0x010800ee));

			public const int btn_check_off_normal_holo_light = unchecked((int)(0x010800ef));

			public const int btn_check_off_pressed = unchecked((int)(0x010800f0));

			public const int btn_check_off_pressed_holo_dark = unchecked((int)(0x010800f1));

			public const int btn_check_off_pressed_holo_light = unchecked((int)(0x010800f2));

			public const int btn_check_off_selected = unchecked((int)(0x010800f3));

			public const int btn_check_on = unchecked((int)(0x010800f4));

			public const int btn_check_on_disable = unchecked((int)(0x010800f5));

			public const int btn_check_on_disable_focused = unchecked((int)(0x010800f6));

			public const int btn_check_on_disable_focused_holo_light = unchecked((int)(0x010800f7
				));

			public const int btn_check_on_disable_holo_dark = unchecked((int)(0x010800f8));

			public const int btn_check_on_disable_holo_light = unchecked((int)(0x010800f9));

			public const int btn_check_on_disabled_focused_holo_dark = unchecked((int)(0x010800fa
				));

			public const int btn_check_on_disabled_focused_holo_light = unchecked((int)(0x010800fb
				));

			public const int btn_check_on_disabled_holo_dark = unchecked((int)(0x010800fc));

			public const int btn_check_on_disabled_holo_light = unchecked((int)(0x010800fd));

			public const int btn_check_on_focused_holo_dark = unchecked((int)(0x010800fe));

			public const int btn_check_on_focused_holo_light = unchecked((int)(0x010800ff));

			public const int btn_check_on_holo = unchecked((int)(0x01080100));

			public const int btn_check_on_holo_dark = unchecked((int)(0x01080101));

			public const int btn_check_on_holo_light = unchecked((int)(0x01080102));

			public const int btn_check_on_pressed = unchecked((int)(0x01080103));

			public const int btn_check_on_pressed_holo_dark = unchecked((int)(0x01080104));

			public const int btn_check_on_pressed_holo_light = unchecked((int)(0x01080105));

			public const int btn_check_on_selected = unchecked((int)(0x01080106));

			public const int btn_circle = unchecked((int)(0x01080107));

			public const int btn_circle_disable = unchecked((int)(0x01080108));

			public const int btn_circle_disable_focused = unchecked((int)(0x01080109));

			public const int btn_circle_normal = unchecked((int)(0x0108010a));

			public const int btn_circle_pressed = unchecked((int)(0x0108010b));

			public const int btn_circle_selected = unchecked((int)(0x0108010c));

			public const int btn_close = unchecked((int)(0x0108010d));

			public const int btn_close_normal = unchecked((int)(0x0108010e));

			public const int btn_close_pressed = unchecked((int)(0x0108010f));

			public const int btn_close_selected = unchecked((int)(0x01080110));

			public const int btn_code_lock_default = unchecked((int)(0x01080111));

			public const int btn_code_lock_default_holo = unchecked((int)(0x01080112));

			public const int btn_code_lock_touched = unchecked((int)(0x01080113));

			public const int btn_code_lock_touched_holo = unchecked((int)(0x01080114));

			public const int btn_default = unchecked((int)(0x01080004));

			public const int btn_default_disabled_focused_holo_dark = unchecked((int)(0x01080115
				));

			public const int btn_default_disabled_focused_holo_light = unchecked((int)(0x01080116
				));

			public const int btn_default_disabled_holo = unchecked((int)(0x01080117));

			public const int btn_default_disabled_holo_dark = unchecked((int)(0x01080118));

			public const int btn_default_disabled_holo_light = unchecked((int)(0x01080119));

			public const int btn_default_focused_holo = unchecked((int)(0x0108011a));

			public const int btn_default_focused_holo_dark = unchecked((int)(0x0108011b));

			public const int btn_default_focused_holo_light = unchecked((int)(0x0108011c));

			public const int btn_default_holo_dark = unchecked((int)(0x0108011d));

			public const int btn_default_holo_light = unchecked((int)(0x0108011e));

			public const int btn_default_normal = unchecked((int)(0x0108011f));

			public const int btn_default_normal_disable = unchecked((int)(0x01080120));

			public const int btn_default_normal_disable_focused = unchecked((int)(0x01080121)
				);

			public const int btn_default_normal_holo = unchecked((int)(0x01080122));

			public const int btn_default_normal_holo_dark = unchecked((int)(0x01080123));

			public const int btn_default_normal_holo_light = unchecked((int)(0x01080124));

			public const int btn_default_pressed = unchecked((int)(0x01080125));

			public const int btn_default_pressed_holo = unchecked((int)(0x01080126));

			public const int btn_default_pressed_holo_dark = unchecked((int)(0x01080127));

			public const int btn_default_pressed_holo_light = unchecked((int)(0x01080128));

			public const int btn_default_selected = unchecked((int)(0x01080129));

			public const int btn_default_small = unchecked((int)(0x01080005));

			public const int btn_default_small_normal = unchecked((int)(0x0108012a));

			public const int btn_default_small_normal_disable = unchecked((int)(0x0108012b));

			public const int btn_default_small_normal_disable_focused = unchecked((int)(0x0108012c
				));

			public const int btn_default_small_pressed = unchecked((int)(0x0108012d));

			public const int btn_default_small_selected = unchecked((int)(0x0108012e));

			public const int btn_default_transparent = unchecked((int)(0x0108012f));

			public const int btn_default_transparent_normal = unchecked((int)(0x01080130));

			public const int btn_dialog = unchecked((int)(0x01080017));

			public const int btn_dialog_disable = unchecked((int)(0x01080131));

			public const int btn_dialog_normal = unchecked((int)(0x01080132));

			public const int btn_dialog_pressed = unchecked((int)(0x01080133));

			public const int btn_dialog_selected = unchecked((int)(0x01080134));

			public const int btn_dropdown = unchecked((int)(0x01080006));

			public const int btn_dropdown_disabled = unchecked((int)(0x01080135));

			public const int btn_dropdown_disabled_focused = unchecked((int)(0x01080136));

			public const int btn_dropdown_normal = unchecked((int)(0x01080137));

			public const int btn_dropdown_pressed = unchecked((int)(0x01080138));

			public const int btn_dropdown_selected = unchecked((int)(0x01080139));

			public const int btn_erase_default = unchecked((int)(0x0108013a));

			public const int btn_erase_pressed = unchecked((int)(0x0108013b));

			public const int btn_erase_selected = unchecked((int)(0x0108013c));

			public const int btn_global_search = unchecked((int)(0x0108013d));

			public const int btn_global_search_normal = unchecked((int)(0x0108013e));

			public const int btn_group_disabled_holo_dark = unchecked((int)(0x0108013f));

			public const int btn_group_disabled_holo_light = unchecked((int)(0x01080140));

			public const int btn_group_focused_holo_dark = unchecked((int)(0x01080141));

			public const int btn_group_focused_holo_light = unchecked((int)(0x01080142));

			public const int btn_group_holo_dark = unchecked((int)(0x01080143));

			public const int btn_group_holo_light = unchecked((int)(0x01080144));

			public const int btn_group_normal_holo_dark = unchecked((int)(0x01080145));

			public const int btn_group_normal_holo_light = unchecked((int)(0x01080146));

			public const int btn_group_pressed_holo_dark = unchecked((int)(0x01080147));

			public const int btn_group_pressed_holo_light = unchecked((int)(0x01080148));

			public const int btn_keyboard_key = unchecked((int)(0x01080149));

			public const int btn_keyboard_key_dark_normal_holo = unchecked((int)(0x0108014a));

			public const int btn_keyboard_key_dark_normal_off_holo = unchecked((int)(0x0108014b
				));

			public const int btn_keyboard_key_dark_normal_on_holo = unchecked((int)(0x0108014c
				));

			public const int btn_keyboard_key_dark_pressed_holo = unchecked((int)(0x0108014d)
				);

			public const int btn_keyboard_key_dark_pressed_off_holo = unchecked((int)(0x0108014e
				));

			public const int btn_keyboard_key_dark_pressed_on_holo = unchecked((int)(0x0108014f
				));

			public const int btn_keyboard_key_fulltrans = unchecked((int)(0x01080150));

			public const int btn_keyboard_key_fulltrans_normal = unchecked((int)(0x01080151));

			public const int btn_keyboard_key_fulltrans_normal_off = unchecked((int)(0x01080152
				));

			public const int btn_keyboard_key_fulltrans_normal_on = unchecked((int)(0x01080153
				));

			public const int btn_keyboard_key_fulltrans_pressed = unchecked((int)(0x01080154)
				);

			public const int btn_keyboard_key_fulltrans_pressed_off = unchecked((int)(0x01080155
				));

			public const int btn_keyboard_key_fulltrans_pressed_on = unchecked((int)(0x01080156
				));

			public const int btn_keyboard_key_ics = unchecked((int)(0x01080157));

			public const int btn_keyboard_key_light_normal_holo = unchecked((int)(0x01080158)
				);

			public const int btn_keyboard_key_light_pressed_holo = unchecked((int)(0x01080159
				));

			public const int btn_keyboard_key_normal = unchecked((int)(0x0108015a));

			public const int btn_keyboard_key_normal_off = unchecked((int)(0x0108015b));

			public const int btn_keyboard_key_normal_on = unchecked((int)(0x0108015c));

			public const int btn_keyboard_key_pressed = unchecked((int)(0x0108015d));

			public const int btn_keyboard_key_pressed_off = unchecked((int)(0x0108015e));

			public const int btn_keyboard_key_pressed_on = unchecked((int)(0x0108015f));

			public const int btn_keyboard_key_trans = unchecked((int)(0x01080160));

			public const int btn_keyboard_key_trans_normal = unchecked((int)(0x01080161));

			public const int btn_keyboard_key_trans_normal_off = unchecked((int)(0x01080162));

			public const int btn_keyboard_key_trans_normal_on = unchecked((int)(0x01080163));

			public const int btn_keyboard_key_trans_pressed = unchecked((int)(0x01080164));

			public const int btn_keyboard_key_trans_pressed_off = unchecked((int)(0x01080165)
				);

			public const int btn_keyboard_key_trans_pressed_on = unchecked((int)(0x01080166));

			public const int btn_keyboard_key_trans_selected = unchecked((int)(0x01080167));

			public const int btn_lock_normal = unchecked((int)(0x01080168));

			public const int btn_media_player = unchecked((int)(0x01080169));

			public const int btn_media_player_disabled = unchecked((int)(0x0108016a));

			public const int btn_media_player_disabled_selected = unchecked((int)(0x0108016b)
				);

			public const int btn_media_player_pressed = unchecked((int)(0x0108016c));

			public const int btn_media_player_selected = unchecked((int)(0x0108016d));

			public const int btn_minus = unchecked((int)(0x01080007));

			public const int btn_minus_default = unchecked((int)(0x0108016e));

			public const int btn_minus_disable = unchecked((int)(0x0108016f));

			public const int btn_minus_disable_focused = unchecked((int)(0x01080170));

			public const int btn_minus_pressed = unchecked((int)(0x01080171));

			public const int btn_minus_selected = unchecked((int)(0x01080172));

			public const int btn_plus = unchecked((int)(0x01080008));

			public const int btn_plus_default = unchecked((int)(0x01080173));

			public const int btn_plus_disable = unchecked((int)(0x01080174));

			public const int btn_plus_disable_focused = unchecked((int)(0x01080175));

			public const int btn_plus_pressed = unchecked((int)(0x01080176));

			public const int btn_plus_selected = unchecked((int)(0x01080177));

			public const int btn_radio = unchecked((int)(0x01080009));

			public const int btn_radio_holo_dark = unchecked((int)(0x01080178));

			public const int btn_radio_holo_light = unchecked((int)(0x01080179));

			public const int btn_radio_label_background = unchecked((int)(0x0108017a));

			public const int btn_radio_off = unchecked((int)(0x0108017b));

			public const int btn_radio_off_disabled_focused_holo_dark = unchecked((int)(0x0108017c
				));

			public const int btn_radio_off_disabled_focused_holo_light = unchecked((int)(0x0108017d
				));

			public const int btn_radio_off_disabled_holo_dark = unchecked((int)(0x0108017e));

			public const int btn_radio_off_disabled_holo_light = unchecked((int)(0x0108017f));

			public const int btn_radio_off_focused_holo_dark = unchecked((int)(0x01080180));

			public const int btn_radio_off_focused_holo_light = unchecked((int)(0x01080181));

			public const int btn_radio_off_holo = unchecked((int)(0x01080182));

			public const int btn_radio_off_holo_dark = unchecked((int)(0x01080183));

			public const int btn_radio_off_holo_light = unchecked((int)(0x01080184));

			public const int btn_radio_off_pressed = unchecked((int)(0x01080185));

			public const int btn_radio_off_pressed_holo_dark = unchecked((int)(0x01080186));

			public const int btn_radio_off_pressed_holo_light = unchecked((int)(0x01080187));

			public const int btn_radio_off_selected = unchecked((int)(0x01080188));

			public const int btn_radio_on = unchecked((int)(0x01080189));

			public const int btn_radio_on_disabled_focused_holo_dark = unchecked((int)(0x0108018a
				));

			public const int btn_radio_on_disabled_focused_holo_light = unchecked((int)(0x0108018b
				));

			public const int btn_radio_on_disabled_holo_dark = unchecked((int)(0x0108018c));

			public const int btn_radio_on_disabled_holo_light = unchecked((int)(0x0108018d));

			public const int btn_radio_on_focused_holo_dark = unchecked((int)(0x0108018e));

			public const int btn_radio_on_focused_holo_light = unchecked((int)(0x0108018f));

			public const int btn_radio_on_holo = unchecked((int)(0x01080190));

			public const int btn_radio_on_holo_dark = unchecked((int)(0x01080191));

			public const int btn_radio_on_holo_light = unchecked((int)(0x01080192));

			public const int btn_radio_on_pressed = unchecked((int)(0x01080193));

			public const int btn_radio_on_pressed_holo_dark = unchecked((int)(0x01080194));

			public const int btn_radio_on_pressed_holo_light = unchecked((int)(0x01080195));

			public const int btn_radio_on_selected = unchecked((int)(0x01080196));

			public const int btn_rating_star_off_disabled_focused_holo_dark = unchecked((int)
				(0x01080197));

			public const int btn_rating_star_off_disabled_focused_holo_light = unchecked((int
				)(0x01080198));

			public const int btn_rating_star_off_disabled_holo_dark = unchecked((int)(0x01080199
				));

			public const int btn_rating_star_off_disabled_holo_light = unchecked((int)(0x0108019a
				));

			public const int btn_rating_star_off_focused_holo_dark = unchecked((int)(0x0108019b
				));

			public const int btn_rating_star_off_focused_holo_light = unchecked((int)(0x0108019c
				));

			public const int btn_rating_star_off_normal = unchecked((int)(0x0108019d));

			public const int btn_rating_star_off_normal_holo_dark = unchecked((int)(0x0108019e
				));

			public const int btn_rating_star_off_normal_holo_light = unchecked((int)(0x0108019f
				));

			public const int btn_rating_star_off_pressed = unchecked((int)(0x010801a0));

			public const int btn_rating_star_off_pressed_holo_dark = unchecked((int)(0x010801a1
				));

			public const int btn_rating_star_off_pressed_holo_light = unchecked((int)(0x010801a2
				));

			public const int btn_rating_star_off_selected = unchecked((int)(0x010801a3));

			public const int btn_rating_star_on_disabled_focused_holo_dark = unchecked((int)(
				0x010801a4));

			public const int btn_rating_star_on_disabled_focused_holo_light = unchecked((int)
				(0x010801a5));

			public const int btn_rating_star_on_disabled_holo_dark = unchecked((int)(0x010801a6
				));

			public const int btn_rating_star_on_disabled_holo_light = unchecked((int)(0x010801a7
				));

			public const int btn_rating_star_on_focused_holo_dark = unchecked((int)(0x010801a8
				));

			public const int btn_rating_star_on_focused_holo_light = unchecked((int)(0x010801a9
				));

			public const int btn_rating_star_on_normal = unchecked((int)(0x010801aa));

			public const int btn_rating_star_on_normal_holo_dark = unchecked((int)(0x010801ab
				));

			public const int btn_rating_star_on_normal_holo_light = unchecked((int)(0x010801ac
				));

			public const int btn_rating_star_on_pressed = unchecked((int)(0x010801ad));

			public const int btn_rating_star_on_pressed_holo_dark = unchecked((int)(0x010801ae
				));

			public const int btn_rating_star_on_pressed_holo_light = unchecked((int)(0x010801af
				));

			public const int btn_rating_star_on_selected = unchecked((int)(0x010801b0));

			public const int btn_search_dialog = unchecked((int)(0x010801b1));

			public const int btn_search_dialog_default = unchecked((int)(0x010801b2));

			public const int btn_search_dialog_pressed = unchecked((int)(0x010801b3));

			public const int btn_search_dialog_selected = unchecked((int)(0x010801b4));

			public const int btn_search_dialog_voice = unchecked((int)(0x010801b5));

			public const int btn_search_dialog_voice_default = unchecked((int)(0x010801b6));

			public const int btn_search_dialog_voice_pressed = unchecked((int)(0x010801b7));

			public const int btn_search_dialog_voice_selected = unchecked((int)(0x010801b8));

			public const int btn_square_overlay = unchecked((int)(0x010801b9));

			public const int btn_square_overlay_disabled = unchecked((int)(0x010801ba));

			public const int btn_square_overlay_disabled_focused = unchecked((int)(0x010801bb
				));

			public const int btn_square_overlay_normal = unchecked((int)(0x010801bc));

			public const int btn_square_overlay_pressed = unchecked((int)(0x010801bd));

			public const int btn_square_overlay_selected = unchecked((int)(0x010801be));

			public const int btn_star = unchecked((int)(0x0108000a));

			public const int btn_star_big_off = unchecked((int)(0x0108000b));

			public const int btn_star_big_off_disable = unchecked((int)(0x010801bf));

			public const int btn_star_big_off_disable_focused = unchecked((int)(0x010801c0));

			public const int btn_star_big_off_pressed = unchecked((int)(0x010801c1));

			public const int btn_star_big_off_selected = unchecked((int)(0x010801c2));

			public const int btn_star_big_on = unchecked((int)(0x0108000c));

			public const int btn_star_big_on_disable = unchecked((int)(0x010801c3));

			public const int btn_star_big_on_disable_focused = unchecked((int)(0x010801c4));

			public const int btn_star_big_on_pressed = unchecked((int)(0x010801c5));

			public const int btn_star_big_on_selected = unchecked((int)(0x010801c6));

			public const int btn_star_holo_dark = unchecked((int)(0x010801c7));

			public const int btn_star_holo_light = unchecked((int)(0x010801c8));

			public const int btn_star_label_background = unchecked((int)(0x010801c9));

			public const int btn_star_off_disabled_focused_holo_dark = unchecked((int)(0x010801ca
				));

			public const int btn_star_off_disabled_focused_holo_light = unchecked((int)(0x010801cb
				));

			public const int btn_star_off_disabled_holo_dark = unchecked((int)(0x010801cc));

			public const int btn_star_off_disabled_holo_light = unchecked((int)(0x010801cd));

			public const int btn_star_off_focused_holo_dark = unchecked((int)(0x010801ce));

			public const int btn_star_off_focused_holo_light = unchecked((int)(0x010801cf));

			public const int btn_star_off_normal_holo_dark = unchecked((int)(0x010801d0));

			public const int btn_star_off_normal_holo_light = unchecked((int)(0x010801d1));

			public const int btn_star_off_pressed_holo_dark = unchecked((int)(0x010801d2));

			public const int btn_star_off_pressed_holo_light = unchecked((int)(0x010801d3));

			public const int btn_star_on_disabled_focused_holo_dark = unchecked((int)(0x010801d4
				));

			public const int btn_star_on_disabled_focused_holo_light = unchecked((int)(0x010801d5
				));

			public const int btn_star_on_disabled_holo_dark = unchecked((int)(0x010801d6));

			public const int btn_star_on_disabled_holo_light = unchecked((int)(0x010801d7));

			public const int btn_star_on_focused_holo_dark = unchecked((int)(0x010801d8));

			public const int btn_star_on_focused_holo_light = unchecked((int)(0x010801d9));

			public const int btn_star_on_normal_holo_dark = unchecked((int)(0x010801da));

			public const int btn_star_on_normal_holo_light = unchecked((int)(0x010801db));

			public const int btn_star_on_pressed_holo_dark = unchecked((int)(0x010801dc));

			public const int btn_star_on_pressed_holo_light = unchecked((int)(0x010801dd));

			public const int btn_toggle = unchecked((int)(0x010801de));

			public const int btn_toggle_bg = unchecked((int)(0x010801df));

			public const int btn_toggle_holo_dark = unchecked((int)(0x010801e0));

			public const int btn_toggle_holo_light = unchecked((int)(0x010801e1));

			public const int btn_toggle_off = unchecked((int)(0x010801e2));

			public const int btn_toggle_off_disabled_focused_holo_dark = unchecked((int)(0x010801e3
				));

			public const int btn_toggle_off_disabled_focused_holo_light = unchecked((int)(0x010801e4
				));

			public const int btn_toggle_off_disabled_holo_dark = unchecked((int)(0x010801e5));

			public const int btn_toggle_off_disabled_holo_light = unchecked((int)(0x010801e6)
				);

			public const int btn_toggle_off_focused_holo_dark = unchecked((int)(0x010801e7));

			public const int btn_toggle_off_focused_holo_light = unchecked((int)(0x010801e8));

			public const int btn_toggle_off_normal_holo_dark = unchecked((int)(0x010801e9));

			public const int btn_toggle_off_normal_holo_light = unchecked((int)(0x010801ea));

			public const int btn_toggle_off_pressed_holo_dark = unchecked((int)(0x010801eb));

			public const int btn_toggle_off_pressed_holo_light = unchecked((int)(0x010801ec));

			public const int btn_toggle_on = unchecked((int)(0x010801ed));

			public const int btn_toggle_on_disabled_focused_holo_dark = unchecked((int)(0x010801ee
				));

			public const int btn_toggle_on_disabled_focused_holo_light = unchecked((int)(0x010801ef
				));

			public const int btn_toggle_on_disabled_holo_dark = unchecked((int)(0x010801f0));

			public const int btn_toggle_on_disabled_holo_light = unchecked((int)(0x010801f1));

			public const int btn_toggle_on_focused_holo_dark = unchecked((int)(0x010801f2));

			public const int btn_toggle_on_focused_holo_light = unchecked((int)(0x010801f3));

			public const int btn_toggle_on_normal_holo_dark = unchecked((int)(0x010801f4));

			public const int btn_toggle_on_normal_holo_light = unchecked((int)(0x010801f5));

			public const int btn_toggle_on_pressed_holo_dark = unchecked((int)(0x010801f6));

			public const int btn_toggle_on_pressed_holo_light = unchecked((int)(0x010801f7));

			public const int btn_zoom_down = unchecked((int)(0x010801f8));

			public const int btn_zoom_down_disabled = unchecked((int)(0x010801f9));

			public const int btn_zoom_down_disabled_focused = unchecked((int)(0x010801fa));

			public const int btn_zoom_down_normal = unchecked((int)(0x010801fb));

			public const int btn_zoom_down_pressed = unchecked((int)(0x010801fc));

			public const int btn_zoom_down_selected = unchecked((int)(0x010801fd));

			public const int btn_zoom_page = unchecked((int)(0x010801fe));

			public const int btn_zoom_page_normal = unchecked((int)(0x010801ff));

			public const int btn_zoom_page_press = unchecked((int)(0x01080200));

			public const int btn_zoom_up = unchecked((int)(0x01080201));

			public const int btn_zoom_up_disabled = unchecked((int)(0x01080202));

			public const int btn_zoom_up_disabled_focused = unchecked((int)(0x01080203));

			public const int btn_zoom_up_normal = unchecked((int)(0x01080204));

			public const int btn_zoom_up_pressed = unchecked((int)(0x01080205));

			public const int btn_zoom_up_selected = unchecked((int)(0x01080206));

			public const int button_inset = unchecked((int)(0x01080207));

			public const int button_onoff_indicator_off = unchecked((int)(0x0108000e));

			public const int button_onoff_indicator_on = unchecked((int)(0x0108000d));

			public const int cab_background_bottom_holo_dark = unchecked((int)(0x01080208));

			public const int cab_background_bottom_holo_light = unchecked((int)(0x01080209));

			public const int cab_background_top_holo_dark = unchecked((int)(0x0108020a));

			public const int cab_background_top_holo_light = unchecked((int)(0x0108020b));

			public const int call_contact = unchecked((int)(0x0108020c));

			public const int checkbox_off_background = unchecked((int)(0x0108000f));

			public const int checkbox_on_background = unchecked((int)(0x01080010));

			public const int clock_dial = unchecked((int)(0x0108020d));

			public const int clock_hand_hour = unchecked((int)(0x0108020e));

			public const int clock_hand_minute = unchecked((int)(0x0108020f));

			public const int code_lock_bottom = unchecked((int)(0x01080210));

			public const int code_lock_left = unchecked((int)(0x01080211));

			public const int code_lock_top = unchecked((int)(0x01080212));

			public const int combobox_disabled = unchecked((int)(0x01080213));

			public const int combobox_nohighlight = unchecked((int)(0x01080214));

			public const int compass_arrow = unchecked((int)(0x01080215));

			public const int compass_base = unchecked((int)(0x01080216));

			public const int contact_header_bg = unchecked((int)(0x01080217));

			public const int create_contact = unchecked((int)(0x01080218));

			/// <summary>Drawable to use as a background for separators on a list with a dark background
			/// 	</summary>
			public const int dark_header = unchecked((int)(0x010800a5));

			public const int dark_header_dither = unchecked((int)(0x01080219));

			public const int day_picker_week_view_dayline_holo = unchecked((int)(0x0108021a));

			public const int default_wallpaper = unchecked((int)(0x0108021b));

			public const int dialog_bottom_holo_dark = unchecked((int)(0x0108021c));

			public const int dialog_bottom_holo_light = unchecked((int)(0x0108021d));

			public const int dialog_divider_horizontal_holo_dark = unchecked((int)(0x0108021e
				));

			public const int dialog_divider_horizontal_holo_light = unchecked((int)(0x0108021f
				));

			public const int dialog_divider_horizontal_light = unchecked((int)(0x01080220));

			public const int dialog_frame = unchecked((int)(0x01080011));

			public const int dialog_full_holo_dark = unchecked((int)(0x01080221));

			public const int dialog_full_holo_light = unchecked((int)(0x01080222));

			public const int dialog_holo_dark_frame = unchecked((int)(0x010800b2));

			public const int dialog_holo_light_frame = unchecked((int)(0x010800b3));

			public const int dialog_ic_close_focused_holo_dark = unchecked((int)(0x01080223));

			public const int dialog_ic_close_focused_holo_light = unchecked((int)(0x01080224)
				);

			public const int dialog_ic_close_normal_holo_dark = unchecked((int)(0x01080225));

			public const int dialog_ic_close_normal_holo_light = unchecked((int)(0x01080226));

			public const int dialog_ic_close_pressed_holo_dark = unchecked((int)(0x01080227));

			public const int dialog_ic_close_pressed_holo_light = unchecked((int)(0x01080228)
				);

			public const int dialog_middle_holo = unchecked((int)(0x01080229));

			public const int dialog_middle_holo_dark = unchecked((int)(0x0108022a));

			public const int dialog_middle_holo_light = unchecked((int)(0x0108022b));

			public const int dialog_top_holo_dark = unchecked((int)(0x0108022c));

			public const int dialog_top_holo_light = unchecked((int)(0x0108022d));

			public const int divider_horizontal_bright = unchecked((int)(0x01080012));

			public const int divider_horizontal_bright_opaque = unchecked((int)(0x0108022e));

			public const int divider_horizontal_dark = unchecked((int)(0x01080014));

			public const int divider_horizontal_dark_opaque = unchecked((int)(0x0108022f));

			public const int divider_horizontal_dim_dark = unchecked((int)(0x01080015));

			public const int divider_horizontal_holo_dark = unchecked((int)(0x01080230));

			public const int divider_horizontal_holo_light = unchecked((int)(0x01080231));

			public const int divider_horizontal_textfield = unchecked((int)(0x01080013));

			public const int divider_strong_holo = unchecked((int)(0x01080232));

			public const int divider_vertical_bright = unchecked((int)(0x01080233));

			public const int divider_vertical_bright_opaque = unchecked((int)(0x01080234));

			public const int divider_vertical_dark = unchecked((int)(0x01080235));

			public const int divider_vertical_dark_opaque = unchecked((int)(0x01080236));

			public const int divider_vertical_holo_dark = unchecked((int)(0x01080237));

			public const int divider_vertical_holo_light = unchecked((int)(0x01080238));

			public const int dropdown_disabled_focused_holo_dark = unchecked((int)(0x01080239
				));

			public const int dropdown_disabled_focused_holo_light = unchecked((int)(0x0108023a
				));

			public const int dropdown_disabled_holo_dark = unchecked((int)(0x0108023b));

			public const int dropdown_disabled_holo_light = unchecked((int)(0x0108023c));

			public const int dropdown_focused_holo_dark = unchecked((int)(0x0108023d));

			public const int dropdown_focused_holo_light = unchecked((int)(0x0108023e));

			public const int dropdown_ic_arrow_disabled_focused_holo_dark = unchecked((int)(0x0108023f
				));

			public const int dropdown_ic_arrow_disabled_focused_holo_light = unchecked((int)(
				0x01080240));

			public const int dropdown_ic_arrow_disabled_holo_dark = unchecked((int)(0x01080241
				));

			public const int dropdown_ic_arrow_disabled_holo_light = unchecked((int)(0x01080242
				));

			public const int dropdown_ic_arrow_focused_holo_dark = unchecked((int)(0x01080243
				));

			public const int dropdown_ic_arrow_focused_holo_light = unchecked((int)(0x01080244
				));

			public const int dropdown_ic_arrow_normal_holo_dark = unchecked((int)(0x01080245)
				);

			public const int dropdown_ic_arrow_normal_holo_light = unchecked((int)(0x01080246
				));

			public const int dropdown_ic_arrow_pressed_holo_dark = unchecked((int)(0x01080247
				));

			public const int dropdown_ic_arrow_pressed_holo_light = unchecked((int)(0x01080248
				));

			public const int dropdown_normal_holo_dark = unchecked((int)(0x01080249));

			public const int dropdown_normal_holo_light = unchecked((int)(0x0108024a));

			public const int dropdown_pressed_holo_dark = unchecked((int)(0x0108024b));

			public const int dropdown_pressed_holo_light = unchecked((int)(0x0108024c));

			public const int edit_query = unchecked((int)(0x0108024d));

			public const int edit_query_background = unchecked((int)(0x0108024e));

			public const int edit_query_background_normal = unchecked((int)(0x0108024f));

			public const int edit_query_background_pressed = unchecked((int)(0x01080250));

			public const int edit_query_background_selected = unchecked((int)(0x01080251));

			public const int edit_text = unchecked((int)(0x01080016));

			public const int edit_text_holo_dark = unchecked((int)(0x01080252));

			public const int edit_text_holo_light = unchecked((int)(0x01080253));

			public const int editbox_background = unchecked((int)(0x01080018));

			public const int editbox_background_focus_yellow = unchecked((int)(0x01080254));

			public const int editbox_background_normal = unchecked((int)(0x01080019));

			public const int editbox_dropdown_background = unchecked((int)(0x01080255));

			public const int editbox_dropdown_background_dark = unchecked((int)(0x01080256));

			public const int editbox_dropdown_dark_frame = unchecked((int)(0x0108001a));

			public const int editbox_dropdown_light_frame = unchecked((int)(0x0108001b));

			public const int emo_im_angel = unchecked((int)(0x01080257));

			public const int emo_im_cool = unchecked((int)(0x01080258));

			public const int emo_im_crying = unchecked((int)(0x01080259));

			public const int emo_im_embarrassed = unchecked((int)(0x0108025a));

			public const int emo_im_foot_in_mouth = unchecked((int)(0x0108025b));

			public const int emo_im_happy = unchecked((int)(0x0108025c));

			public const int emo_im_kissing = unchecked((int)(0x0108025d));

			public const int emo_im_laughing = unchecked((int)(0x0108025e));

			public const int emo_im_lips_are_sealed = unchecked((int)(0x0108025f));

			public const int emo_im_money_mouth = unchecked((int)(0x01080260));

			public const int emo_im_sad = unchecked((int)(0x01080261));

			public const int emo_im_surprised = unchecked((int)(0x01080262));

			public const int emo_im_tongue_sticking_out = unchecked((int)(0x01080263));

			public const int emo_im_undecided = unchecked((int)(0x01080264));

			public const int emo_im_winking = unchecked((int)(0x01080265));

			public const int emo_im_wtf = unchecked((int)(0x01080266));

			public const int emo_im_yelling = unchecked((int)(0x01080267));

			public const int expander_close_holo_dark = unchecked((int)(0x01080268));

			public const int expander_close_holo_light = unchecked((int)(0x01080269));

			public const int expander_group = unchecked((int)(0x0108026a));

			public const int expander_group_holo_dark = unchecked((int)(0x0108026b));

			public const int expander_group_holo_light = unchecked((int)(0x0108026c));

			public const int expander_ic_maximized = unchecked((int)(0x0108026d));

			public const int expander_ic_minimized = unchecked((int)(0x0108026e));

			public const int expander_open_holo_dark = unchecked((int)(0x0108026f));

			public const int expander_open_holo_light = unchecked((int)(0x01080270));

			public const int fastscroll_label_left_holo_dark = unchecked((int)(0x01080271));

			public const int fastscroll_label_left_holo_light = unchecked((int)(0x01080272));

			public const int fastscroll_label_right_holo_dark = unchecked((int)(0x01080273));

			public const int fastscroll_label_right_holo_light = unchecked((int)(0x01080274));

			public const int fastscroll_thumb_default_holo = unchecked((int)(0x01080275));

			public const int fastscroll_thumb_holo = unchecked((int)(0x01080276));

			public const int fastscroll_thumb_pressed_holo = unchecked((int)(0x01080277));

			public const int fastscroll_track_default_holo_dark = unchecked((int)(0x01080278)
				);

			public const int fastscroll_track_default_holo_light = unchecked((int)(0x01080279
				));

			public const int fastscroll_track_holo_dark = unchecked((int)(0x0108027a));

			public const int fastscroll_track_holo_light = unchecked((int)(0x0108027b));

			public const int fastscroll_track_pressed_holo_dark = unchecked((int)(0x0108027c)
				);

			public const int fastscroll_track_pressed_holo_light = unchecked((int)(0x0108027d
				));

			public const int focused_application_background_static = unchecked((int)(0x0108027e
				));

			public const int frame_gallery_thumb = unchecked((int)(0x0108027f));

			public const int frame_gallery_thumb_pressed = unchecked((int)(0x01080280));

			public const int frame_gallery_thumb_selected = unchecked((int)(0x01080281));

			public const int gallery_item_background = unchecked((int)(0x01080282));

			public const int gallery_selected_default = unchecked((int)(0x01080283));

			public const int gallery_selected_focused = unchecked((int)(0x01080284));

			public const int gallery_selected_pressed = unchecked((int)(0x01080285));

			public const int gallery_thumb = unchecked((int)(0x0108001c));

			public const int gallery_unselected_default = unchecked((int)(0x01080286));

			public const int gallery_unselected_pressed = unchecked((int)(0x01080287));

			public const int grid_selector_background = unchecked((int)(0x01080288));

			public const int grid_selector_background_focus = unchecked((int)(0x01080289));

			public const int grid_selector_background_pressed = unchecked((int)(0x0108028a));

			public const int highlight_disabled = unchecked((int)(0x0108028b));

			public const int highlight_pressed = unchecked((int)(0x0108028c));

			public const int highlight_selected = unchecked((int)(0x0108028d));

			public const int ic_ab_back_holo_dark = unchecked((int)(0x0108028e));

			public const int ic_ab_back_holo_light = unchecked((int)(0x0108028f));

			public const int ic_aggregated = unchecked((int)(0x01080290));

			public const int ic_audio_alarm = unchecked((int)(0x01080291));

			public const int ic_audio_alarm_mute = unchecked((int)(0x01080292));

			public const int ic_audio_bt = unchecked((int)(0x01080293));

			public const int ic_audio_bt_mute = unchecked((int)(0x01080294));

			public const int ic_audio_notification = unchecked((int)(0x01080295));

			public const int ic_audio_notification_mute = unchecked((int)(0x01080296));

			public const int ic_audio_phone = unchecked((int)(0x01080297));

			public const int ic_audio_ring_notif = unchecked((int)(0x01080298));

			public const int ic_audio_ring_notif_mute = unchecked((int)(0x01080299));

			public const int ic_audio_ring_notif_vibrate = unchecked((int)(0x0108029a));

			public const int ic_audio_vol = unchecked((int)(0x0108029b));

			public const int ic_audio_vol_mute = unchecked((int)(0x0108029c));

			public const int ic_btn_round_more = unchecked((int)(0x0108029d));

			public const int ic_btn_round_more_disabled = unchecked((int)(0x0108029e));

			public const int ic_btn_round_more_normal = unchecked((int)(0x0108029f));

			public const int ic_btn_search = unchecked((int)(0x010802a0));

			public const int ic_btn_search_go = unchecked((int)(0x010802a1));

			public const int ic_btn_speak_now = unchecked((int)(0x010800a4));

			public const int ic_btn_square_browser_zoom_fit_page = unchecked((int)(0x010802a2
				));

			public const int ic_btn_square_browser_zoom_fit_page_disabled = unchecked((int)(0x010802a3
				));

			public const int ic_btn_square_browser_zoom_fit_page_normal = unchecked((int)(0x010802a4
				));

			public const int ic_btn_square_browser_zoom_page_overview = unchecked((int)(0x010802a5
				));

			public const int ic_btn_square_browser_zoom_page_overview_disabled = unchecked((int
				)(0x010802a6));

			public const int ic_btn_square_browser_zoom_page_overview_normal = unchecked((int
				)(0x010802a7));

			public const int ic_bullet_key_permission = unchecked((int)(0x010802a8));

			public const int ic_cab_done_holo = unchecked((int)(0x010802a9));

			public const int ic_cab_done_holo_dark = unchecked((int)(0x010802aa));

			public const int ic_cab_done_holo_light = unchecked((int)(0x010802ab));

			public const int ic_checkmark_holo_light = unchecked((int)(0x010802ac));

			public const int ic_clear = unchecked((int)(0x010802ad));

			public const int ic_clear_disabled = unchecked((int)(0x010802ae));

			public const int ic_clear_holo_light = unchecked((int)(0x010802af));

			public const int ic_clear_normal = unchecked((int)(0x010802b0));

			public const int ic_clear_search_api_disabled_holo_light = unchecked((int)(0x010802b1
				));

			public const int ic_clear_search_api_holo_light = unchecked((int)(0x010802b2));

			public const int ic_commit = unchecked((int)(0x010802b3));

			public const int ic_commit_search_api_holo_dark = unchecked((int)(0x010802b4));

			public const int ic_commit_search_api_holo_light = unchecked((int)(0x010802b5));

			public const int ic_contact_picture = unchecked((int)(0x010802b6));

			public const int ic_contact_picture_2 = unchecked((int)(0x010802b7));

			public const int ic_contact_picture_3 = unchecked((int)(0x010802b8));

			public const int ic_delete = unchecked((int)(0x0108001d));

			public const int ic_dialog_alert = unchecked((int)(0x01080027));

			public const int ic_dialog_alert_holo_dark = unchecked((int)(0x010802b9));

			public const int ic_dialog_alert_holo_light = unchecked((int)(0x010802ba));

			public const int ic_dialog_close_normal_holo = unchecked((int)(0x010802bb));

			public const int ic_dialog_close_pressed_holo = unchecked((int)(0x010802bc));

			public const int ic_dialog_dialer = unchecked((int)(0x01080028));

			public const int ic_dialog_email = unchecked((int)(0x01080029));

			public const int ic_dialog_focused_holo = unchecked((int)(0x010802bd));

			public const int ic_dialog_info = unchecked((int)(0x0108009b));

			public const int ic_dialog_map = unchecked((int)(0x0108002a));

			public const int ic_dialog_time = unchecked((int)(0x010802be));

			public const int ic_dialog_usb = unchecked((int)(0x010802bf));

			public const int ic_emergency = unchecked((int)(0x010802c0));

			public const int ic_find_next_holo_dark = unchecked((int)(0x010802c1));

			public const int ic_find_previous_holo_dark = unchecked((int)(0x010802c2));

			public const int ic_go = unchecked((int)(0x010802c3));

			public const int ic_go_search_api_holo_light = unchecked((int)(0x010802c4));

			public const int ic_input_add = unchecked((int)(0x0108002b));

			public const int ic_input_delete = unchecked((int)(0x0108002c));

			public const int ic_input_get = unchecked((int)(0x0108002d));

			public const int ic_jog_dial_answer = unchecked((int)(0x010802c5));

			public const int ic_jog_dial_answer_and_end = unchecked((int)(0x010802c6));

			public const int ic_jog_dial_answer_and_hold = unchecked((int)(0x010802c7));

			public const int ic_jog_dial_decline = unchecked((int)(0x010802c8));

			public const int ic_jog_dial_sound_off = unchecked((int)(0x010802c9));

			public const int ic_jog_dial_sound_on = unchecked((int)(0x010802ca));

			public const int ic_jog_dial_unlock = unchecked((int)(0x010802cb));

			public const int ic_jog_dial_vibrate_on = unchecked((int)(0x010802cc));

			public const int ic_launcher_android = unchecked((int)(0x010802cd));

			public const int ic_lock_airplane_mode = unchecked((int)(0x010802ce));

			public const int ic_lock_airplane_mode_off = unchecked((int)(0x010802cf));

			public const int ic_lock_idle_alarm = unchecked((int)(0x0108002e));

			public const int ic_lock_idle_charging = unchecked((int)(0x0108001e));

			public const int ic_lock_idle_lock = unchecked((int)(0x0108001f));

			public const int ic_lock_idle_low_battery = unchecked((int)(0x01080020));

			public const int ic_lock_lock = unchecked((int)(0x0108002f));

			public const int ic_lock_power_off = unchecked((int)(0x01080030));

			public const int ic_lock_ringer_off = unchecked((int)(0x010802d0));

			public const int ic_lock_ringer_on = unchecked((int)(0x010802d1));

			public const int ic_lock_silent_mode = unchecked((int)(0x01080031));

			public const int ic_lock_silent_mode_off = unchecked((int)(0x01080032));

			public const int ic_lock_silent_mode_vibrate = unchecked((int)(0x010802d2));

			public const int ic_lockscreen_answer = unchecked((int)(0x010802d3));

			public const int ic_lockscreen_answer_active = unchecked((int)(0x010802d4));

			public const int ic_lockscreen_answer_focused = unchecked((int)(0x010802d5));

			public const int ic_lockscreen_answer_normal = unchecked((int)(0x010802d6));

			public const int ic_lockscreen_camera = unchecked((int)(0x010802d7));

			public const int ic_lockscreen_camera_activated = unchecked((int)(0x010802d8));

			public const int ic_lockscreen_camera_normal = unchecked((int)(0x010802d9));

			public const int ic_lockscreen_chevron_down = unchecked((int)(0x010802da));

			public const int ic_lockscreen_chevron_left = unchecked((int)(0x010802db));

			public const int ic_lockscreen_chevron_right = unchecked((int)(0x010802dc));

			public const int ic_lockscreen_chevron_up = unchecked((int)(0x010802dd));

			public const int ic_lockscreen_decline = unchecked((int)(0x010802de));

			public const int ic_lockscreen_decline_activated = unchecked((int)(0x010802df));

			public const int ic_lockscreen_decline_focused = unchecked((int)(0x010802e0));

			public const int ic_lockscreen_decline_normal = unchecked((int)(0x010802e1));

			public const int ic_lockscreen_emergencycall_normal = unchecked((int)(0x010802e2)
				);

			public const int ic_lockscreen_emergencycall_pressed = unchecked((int)(0x010802e3
				));

			public const int ic_lockscreen_forgotpassword_normal = unchecked((int)(0x010802e4
				));

			public const int ic_lockscreen_forgotpassword_pressed = unchecked((int)(0x010802e5
				));

			public const int ic_lockscreen_handle = unchecked((int)(0x010802e6));

			public const int ic_lockscreen_handle_normal = unchecked((int)(0x010802e7));

			public const int ic_lockscreen_handle_pressed = unchecked((int)(0x010802e8));

			public const int ic_lockscreen_ime = unchecked((int)(0x010802e9));

			public const int ic_lockscreen_lock_normal = unchecked((int)(0x010802ea));

			public const int ic_lockscreen_lock_pressed = unchecked((int)(0x010802eb));

			public const int ic_lockscreen_outerring = unchecked((int)(0x010802ec));

			public const int ic_lockscreen_player_background = unchecked((int)(0x010802ed));

			public const int ic_lockscreen_send_sms = unchecked((int)(0x010802ee));

			public const int ic_lockscreen_silent = unchecked((int)(0x010802ef));

			public const int ic_lockscreen_silent_activated = unchecked((int)(0x010802f0));

			public const int ic_lockscreen_silent_focused = unchecked((int)(0x010802f1));

			public const int ic_lockscreen_silent_normal = unchecked((int)(0x010802f2));

			public const int ic_lockscreen_soundon = unchecked((int)(0x010802f3));

			public const int ic_lockscreen_soundon_activated = unchecked((int)(0x010802f4));

			public const int ic_lockscreen_soundon_focused = unchecked((int)(0x010802f5));

			public const int ic_lockscreen_soundon_normal = unchecked((int)(0x010802f6));

			public const int ic_lockscreen_text_activated = unchecked((int)(0x010802f7));

			public const int ic_lockscreen_text_focusde = unchecked((int)(0x010802f8));

			public const int ic_lockscreen_text_normal = unchecked((int)(0x010802f9));

			public const int ic_lockscreen_unlock = unchecked((int)(0x010802fa));

			public const int ic_lockscreen_unlock_activated = unchecked((int)(0x010802fb));

			public const int ic_lockscreen_unlock_normal = unchecked((int)(0x010802fc));

			public const int ic_maps_indicator_current_position = unchecked((int)(0x010802fd)
				);

			public const int ic_maps_indicator_current_position_anim = unchecked((int)(0x010802fe
				));

			public const int ic_maps_indicator_current_position_anim1 = unchecked((int)(0x010802ff
				));

			public const int ic_maps_indicator_current_position_anim2 = unchecked((int)(0x01080300
				));

			public const int ic_maps_indicator_current_position_anim3 = unchecked((int)(0x01080301
				));

			public const int ic_media_embed_play = unchecked((int)(0x01080302));

			public const int ic_media_ff = unchecked((int)(0x01080021));

			public const int ic_media_fullscreen = unchecked((int)(0x01080303));

			public const int ic_media_next = unchecked((int)(0x01080022));

			public const int ic_media_pause = unchecked((int)(0x01080023));

			public const int ic_media_play = unchecked((int)(0x01080024));

			public const int ic_media_previous = unchecked((int)(0x01080025));

			public const int ic_media_rew = unchecked((int)(0x01080026));

			public const int ic_media_stop = unchecked((int)(0x01080304));

			public const int ic_media_video_poster = unchecked((int)(0x01080305));

			public const int ic_menu_account_list = unchecked((int)(0x01080306));

			public const int ic_menu_add = unchecked((int)(0x01080033));

			public const int ic_menu_agenda = unchecked((int)(0x01080034));

			public const int ic_menu_allfriends = unchecked((int)(0x01080307));

			public const int ic_menu_always_landscape_portrait = unchecked((int)(0x01080035));

			public const int ic_menu_archive = unchecked((int)(0x01080308));

			public const int ic_menu_attachment = unchecked((int)(0x01080309));

			public const int ic_menu_back = unchecked((int)(0x0108030a));

			public const int ic_menu_block = unchecked((int)(0x0108030b));

			public const int ic_menu_blocked_user = unchecked((int)(0x0108030c));

			public const int ic_menu_btn_add = unchecked((int)(0x0108030d));

			public const int ic_menu_call = unchecked((int)(0x01080036));

			public const int ic_menu_camera = unchecked((int)(0x01080037));

			public const int ic_menu_cc = unchecked((int)(0x0108030e));

			public const int ic_menu_chat_dashboard = unchecked((int)(0x0108030f));

			public const int ic_menu_clear_playlist = unchecked((int)(0x01080310));

			public const int ic_menu_close_clear_cancel = unchecked((int)(0x01080038));

			public const int ic_menu_compass = unchecked((int)(0x01080039));

			public const int ic_menu_compose = unchecked((int)(0x01080311));

			public const int ic_menu_copy = unchecked((int)(0x01080312));

			public const int ic_menu_copy_holo_dark = unchecked((int)(0x01080313));

			public const int ic_menu_copy_holo_light = unchecked((int)(0x01080314));

			public const int ic_menu_crop = unchecked((int)(0x0108003a));

			public const int ic_menu_cut = unchecked((int)(0x01080315));

			public const int ic_menu_cut_holo_dark = unchecked((int)(0x01080316));

			public const int ic_menu_cut_holo_light = unchecked((int)(0x01080317));

			public const int ic_menu_day = unchecked((int)(0x0108003b));

			public const int ic_menu_delete = unchecked((int)(0x0108003c));

			public const int ic_menu_directions = unchecked((int)(0x0108003d));

			public const int ic_menu_edit = unchecked((int)(0x0108003e));

			public const int ic_menu_emoticons = unchecked((int)(0x01080318));

			public const int ic_menu_end_conversation = unchecked((int)(0x01080319));

			public const int ic_menu_find = unchecked((int)(0x0108031a));

			public const int ic_menu_find_holo_dark = unchecked((int)(0x0108031b));

			public const int ic_menu_find_holo_light = unchecked((int)(0x0108031c));

			public const int ic_menu_forward = unchecked((int)(0x0108031d));

			public const int ic_menu_friendslist = unchecked((int)(0x0108031e));

			public const int ic_menu_gallery = unchecked((int)(0x0108003f));

			public const int ic_menu_goto = unchecked((int)(0x0108031f));

			public const int ic_menu_help = unchecked((int)(0x01080040));

			public const int ic_menu_help_holo_light = unchecked((int)(0x01080320));

			public const int ic_menu_home = unchecked((int)(0x01080321));

			public const int ic_menu_info_details = unchecked((int)(0x01080041));

			public const int ic_menu_invite = unchecked((int)(0x01080322));

			public const int ic_menu_login = unchecked((int)(0x01080323));

			public const int ic_menu_manage = unchecked((int)(0x01080042));

			public const int ic_menu_mapmode = unchecked((int)(0x01080043));

			public const int ic_menu_mark = unchecked((int)(0x01080324));

			public const int ic_menu_month = unchecked((int)(0x01080044));

			public const int ic_menu_more = unchecked((int)(0x01080045));

			public const int ic_menu_moreoverflow = unchecked((int)(0x01080325));

			public const int ic_menu_moreoverflow_focused_holo_dark = unchecked((int)(0x01080326
				));

			public const int ic_menu_moreoverflow_focused_holo_light = unchecked((int)(0x01080327
				));

			public const int ic_menu_moreoverflow_holo_dark = unchecked((int)(0x01080328));

			public const int ic_menu_moreoverflow_holo_light = unchecked((int)(0x01080329));

			public const int ic_menu_moreoverflow_normal_holo_dark = unchecked((int)(0x0108032a
				));

			public const int ic_menu_moreoverflow_normal_holo_light = unchecked((int)(0x0108032b
				));

			public const int ic_menu_my_calendar = unchecked((int)(0x01080046));

			public const int ic_menu_mylocation = unchecked((int)(0x01080047));

			public const int ic_menu_myplaces = unchecked((int)(0x01080048));

			public const int ic_menu_notifications = unchecked((int)(0x0108032c));

			public const int ic_menu_paste = unchecked((int)(0x0108032d));

			public const int ic_menu_paste_holo_dark = unchecked((int)(0x0108032e));

			public const int ic_menu_paste_holo_light = unchecked((int)(0x0108032f));

			public const int ic_menu_play_clip = unchecked((int)(0x01080330));

			public const int ic_menu_preferences = unchecked((int)(0x01080049));

			public const int ic_menu_recent_history = unchecked((int)(0x0108004a));

			public const int ic_menu_refresh = unchecked((int)(0x01080331));

			public const int ic_menu_report_image = unchecked((int)(0x0108004b));

			public const int ic_menu_revert = unchecked((int)(0x0108004c));

			public const int ic_menu_rotate = unchecked((int)(0x0108004d));

			public const int ic_menu_save = unchecked((int)(0x0108004e));

			public const int ic_menu_search = unchecked((int)(0x0108004f));

			public const int ic_menu_search_holo_dark = unchecked((int)(0x01080332));

			public const int ic_menu_search_holo_light = unchecked((int)(0x01080333));

			public const int ic_menu_selectall_holo_dark = unchecked((int)(0x01080334));

			public const int ic_menu_selectall_holo_light = unchecked((int)(0x01080335));

			public const int ic_menu_send = unchecked((int)(0x01080050));

			public const int ic_menu_set_as = unchecked((int)(0x01080051));

			public const int ic_menu_settings_holo_light = unchecked((int)(0x01080336));

			public const int ic_menu_share = unchecked((int)(0x01080052));

			public const int ic_menu_share_holo_dark = unchecked((int)(0x01080337));

			public const int ic_menu_share_holo_light = unchecked((int)(0x01080338));

			public const int ic_menu_slideshow = unchecked((int)(0x01080053));

			public const int ic_menu_sort_alphabetically = unchecked((int)(0x0108009c));

			public const int ic_menu_sort_by_size = unchecked((int)(0x0108009d));

			public const int ic_menu_star = unchecked((int)(0x01080339));

			public const int ic_menu_start_conversation = unchecked((int)(0x0108033a));

			public const int ic_menu_stop = unchecked((int)(0x0108033b));

			public const int ic_menu_today = unchecked((int)(0x01080054));

			public const int ic_menu_upload = unchecked((int)(0x01080055));

			public const int ic_menu_upload_you_tube = unchecked((int)(0x01080056));

			public const int ic_menu_view = unchecked((int)(0x01080057));

			public const int ic_menu_week = unchecked((int)(0x01080058));

			public const int ic_menu_zoom = unchecked((int)(0x01080059));

			public const int ic_notification_clear_all = unchecked((int)(0x0108005a));

			public const int ic_notification_ime_default = unchecked((int)(0x0108033c));

			public const int ic_notification_overlay = unchecked((int)(0x0108005b));

			public const int ic_partial_secure = unchecked((int)(0x0108005c));

			public const int ic_popup_disk_full = unchecked((int)(0x0108005d));

			public const int ic_popup_reminder = unchecked((int)(0x0108005e));

			public const int ic_popup_sync = unchecked((int)(0x0108005f));

			public const int ic_popup_sync_1 = unchecked((int)(0x0108033d));

			public const int ic_popup_sync_2 = unchecked((int)(0x0108033e));

			public const int ic_popup_sync_3 = unchecked((int)(0x0108033f));

			public const int ic_popup_sync_4 = unchecked((int)(0x01080340));

			public const int ic_popup_sync_5 = unchecked((int)(0x01080341));

			public const int ic_popup_sync_6 = unchecked((int)(0x01080342));

			public const int ic_search = unchecked((int)(0x01080343));

			public const int ic_search_api_holo_light = unchecked((int)(0x01080344));

			public const int ic_search_category_default = unchecked((int)(0x01080060));

			public const int ic_secure = unchecked((int)(0x01080061));

			public const int ic_suggestions_add = unchecked((int)(0x01080345));

			public const int ic_suggestions_delete = unchecked((int)(0x01080346));

			public const int ic_sysbar_quicksettings = unchecked((int)(0x01080347));

			public const int ic_text_dot = unchecked((int)(0x01080348));

			public const int ic_vibrate = unchecked((int)(0x01080349));

			public const int ic_vibrate_small = unchecked((int)(0x0108034a));

			public const int ic_voice_search = unchecked((int)(0x0108034b));

			public const int ic_voice_search_api_holo_light = unchecked((int)(0x0108034c));

			public const int ic_volume = unchecked((int)(0x0108034d));

			public const int ic_volume_bluetooth_ad2p = unchecked((int)(0x0108034e));

			public const int ic_volume_bluetooth_in_call = unchecked((int)(0x0108034f));

			public const int ic_volume_off = unchecked((int)(0x01080350));

			public const int ic_volume_off_small = unchecked((int)(0x01080351));

			public const int ic_volume_small = unchecked((int)(0x01080352));

			public const int icon_highlight_rectangle = unchecked((int)(0x01080353));

			public const int icon_highlight_square = unchecked((int)(0x01080354));

			public const int ime_qwerty = unchecked((int)(0x01080355));

			public const int indicator_check_mark_dark = unchecked((int)(0x01080356));

			public const int indicator_check_mark_light = unchecked((int)(0x01080357));

			public const int indicator_code_lock_drag_direction_green_up = unchecked((int)(0x01080358
				));

			public const int indicator_code_lock_drag_direction_green_up_holo = unchecked((int
				)(0x01080359));

			public const int indicator_code_lock_drag_direction_red_up = unchecked((int)(0x0108035a
				));

			public const int indicator_code_lock_drag_direction_red_up_holo = unchecked((int)
				(0x0108035b));

			public const int indicator_code_lock_point_area_default = unchecked((int)(0x0108035c
				));

			public const int indicator_code_lock_point_area_default_holo = unchecked((int)(0x0108035d
				));

			public const int indicator_code_lock_point_area_green = unchecked((int)(0x0108035e
				));

			public const int indicator_code_lock_point_area_green_holo = unchecked((int)(0x0108035f
				));

			public const int indicator_code_lock_point_area_red = unchecked((int)(0x01080360)
				);

			public const int indicator_code_lock_point_area_red_holo = unchecked((int)(0x01080361
				));

			public const int indicator_input_error = unchecked((int)(0x01080362));

			public const int input_method_fullscreen_background = unchecked((int)(0x010805da)
				);

			public const int input_method_fullscreen_background_holo = unchecked((int)(0x010805db
				));

			public const int item_background = unchecked((int)(0x01080363));

			public const int item_background_holo_dark = unchecked((int)(0x01080364));

			public const int item_background_holo_light = unchecked((int)(0x01080365));

			public const int jog_dial_arrow_long_left_green = unchecked((int)(0x01080366));

			public const int jog_dial_arrow_long_left_yellow = unchecked((int)(0x01080367));

			public const int jog_dial_arrow_long_middle_yellow = unchecked((int)(0x01080368));

			public const int jog_dial_arrow_long_right_red = unchecked((int)(0x01080369));

			public const int jog_dial_arrow_long_right_yellow = unchecked((int)(0x0108036a));

			public const int jog_dial_arrow_short_left = unchecked((int)(0x0108036b));

			public const int jog_dial_arrow_short_left_and_right = unchecked((int)(0x0108036c
				));

			public const int jog_dial_arrow_short_right = unchecked((int)(0x0108036d));

			public const int jog_dial_bg = unchecked((int)(0x0108036e));

			public const int jog_dial_dimple = unchecked((int)(0x0108036f));

			public const int jog_dial_dimple_dim = unchecked((int)(0x01080370));

			public const int jog_tab_bar_left_answer = unchecked((int)(0x01080371));

			public const int jog_tab_bar_left_end_confirm_gray = unchecked((int)(0x01080372));

			public const int jog_tab_bar_left_end_confirm_green = unchecked((int)(0x01080373)
				);

			public const int jog_tab_bar_left_end_confirm_red = unchecked((int)(0x01080374));

			public const int jog_tab_bar_left_end_confirm_yellow = unchecked((int)(0x01080375
				));

			public const int jog_tab_bar_left_end_normal = unchecked((int)(0x01080376));

			public const int jog_tab_bar_left_end_pressed = unchecked((int)(0x01080377));

			public const int jog_tab_bar_left_generic = unchecked((int)(0x01080378));

			public const int jog_tab_bar_left_unlock = unchecked((int)(0x01080379));

			public const int jog_tab_bar_right_decline = unchecked((int)(0x0108037a));

			public const int jog_tab_bar_right_end_confirm_gray = unchecked((int)(0x0108037b)
				);

			public const int jog_tab_bar_right_end_confirm_green = unchecked((int)(0x0108037c
				));

			public const int jog_tab_bar_right_end_confirm_red = unchecked((int)(0x0108037d));

			public const int jog_tab_bar_right_end_confirm_yellow = unchecked((int)(0x0108037e
				));

			public const int jog_tab_bar_right_end_normal = unchecked((int)(0x0108037f));

			public const int jog_tab_bar_right_end_pressed = unchecked((int)(0x01080380));

			public const int jog_tab_bar_right_generic = unchecked((int)(0x01080381));

			public const int jog_tab_bar_right_sound_off = unchecked((int)(0x01080382));

			public const int jog_tab_bar_right_sound_on = unchecked((int)(0x01080383));

			public const int jog_tab_left_answer = unchecked((int)(0x01080384));

			public const int jog_tab_left_confirm_gray = unchecked((int)(0x01080385));

			public const int jog_tab_left_confirm_green = unchecked((int)(0x01080386));

			public const int jog_tab_left_confirm_red = unchecked((int)(0x01080387));

			public const int jog_tab_left_confirm_yellow = unchecked((int)(0x01080388));

			public const int jog_tab_left_generic = unchecked((int)(0x01080389));

			public const int jog_tab_left_normal = unchecked((int)(0x0108038a));

			public const int jog_tab_left_pressed = unchecked((int)(0x0108038b));

			public const int jog_tab_left_unlock = unchecked((int)(0x0108038c));

			public const int jog_tab_right_confirm_gray = unchecked((int)(0x0108038d));

			public const int jog_tab_right_confirm_green = unchecked((int)(0x0108038e));

			public const int jog_tab_right_confirm_red = unchecked((int)(0x0108038f));

			public const int jog_tab_right_confirm_yellow = unchecked((int)(0x01080390));

			public const int jog_tab_right_decline = unchecked((int)(0x01080391));

			public const int jog_tab_right_generic = unchecked((int)(0x01080392));

			public const int jog_tab_right_normal = unchecked((int)(0x01080393));

			public const int jog_tab_right_pressed = unchecked((int)(0x01080394));

			public const int jog_tab_right_sound_off = unchecked((int)(0x01080395));

			public const int jog_tab_right_sound_on = unchecked((int)(0x01080396));

			public const int jog_tab_target_gray = unchecked((int)(0x01080397));

			public const int jog_tab_target_green = unchecked((int)(0x01080398));

			public const int jog_tab_target_red = unchecked((int)(0x01080399));

			public const int jog_tab_target_yellow = unchecked((int)(0x0108039a));

			public const int keyboard_accessory_bg_landscape = unchecked((int)(0x0108039b));

			public const int keyboard_background = unchecked((int)(0x0108039c));

			public const int keyboard_key_feedback = unchecked((int)(0x0108039d));

			public const int keyboard_key_feedback_background = unchecked((int)(0x0108039e));

			public const int keyboard_key_feedback_more_background = unchecked((int)(0x0108039f
				));

			public const int keyboard_popup_panel_background = unchecked((int)(0x010803a0));

			public const int keyboard_popup_panel_trans_background = unchecked((int)(0x010803a1
				));

			public const int light_header = unchecked((int)(0x010803a2));

			public const int light_header_dither = unchecked((int)(0x010803a3));

			public const int list_activated_holo = unchecked((int)(0x010803a4));

			public const int list_divider_holo_dark = unchecked((int)(0x010803a5));

			public const int list_divider_holo_light = unchecked((int)(0x010803a6));

			public const int list_divider_horizontal_holo_dark = unchecked((int)(0x010803a7));

			public const int list_focused_holo = unchecked((int)(0x010803a8));

			public const int list_highlight = unchecked((int)(0x010803a9));

			public const int list_highlight_active = unchecked((int)(0x010803aa));

			public const int list_highlight_inactive = unchecked((int)(0x010803ab));

			public const int list_longpressed_holo = unchecked((int)(0x010803ac));

			public const int list_pressed_holo_dark = unchecked((int)(0x010803ad));

			public const int list_pressed_holo_light = unchecked((int)(0x010803ae));

			public const int list_section_divider_holo_dark = unchecked((int)(0x010803af));

			public const int list_section_divider_holo_light = unchecked((int)(0x010803b0));

			public const int list_section_header_holo_dark = unchecked((int)(0x010803b1));

			public const int list_section_header_holo_light = unchecked((int)(0x010803b2));

			public const int list_selected_background = unchecked((int)(0x010803b3));

			public const int list_selected_background_light = unchecked((int)(0x010803b4));

			public const int list_selected_holo_dark = unchecked((int)(0x010803b5));

			public const int list_selected_holo_light = unchecked((int)(0x010803b6));

			public const int list_selector_activated_holo_dark = unchecked((int)(0x010803b7));

			public const int list_selector_activated_holo_light = unchecked((int)(0x010803b8)
				);

			public const int list_selector_background = unchecked((int)(0x01080062));

			public const int list_selector_background_default = unchecked((int)(0x010803b9));

			public const int list_selector_background_default_light = unchecked((int)(0x010803ba
				));

			public const int list_selector_background_disabled = unchecked((int)(0x010803bb));

			public const int list_selector_background_disabled_light = unchecked((int)(0x010803bc
				));

			public const int list_selector_background_focus = unchecked((int)(0x010803bd));

			public const int list_selector_background_focused = unchecked((int)(0x010803be));

			public const int list_selector_background_focused_light = unchecked((int)(0x010803bf
				));

			public const int list_selector_background_focused_selected = unchecked((int)(0x010803c0
				));

			public const int list_selector_background_light = unchecked((int)(0x010803c1));

			public const int list_selector_background_longpress = unchecked((int)(0x010803c2)
				);

			public const int list_selector_background_longpress_light = unchecked((int)(0x010803c3
				));

			public const int list_selector_background_pressed = unchecked((int)(0x010803c4));

			public const int list_selector_background_pressed_light = unchecked((int)(0x010803c5
				));

			public const int list_selector_background_selected = unchecked((int)(0x010803c6));

			public const int list_selector_background_selected_light = unchecked((int)(0x010803c7
				));

			public const int list_selector_background_transition = unchecked((int)(0x010803c8
				));

			public const int list_selector_background_transition_holo_dark = unchecked((int)(
				0x010803c9));

			public const int list_selector_background_transition_holo_light = unchecked((int)
				(0x010803ca));

			public const int list_selector_background_transition_light = unchecked((int)(0x010803cb
				));

			public const int list_selector_disabled_holo_dark = unchecked((int)(0x010803cc));

			public const int list_selector_disabled_holo_light = unchecked((int)(0x010803cd));

			public const int list_selector_focused_holo_dark = unchecked((int)(0x010803ce));

			public const int list_selector_focused_holo_light = unchecked((int)(0x010803cf));

			public const int list_selector_holo_dark = unchecked((int)(0x010803d0));

			public const int list_selector_holo_light = unchecked((int)(0x010803d1));

			public const int list_selector_multiselect_holo_dark = unchecked((int)(0x010803d2
				));

			public const int list_selector_multiselect_holo_light = unchecked((int)(0x010803d3
				));

			public const int list_selector_pressed_holo_dark = unchecked((int)(0x010803d4));

			public const int list_selector_pressed_holo_light = unchecked((int)(0x010803d5));

			public const int load_average_background = unchecked((int)(0x010803d6));

			public const int loading_tile = unchecked((int)(0x010803d7));

			public const int loading_tile_android = unchecked((int)(0x010803d8));

			public const int lockscreen_emergency_button = unchecked((int)(0x010803d9));

			public const int lockscreen_forgot_password_button = unchecked((int)(0x010803da));

			public const int lockscreen_password_field_dark = unchecked((int)(0x010803db));

			public const int maps_google_logo = unchecked((int)(0x010803dc));

			public const int media_button_background = unchecked((int)(0x010803dd));

			public const int menu_background = unchecked((int)(0x010803de));

			public const int menu_background_fill_parent_width = unchecked((int)(0x010803df));

			public const int menu_dropdown_panel_holo_dark = unchecked((int)(0x010803e0));

			public const int menu_dropdown_panel_holo_light = unchecked((int)(0x010803e1));

			public const int menu_frame = unchecked((int)(0x01080063));

			public const int menu_full_frame = unchecked((int)(0x01080064));

			public const int menu_hardkey_panel_holo_dark = unchecked((int)(0x010803e2));

			public const int menu_hardkey_panel_holo_light = unchecked((int)(0x010803e3));

			public const int menu_selector = unchecked((int)(0x010803e4));

			public const int menu_separator = unchecked((int)(0x010803e5));

			public const int menu_submenu_background = unchecked((int)(0x010803e6));

			public const int menuitem_background = unchecked((int)(0x01080065));

			public const int menuitem_background_focus = unchecked((int)(0x010803e7));

			public const int menuitem_background_pressed = unchecked((int)(0x010803e8));

			public const int menuitem_background_solid = unchecked((int)(0x010803e9));

			public const int menuitem_background_solid_focused = unchecked((int)(0x010803ea));

			public const int menuitem_background_solid_pressed = unchecked((int)(0x010803eb));

			public const int menuitem_checkbox = unchecked((int)(0x010803ec));

			public const int menuitem_checkbox_on = unchecked((int)(0x010803ed));

			public const int minitab_lt = unchecked((int)(0x010803ee));

			public const int minitab_lt_focus = unchecked((int)(0x010803ef));

			public const int minitab_lt_press = unchecked((int)(0x010803f0));

			public const int minitab_lt_selected = unchecked((int)(0x010803f1));

			public const int minitab_lt_unselected = unchecked((int)(0x010803f2));

			public const int minitab_lt_unselected_press = unchecked((int)(0x010803f3));

			public const int no_tile_128 = unchecked((int)(0x010803f4));

			public const int no_tile_256 = unchecked((int)(0x010803f5));

			public const int notify_panel_notification_icon_bg = unchecked((int)(0x010803f6));

			public const int notify_panel_notification_icon_bg_tile = unchecked((int)(0x010803f7
				));

			public const int numberpicker_down_btn = unchecked((int)(0x010803f8));

			public const int numberpicker_down_btn_holo_dark = unchecked((int)(0x010803f9));

			public const int numberpicker_down_btn_holo_light = unchecked((int)(0x010803fa));

			public const int numberpicker_down_disabled = unchecked((int)(0x010803fb));

			public const int numberpicker_down_disabled_focused = unchecked((int)(0x010803fc)
				);

			public const int numberpicker_down_disabled_focused_holo_dark = unchecked((int)(0x010803fd
				));

			public const int numberpicker_down_disabled_focused_holo_light = unchecked((int)(
				0x010803fe));

			public const int numberpicker_down_disabled_holo_dark = unchecked((int)(0x010803ff
				));

			public const int numberpicker_down_disabled_holo_light = unchecked((int)(0x01080400
				));

			public const int numberpicker_down_focused_holo_dark = unchecked((int)(0x01080401
				));

			public const int numberpicker_down_focused_holo_light = unchecked((int)(0x01080402
				));

			public const int numberpicker_down_longpressed_holo_dark = unchecked((int)(0x01080403
				));

			public const int numberpicker_down_longpressed_holo_light = unchecked((int)(0x01080404
				));

			public const int numberpicker_down_normal = unchecked((int)(0x01080405));

			public const int numberpicker_down_normal_holo_dark = unchecked((int)(0x01080406)
				);

			public const int numberpicker_down_normal_holo_light = unchecked((int)(0x01080407
				));

			public const int numberpicker_down_pressed = unchecked((int)(0x01080408));

			public const int numberpicker_down_pressed_holo_dark = unchecked((int)(0x01080409
				));

			public const int numberpicker_down_pressed_holo_light = unchecked((int)(0x0108040a
				));

			public const int numberpicker_down_selected = unchecked((int)(0x0108040b));

			public const int numberpicker_input = unchecked((int)(0x0108040c));

			public const int numberpicker_input_disabled = unchecked((int)(0x0108040d));

			public const int numberpicker_input_normal = unchecked((int)(0x0108040e));

			public const int numberpicker_input_pressed = unchecked((int)(0x0108040f));

			public const int numberpicker_input_selected = unchecked((int)(0x01080410));

			public const int numberpicker_selection_divider = unchecked((int)(0x01080411));

			public const int numberpicker_up_btn = unchecked((int)(0x01080412));

			public const int numberpicker_up_btn_holo_dark = unchecked((int)(0x01080413));

			public const int numberpicker_up_btn_holo_light = unchecked((int)(0x01080414));

			public const int numberpicker_up_disabled = unchecked((int)(0x01080415));

			public const int numberpicker_up_disabled_focused = unchecked((int)(0x01080416));

			public const int numberpicker_up_disabled_focused_holo_dark = unchecked((int)(0x01080417
				));

			public const int numberpicker_up_disabled_focused_holo_light = unchecked((int)(0x01080418
				));

			public const int numberpicker_up_disabled_holo_dark = unchecked((int)(0x01080419)
				);

			public const int numberpicker_up_disabled_holo_light = unchecked((int)(0x0108041a
				));

			public const int numberpicker_up_focused_holo_dark = unchecked((int)(0x0108041b));

			public const int numberpicker_up_focused_holo_light = unchecked((int)(0x0108041c)
				);

			public const int numberpicker_up_longpressed_holo_dark = unchecked((int)(0x0108041d
				));

			public const int numberpicker_up_longpressed_holo_light = unchecked((int)(0x0108041e
				));

			public const int numberpicker_up_normal = unchecked((int)(0x0108041f));

			public const int numberpicker_up_normal_holo_dark = unchecked((int)(0x01080420));

			public const int numberpicker_up_normal_holo_light = unchecked((int)(0x01080421));

			public const int numberpicker_up_pressed = unchecked((int)(0x01080422));

			public const int numberpicker_up_pressed_holo_dark = unchecked((int)(0x01080423));

			public const int numberpicker_up_pressed_holo_light = unchecked((int)(0x01080424)
				);

			public const int numberpicker_up_selected = unchecked((int)(0x01080425));

			public const int overscroll_edge = unchecked((int)(0x01080426));

			public const int overscroll_glow = unchecked((int)(0x01080427));

			public const int panel_background = unchecked((int)(0x01080428));

			public const int panel_bg_holo_dark = unchecked((int)(0x01080429));

			public const int panel_bg_holo_light = unchecked((int)(0x0108042a));

			public const int panel_picture_frame_background = unchecked((int)(0x0108042b));

			public const int panel_picture_frame_bg_focus_blue = unchecked((int)(0x0108042c));

			public const int panel_picture_frame_bg_normal = unchecked((int)(0x0108042d));

			public const int panel_picture_frame_bg_pressed_blue = unchecked((int)(0x0108042e
				));

			public const int password_field_default = unchecked((int)(0x0108042f));

			public const int password_keyboard_background_holo = unchecked((int)(0x01080430));

			public const int picture_emergency = unchecked((int)(0x01080431));

			public const int picture_frame = unchecked((int)(0x01080066));

			public const int platlogo = unchecked((int)(0x01080432));

			public const int pointer_arrow = unchecked((int)(0x01080433));

			public const int pointer_arrow_icon = unchecked((int)(0x01080434));

			public const int pointer_spot_anchor = unchecked((int)(0x01080435));

			public const int pointer_spot_anchor_icon = unchecked((int)(0x01080436));

			public const int pointer_spot_hover = unchecked((int)(0x01080437));

			public const int pointer_spot_hover_icon = unchecked((int)(0x01080438));

			public const int pointer_spot_touch = unchecked((int)(0x01080439));

			public const int pointer_spot_touch_icon = unchecked((int)(0x0108043a));

			public const int popup_bottom_bright = unchecked((int)(0x0108043b));

			public const int popup_bottom_dark = unchecked((int)(0x0108043c));

			public const int popup_bottom_medium = unchecked((int)(0x0108043d));

			public const int popup_center_bright = unchecked((int)(0x0108043e));

			public const int popup_center_dark = unchecked((int)(0x0108043f));

			public const int popup_center_medium = unchecked((int)(0x01080440));

			public const int popup_full_bright = unchecked((int)(0x01080441));

			public const int popup_full_dark = unchecked((int)(0x01080442));

			public const int popup_inline_error = unchecked((int)(0x01080443));

			public const int popup_inline_error_above = unchecked((int)(0x01080444));

			public const int popup_inline_error_above_holo_dark = unchecked((int)(0x01080445)
				);

			public const int popup_inline_error_above_holo_light = unchecked((int)(0x01080446
				));

			public const int popup_inline_error_holo_dark = unchecked((int)(0x01080447));

			public const int popup_inline_error_holo_light = unchecked((int)(0x01080448));

			public const int popup_top_bright = unchecked((int)(0x01080449));

			public const int popup_top_dark = unchecked((int)(0x0108044a));

			public const int presence_audio_away = unchecked((int)(0x010800af));

			public const int presence_audio_busy = unchecked((int)(0x010800b0));

			public const int presence_audio_online = unchecked((int)(0x010800b1));

			public const int presence_away = unchecked((int)(0x01080067));

			public const int presence_busy = unchecked((int)(0x01080068));

			public const int presence_invisible = unchecked((int)(0x01080069));

			public const int presence_offline = unchecked((int)(0x0108006a));

			public const int presence_online = unchecked((int)(0x0108006b));

			/// <summary>presence drawables for videochat or audiochat capable contacts</summary>
			public const int presence_video_away = unchecked((int)(0x010800ac));

			public const int presence_video_busy = unchecked((int)(0x010800ad));

			public const int presence_video_online = unchecked((int)(0x010800ae));

			public const int pressed_application_background_static = unchecked((int)(0x0108044b
				));

			public const int progress_bg_holo_dark = unchecked((int)(0x0108044c));

			public const int progress_bg_holo_light = unchecked((int)(0x0108044d));

			public const int progress_horizontal = unchecked((int)(0x0108006c));

			public const int progress_horizontal_holo_dark = unchecked((int)(0x0108044e));

			public const int progress_horizontal_holo_light = unchecked((int)(0x0108044f));

			public const int progress_indeterminate_horizontal = unchecked((int)(0x0108006d));

			public const int progress_indeterminate_horizontal_holo = unchecked((int)(0x01080450
				));

			public const int progress_large = unchecked((int)(0x01080451));

			public const int progress_large_holo = unchecked((int)(0x01080452));

			public const int progress_large_white = unchecked((int)(0x01080453));

			public const int progress_medium = unchecked((int)(0x01080454));

			public const int progress_medium_holo = unchecked((int)(0x01080455));

			public const int progress_medium_white = unchecked((int)(0x01080456));

			public const int progress_primary_holo_dark = unchecked((int)(0x01080457));

			public const int progress_primary_holo_light = unchecked((int)(0x01080458));

			public const int progress_secondary_holo_dark = unchecked((int)(0x01080459));

			public const int progress_secondary_holo_light = unchecked((int)(0x0108045a));

			public const int progress_small = unchecked((int)(0x0108045b));

			public const int progress_small_holo = unchecked((int)(0x0108045c));

			public const int progress_small_titlebar = unchecked((int)(0x0108045d));

			public const int progress_small_white = unchecked((int)(0x0108045e));

			public const int progressbar_indeterminate1 = unchecked((int)(0x0108045f));

			public const int progressbar_indeterminate2 = unchecked((int)(0x01080460));

			public const int progressbar_indeterminate3 = unchecked((int)(0x01080461));

			public const int progressbar_indeterminate_holo1 = unchecked((int)(0x01080462));

			public const int progressbar_indeterminate_holo2 = unchecked((int)(0x01080463));

			public const int progressbar_indeterminate_holo3 = unchecked((int)(0x01080464));

			public const int progressbar_indeterminate_holo4 = unchecked((int)(0x01080465));

			public const int progressbar_indeterminate_holo5 = unchecked((int)(0x01080466));

			public const int progressbar_indeterminate_holo6 = unchecked((int)(0x01080467));

			public const int progressbar_indeterminate_holo7 = unchecked((int)(0x01080468));

			public const int progressbar_indeterminate_holo8 = unchecked((int)(0x01080469));

			public const int quickactions_arrowdown_left_holo_dark = unchecked((int)(0x0108046a
				));

			public const int quickactions_arrowdown_left_holo_light = unchecked((int)(0x0108046b
				));

			public const int quickactions_arrowdown_right_holo_dark = unchecked((int)(0x0108046c
				));

			public const int quickactions_arrowdown_right_holo_light = unchecked((int)(0x0108046d
				));

			public const int quickactions_arrowup_left_holo_dark = unchecked((int)(0x0108046e
				));

			public const int quickactions_arrowup_left_holo_light = unchecked((int)(0x0108046f
				));

			public const int quickactions_arrowup_left_right_holo_dark = unchecked((int)(0x01080470
				));

			public const int quickactions_arrowup_right_holo_light = unchecked((int)(0x01080471
				));

			public const int quickcontact_badge_overlay_dark = unchecked((int)(0x01080472));

			public const int quickcontact_badge_overlay_light = unchecked((int)(0x01080473));

			public const int quickcontact_badge_overlay_normal_dark = unchecked((int)(0x01080474
				));

			public const int quickcontact_badge_overlay_normal_light = unchecked((int)(0x01080475
				));

			public const int quickcontact_badge_overlay_pressed_dark = unchecked((int)(0x01080476
				));

			public const int quickcontact_badge_overlay_pressed_light = unchecked((int)(0x01080477
				));

			public const int radiobutton_off_background = unchecked((int)(0x0108006e));

			public const int radiobutton_on_background = unchecked((int)(0x0108006f));

			public const int rate_star_big_half = unchecked((int)(0x01080478));

			public const int rate_star_big_half_holo_dark = unchecked((int)(0x01080479));

			public const int rate_star_big_half_holo_light = unchecked((int)(0x0108047a));

			public const int rate_star_big_off = unchecked((int)(0x0108047b));

			public const int rate_star_big_off_holo_dark = unchecked((int)(0x0108047c));

			public const int rate_star_big_off_holo_light = unchecked((int)(0x0108047d));

			public const int rate_star_big_on = unchecked((int)(0x0108047e));

			public const int rate_star_big_on_holo_dark = unchecked((int)(0x0108047f));

			public const int rate_star_big_on_holo_light = unchecked((int)(0x01080480));

			public const int rate_star_med_half = unchecked((int)(0x01080481));

			public const int rate_star_med_half_holo_dark = unchecked((int)(0x01080482));

			public const int rate_star_med_half_holo_light = unchecked((int)(0x01080483));

			public const int rate_star_med_off = unchecked((int)(0x01080484));

			public const int rate_star_med_off_holo_dark = unchecked((int)(0x01080485));

			public const int rate_star_med_off_holo_light = unchecked((int)(0x01080486));

			public const int rate_star_med_on = unchecked((int)(0x01080487));

			public const int rate_star_med_on_holo_dark = unchecked((int)(0x01080488));

			public const int rate_star_med_on_holo_light = unchecked((int)(0x01080489));

			public const int rate_star_small_half = unchecked((int)(0x0108048a));

			public const int rate_star_small_half_holo_dark = unchecked((int)(0x0108048b));

			public const int rate_star_small_half_holo_light = unchecked((int)(0x0108048c));

			public const int rate_star_small_off = unchecked((int)(0x0108048d));

			public const int rate_star_small_off_holo_dark = unchecked((int)(0x0108048e));

			public const int rate_star_small_off_holo_light = unchecked((int)(0x0108048f));

			public const int rate_star_small_on = unchecked((int)(0x01080490));

			public const int rate_star_small_on_holo_dark = unchecked((int)(0x01080491));

			public const int rate_star_small_on_holo_light = unchecked((int)(0x01080492));

			public const int ratingbar = unchecked((int)(0x01080493));

			public const int ratingbar_full = unchecked((int)(0x01080494));

			public const int ratingbar_full_empty = unchecked((int)(0x01080495));

			public const int ratingbar_full_empty_holo_dark = unchecked((int)(0x01080496));

			public const int ratingbar_full_empty_holo_light = unchecked((int)(0x01080497));

			public const int ratingbar_full_filled = unchecked((int)(0x01080498));

			public const int ratingbar_full_filled_holo_dark = unchecked((int)(0x01080499));

			public const int ratingbar_full_filled_holo_light = unchecked((int)(0x0108049a));

			public const int ratingbar_full_holo_dark = unchecked((int)(0x0108049b));

			public const int ratingbar_full_holo_light = unchecked((int)(0x0108049c));

			public const int ratingbar_holo_dark = unchecked((int)(0x0108049d));

			public const int ratingbar_holo_light = unchecked((int)(0x0108049e));

			public const int ratingbar_small = unchecked((int)(0x0108049f));

			public const int ratingbar_small_holo_dark = unchecked((int)(0x010804a0));

			public const int ratingbar_small_holo_light = unchecked((int)(0x010804a1));

			public const int recent_dialog_background = unchecked((int)(0x010804a2));

			public const int reticle = unchecked((int)(0x010804a3));

			public const int safe_mode_background = unchecked((int)(0x010805d9));

			public const int screen_background_dark = unchecked((int)(0x01080098));

			/// <summary>
			/// Semi-transparent background that can be used when placing a dark
			/// themed UI on top of some arbitrary background (such as the
			/// wallpaper).
			/// </summary>
			/// <remarks>
			/// Semi-transparent background that can be used when placing a dark
			/// themed UI on top of some arbitrary background (such as the
			/// wallpaper).  This darkens the background sufficiently that the UI
			/// can be seen.
			/// Background drawable that can be used for a transparent activity to
			/// be able to display a dark UI: this darkens its background to make
			/// a dark (default theme) UI more visible.
			/// </remarks>
			public const int screen_background_dark_transparent = unchecked((int)(0x010800a9)
				);

			public const int screen_background_holo_dark = unchecked((int)(0x010805de));

			/// <summary>For holo theme</summary>
			public const int screen_background_holo_light = unchecked((int)(0x010805dd));

			public const int screen_background_light = unchecked((int)(0x01080099));

			/// <summary>
			/// Background drawable that can be used for a transparent activity to
			/// be able to display a light UI: this lightens its background to make
			/// a light UI more visible.
			/// </summary>
			/// <remarks>
			/// Background drawable that can be used for a transparent activity to
			/// be able to display a light UI: this lightens its background to make
			/// a light UI more visible.
			/// </remarks>
			public const int screen_background_light_transparent = unchecked((int)(0x010800aa
				));

			public const int screen_background_selector_dark = unchecked((int)(0x010804a4));

			public const int screen_background_selector_light = unchecked((int)(0x010804a5));

			public const int scrollbar_handle_accelerated_anim2 = unchecked((int)(0x010804a6)
				);

			public const int scrollbar_handle_holo_dark = unchecked((int)(0x010804a7));

			public const int scrollbar_handle_holo_light = unchecked((int)(0x010804a8));

			public const int scrollbar_handle_horizontal = unchecked((int)(0x010804a9));

			public const int scrollbar_handle_vertical = unchecked((int)(0x010804aa));

			public const int scrubber_control_disabled_holo = unchecked((int)(0x010804ab));

			public const int scrubber_control_focused_holo = unchecked((int)(0x010804ac));

			public const int scrubber_control_normal_holo = unchecked((int)(0x010804ad));

			public const int scrubber_control_pressed_holo = unchecked((int)(0x010804ae));

			public const int scrubber_control_selector_holo = unchecked((int)(0x010804af));

			public const int scrubber_primary_holo = unchecked((int)(0x010804b0));

			public const int scrubber_progress_horizontal_holo_dark = unchecked((int)(0x010804b1
				));

			public const int scrubber_progress_horizontal_holo_light = unchecked((int)(0x010804b2
				));

			public const int scrubber_secondary_holo = unchecked((int)(0x010804b3));

			public const int scrubber_track_holo_dark = unchecked((int)(0x010804b4));

			public const int scrubber_track_holo_light = unchecked((int)(0x010804b5));

			public const int search_bar_default_color = unchecked((int)(0x010805d8));

			public const int search_dropdown_background = unchecked((int)(0x010804b6));

			public const int search_dropdown_dark = unchecked((int)(0x010804b7));

			public const int search_dropdown_light = unchecked((int)(0x010804b8));

			public const int search_plate = unchecked((int)(0x010804b9));

			public const int search_plate_global = unchecked((int)(0x010804ba));

			public const int search_spinner = unchecked((int)(0x010804bb));

			public const int seek_thumb = unchecked((int)(0x010804bc));

			public const int seek_thumb_normal = unchecked((int)(0x010804bd));

			public const int seek_thumb_pressed = unchecked((int)(0x010804be));

			public const int seek_thumb_selected = unchecked((int)(0x010804bf));

			/// <summary>For date picker widget</summary>
			public const int selected_day_background = unchecked((int)(0x010805dc));

			public const int settings_header = unchecked((int)(0x010804c0));

			public const int settings_header_raw = unchecked((int)(0x010804c1));

			public const int spinner_16_inner_holo = unchecked((int)(0x010804c2));

			public const int spinner_16_outer_holo = unchecked((int)(0x010804c3));

			public const int spinner_20_inner_holo = unchecked((int)(0x010804c4));

			public const int spinner_20_outer_holo = unchecked((int)(0x010804c5));

			public const int spinner_48_inner_holo = unchecked((int)(0x010804c6));

			public const int spinner_48_outer_holo = unchecked((int)(0x010804c7));

			public const int spinner_76_inner_holo = unchecked((int)(0x010804c8));

			public const int spinner_76_outer_holo = unchecked((int)(0x010804c9));

			public const int spinner_ab_default_holo_dark = unchecked((int)(0x010804ca));

			public const int spinner_ab_default_holo_light = unchecked((int)(0x010804cb));

			public const int spinner_ab_disabled_holo_dark = unchecked((int)(0x010804cc));

			public const int spinner_ab_disabled_holo_light = unchecked((int)(0x010804cd));

			public const int spinner_ab_focused_holo_dark = unchecked((int)(0x010804ce));

			public const int spinner_ab_focused_holo_light = unchecked((int)(0x010804cf));

			public const int spinner_ab_holo_dark = unchecked((int)(0x010804d0));

			public const int spinner_ab_holo_light = unchecked((int)(0x010804d1));

			public const int spinner_ab_pressed_holo_dark = unchecked((int)(0x010804d2));

			public const int spinner_ab_pressed_holo_light = unchecked((int)(0x010804d3));

			public const int spinner_background = unchecked((int)(0x01080070));

			public const int spinner_background_holo_dark = unchecked((int)(0x010804d4));

			public const int spinner_background_holo_light = unchecked((int)(0x010804d5));

			public const int spinner_black_16 = unchecked((int)(0x010804d6));

			public const int spinner_black_20 = unchecked((int)(0x010804d7));

			public const int spinner_black_48 = unchecked((int)(0x010804d8));

			public const int spinner_black_76 = unchecked((int)(0x010804d9));

			public const int spinner_default_holo_dark = unchecked((int)(0x010804da));

			public const int spinner_default_holo_light = unchecked((int)(0x010804db));

			public const int spinner_disabled_holo_dark = unchecked((int)(0x010804dc));

			public const int spinner_disabled_holo_light = unchecked((int)(0x010804dd));

			public const int spinner_dropdown_background = unchecked((int)(0x01080071));

			public const int spinner_dropdown_background_down = unchecked((int)(0x010804de));

			public const int spinner_dropdown_background_up = unchecked((int)(0x010804df));

			public const int spinner_focused_holo_dark = unchecked((int)(0x010804e0));

			public const int spinner_focused_holo_light = unchecked((int)(0x010804e1));

			public const int spinner_normal = unchecked((int)(0x010804e2));

			public const int spinner_press = unchecked((int)(0x010804e3));

			public const int spinner_pressed_holo_dark = unchecked((int)(0x010804e4));

			public const int spinner_pressed_holo_light = unchecked((int)(0x010804e5));

			public const int spinner_select = unchecked((int)(0x010804e6));

			public const int spinner_white_16 = unchecked((int)(0x010804e7));

			public const int spinner_white_48 = unchecked((int)(0x010804e8));

			public const int spinner_white_76 = unchecked((int)(0x010804e9));

			public const int star_big_off = unchecked((int)(0x01080073));

			public const int star_big_on = unchecked((int)(0x01080072));

			public const int star_off = unchecked((int)(0x01080075));

			public const int star_on = unchecked((int)(0x01080074));

			public const int stat_ecb_mode = unchecked((int)(0x010804ea));

			public const int stat_notify_call_mute = unchecked((int)(0x01080076));

			public const int stat_notify_car_mode = unchecked((int)(0x010804eb));

			public const int stat_notify_chat = unchecked((int)(0x01080077));

			public const int stat_notify_disabled = unchecked((int)(0x010804ec));

			public const int stat_notify_disk_full = unchecked((int)(0x010804ed));

			public const int stat_notify_email_generic = unchecked((int)(0x010804ee));

			public const int stat_notify_error = unchecked((int)(0x01080078));

			public const int stat_notify_gmail = unchecked((int)(0x010804ef));

			public const int stat_notify_missed_call = unchecked((int)(0x0108007f));

			public const int stat_notify_more = unchecked((int)(0x01080079));

			public const int stat_notify_sdcard = unchecked((int)(0x0108007a));

			public const int stat_notify_sdcard_prepare = unchecked((int)(0x010800ab));

			public const int stat_notify_sdcard_usb = unchecked((int)(0x0108007b));

			public const int stat_notify_sim_toolkit = unchecked((int)(0x010804f0));

			public const int stat_notify_sync = unchecked((int)(0x0108007c));

			public const int stat_notify_sync_anim0 = unchecked((int)(0x010804f1));

			public const int stat_notify_sync_error = unchecked((int)(0x010804f2));

			public const int stat_notify_sync_noanim = unchecked((int)(0x0108007d));

			public const int stat_notify_voicemail = unchecked((int)(0x0108007e));

			public const int stat_notify_wifi_in_range = unchecked((int)(0x010804f3));

			public const int stat_sys_adb = unchecked((int)(0x010804f4));

			public const int stat_sys_battery = unchecked((int)(0x010804f5));

			public const int stat_sys_battery_0 = unchecked((int)(0x010804f6));

			public const int stat_sys_battery_10 = unchecked((int)(0x010804f7));

			public const int stat_sys_battery_100 = unchecked((int)(0x010804f8));

			public const int stat_sys_battery_15 = unchecked((int)(0x010804f9));

			public const int stat_sys_battery_20 = unchecked((int)(0x010804fa));

			public const int stat_sys_battery_28 = unchecked((int)(0x010804fb));

			public const int stat_sys_battery_40 = unchecked((int)(0x010804fc));

			public const int stat_sys_battery_43 = unchecked((int)(0x010804fd));

			public const int stat_sys_battery_57 = unchecked((int)(0x010804fe));

			public const int stat_sys_battery_60 = unchecked((int)(0x010804ff));

			public const int stat_sys_battery_71 = unchecked((int)(0x01080500));

			public const int stat_sys_battery_80 = unchecked((int)(0x01080501));

			public const int stat_sys_battery_85 = unchecked((int)(0x01080502));

			public const int stat_sys_battery_charge = unchecked((int)(0x01080503));

			public const int stat_sys_battery_charge_anim0 = unchecked((int)(0x01080504));

			public const int stat_sys_battery_charge_anim1 = unchecked((int)(0x01080505));

			public const int stat_sys_battery_charge_anim100 = unchecked((int)(0x01080506));

			public const int stat_sys_battery_charge_anim15 = unchecked((int)(0x01080507));

			public const int stat_sys_battery_charge_anim2 = unchecked((int)(0x01080508));

			public const int stat_sys_battery_charge_anim28 = unchecked((int)(0x01080509));

			public const int stat_sys_battery_charge_anim3 = unchecked((int)(0x0108050a));

			public const int stat_sys_battery_charge_anim4 = unchecked((int)(0x0108050b));

			public const int stat_sys_battery_charge_anim43 = unchecked((int)(0x0108050c));

			public const int stat_sys_battery_charge_anim5 = unchecked((int)(0x0108050d));

			public const int stat_sys_battery_charge_anim57 = unchecked((int)(0x0108050e));

			public const int stat_sys_battery_charge_anim71 = unchecked((int)(0x0108050f));

			public const int stat_sys_battery_charge_anim85 = unchecked((int)(0x01080510));

			public const int stat_sys_battery_unknown = unchecked((int)(0x01080511));

			public const int stat_sys_data_bluetooth = unchecked((int)(0x01080080));

			public const int stat_sys_data_usb = unchecked((int)(0x01080512));

			public const int stat_sys_download = unchecked((int)(0x01080081));

			public const int stat_sys_download_anim0 = unchecked((int)(0x01080513));

			public const int stat_sys_download_anim1 = unchecked((int)(0x01080514));

			public const int stat_sys_download_anim2 = unchecked((int)(0x01080515));

			public const int stat_sys_download_anim3 = unchecked((int)(0x01080516));

			public const int stat_sys_download_anim4 = unchecked((int)(0x01080517));

			public const int stat_sys_download_anim5 = unchecked((int)(0x01080518));

			public const int stat_sys_download_done = unchecked((int)(0x01080082));

			public const int stat_sys_download_done_static = unchecked((int)(0x01080519));

			public const int stat_sys_gps_on = unchecked((int)(0x0108051a));

			public const int stat_sys_headset = unchecked((int)(0x01080083));

			[System.ObsoleteAttribute(@"Replaced by a private asset in the phone app.")]
			public const int stat_sys_phone_call = unchecked((int)(0x01080084));

			[System.ObsoleteAttribute(@"Replaced by a private asset in the phone app.")]
			public const int stat_sys_phone_call_forward = unchecked((int)(0x01080085));

			[System.ObsoleteAttribute(@"Replaced by a private asset in the phone app.")]
			public const int stat_sys_phone_call_on_hold = unchecked((int)(0x01080086));

			public const int stat_sys_r_signal_0_cdma = unchecked((int)(0x0108051b));

			public const int stat_sys_r_signal_1_cdma = unchecked((int)(0x0108051c));

			public const int stat_sys_r_signal_2_cdma = unchecked((int)(0x0108051d));

			public const int stat_sys_r_signal_3_cdma = unchecked((int)(0x0108051e));

			public const int stat_sys_r_signal_4_cdma = unchecked((int)(0x0108051f));

			public const int stat_sys_ra_signal_0_cdma = unchecked((int)(0x01080520));

			public const int stat_sys_ra_signal_1_cdma = unchecked((int)(0x01080521));

			public const int stat_sys_ra_signal_2_cdma = unchecked((int)(0x01080522));

			public const int stat_sys_ra_signal_3_cdma = unchecked((int)(0x01080523));

			public const int stat_sys_ra_signal_4_cdma = unchecked((int)(0x01080524));

			public const int stat_sys_secure = unchecked((int)(0x01080525));

			public const int stat_sys_signal_0_cdma = unchecked((int)(0x01080526));

			public const int stat_sys_signal_1_cdma = unchecked((int)(0x01080527));

			public const int stat_sys_signal_2_cdma = unchecked((int)(0x01080528));

			public const int stat_sys_signal_3_cdma = unchecked((int)(0x01080529));

			public const int stat_sys_signal_4_cdma = unchecked((int)(0x0108052a));

			public const int stat_sys_signal_evdo_0 = unchecked((int)(0x0108052b));

			public const int stat_sys_signal_evdo_1 = unchecked((int)(0x0108052c));

			public const int stat_sys_signal_evdo_2 = unchecked((int)(0x0108052d));

			public const int stat_sys_signal_evdo_3 = unchecked((int)(0x0108052e));

			public const int stat_sys_signal_evdo_4 = unchecked((int)(0x0108052f));

			public const int stat_sys_speakerphone = unchecked((int)(0x01080087));

			public const int stat_sys_tether_bluetooth = unchecked((int)(0x01080530));

			public const int stat_sys_tether_general = unchecked((int)(0x01080531));

			public const int stat_sys_tether_usb = unchecked((int)(0x01080532));

			public const int stat_sys_tether_wifi = unchecked((int)(0x01080533));

			public const int stat_sys_throttled = unchecked((int)(0x01080534));

			public const int stat_sys_upload = unchecked((int)(0x01080088));

			public const int stat_sys_upload_anim0 = unchecked((int)(0x01080535));

			public const int stat_sys_upload_anim1 = unchecked((int)(0x01080536));

			public const int stat_sys_upload_anim2 = unchecked((int)(0x01080537));

			public const int stat_sys_upload_anim3 = unchecked((int)(0x01080538));

			public const int stat_sys_upload_anim4 = unchecked((int)(0x01080539));

			public const int stat_sys_upload_anim5 = unchecked((int)(0x0108053a));

			public const int stat_sys_upload_done = unchecked((int)(0x01080089));

			[System.ObsoleteAttribute(@"Replaced by a private asset in the phone app.")]
			public const int stat_sys_vp_phone_call = unchecked((int)(0x010800a7));

			[System.ObsoleteAttribute(@"Replaced by a private asset in the phone app.")]
			public const int stat_sys_vp_phone_call_on_hold = unchecked((int)(0x010800a8));

			public const int stat_sys_warning = unchecked((int)(0x0108008a));

			public const int status_bar_background = unchecked((int)(0x0108053b));

			public const int status_bar_closed_default_background = unchecked((int)(0x010805d6
				));

			public const int status_bar_header_background = unchecked((int)(0x0108053c));

			public const int status_bar_item_app_background = unchecked((int)(0x0108008b));

			public const int status_bar_item_app_background_normal = unchecked((int)(0x0108053d
				));

			public const int status_bar_item_background = unchecked((int)(0x0108008c));

			public const int status_bar_item_background_focus = unchecked((int)(0x0108053e));

			public const int status_bar_item_background_normal = unchecked((int)(0x0108053f));

			public const int status_bar_item_background_pressed = unchecked((int)(0x01080540)
				);

			public const int status_bar_opened_default_background = unchecked((int)(0x010805d7
				));

			public const int statusbar_background = unchecked((int)(0x01080541));

			public const int submenu_arrow = unchecked((int)(0x01080542));

			public const int submenu_arrow_nofocus = unchecked((int)(0x01080543));

			public const int switch_bg_disabled_holo_dark = unchecked((int)(0x01080544));

			public const int switch_bg_disabled_holo_light = unchecked((int)(0x01080545));

			public const int switch_bg_focused_holo_dark = unchecked((int)(0x01080546));

			public const int switch_bg_focused_holo_light = unchecked((int)(0x01080547));

			public const int switch_bg_holo_dark = unchecked((int)(0x01080548));

			public const int switch_bg_holo_light = unchecked((int)(0x01080549));

			public const int switch_inner_holo_dark = unchecked((int)(0x0108054a));

			public const int switch_inner_holo_light = unchecked((int)(0x0108054b));

			public const int switch_thumb_activated_holo_dark = unchecked((int)(0x0108054c));

			public const int switch_thumb_activated_holo_light = unchecked((int)(0x0108054d));

			public const int switch_thumb_disabled_holo_dark = unchecked((int)(0x0108054e));

			public const int switch_thumb_disabled_holo_light = unchecked((int)(0x0108054f));

			public const int switch_thumb_holo_dark = unchecked((int)(0x01080550));

			public const int switch_thumb_holo_light = unchecked((int)(0x01080551));

			public const int switch_thumb_pressed_holo_dark = unchecked((int)(0x01080552));

			public const int switch_thumb_pressed_holo_light = unchecked((int)(0x01080553));

			public const int switch_track_holo_dark = unchecked((int)(0x01080554));

			public const int switch_track_holo_light = unchecked((int)(0x01080555));

			public const int sym_action_add = unchecked((int)(0x01080556));

			public const int sym_action_call = unchecked((int)(0x0108008d));

			public const int sym_action_chat = unchecked((int)(0x0108008e));

			public const int sym_action_email = unchecked((int)(0x0108008f));

			public const int sym_app_on_sd_unavailable_icon = unchecked((int)(0x01080557));

			public const int sym_call_incoming = unchecked((int)(0x01080090));

			public const int sym_call_missed = unchecked((int)(0x01080091));

			public const int sym_call_outgoing = unchecked((int)(0x01080092));

			public const int sym_contact_card = unchecked((int)(0x01080094));

			public const int sym_def_app_icon = unchecked((int)(0x01080093));

			public const int sym_keyboard_delete = unchecked((int)(0x01080558));

			public const int sym_keyboard_delete_dim = unchecked((int)(0x01080559));

			public const int sym_keyboard_delete_holo = unchecked((int)(0x0108055a));

			public const int sym_keyboard_feedback_delete = unchecked((int)(0x0108055b));

			public const int sym_keyboard_feedback_ok = unchecked((int)(0x0108055c));

			public const int sym_keyboard_feedback_return = unchecked((int)(0x0108055d));

			public const int sym_keyboard_feedback_shift = unchecked((int)(0x0108055e));

			public const int sym_keyboard_feedback_shift_locked = unchecked((int)(0x0108055f)
				);

			public const int sym_keyboard_feedback_space = unchecked((int)(0x01080560));

			public const int sym_keyboard_num0_no_plus = unchecked((int)(0x01080561));

			public const int sym_keyboard_num1 = unchecked((int)(0x01080562));

			public const int sym_keyboard_num2 = unchecked((int)(0x01080563));

			public const int sym_keyboard_num3 = unchecked((int)(0x01080564));

			public const int sym_keyboard_num4 = unchecked((int)(0x01080565));

			public const int sym_keyboard_num5 = unchecked((int)(0x01080566));

			public const int sym_keyboard_num6 = unchecked((int)(0x01080567));

			public const int sym_keyboard_num7 = unchecked((int)(0x01080568));

			public const int sym_keyboard_num8 = unchecked((int)(0x01080569));

			public const int sym_keyboard_num9 = unchecked((int)(0x0108056a));

			public const int sym_keyboard_ok = unchecked((int)(0x0108056b));

			public const int sym_keyboard_ok_dim = unchecked((int)(0x0108056c));

			public const int sym_keyboard_return = unchecked((int)(0x0108056d));

			public const int sym_keyboard_shift = unchecked((int)(0x0108056e));

			public const int sym_keyboard_shift_locked = unchecked((int)(0x0108056f));

			public const int sym_keyboard_space = unchecked((int)(0x01080570));

			public const int tab_bottom_holo = unchecked((int)(0x01080571));

			public const int tab_bottom_left = unchecked((int)(0x01080572));

			public const int tab_bottom_left_v4 = unchecked((int)(0x01080573));

			public const int tab_bottom_right = unchecked((int)(0x01080574));

			public const int tab_bottom_right_v4 = unchecked((int)(0x01080575));

			public const int tab_focus = unchecked((int)(0x01080576));

			public const int tab_focus_bar_left = unchecked((int)(0x01080577));

			public const int tab_focus_bar_right = unchecked((int)(0x01080578));

			public const int tab_indicator = unchecked((int)(0x01080579));

			public const int tab_indicator_holo = unchecked((int)(0x0108057a));

			public const int tab_indicator_v4 = unchecked((int)(0x0108057b));

			public const int tab_press = unchecked((int)(0x0108057c));

			public const int tab_press_bar_left = unchecked((int)(0x0108057d));

			public const int tab_press_bar_right = unchecked((int)(0x0108057e));

			public const int tab_pressed_holo = unchecked((int)(0x0108057f));

			public const int tab_selected = unchecked((int)(0x01080580));

			public const int tab_selected_bar_left = unchecked((int)(0x01080581));

			public const int tab_selected_bar_left_v4 = unchecked((int)(0x01080582));

			public const int tab_selected_bar_right = unchecked((int)(0x01080583));

			public const int tab_selected_bar_right_v4 = unchecked((int)(0x01080584));

			public const int tab_selected_focused_holo = unchecked((int)(0x01080585));

			public const int tab_selected_holo = unchecked((int)(0x01080586));

			public const int tab_selected_pressed_holo = unchecked((int)(0x01080587));

			public const int tab_selected_v4 = unchecked((int)(0x01080588));

			public const int tab_unselected = unchecked((int)(0x01080589));

			public const int tab_unselected_focused_holo = unchecked((int)(0x0108058a));

			public const int tab_unselected_holo = unchecked((int)(0x0108058b));

			public const int tab_unselected_pressed_holo = unchecked((int)(0x0108058c));

			public const int tab_unselected_v4 = unchecked((int)(0x0108058d));

			public const int text_cursor_holo_dark = unchecked((int)(0x0108058e));

			public const int text_cursor_holo_light = unchecked((int)(0x0108058f));

			public const int text_edit_paste_window = unchecked((int)(0x01080590));

			public const int text_edit_side_paste_window = unchecked((int)(0x01080591));

			public const int text_edit_suggestions_window = unchecked((int)(0x01080592));

			public const int text_select_handle_left = unchecked((int)(0x01080593));

			public const int text_select_handle_middle = unchecked((int)(0x01080594));

			public const int text_select_handle_right = unchecked((int)(0x01080595));

			public const int textfield_activated_holo_dark = unchecked((int)(0x01080596));

			public const int textfield_activated_holo_light = unchecked((int)(0x01080597));

			public const int textfield_bg_activated_holo_dark = unchecked((int)(0x01080598));

			public const int textfield_bg_default_holo_dark = unchecked((int)(0x01080599));

			public const int textfield_bg_disabled_focused_holo_dark = unchecked((int)(0x0108059a
				));

			public const int textfield_bg_disabled_holo_dark = unchecked((int)(0x0108059b));

			public const int textfield_bg_focused_holo_dark = unchecked((int)(0x0108059c));

			public const int textfield_default = unchecked((int)(0x0108059d));

			public const int textfield_default_holo_dark = unchecked((int)(0x0108059e));

			public const int textfield_default_holo_light = unchecked((int)(0x0108059f));

			public const int textfield_disabled = unchecked((int)(0x010805a0));

			public const int textfield_disabled_focused_holo_dark = unchecked((int)(0x010805a1
				));

			public const int textfield_disabled_focused_holo_light = unchecked((int)(0x010805a2
				));

			public const int textfield_disabled_holo_dark = unchecked((int)(0x010805a3));

			public const int textfield_disabled_holo_light = unchecked((int)(0x010805a4));

			public const int textfield_disabled_selected = unchecked((int)(0x010805a5));

			public const int textfield_focused_holo_dark = unchecked((int)(0x010805a6));

			public const int textfield_focused_holo_light = unchecked((int)(0x010805a7));

			public const int textfield_longpress_holo = unchecked((int)(0x010805a8));

			public const int textfield_multiline_activated_holo_dark = unchecked((int)(0x010805a9
				));

			public const int textfield_multiline_activated_holo_light = unchecked((int)(0x010805aa
				));

			public const int textfield_multiline_default_holo_dark = unchecked((int)(0x010805ab
				));

			public const int textfield_multiline_default_holo_light = unchecked((int)(0x010805ac
				));

			public const int textfield_multiline_disabled_focused_holo_dark = unchecked((int)
				(0x010805ad));

			public const int textfield_multiline_disabled_focused_holo_light = unchecked((int
				)(0x010805ae));

			public const int textfield_multiline_disabled_holo_dark = unchecked((int)(0x010805af
				));

			public const int textfield_multiline_disabled_holo_light = unchecked((int)(0x010805b0
				));

			public const int textfield_multiline_focused_holo_dark = unchecked((int)(0x010805b1
				));

			public const int textfield_multiline_focused_holo_light = unchecked((int)(0x010805b2
				));

			public const int textfield_pressed_holo = unchecked((int)(0x010805b3));

			public const int textfield_search = unchecked((int)(0x010805b4));

			public const int textfield_search_default = unchecked((int)(0x010805b5));

			public const int textfield_search_default_holo_dark = unchecked((int)(0x010805b6)
				);

			public const int textfield_search_default_holo_light = unchecked((int)(0x010805b7
				));

			public const int textfield_search_empty = unchecked((int)(0x010805b8));

			public const int textfield_search_empty_default = unchecked((int)(0x010805b9));

			public const int textfield_search_empty_pressed = unchecked((int)(0x010805ba));

			public const int textfield_search_empty_selected = unchecked((int)(0x010805bb));

			public const int textfield_search_pressed = unchecked((int)(0x010805bc));

			public const int textfield_search_right_default_holo_dark = unchecked((int)(0x010805bd
				));

			public const int textfield_search_right_default_holo_light = unchecked((int)(0x010805be
				));

			public const int textfield_search_right_selected_holo_dark = unchecked((int)(0x010805bf
				));

			public const int textfield_search_right_selected_holo_light = unchecked((int)(0x010805c0
				));

			public const int textfield_search_selected = unchecked((int)(0x010805c1));

			public const int textfield_search_selected_holo_dark = unchecked((int)(0x010805c2
				));

			public const int textfield_search_selected_holo_light = unchecked((int)(0x010805c3
				));

			public const int textfield_searchview_holo_dark = unchecked((int)(0x010805c4));

			public const int textfield_searchview_holo_light = unchecked((int)(0x010805c5));

			public const int textfield_searchview_right_holo_dark = unchecked((int)(0x010805c6
				));

			public const int textfield_searchview_right_holo_light = unchecked((int)(0x010805c7
				));

			public const int textfield_selected = unchecked((int)(0x010805c8));

			public const int title_bar = unchecked((int)(0x01080095));

			public const int title_bar_medium = unchecked((int)(0x010805c9));

			public const int title_bar_portrait = unchecked((int)(0x010805ca));

			public const int title_bar_shadow = unchecked((int)(0x010805cb));

			/// <summary>Drawable to use as a background for a taller version of the titlebar</summary>
			public const int title_bar_tall = unchecked((int)(0x010800a6));

			public const int toast_frame = unchecked((int)(0x01080096));

			public const int toast_frame_holo = unchecked((int)(0x010805cc));

			public const int unknown_image = unchecked((int)(0x010805cd));

			public const int unlock_default = unchecked((int)(0x010805ce));

			public const int unlock_halo = unchecked((int)(0x010805cf));

			public const int unlock_ring = unchecked((int)(0x010805d0));

			public const int unlock_wave = unchecked((int)(0x010805d1));

			public const int usb_android = unchecked((int)(0x010805d2));

			public const int usb_android_connected = unchecked((int)(0x010805d3));

			public const int vpn_connected = unchecked((int)(0x010805d4));

			public const int vpn_disconnected = unchecked((int)(0x010805d5));

			public const int zoom_plate = unchecked((int)(0x01080097));
		}

		public sealed class fraction
		{
			/// <summary>Duration for the dim animation behind a dialog.</summary>
			/// <remarks>
			/// Duration for the dim animation behind a dialog.  This may be either
			/// a percentage, which is relative to the duration of the enter/open
			/// animation of the window being shown that is dimming behind, or it may
			/// be an integer for a constant duration.
			/// </remarks>
			public const int config_dimBehindFadeDuration = unchecked((int)(0x01120000));
		}

		public sealed class id
		{
			public const int KEYCODE_0 = unchecked((int)(0x0102008e));

			public const int KEYCODE_1 = unchecked((int)(0x0102008f));

			public const int KEYCODE_2 = unchecked((int)(0x01020090));

			public const int KEYCODE_3 = unchecked((int)(0x01020091));

			public const int KEYCODE_3D_MODE = unchecked((int)(0x01020155));

			public const int KEYCODE_4 = unchecked((int)(0x01020092));

			public const int KEYCODE_5 = unchecked((int)(0x01020093));

			public const int KEYCODE_6 = unchecked((int)(0x01020094));

			public const int KEYCODE_7 = unchecked((int)(0x01020095));

			public const int KEYCODE_8 = unchecked((int)(0x01020096));

			public const int KEYCODE_9 = unchecked((int)(0x01020097));

			public const int KEYCODE_A = unchecked((int)(0x010200a4));

			public const int KEYCODE_ALT_LEFT = unchecked((int)(0x010200c0));

			public const int KEYCODE_ALT_RIGHT = unchecked((int)(0x010200c1));

			public const int KEYCODE_APOSTROPHE = unchecked((int)(0x010200d2));

			public const int KEYCODE_APP_SWITCH = unchecked((int)(0x01020142));

			public const int KEYCODE_AT = unchecked((int)(0x010200d4));

			public const int KEYCODE_AVR_INPUT = unchecked((int)(0x0102013d));

			public const int KEYCODE_AVR_POWER = unchecked((int)(0x0102013c));

			public const int KEYCODE_B = unchecked((int)(0x010200a5));

			public const int KEYCODE_BACK = unchecked((int)(0x0102008b));

			public const int KEYCODE_BACKSLASH = unchecked((int)(0x010200d0));

			public const int KEYCODE_BOOKMARK = unchecked((int)(0x01020135));

			public const int KEYCODE_BREAK = unchecked((int)(0x01020100));

			public const int KEYCODE_BUTTON_1 = unchecked((int)(0x01020143));

			public const int KEYCODE_BUTTON_10 = unchecked((int)(0x0102014c));

			public const int KEYCODE_BUTTON_11 = unchecked((int)(0x0102014d));

			public const int KEYCODE_BUTTON_12 = unchecked((int)(0x0102014e));

			public const int KEYCODE_BUTTON_13 = unchecked((int)(0x0102014f));

			public const int KEYCODE_BUTTON_14 = unchecked((int)(0x01020150));

			public const int KEYCODE_BUTTON_15 = unchecked((int)(0x01020151));

			public const int KEYCODE_BUTTON_16 = unchecked((int)(0x01020152));

			public const int KEYCODE_BUTTON_2 = unchecked((int)(0x01020144));

			public const int KEYCODE_BUTTON_3 = unchecked((int)(0x01020145));

			public const int KEYCODE_BUTTON_4 = unchecked((int)(0x01020146));

			public const int KEYCODE_BUTTON_5 = unchecked((int)(0x01020147));

			public const int KEYCODE_BUTTON_6 = unchecked((int)(0x01020148));

			public const int KEYCODE_BUTTON_7 = unchecked((int)(0x01020149));

			public const int KEYCODE_BUTTON_8 = unchecked((int)(0x0102014a));

			public const int KEYCODE_BUTTON_9 = unchecked((int)(0x0102014b));

			public const int KEYCODE_BUTTON_A = unchecked((int)(0x010200e7));

			public const int KEYCODE_BUTTON_B = unchecked((int)(0x010200e8));

			public const int KEYCODE_BUTTON_C = unchecked((int)(0x010200e9));

			public const int KEYCODE_BUTTON_L1 = unchecked((int)(0x010200ed));

			public const int KEYCODE_BUTTON_L2 = unchecked((int)(0x010200ef));

			public const int KEYCODE_BUTTON_MODE = unchecked((int)(0x010200f5));

			public const int KEYCODE_BUTTON_R1 = unchecked((int)(0x010200ee));

			public const int KEYCODE_BUTTON_R2 = unchecked((int)(0x010200f0));

			public const int KEYCODE_BUTTON_SELECT = unchecked((int)(0x010200f4));

			public const int KEYCODE_BUTTON_START = unchecked((int)(0x010200f3));

			public const int KEYCODE_BUTTON_THUMBL = unchecked((int)(0x010200f1));

			public const int KEYCODE_BUTTON_THUMBR = unchecked((int)(0x010200f2));

			public const int KEYCODE_BUTTON_X = unchecked((int)(0x010200ea));

			public const int KEYCODE_BUTTON_Y = unchecked((int)(0x010200eb));

			public const int KEYCODE_BUTTON_Z = unchecked((int)(0x010200ec));

			public const int KEYCODE_C = unchecked((int)(0x010200a6));

			public const int KEYCODE_CALL = unchecked((int)(0x0102008c));

			public const int KEYCODE_CAMERA = unchecked((int)(0x010200a2));

			public const int KEYCODE_CAPS_LOCK = unchecked((int)(0x010200fa));

			public const int KEYCODE_CAPTIONS = unchecked((int)(0x01020136));

			public const int KEYCODE_CHANNEL_DOWN = unchecked((int)(0x0102012e));

			public const int KEYCODE_CHANNEL_UP = unchecked((int)(0x0102012d));

			public const int KEYCODE_CLEAR = unchecked((int)(0x010200a3));

			public const int KEYCODE_COMMA = unchecked((int)(0x010200be));

			public const int KEYCODE_CTRL_LEFT = unchecked((int)(0x010200f8));

			public const int KEYCODE_CTRL_RIGHT = unchecked((int)(0x010200f9));

			public const int KEYCODE_D = unchecked((int)(0x010200a7));

			public const int KEYCODE_DEL = unchecked((int)(0x010200ca));

			public const int KEYCODE_DPAD_CENTER = unchecked((int)(0x0102009e));

			public const int KEYCODE_DPAD_DOWN = unchecked((int)(0x0102009b));

			public const int KEYCODE_DPAD_LEFT = unchecked((int)(0x0102009c));

			public const int KEYCODE_DPAD_RIGHT = unchecked((int)(0x0102009d));

			public const int KEYCODE_DPAD_UP = unchecked((int)(0x0102009a));

			public const int KEYCODE_DVR = unchecked((int)(0x01020134));

			public const int KEYCODE_E = unchecked((int)(0x010200a8));

			public const int KEYCODE_ENDCALL = unchecked((int)(0x0102008d));

			public const int KEYCODE_ENTER = unchecked((int)(0x010200c9));

			public const int KEYCODE_ENVELOPE = unchecked((int)(0x010200c8));

			public const int KEYCODE_EQUALS = unchecked((int)(0x010200cd));

			public const int KEYCODE_ESCAPE = unchecked((int)(0x010200f6));

			public const int KEYCODE_EXPLORER = unchecked((int)(0x010200c7));

			public const int KEYCODE_F = unchecked((int)(0x010200a9));

			public const int KEYCODE_F1 = unchecked((int)(0x0102010a));

			public const int KEYCODE_F10 = unchecked((int)(0x01020113));

			public const int KEYCODE_F11 = unchecked((int)(0x01020114));

			public const int KEYCODE_F12 = unchecked((int)(0x01020115));

			public const int KEYCODE_F2 = unchecked((int)(0x0102010b));

			public const int KEYCODE_F3 = unchecked((int)(0x0102010c));

			public const int KEYCODE_F4 = unchecked((int)(0x0102010d));

			public const int KEYCODE_F5 = unchecked((int)(0x0102010e));

			public const int KEYCODE_F6 = unchecked((int)(0x0102010f));

			public const int KEYCODE_F7 = unchecked((int)(0x01020110));

			public const int KEYCODE_F8 = unchecked((int)(0x01020111));

			public const int KEYCODE_F9 = unchecked((int)(0x01020112));

			public const int KEYCODE_FOCUS = unchecked((int)(0x010200d7));

			public const int KEYCODE_FORWARD = unchecked((int)(0x01020104));

			public const int KEYCODE_FORWARD_DEL = unchecked((int)(0x010200f7));

			public const int KEYCODE_FUNCTION = unchecked((int)(0x010200fe));

			public const int KEYCODE_G = unchecked((int)(0x010200aa));

			public const int KEYCODE_GRAVE = unchecked((int)(0x010200cb));

			public const int KEYCODE_GUIDE = unchecked((int)(0x01020133));

			public const int KEYCODE_H = unchecked((int)(0x010200ab));

			public const int KEYCODE_HEADSETHOOK = unchecked((int)(0x010200d6));

			public const int KEYCODE_HOME = unchecked((int)(0x0102008a));

			public const int KEYCODE_I = unchecked((int)(0x010200ac));

			public const int KEYCODE_INFO = unchecked((int)(0x0102012c));

			public const int KEYCODE_INSERT = unchecked((int)(0x01020103));

			public const int KEYCODE_J = unchecked((int)(0x010200ad));

			public const int KEYCODE_K = unchecked((int)(0x010200ae));

			public const int KEYCODE_L = unchecked((int)(0x010200af));

			public const int KEYCODE_LANGUAGE_SWITCH = unchecked((int)(0x01020153));

			public const int KEYCODE_LEFT_BRACKET = unchecked((int)(0x010200ce));

			public const int KEYCODE_M = unchecked((int)(0x010200b0));

			public const int KEYCODE_MANNER_MODE = unchecked((int)(0x01020154));

			public const int KEYCODE_MEDIA_CLOSE = unchecked((int)(0x01020107));

			public const int KEYCODE_MEDIA_EJECT = unchecked((int)(0x01020108));

			public const int KEYCODE_MEDIA_FAST_FORWARD = unchecked((int)(0x010200e1));

			public const int KEYCODE_MEDIA_NEXT = unchecked((int)(0x010200de));

			public const int KEYCODE_MEDIA_PAUSE = unchecked((int)(0x01020106));

			public const int KEYCODE_MEDIA_PLAY = unchecked((int)(0x01020105));

			public const int KEYCODE_MEDIA_PLAY_PAUSE = unchecked((int)(0x010200dc));

			public const int KEYCODE_MEDIA_PREVIOUS = unchecked((int)(0x010200df));

			public const int KEYCODE_MEDIA_RECORD = unchecked((int)(0x01020109));

			public const int KEYCODE_MEDIA_REWIND = unchecked((int)(0x010200e0));

			public const int KEYCODE_MEDIA_STOP = unchecked((int)(0x010200dd));

			public const int KEYCODE_MENU = unchecked((int)(0x010200d9));

			public const int KEYCODE_META_LEFT = unchecked((int)(0x010200fc));

			public const int KEYCODE_META_RIGHT = unchecked((int)(0x010200fd));

			public const int KEYCODE_MINUS = unchecked((int)(0x010200cc));

			public const int KEYCODE_MOVE_END = unchecked((int)(0x01020102));

			public const int KEYCODE_MOVE_HOME = unchecked((int)(0x01020101));

			public const int KEYCODE_MUTE = unchecked((int)(0x010200e2));

			public const int KEYCODE_N = unchecked((int)(0x010200b1));

			public const int KEYCODE_NOTIFICATION = unchecked((int)(0x010200da));

			public const int KEYCODE_NUM = unchecked((int)(0x010200d5));

			public const int KEYCODE_NUMPAD_0 = unchecked((int)(0x01020117));

			public const int KEYCODE_NUMPAD_1 = unchecked((int)(0x01020118));

			public const int KEYCODE_NUMPAD_2 = unchecked((int)(0x01020119));

			public const int KEYCODE_NUMPAD_3 = unchecked((int)(0x0102011a));

			public const int KEYCODE_NUMPAD_4 = unchecked((int)(0x0102011b));

			public const int KEYCODE_NUMPAD_5 = unchecked((int)(0x0102011c));

			public const int KEYCODE_NUMPAD_6 = unchecked((int)(0x0102011d));

			public const int KEYCODE_NUMPAD_7 = unchecked((int)(0x0102011e));

			public const int KEYCODE_NUMPAD_8 = unchecked((int)(0x0102011f));

			public const int KEYCODE_NUMPAD_9 = unchecked((int)(0x01020120));

			public const int KEYCODE_NUMPAD_ADD = unchecked((int)(0x01020124));

			public const int KEYCODE_NUMPAD_COMMA = unchecked((int)(0x01020126));

			public const int KEYCODE_NUMPAD_DIVIDE = unchecked((int)(0x01020121));

			public const int KEYCODE_NUMPAD_DOT = unchecked((int)(0x01020125));

			public const int KEYCODE_NUMPAD_ENTER = unchecked((int)(0x01020127));

			public const int KEYCODE_NUMPAD_EQUALS = unchecked((int)(0x01020128));

			public const int KEYCODE_NUMPAD_LEFT_PAREN = unchecked((int)(0x01020129));

			public const int KEYCODE_NUMPAD_MULTIPLY = unchecked((int)(0x01020122));

			public const int KEYCODE_NUMPAD_RIGHT_PAREN = unchecked((int)(0x0102012a));

			public const int KEYCODE_NUMPAD_SUBTRACT = unchecked((int)(0x01020123));

			public const int KEYCODE_NUM_LOCK = unchecked((int)(0x01020116));

			public const int KEYCODE_O = unchecked((int)(0x010200b2));

			public const int KEYCODE_P = unchecked((int)(0x010200b3));

			public const int KEYCODE_PAGE_DOWN = unchecked((int)(0x010200e4));

			public const int KEYCODE_PAGE_UP = unchecked((int)(0x010200e3));

			public const int KEYCODE_PERIOD = unchecked((int)(0x010200bf));

			public const int KEYCODE_PICTSYMBOLS = unchecked((int)(0x010200e5));

			public const int KEYCODE_PLUS = unchecked((int)(0x010200d8));

			public const int KEYCODE_POUND = unchecked((int)(0x01020099));

			public const int KEYCODE_POWER = unchecked((int)(0x010200a1));

			public const int KEYCODE_PROG_BLUE = unchecked((int)(0x01020141));

			public const int KEYCODE_PROG_GRED = unchecked((int)(0x0102013e));

			public const int KEYCODE_PROG_GREEN = unchecked((int)(0x0102013f));

			public const int KEYCODE_PROG_YELLOW = unchecked((int)(0x01020140));

			public const int KEYCODE_Q = unchecked((int)(0x010200b4));

			public const int KEYCODE_R = unchecked((int)(0x010200b5));

			public const int KEYCODE_RIGHT_BRACKET = unchecked((int)(0x010200cf));

			public const int KEYCODE_S = unchecked((int)(0x010200b6));

			public const int KEYCODE_SCROLL_LOCK = unchecked((int)(0x010200fb));

			public const int KEYCODE_SEARCH = unchecked((int)(0x010200db));

			public const int KEYCODE_SEMICOLON = unchecked((int)(0x010200d1));

			public const int KEYCODE_SETTINGS = unchecked((int)(0x01020137));

			public const int KEYCODE_SHIFT_LEFT = unchecked((int)(0x010200c2));

			public const int KEYCODE_SHIFT_RIGHT = unchecked((int)(0x010200c3));

			public const int KEYCODE_SLASH = unchecked((int)(0x010200d3));

			public const int KEYCODE_SOFT_LEFT = unchecked((int)(0x01020088));

			public const int KEYCODE_SOFT_RIGHT = unchecked((int)(0x01020089));

			public const int KEYCODE_SPACE = unchecked((int)(0x010200c5));

			public const int KEYCODE_STAR = unchecked((int)(0x01020098));

			public const int KEYCODE_STB_INPUT = unchecked((int)(0x0102013b));

			public const int KEYCODE_STB_POWER = unchecked((int)(0x0102013a));

			public const int KEYCODE_SWITCH_CHARSET = unchecked((int)(0x010200e6));

			public const int KEYCODE_SYM = unchecked((int)(0x010200c6));

			public const int KEYCODE_SYSRQ = unchecked((int)(0x010200ff));

			public const int KEYCODE_T = unchecked((int)(0x010200b7));

			public const int KEYCODE_TAB = unchecked((int)(0x010200c4));

			public const int KEYCODE_TV = unchecked((int)(0x01020131));

			public const int KEYCODE_TV_INPUT = unchecked((int)(0x01020139));

			public const int KEYCODE_TV_POWER = unchecked((int)(0x01020138));

			public const int KEYCODE_U = unchecked((int)(0x010200b8));

			public const int KEYCODE_UNKNOWN = unchecked((int)(0x01020087));

			public const int KEYCODE_V = unchecked((int)(0x010200b9));

			public const int KEYCODE_VOLUME_DOWN = unchecked((int)(0x010200a0));

			public const int KEYCODE_VOLUME_MUTE = unchecked((int)(0x0102012b));

			public const int KEYCODE_VOLUME_UP = unchecked((int)(0x0102009f));

			public const int KEYCODE_W = unchecked((int)(0x010200ba));

			public const int KEYCODE_WINDOW = unchecked((int)(0x01020132));

			public const int KEYCODE_X = unchecked((int)(0x010200bb));

			public const int KEYCODE_Y = unchecked((int)(0x010200bc));

			public const int KEYCODE_Z = unchecked((int)(0x010200bd));

			public const int KEYCODE_ZOOM_IN = unchecked((int)(0x0102012f));

			public const int KEYCODE_ZOOM_OUT = unchecked((int)(0x01020130));

			public const int accountPreferences = unchecked((int)(0x0102021e));

			public const int account_name = unchecked((int)(0x01020264));

			public const int account_row_checkmark = unchecked((int)(0x01020255));

			public const int account_row_icon = unchecked((int)(0x01020253));

			public const int account_row_text = unchecked((int)(0x01020254));

			public const int account_type = unchecked((int)(0x01020263));

			public const int actionDone = unchecked((int)(0x0102006b));

			public const int actionGo = unchecked((int)(0x01020067));

			public const int actionNext = unchecked((int)(0x0102006a));

			public const int actionNone = unchecked((int)(0x01020066));

			public const int actionPrevious = unchecked((int)(0x0102006c));

			public const int actionSearch = unchecked((int)(0x01020068));

			public const int actionSend = unchecked((int)(0x01020069));

			public const int actionUnspecified = unchecked((int)(0x01020065));

			public const int action_bar = unchecked((int)(0x010202e2));

			public const int action_bar_container = unchecked((int)(0x010202e1));

			public const int action_bar_subtitle = unchecked((int)(0x0102022a));

			public const int action_bar_title = unchecked((int)(0x01020229));

			public const int action_context_bar = unchecked((int)(0x010202e3));

			public const int action_menu_divider = unchecked((int)(0x01020223));

			public const int action_menu_presenter = unchecked((int)(0x01020226));

			public const int action_mode_bar = unchecked((int)(0x010202dd));

			public const int action_mode_bar_stub = unchecked((int)(0x010202dc));

			public const int action_mode_close_button = unchecked((int)(0x0102022d));

			public const int activity_chooser_view_content = unchecked((int)(0x0102022e));

			public const int addAccount = unchecked((int)(0x01020257));

			/// <summary>Menu ID to perform a "add to dictionary" operation.</summary>
			/// <remarks>Menu ID to perform a "add to dictionary" operation.</remarks>
			public const int addToDictionary = unchecked((int)(0x0102002a));

			public const int adjustNothing = unchecked((int)(0x01020037));

			public const int adjustPan = unchecked((int)(0x01020036));

			public const int adjustResize = unchecked((int)(0x01020035));

			public const int adjustUnspecified = unchecked((int)(0x01020034));

			public const int afterDescendants = unchecked((int)(0x01020170));

			public const int alarm = unchecked((int)(0x010201da));

			public const int alarm_status = unchecked((int)(0x01020290));

			public const int albumart = unchecked((int)(0x010202aa));

			public const int alertTitle = unchecked((int)(0x01020236));

			public const int alignBounds = unchecked((int)(0x01020085));

			public const int alignMargins = unchecked((int)(0x01020086));

			public const int all = unchecked((int)(0x01020082));

			public const int allow_button = unchecked((int)(0x01020269));

			public const int alternative = unchecked((int)(0x010201d4));

			public const int always = unchecked((int)(0x01020160));

			public const int alwaysScroll = unchecked((int)(0x0102018b));

			public const int alwaysUse = unchecked((int)(0x01020241));

			public const int amPm = unchecked((int)(0x01020315));

			public const int am_pm = unchecked((int)(0x010202a3));

			public const int animation = unchecked((int)(0x0102016d));

			public const int anyRtl = unchecked((int)(0x0102016b));

			public const int ask_checkbox = unchecked((int)(0x01020244));

			public const int atThumb = unchecked((int)(0x01020039));

			public const int authtoken_type = unchecked((int)(0x01020265));

			public const int auto = unchecked((int)(0x0102015d));

			public const int auto_fit = unchecked((int)(0x01020192));

			public const int back_button = unchecked((int)(0x010202cf));

			public const int background = unchecked((int)(0x01020000));

			public const int backspace = unchecked((int)(0x0102029b));

			public const int banner = unchecked((int)(0x01020323));

			public const int batteryInfo = unchecked((int)(0x01020284));

			public const int batteryInfoIcon = unchecked((int)(0x01020285));

			public const int batteryInfoSpacer = unchecked((int)(0x01020287));

			public const int batteryInfoText = unchecked((int)(0x01020286));

			public const int beforeDescendants = unchecked((int)(0x0102016f));

			public const int beginning = unchecked((int)(0x0102019a));

			public const int behind = unchecked((int)(0x010201f0));

			public const int blocksDescendants = unchecked((int)(0x01020171));

			public const int body = unchecked((int)(0x010202d4));

			public const int bold = unchecked((int)(0x0102003f));

			public const int bottom = unchecked((int)(0x01020074));

			public const int bottom_to_top = unchecked((int)(0x010201c3));

			public const int btn_next = unchecked((int)(0x010202ad));

			public const int btn_play = unchecked((int)(0x010202ac));

			public const int btn_prev = unchecked((int)(0x010202ab));

			public const int button0 = unchecked((int)(0x010202d6));

			public const int button1 = unchecked((int)(0x01020019));

			public const int button2 = unchecked((int)(0x0102001a));

			public const int button3 = unchecked((int)(0x0102001b));

			public const int button4 = unchecked((int)(0x010202d7));

			public const int button5 = unchecked((int)(0x010202d8));

			public const int button6 = unchecked((int)(0x010202d9));

			public const int button7 = unchecked((int)(0x010202da));

			public const int buttonPanel = unchecked((int)(0x01020238));

			public const int button_bar = unchecked((int)(0x010202ce));

			public const int buttons = unchecked((int)(0x01020267));

			public const int by_common = unchecked((int)(0x01020300));

			public const int by_common_header = unchecked((int)(0x010202ff));

			public const int by_org = unchecked((int)(0x01020302));

			public const int by_org_header = unchecked((int)(0x01020301));

			public const int by_org_unit = unchecked((int)(0x01020304));

			public const int by_org_unit_header = unchecked((int)(0x01020303));

			public const int calendar_view = unchecked((int)(0x0102025c));

			public const int cancel = unchecked((int)(0x01020252));

			/// <summary>
			/// The part of the UI shown by an
			/// <see cref="android.inputmethodservice.InputMethodService">android.inputmethodservice.InputMethodService
			/// 	</see>
			/// that contains the
			/// views for displaying candidates for what the user has entered.
			/// </summary>
			public const int candidatesArea = unchecked((int)(0x0102001d));

			public const int carrier = unchecked((int)(0x01020292));

			public const int center = unchecked((int)(0x0102007b));

			public const int centerCrop = unchecked((int)(0x01020198));

			public const int centerInside = unchecked((int)(0x01020199));

			public const int center_horizontal = unchecked((int)(0x01020079));

			public const int center_vertical = unchecked((int)(0x01020077));

			public const int charCount = unchecked((int)(0x0102016c));

			public const int characterPicker = unchecked((int)(0x01020251));

			public const int characters = unchecked((int)(0x010201a4));

			public const int check = unchecked((int)(0x010202bf));

			public const int checkbox = unchecked((int)(0x01020001));

			public const int clamp = unchecked((int)(0x010201ba));

			public const int clearDefaultHint = unchecked((int)(0x01020242));

			public const int clip_horizontal = unchecked((int)(0x0102007e));

			public const int clip_vertical = unchecked((int)(0x0102007d));

			/// <summary>
			/// View ID of a
			/// <see cref="android.view.View">android.view.View</see>
			/// to close a popup keyboard
			/// </summary>
			public const int closeButton = unchecked((int)(0x01020027));

			public const int collapseActionView = unchecked((int)(0x010201d7));

			public const int collapsing = unchecked((int)(0x010201a9));

			public const int column = unchecked((int)(0x010201c4));

			public const int columnWidth = unchecked((int)(0x01020190));

			public const int compat_checkbox = unchecked((int)(0x01020243));

			public const int container = unchecked((int)(0x010201d1));

			public const int content = unchecked((int)(0x01020002));

			public const int contentPanel = unchecked((int)(0x0102023b));

			/// <summary>
			/// Context menu ID for the "Copy" menu item to copy the currently
			/// selected (or all) text in a text view to the clipboard.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Copy" menu item to copy the currently
			/// selected (or all) text in a text view to the clipboard.
			/// </remarks>
			public const int copy = unchecked((int)(0x01020021));

			/// <summary>
			/// Context menu ID for the "Copy URL" menu item to copy the currently
			/// selected URL from the text view to the clipboard.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Copy URL" menu item to copy the currently
			/// selected URL from the text view to the clipboard.
			/// </remarks>
			public const int copyUrl = unchecked((int)(0x01020023));

			public const int custom = unchecked((int)(0x0102002b));

			public const int customPanel = unchecked((int)(0x0102023d));

			/// <summary>
			/// Context menu ID for the "Cut" menu item to copy and delete the currently
			/// selected (or all) text in a text view to the clipboard.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Cut" menu item to copy and delete the currently
			/// selected (or all) text in a text view to the clipboard.
			/// </remarks>
			public const int cut = unchecked((int)(0x01020020));

			public const int cycle = unchecked((int)(0x0102019c));

			public const int dangerous = unchecked((int)(0x010201e5));

			public const int dangerous_perms_list = unchecked((int)(0x0102024a));

			public const int date = unchecked((int)(0x01020063));

			public const int datePicker = unchecked((int)(0x0102025d));

			public const int datetime = unchecked((int)(0x01020062));

			public const int day = unchecked((int)(0x0102025a));

			public const int day_names = unchecked((int)(0x01020250));

			public const int @decimal = unchecked((int)(0x010201a1));

			public const int decrement = unchecked((int)(0x010202c2));

			public const int defaultPosition = unchecked((int)(0x01020163));

			public const int default_activity_button = unchecked((int)(0x01020231));

			public const int default_loading_view = unchecked((int)(0x010202db));

			public const int deny_button = unchecked((int)(0x01020268));

			public const int description = unchecked((int)(0x01020256));

			public const int dialog = unchecked((int)(0x010201a6));

			public const int disableHome = unchecked((int)(0x010201e4));

			public const int disabled = unchecked((int)(0x0102018a));

			public const int divider = unchecked((int)(0x01020317));

			public const int dpad = unchecked((int)(0x0102020c));

			public const int dropdown = unchecked((int)(0x010201a7));

			public const int edit = unchecked((int)(0x01020003));

			public const int edit_query = unchecked((int)(0x010202e8));

			public const int editable = unchecked((int)(0x0102019e));

			public const int edittext_container = unchecked((int)(0x010202c9));

			public const int eight = unchecked((int)(0x0102031f));

			public const int email = unchecked((int)(0x01020080));

			public const int emergencyCallButton = unchecked((int)(0x01020279));

			public const int empty = unchecked((int)(0x01020004));

			public const int end = unchecked((int)(0x01020044));

			public const int enter_pin = unchecked((int)(0x010202a0));

			public const int enter_puk = unchecked((int)(0x0102029f));

			public const int expand_activities_button = unchecked((int)(0x0102022f));

			public const int expand_button = unchecked((int)(0x01020329));

			public const int expand_button_divider = unchecked((int)(0x01020328));

			public const int expanded_menu = unchecked((int)(0x0102025e));

			public const int expires_on = unchecked((int)(0x01020309));

			public const int expires_on_header = unchecked((int)(0x01020308));

			/// <summary>
			/// The part of the UI shown by an
			/// <see cref="android.inputmethodservice.InputMethodService">android.inputmethodservice.InputMethodService
			/// 	</see>
			/// that contains the
			/// views for interacting with the user in extraction mode.
			/// </summary>
			public const int extractArea = unchecked((int)(0x0102001c));

			public const int faceLockAreaView = unchecked((int)(0x01020297));

			public const int feedbackAllMask = unchecked((int)(0x01020188));

			public const int feedbackAudible = unchecked((int)(0x01020185));

			public const int feedbackGeneric = unchecked((int)(0x01020187));

			public const int feedbackHaptic = unchecked((int)(0x01020184));

			public const int feedbackSpoken = unchecked((int)(0x01020183));

			public const int feedbackVisual = unchecked((int)(0x01020186));

			public const int ffwd = unchecked((int)(0x010202ba));

			public const int fill = unchecked((int)(0x0102007c));

			public const int fillInIntent = unchecked((int)(0x01020220));

			public const int fill_horizontal = unchecked((int)(0x0102007a));

			public const int fill_parent = unchecked((int)(0x01020172));

			public const int fill_vertical = unchecked((int)(0x01020078));

			public const int find = unchecked((int)(0x01020338));

			public const int find_next = unchecked((int)(0x0102033b));

			public const int find_prev = unchecked((int)(0x0102033a));

			public const int finger = unchecked((int)(0x01020207));

			public const int fingerprints = unchecked((int)(0x0102030a));

			public const int firstStrong = unchecked((int)(0x0102016a));

			public const int fitCenter = unchecked((int)(0x01020196));

			public const int fitEnd = unchecked((int)(0x01020197));

			public const int fitStart = unchecked((int)(0x01020195));

			public const int fitXY = unchecked((int)(0x01020194));

			public const int five = unchecked((int)(0x0102031c));

			public const int flagDefault = unchecked((int)(0x01020189));

			public const int flagNavigateNext = unchecked((int)(0x0102006f));

			public const int flagNavigatePrevious = unchecked((int)(0x0102006e));

			public const int flagNoAccessoryAction = unchecked((int)(0x01020071));

			public const int flagNoEnterAction = unchecked((int)(0x01020072));

			public const int flagNoExtractUi = unchecked((int)(0x01020070));

			public const int flagNoFullscreen = unchecked((int)(0x0102006d));

			public const int floatType = unchecked((int)(0x010201c6));

			public const int floating = unchecked((int)(0x01020038));

			public const int fontScale = unchecked((int)(0x01020203));

			public const int forgotPatternButton = unchecked((int)(0x010202a7));

			public const int four = unchecked((int)(0x0102031b));

			public const int fullSensor = unchecked((int)(0x010201f7));

			public const int fullscreenArea = unchecked((int)(0x01020273));

			public const int gone = unchecked((int)(0x01020158));

			public const int grant_credentials_permission_message_footer = unchecked((int)(0x01020266
				));

			public const int grant_credentials_permission_message_header = unchecked((int)(0x01020260
				));

			public const int hardware = unchecked((int)(0x01020165));

			public const int hdpi = unchecked((int)(0x01020217));

			public const int headerSimBad1 = unchecked((int)(0x01020282));

			public const int headerSimBad2 = unchecked((int)(0x01020283));

			public const int headerSimOk1 = unchecked((int)(0x01020280));

			public const int headerSimOk2 = unchecked((int)(0x01020281));

			public const int headerText = unchecked((int)(0x01020298));

			public const int headers = unchecked((int)(0x010202ca));

			public const int high = unchecked((int)(0x0102015f));

			public const int hint = unchecked((int)(0x01020005));

			public const int home = unchecked((int)(0x0102002c));

			public const int homeAsUp = unchecked((int)(0x010201e1));

			public const int horizontal = unchecked((int)(0x01020083));

			public const int hour = unchecked((int)(0x01020313));

			public const int icon = unchecked((int)(0x01020006));

			public const int icon1 = unchecked((int)(0x01020007));

			public const int icon2 = unchecked((int)(0x01020008));

			public const int icon_menu = unchecked((int)(0x01020272));

			public const int icon_menu_presenter = unchecked((int)(0x01020224));

			public const int ifContentScrolls = unchecked((int)(0x01020161));

			public const int ifRoom = unchecked((int)(0x010201d5));

			public const int image = unchecked((int)(0x01020230));

			public const int imageButton = unchecked((int)(0x0102022b));

			public const int increment = unchecked((int)(0x010202c0));

			public const int index = unchecked((int)(0x010202be));

			public const int infinite = unchecked((int)(0x010201bc));

			public const int info = unchecked((int)(0x01020312));

			public const int inherit = unchecked((int)(0x01020168));

			public const int input = unchecked((int)(0x01020009));

			/// <summary>
			/// The part of the UI shown by an
			/// <see cref="android.inputmethodservice.InputMethodService">android.inputmethodservice.InputMethodService
			/// 	</see>
			/// that contains the
			/// views for entering text using the screen.
			/// </summary>
			public const int inputArea = unchecked((int)(0x0102001e));

			public const int inputExtractAccessories = unchecked((int)(0x01020274));

			public const int inputExtractAction = unchecked((int)(0x01020275));

			public const int inputExtractEditButton = unchecked((int)(0x01020276));

			/// <summary>View ID of the text editor inside of an extracted text layout.</summary>
			/// <remarks>View ID of the text editor inside of an extracted text layout.</remarks>
			public const int inputExtractEditText = unchecked((int)(0x01020025));

			public const int insideInset = unchecked((int)(0x0102015a));

			public const int insideOverlay = unchecked((int)(0x01020159));

			public const int instructions = unchecked((int)(0x0102027c));

			public const int intType = unchecked((int)(0x010201c7));

			public const int integer = unchecked((int)(0x0102019f));

			public const int internalEmpty = unchecked((int)(0x010202b4));

			public const int internalOnly = unchecked((int)(0x0102020f));

			public const int invisible = unchecked((int)(0x01020157));

			public const int issued_on = unchecked((int)(0x01020307));

			public const int issued_on_header = unchecked((int)(0x01020306));

			public const int issued_to_header = unchecked((int)(0x010202f6));

			public const int italic = unchecked((int)(0x01020040));

			public const int keyPad = unchecked((int)(0x0102029d));

			public const int keyboard = unchecked((int)(0x010201fb));

			public const int keyboardHidden = unchecked((int)(0x010201fc));

			/// <summary>
			/// View ID of the
			/// <see cref="android.inputmethodservice.KeyboardView">android.inputmethodservice.KeyboardView
			/// 	</see>
			/// within
			/// an input method's input area.
			/// </summary>
			public const int keyboardView = unchecked((int)(0x01020026));

			public const int keyguard = unchecked((int)(0x010202c5));

			public const int label = unchecked((int)(0x01020278));

			public const int landscape = unchecked((int)(0x010201ed));

			public const int large = unchecked((int)(0x01020213));

			public const int launchRecognizer = unchecked((int)(0x010201d0));

			public const int launchWebSearch = unchecked((int)(0x010201cf));

			public const int ldpi = unchecked((int)(0x01020215));

			public const int left = unchecked((int)(0x01020075));

			public const int leftSpacer = unchecked((int)(0x01020239));

			public const int left_icon = unchecked((int)(0x01020219));

			public const int left_to_right = unchecked((int)(0x010201c0));

			public const int line = unchecked((int)(0x010201b2));

			public const int line3 = unchecked((int)(0x01020311));

			public const int linear = unchecked((int)(0x010201b4));

			public const int list = unchecked((int)(0x0102000a));

			public const int listContainer = unchecked((int)(0x010202b3));

			public const int listMode = unchecked((int)(0x010201dd));

			public const int list_footer = unchecked((int)(0x010202cb));

			public const int list_item = unchecked((int)(0x01020232));

			public const int list_menu_presenter = unchecked((int)(0x01020225));

			public const int locale = unchecked((int)(0x01020169));

			public const int lockInstructions = unchecked((int)(0x0102028c));

			public const int lockPattern = unchecked((int)(0x010202a8));

			public const int lock_screen = unchecked((int)(0x0102021d));

			public const int login = unchecked((int)(0x0102027d));

			public const int low = unchecked((int)(0x0102015e));

			public const int ltr = unchecked((int)(0x01020166));

			public const int main = unchecked((int)(0x01020322));

			public const int map = unchecked((int)(0x01020081));

			public const int marquee = unchecked((int)(0x01020045));

			public const int marquee_forever = unchecked((int)(0x010201a5));

			public const int match_parent = unchecked((int)(0x01020173));

			public const int matches = unchecked((int)(0x0102032d));

			public const int matrix = unchecked((int)(0x01020193));

			public const int mcc = unchecked((int)(0x010201f8));

			public const int mdpi = unchecked((int)(0x01020216));

			public const int mediacontroller_progress = unchecked((int)(0x010202bd));

			public const int menu = unchecked((int)(0x0102021a));

			public const int message = unchecked((int)(0x0102000b));

			public const int middle = unchecked((int)(0x01020043));

			public const int minute = unchecked((int)(0x01020314));

			public const int mirror = unchecked((int)(0x010201bb));

			public const int mnc = unchecked((int)(0x010201f9));

			public const int modeLarge = unchecked((int)(0x010201af));

			public const int modeMedium = unchecked((int)(0x010201ae));

			public const int modeSmall = unchecked((int)(0x010201ad));

			public const int mode_normal = unchecked((int)(0x01020335));

			public const int monospace = unchecked((int)(0x0102003e));

			public const int month = unchecked((int)(0x01020259));

			public const int month_name = unchecked((int)(0x0102024f));

			public const int mount_button = unchecked((int)(0x01020324));

			public const int multiple = unchecked((int)(0x010201ac));

			public const int multipleChoice = unchecked((int)(0x0102018d));

			public const int multipleChoiceModal = unchecked((int)(0x0102018e));

			public const int music = unchecked((int)(0x010201dc));

			public const int navigation = unchecked((int)(0x010201fd));

			public const int never = unchecked((int)(0x01020162));

			public const int new_app_action = unchecked((int)(0x01020270));

			public const int new_app_description = unchecked((int)(0x01020271));

			public const int new_app_icon = unchecked((int)(0x0102026f));

			public const int next = unchecked((int)(0x010202bb));

			public const int nextAlarmInfo = unchecked((int)(0x01020288));

			public const int nextAlarmSpacer = unchecked((int)(0x0102028a));

			public const int nextAlarmText = unchecked((int)(0x01020289));

			public const int next_button = unchecked((int)(0x010202d1));

			public const int nine = unchecked((int)(0x01020320));

			public const int no_applications_message = unchecked((int)(0x010202d5));

			public const int no_permissions = unchecked((int)(0x01020249));

			public const int nokeys = unchecked((int)(0x01020208));

			public const int non_dangerous_perms_list = unchecked((int)(0x0102024e));

			public const int nonav = unchecked((int)(0x0102020b));

			public const int none = unchecked((int)(0x01020041));

			public const int normal = unchecked((int)(0x0102003b));

			public const int nosensor = unchecked((int)(0x010201f2));

			public const int notification = unchecked((int)(0x010201d9));

			public const int notouch = unchecked((int)(0x01020205));

			public const int number = unchecked((int)(0x0102005d));

			public const int numberDecimal = unchecked((int)(0x0102005f));

			public const int numberPassword = unchecked((int)(0x01020060));

			public const int numberSigned = unchecked((int)(0x0102005e));

			public const int numberpicker_input = unchecked((int)(0x010202c1));

			public const int off = unchecked((int)(0x010202c6));

			public const int ok = unchecked((int)(0x0102027f));

			public const int old_app_action = unchecked((int)(0x0102026c));

			public const int old_app_description = unchecked((int)(0x0102026d));

			public const int old_app_icon = unchecked((int)(0x0102026b));

			public const int one = unchecked((int)(0x01020318));

			public const int oneLine = unchecked((int)(0x010201a8));

			public const int opaque = unchecked((int)(0x010201b7));

			public const int orientation = unchecked((int)(0x010201fe));

			public const int original_app_icon = unchecked((int)(0x010202b0));

			public const int original_message = unchecked((int)(0x010202b1));

			public const int outsideInset = unchecked((int)(0x0102015c));

			public const int outsideOverlay = unchecked((int)(0x0102015b));

			public const int oval = unchecked((int)(0x010201b1));

			public const int overflow_menu_presenter = unchecked((int)(0x01020227));

			public const int package_icon = unchecked((int)(0x010202c3));

			public const int package_label = unchecked((int)(0x010202c4));

			public const int packages_list = unchecked((int)(0x01020261));

			public const int parentPanel = unchecked((int)(0x01020233));

			public const int password = unchecked((int)(0x0102027e));

			public const int passwordEntry = unchecked((int)(0x01020293));

			/// <summary>
			/// Context menu ID for the "Paste" menu item to copy the current contents
			/// of the clipboard into the text view.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Paste" menu item to copy the current contents
			/// of the clipboard into the text view.
			/// </remarks>
			public const int paste = unchecked((int)(0x01020022));

			public const int pause = unchecked((int)(0x010202b9));

			public const int perm_icon = unchecked((int)(0x01020246));

			public const int permission_group = unchecked((int)(0x01020247));

			public const int permission_icon = unchecked((int)(0x01020262));

			public const int permission_list = unchecked((int)(0x01020248));

			public const int phone = unchecked((int)(0x01020061));

			public const int pickers = unchecked((int)(0x01020258));

			public const int pinDel = unchecked((int)(0x01020294));

			public const int pinDisplay = unchecked((int)(0x0102029a));

			public const int pinDisplayGroup = unchecked((int)(0x01020299));

			public const int placeholder = unchecked((int)(0x010202f4));

			public const int popup_submenu_presenter = unchecked((int)(0x01020228));

			public const int portrait = unchecked((int)(0x010201ee));

			public const int preferExternal = unchecked((int)(0x01020210));

			public const int prefs = unchecked((int)(0x010202cd));

			public const int prefs_frame = unchecked((int)(0x010202cc));

			public const int prev = unchecked((int)(0x010202b7));

			public const int primary = unchecked((int)(0x0102000c));

			public const int progress = unchecked((int)(0x0102000d));

			public const int progressContainer = unchecked((int)(0x010202b2));

			public const int progress_circular = unchecked((int)(0x010202df));

			public const int progress_horizontal = unchecked((int)(0x010202e0));

			public const int progress_number = unchecked((int)(0x01020240));

			public const int progress_percent = unchecked((int)(0x0102023f));

			public const int propertyOf = unchecked((int)(0x010202a4));

			public const int pukDel = unchecked((int)(0x010202a2));

			public const int pukDisplay = unchecked((int)(0x010202a1));

			public const int queryRewriteFromData = unchecked((int)(0x010201cc));

			public const int queryRewriteFromText = unchecked((int)(0x010201cd));

			public const int qwerty = unchecked((int)(0x01020209));

			public const int radial = unchecked((int)(0x010201b5));

			public const int radio = unchecked((int)(0x010202b6));

			public const int radio_power = unchecked((int)(0x010202c8));

			public const int random = unchecked((int)(0x010201bf));

			public const int reask_hint = unchecked((int)(0x01020245));

			public const int rectangle = unchecked((int)(0x010201b0));

			public const int repeat = unchecked((int)(0x0102019b));

			public const int replace_app_icon = unchecked((int)(0x010202ae));

			public const int replace_message = unchecked((int)(0x010202af));

			public const int restart = unchecked((int)(0x010201bd));

			public const int reverse = unchecked((int)(0x010201be));

			public const int reverseLandscape = unchecked((int)(0x010201f5));

			public const int reversePortait = unchecked((int)(0x010201f6));

			public const int rew = unchecked((int)(0x010202b8));

			public const int right = unchecked((int)(0x01020076));

			public const int rightSpacer = unchecked((int)(0x0102023a));

			public const int right_container = unchecked((int)(0x010202de));

			public const int right_icon = unchecked((int)(0x0102021b));

			public const int right_to_left = unchecked((int)(0x010201c1));

			public const int ring = unchecked((int)(0x010201b3));

			public const int ringtone = unchecked((int)(0x010201d8));

			public const int root = unchecked((int)(0x0102028d));

			public const int row = unchecked((int)(0x010201c5));

			public const int rowTypeId = unchecked((int)(0x01020221));

			public const int rtl = unchecked((int)(0x01020167));

			public const int sans = unchecked((int)(0x0102003c));

			public const int screenLayout = unchecked((int)(0x010201ff));

			public const int screenLocked = unchecked((int)(0x010202a6));

			public const int screenLockedInfo = unchecked((int)(0x0102028b));

			public const int screenSize = unchecked((int)(0x01020201));

			public const int scrollView = unchecked((int)(0x0102023c));

			public const int scrolling = unchecked((int)(0x0102016e));

			public const int search_app_icon = unchecked((int)(0x010202e6));

			public const int search_badge = unchecked((int)(0x010202e9));

			public const int search_bar = unchecked((int)(0x010202e5));

			public const int search_button = unchecked((int)(0x010202ea));

			public const int search_close_btn = unchecked((int)(0x010202ef));

			public const int search_edit_frame = unchecked((int)(0x010202eb));

			public const int search_go_btn = unchecked((int)(0x010202f1));

			public const int search_mag_icon = unchecked((int)(0x010202ec));

			public const int search_plate = unchecked((int)(0x010202ed));

			public const int search_src_text = unchecked((int)(0x010202ee));

			public const int search_view = unchecked((int)(0x010202e7));

			public const int search_voice_btn = unchecked((int)(0x010202f2));

			public const int secondary = unchecked((int)(0x010201d3));

			public const int secondaryProgress = unchecked((int)(0x0102000f));

			public const int seekbar = unchecked((int)(0x010202d2));

			/// <summary>
			/// Context menu ID for the "Select All" menu item to select all text
			/// in a text view.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Select All" menu item to select all text
			/// in a text view.
			/// </remarks>
			public const int selectAll = unchecked((int)(0x0102001f));

			/// <summary>
			/// Context menu ID for the "Select text..." menu item to switch to text
			/// selection context mode in text views.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Select text..." menu item to switch to text
			/// selection context mode in text views.
			/// </remarks>
			public const int selectTextMode = unchecked((int)(0x0102002d));

			public const int select_all = unchecked((int)(0x01020336));

			public const int select_dialog_listview = unchecked((int)(0x010202f3));

			public const int selectedIcon = unchecked((int)(0x0102000e));

			public const int sensor = unchecked((int)(0x010201f1));

			public const int sensorLandscape = unchecked((int)(0x010201f3));

			public const int sensorPortait = unchecked((int)(0x010201f4));

			public const int sentences = unchecked((int)(0x010201a2));

			public const int sequentially = unchecked((int)(0x010201c9));

			public const int serial_number = unchecked((int)(0x010202fe));

			public const int serial_number_header = unchecked((int)(0x010202fd));

			public const int serif = unchecked((int)(0x0102003d));

			public const int seven = unchecked((int)(0x0102031e));

			public const int sha1_fingerprint = unchecked((int)(0x0102030e));

			public const int sha1_fingerprint_header = unchecked((int)(0x0102030d));

			public const int sha256_fingerprint = unchecked((int)(0x0102030c));

			public const int sha256_fingerprint_header = unchecked((int)(0x0102030b));

			public const int share = unchecked((int)(0x01020337));

			public const int shortcut = unchecked((int)(0x010202b5));

			public const int showCustom = unchecked((int)(0x010201e3));

			public const int showHome = unchecked((int)(0x010201e0));

			public const int showSearchIconAsBadge = unchecked((int)(0x010201cb));

			public const int showSearchLabelAsBadge = unchecked((int)(0x010201ca));

			public const int showTitle = unchecked((int)(0x010201e2));

			public const int showVoiceSearchButton = unchecked((int)(0x010201ce));

			public const int show_more = unchecked((int)(0x0102024b));

			public const int show_more_icon = unchecked((int)(0x0102024d));

			public const int show_more_text = unchecked((int)(0x0102024c));

			public const int signature = unchecked((int)(0x010201e6));

			public const int signatureOrSystem = unchecked((int)(0x010201e7));

			public const int signed = unchecked((int)(0x010201a0));

			public const int silent = unchecked((int)(0x010202c7));

			public const int single = unchecked((int)(0x010201ab));

			public const int singleChoice = unchecked((int)(0x0102018c));

			public const int singleInstance = unchecked((int)(0x010201eb));

			public const int singleTask = unchecked((int)(0x010201ea));

			public const int singleTop = unchecked((int)(0x010201e9));

			public const int six = unchecked((int)(0x0102031d));

			public const int skip_button = unchecked((int)(0x010202d0));

			public const int slider_group = unchecked((int)(0x01020327));

			public const int small = unchecked((int)(0x01020212));

			public const int smallIcon = unchecked((int)(0x0102021f));

			public const int smallestScreenSize = unchecked((int)(0x01020202));

			public const int software = unchecked((int)(0x01020164));

			public const int spacerBottom = unchecked((int)(0x0102029e));

			public const int spacerTop = unchecked((int)(0x0102027b));

			public const int spacingWidth = unchecked((int)(0x0102018f));

			public const int spacingWidthUniform = unchecked((int)(0x01020191));

			public const int spannable = unchecked((int)(0x0102019d));

			public const int splashscreen = unchecked((int)(0x0102032c));

			public const int splitActionBarWhenNarrow = unchecked((int)(0x01020211));

			public const int split_action_bar = unchecked((int)(0x010202e4));

			public const int standard = unchecked((int)(0x010201e8));

			public const int start = unchecked((int)(0x01020042));

			/// <summary>Menu ID to perform a "start selecting text" operation.</summary>
			/// <remarks>Menu ID to perform a "start selecting text" operation.</remarks>
			public const int startSelectingText = unchecked((int)(0x01020028));

			public const int stateAlwaysHidden = unchecked((int)(0x01020031));

			public const int stateAlwaysVisible = unchecked((int)(0x01020033));

			public const int stateHidden = unchecked((int)(0x01020030));

			public const int stateUnchanged = unchecked((int)(0x0102002f));

			public const int stateUnspecified = unchecked((int)(0x0102002e));

			public const int stateVisible = unchecked((int)(0x01020032));

			public const int status = unchecked((int)(0x0102025f));

			public const int status1 = unchecked((int)(0x01020291));

			public const int status_bar_latest_event_content = unchecked((int)(0x0102030f));

			public const int status_bar_latest_event_content_large_icon = unchecked((int)(0x01020310
				));

			/// <summary>Menu ID to perform a "stop selecting text" operation.</summary>
			/// <remarks>Menu ID to perform a "stop selecting text" operation.</remarks>
			public const int stopSelectingText = unchecked((int)(0x01020029));

			public const int stream_icon = unchecked((int)(0x0102032a));

			public const int stylus = unchecked((int)(0x01020206));

			public const int submit_area = unchecked((int)(0x010202f0));

			public const int summary = unchecked((int)(0x01020010));

			public const int sweep = unchecked((int)(0x010201b6));

			/// <summary>
			/// Context menu ID for the "Input Method" menu item to being up the
			/// input method picker dialog, allowing the user to switch to another
			/// input method.
			/// </summary>
			/// <remarks>
			/// Context menu ID for the "Input Method" menu item to being up the
			/// input method picker dialog, allowing the user to switch to another
			/// input method.
			/// </remarks>
			public const int switchInputMethod = unchecked((int)(0x01020024));

			public const int switchWidget = unchecked((int)(0x010202d3));

			public const int switch_ime_button = unchecked((int)(0x01020295));

			public const int switch_new = unchecked((int)(0x0102026e));

			public const int switch_old = unchecked((int)(0x0102026a));

			public const int system = unchecked((int)(0x010201d2));

			public const int tabMode = unchecked((int)(0x010201de));

			public const int tabcontent = unchecked((int)(0x01020011));

			public const int tabhost = unchecked((int)(0x01020012));

			public const int tabs = unchecked((int)(0x01020013));

			public const int text = unchecked((int)(0x01020046));

			public const int text1 = unchecked((int)(0x01020014));

			public const int text2 = unchecked((int)(0x01020015));

			public const int textAutoComplete = unchecked((int)(0x0102004b));

			public const int textAutoCorrect = unchecked((int)(0x0102004a));

			public const int textButton = unchecked((int)(0x0102022c));

			public const int textCapCharacters = unchecked((int)(0x01020047));

			public const int textCapSentences = unchecked((int)(0x01020049));

			public const int textCapWords = unchecked((int)(0x01020048));

			public const int textEmailAddress = unchecked((int)(0x01020050));

			public const int textEmailSubject = unchecked((int)(0x01020051));

			public const int textFilter = unchecked((int)(0x01020059));

			public const int textImeMultiLine = unchecked((int)(0x0102004d));

			public const int textLongMessage = unchecked((int)(0x01020053));

			public const int textMultiLine = unchecked((int)(0x0102004c));

			public const int textNoSuggestions = unchecked((int)(0x0102004e));

			public const int textPassword = unchecked((int)(0x01020056));

			public const int textPersonName = unchecked((int)(0x01020054));

			public const int textPhonetic = unchecked((int)(0x0102005a));

			public const int textPostalAddress = unchecked((int)(0x01020055));

			public const int textShortMessage = unchecked((int)(0x01020052));

			public const int textUri = unchecked((int)(0x0102004f));

			public const int textVisiblePassword = unchecked((int)(0x01020057));

			public const int textWebEditText = unchecked((int)(0x01020058));

			public const int textWebEmailAddress = unchecked((int)(0x0102005b));

			public const int textWebPassword = unchecked((int)(0x0102005c));

			public const int three = unchecked((int)(0x0102031a));

			public const int time = unchecked((int)(0x01020064));

			public const int timeDisplayBackground = unchecked((int)(0x0102028e));

			public const int timeDisplayForeground = unchecked((int)(0x0102028f));

			public const int timePicker = unchecked((int)(0x01020316));

			public const int time_current = unchecked((int)(0x010202bc));

			public const int title = unchecked((int)(0x01020016));

			public const int titleDivider = unchecked((int)(0x01020237));

			public const int titleDividerTop = unchecked((int)(0x0102023e));

			public const int title_container = unchecked((int)(0x0102021c));

			public const int title_separator = unchecked((int)(0x010202f5));

			public const int title_template = unchecked((int)(0x01020235));

			public const int to_common = unchecked((int)(0x010202f8));

			public const int to_common_header = unchecked((int)(0x010202f7));

			public const int to_org = unchecked((int)(0x010202fa));

			public const int to_org_header = unchecked((int)(0x010202f9));

			public const int to_org_unit = unchecked((int)(0x010202fc));

			public const int to_org_unit_header = unchecked((int)(0x010202fb));

			public const int together = unchecked((int)(0x010201c8));

			public const int toggle = unchecked((int)(0x01020017));

			public const int top = unchecked((int)(0x01020073));

			public const int topDisplayGroup = unchecked((int)(0x0102029c));

			public const int topHeader = unchecked((int)(0x0102027a));

			public const int topPanel = unchecked((int)(0x01020234));

			public const int top_to_bottom = unchecked((int)(0x010201c2));

			public const int touchscreen = unchecked((int)(0x010201fa));

			public const int trackball = unchecked((int)(0x0102020d));

			public const int translucent = unchecked((int)(0x010201b9));

			public const int transparent = unchecked((int)(0x010201b8));

			public const int transport = unchecked((int)(0x01020296));

			public const int transport_controls = unchecked((int)(0x010202a9));

			public const int twelvekey = unchecked((int)(0x0102020a));

			public const int two = unchecked((int)(0x01020319));

			public const int twoLine = unchecked((int)(0x010201aa));

			public const int typeAllMask = unchecked((int)(0x01020182));

			public const int typeNotificationStateChanged = unchecked((int)(0x0102017a));

			public const int typeTouchExplorationGestureEnd = unchecked((int)(0x0102017e));

			public const int typeTouchExplorationGestureStart = unchecked((int)(0x0102017d));

			public const int typeViewClicked = unchecked((int)(0x01020174));

			public const int typeViewFocused = unchecked((int)(0x01020177));

			public const int typeViewHoverEnter = unchecked((int)(0x0102017b));

			public const int typeViewHoverExit = unchecked((int)(0x0102017c));

			public const int typeViewLongClicked = unchecked((int)(0x01020175));

			public const int typeViewScrolled = unchecked((int)(0x01020180));

			public const int typeViewSelected = unchecked((int)(0x01020176));

			public const int typeViewTextChanged = unchecked((int)(0x01020178));

			public const int typeViewTextSelectionChanged = unchecked((int)(0x01020181));

			public const int typeWindowContentChanged = unchecked((int)(0x0102017f));

			public const int typeWindowStateChanged = unchecked((int)(0x01020179));

			public const int uiMode = unchecked((int)(0x01020200));

			public const int undefined = unchecked((int)(0x01020204));

			public const int unlock_widget = unchecked((int)(0x010202a5));

			public const int unmount_button = unchecked((int)(0x01020325));

			public const int unspecified = unchecked((int)(0x010201ec));

			public const int up = unchecked((int)(0x01020222));

			public const int useLogo = unchecked((int)(0x010201df));

			public const int user = unchecked((int)(0x010201ef));

			public const int validity_header = unchecked((int)(0x01020305));

			public const int value = unchecked((int)(0x01020277));

			public const int vertical = unchecked((int)(0x01020084));

			public const int visible = unchecked((int)(0x01020156));

			public const int visible_panel = unchecked((int)(0x01020326));

			public const int voice = unchecked((int)(0x010201db));

			public const int web = unchecked((int)(0x0102007f));

			public const int websearch = unchecked((int)(0x01020339));

			public const int webview = unchecked((int)(0x0102032b));

			public const int wheel = unchecked((int)(0x0102020e));

			public const int widget_frame = unchecked((int)(0x01020018));

			public const int wifi_p2p_wps_pin = unchecked((int)(0x0102032e));

			public const int withText = unchecked((int)(0x010201d6));

			public const int words = unchecked((int)(0x010201a3));

			public const int wrap_content = unchecked((int)(0x0102003a));

			public const int xhdpi = unchecked((int)(0x01020218));

			public const int xlarge = unchecked((int)(0x01020214));

			public const int year = unchecked((int)(0x0102025b));

			public const int zero = unchecked((int)(0x01020321));

			public const int zoomControls = unchecked((int)(0x01020331));

			public const int zoomIn = unchecked((int)(0x01020333));

			public const int zoomMagnify = unchecked((int)(0x01020334));

			public const int zoomOut = unchecked((int)(0x01020332));

			public const int zoom_fit_page = unchecked((int)(0x0102032f));

			public const int zoom_page_overview = unchecked((int)(0x01020330));
		}

		public sealed class integer
		{
			/// <summary>Max number of downloads allowed to proceed concurrently</summary>
			public const int config_MaxConcurrentDownloadsAllowed = unchecked((int)(0x010e0027
				));

			public const int config_activityDefaultDur = unchecked((int)(0x010e0005));

			/// <summary>The duration (in milliseconds) of the activity open/close and fragment open/close animations.
			/// 	</summary>
			/// <remarks>The duration (in milliseconds) of the activity open/close and fragment open/close animations.
			/// 	</remarks>
			public const int config_activityShortDur = unchecked((int)(0x010e0004));

			/// <summary>
			/// Control whether being in the car dock (and powered) always
			/// keeps the screen on.
			/// </summary>
			/// <remarks>
			/// Control whether being in the car dock (and powered) always
			/// keeps the screen on.  By default it stays on when plugged in to
			/// AC.  0 will not keep it on; or together 1 to stay on when plugged
			/// in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.)
			/// </remarks>
			public const int config_carDockKeepsScreenOn = unchecked((int)(0x010e000f));

			/// <summary>The number of degrees to rotate the display when the device is in a car dock.
			/// 	</summary>
			/// <remarks>
			/// The number of degrees to rotate the display when the device is in a car dock.
			/// A value of -1 means no change in orientation by default.
			/// </remarks>
			public const int config_carDockRotation = unchecked((int)(0x010e000d));

			/// <summary>Display low battery warning when battery level dips to this value.</summary>
			/// <remarks>
			/// Display low battery warning when battery level dips to this value.
			/// Also, the battery stats are flushed to disk when we hit this level.
			/// </remarks>
			public const int config_criticalBatteryWarningLevel = unchecked((int)(0x010e0013)
				);

			/// <summary>
			/// When a database query is executed, the results retuned are paginated
			/// in pages of size (in KB) indicated by this value
			/// </summary>
			public const int config_cursorWindowSize = unchecked((int)(0x010e0029));

			/// <summary>
			/// The default reduced-datarate notification mask
			/// 2 means give warning
			/// </summary>
			public const int config_datause_notification_type = unchecked((int)(0x010e0024));

			/// <summary>The default data-use polling period.</summary>
			/// <remarks>The default data-use polling period.</remarks>
			public const int config_datause_polling_period_sec = unchecked((int)(0x010e0021));

			/// <summary>The default data-use threshold in bytes.</summary>
			/// <remarks>The default data-use threshold in bytes. 0 disables</remarks>
			public const int config_datause_threshold_bytes = unchecked((int)(0x010e0022));

			/// <summary>The default reduced-datarate value in kilobits per sec</summary>
			public const int config_datause_throttle_kbitsps = unchecked((int)(0x010e0023));

			/// <summary>Default LED off time for notification LED in milliseconds.</summary>
			/// <remarks>Default LED off time for notification LED in milliseconds.</remarks>
			public const int config_defaultNotificationLedOff = unchecked((int)(0x010e0017));

			/// <summary>Default LED on time for notification LED in milliseconds.</summary>
			/// <remarks>Default LED on time for notification LED in milliseconds.</remarks>
			public const int config_defaultNotificationLedOn = unchecked((int)(0x010e0016));

			/// <summary>
			/// Control whether being in the desk dock (and powered) always
			/// keeps the screen on.
			/// </summary>
			/// <remarks>
			/// Control whether being in the desk dock (and powered) always
			/// keeps the screen on.  By default it stays on when plugged in to
			/// AC.  0 will not keep it on; or together 1 to stay on when plugged
			/// in to AC and 2 to stay on when plugged in to USB.  (So 3 for both.)
			/// </remarks>
			public const int config_deskDockKeepsScreenOn = unchecked((int)(0x010e000e));

			/// <summary>The number of degrees to rotate the display when the device is in a desk dock.
			/// 	</summary>
			/// <remarks>
			/// The number of degrees to rotate the display when the device is in a desk dock.
			/// A value of -1 means no change in orientation by default.
			/// </remarks>
			public const int config_deskDockRotation = unchecked((int)(0x010e000c));

			/// <summary>
			/// When the free space available in DownloadManager's data dir falls
			/// below the percentage value specified by this param, DownloadManager
			/// starts removing files to try to make percentage of available
			/// free space above this threshold value.
			/// </summary>
			/// <remarks>
			/// When the free space available in DownloadManager's data dir falls
			/// below the percentage value specified by this param, DownloadManager
			/// starts removing files to try to make percentage of available
			/// free space above this threshold value.
			/// </remarks>
			public const int config_downloadDataDirLowSpaceThreshold = unchecked((int)(0x010e0028
				));

			/// <summary>
			/// Max space (in MB) allocated to DownloadManager to store the downloaded
			/// files if they are to be stored in DownloadManager's data dir,
			/// which typically is /data/data/com.android.providers.downloads/files
			/// </summary>
			public const int config_downloadDataDirSize = unchecked((int)(0x010e0026));

			/// <summary>
			/// Indicate whether the lid state impacts the accessibility of
			/// the physical keyboard.
			/// </summary>
			/// <remarks>
			/// Indicate whether the lid state impacts the accessibility of
			/// the physical keyboard.  0 means it doesn't, 1 means it is accessible
			/// when the lid is open, 2 means it is accessible when the lid is
			/// closed.  The default is 1.
			/// </remarks>
			public const int config_lidKeyboardAccessibility = unchecked((int)(0x010e0010));

			/// <summary>
			/// Indicate whether the lid state impacts the accessibility of
			/// the physical keyboard.
			/// </summary>
			/// <remarks>
			/// Indicate whether the lid state impacts the accessibility of
			/// the physical keyboard.  0 means it doesn't, 1 means it is accessible
			/// when the lid is open, 2 means it is accessible when the lid is
			/// closed.  The default is 0.
			/// </remarks>
			public const int config_lidNavigationAccessibility = unchecked((int)(0x010e0011));

			/// <summary>The number of degrees to rotate the display when the keyboard is open.</summary>
			/// <remarks>The number of degrees to rotate the display when the keyboard is open.</remarks>
			public const int config_lidOpenRotation = unchecked((int)(0x010e000b));

			/// <summary>Amount of time it takes for the light sensor to warm up in milliseconds.
			/// 	</summary>
			/// <remarks>
			/// Amount of time it takes for the light sensor to warm up in milliseconds.
			/// For this time after the screen turns on, the Power Manager
			/// will not debounce light sensor readings
			/// </remarks>
			public const int config_lightSensorWarmupTime = unchecked((int)(0x010e001f));

			/// <summary>The duration (in milliseconds) of a long animation.</summary>
			/// <remarks>The duration (in milliseconds) of a long animation.</remarks>
			public const int config_longAnimTime = unchecked((int)(0x010e0002));

			/// <summary>Control the behavior when the user long presses the home button.</summary>
			/// <remarks>
			/// Control the behavior when the user long presses the home button.
			/// 0 - Nothing
			/// 1 - Recent apps dialog
			/// 2 - Recent apps view in SystemUI
			/// This needs to match the constants in
			/// policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
			/// see comment in values/config.xml
			/// see comment in values/config.xml
			/// </remarks>
			public const int config_longPressOnHomeBehavior = unchecked((int)(0x010e001d));

			/// <summary>Control the behavior when the user long presses the power button.</summary>
			/// <remarks>
			/// Control the behavior when the user long presses the power button.
			/// 0 - Nothing
			/// 1 - Global actions menu
			/// 2 - Power off (with confirmation)
			/// see comment in values/config.xml
			/// see comment in values/config.xml
			/// </remarks>
			public const int config_longPressOnPowerBehavior = unchecked((int)(0x010e0012));

			/// <summary>Close low battery warning when battery level reaches this value</summary>
			public const int config_lowBatteryCloseWarningLevel = unchecked((int)(0x010e0015)
				);

			/// <summary>
			/// Display low battery warning when battery level dips to this value
			/// Display low battery warning when battery level dips to this value
			/// </summary>
			public const int config_lowBatteryWarningLevel = unchecked((int)(0x010e0014));

			/// <summary>Max number of Bluetooth tethering connections allowed.</summary>
			/// <remarks>
			/// Max number of Bluetooth tethering connections allowed. If this is
			/// updated config_tether_dhcp_range has to be updated appropriately.
			/// </remarks>
			public const int config_max_pan_devices = unchecked((int)(0x010e0008));

			/// <summary>The duration (in milliseconds) of a medium-length animation.</summary>
			/// <remarks>The duration (in milliseconds) of a medium-length animation.</remarks>
			public const int config_mediumAnimTime = unchecked((int)(0x010e0001));

			/// <summary>Default network policy warning threshold, in megabytes.</summary>
			/// <remarks>Default network policy warning threshold, in megabytes.</remarks>
			public const int config_networkPolicyDefaultWarning = unchecked((int)(0x010e002b)
				);

			/// <summary>The maximum duration (in milliseconds) we expect a network transition to take
			/// 	</summary>
			public const int config_networkTransitionTimeout = unchecked((int)(0x010e0007));

			/// <summary>Default value for led color when battery is fully charged</summary>
			public const int config_notificationsBatteryFullARGB = unchecked((int)(0x010e001a
				));

			/// <summary>Default value for LED off time when the battery is low on charge in miliseconds
			/// 	</summary>
			public const int config_notificationsBatteryLedOff = unchecked((int)(0x010e001c));

			/// <summary>Default value for LED on time when the battery is low on charge in miliseconds
			/// 	</summary>
			public const int config_notificationsBatteryLedOn = unchecked((int)(0x010e001b));

			/// <summary>Default value for led color when battery is low on charge</summary>
			public const int config_notificationsBatteryLowARGB = unchecked((int)(0x010e0018)
				);

			/// <summary>Default value for led color when battery is medium charged</summary>
			public const int config_notificationsBatteryMediumARGB = unchecked((int)(0x010e0019
				));

			/// <summary>Timeout to wait for NTP server response.</summary>
			/// <remarks>Timeout to wait for NTP server response.</remarks>
			public const int config_ntpTimeout = unchecked((int)(0x010e002a));

			/// <summary>
			/// The duration (in milliseconds) that the radio will scan for a signal
			/// when there's no network connection.
			/// </summary>
			/// <remarks>
			/// The duration (in milliseconds) that the radio will scan for a signal
			/// when there's no network connection. If the scan doesn't timeout, use zero
			/// </remarks>
			public const int config_radioScanningTimeout = unchecked((int)(0x010e0006));

			/// <summary>Minimum screen brightness allowed by the power manager.</summary>
			/// <remarks>Minimum screen brightness allowed by the power manager.</remarks>
			public const int config_screenBrightnessDim = unchecked((int)(0x010e001e));

			/// <summary>The duration (in milliseconds) of a short animation.</summary>
			/// <remarks>The duration (in milliseconds) of a short animation.</remarks>
			public const int config_shortAnimTime = unchecked((int)(0x010e0000));

			/// <summary>
			/// Specifies the amount of time to disable virtual keys after the screen is touched
			/// in order to filter out accidental virtual key presses due to swiping gestures
			/// or taps near the edge of the display.
			/// </summary>
			/// <remarks>
			/// Specifies the amount of time to disable virtual keys after the screen is touched
			/// in order to filter out accidental virtual key presses due to swiping gestures
			/// or taps near the edge of the display.  May be 0 to disable the feature.
			/// It is recommended that this value be no more than 250 ms.
			/// This feature should be disabled for most devices.
			/// </remarks>
			public const int config_virtualKeyQuietTimeMillis = unchecked((int)(0x010e0020));

			/// <summary>Integer indicating the framework scan interval in milliseconds.</summary>
			/// <remarks>
			/// Integer indicating the framework scan interval in milliseconds. This is used in the scenario
			/// where the chipset does not support background scanning (config_wifi_background_scan_suport
			/// is false) to set up a periodic wake up scan so that the device can connect to a new access
			/// point on the move. A value of 0 means no periodic scans will be used in the framework.
			/// </remarks>
			public const int config_wifi_framework_scan_interval = unchecked((int)(0x010e000a
				));

			/// <summary>Integer indicating wpa_supplicant scan interval in milliseconds</summary>
			public const int config_wifi_supplicant_scan_interval = unchecked((int)(0x010e0009
				));

			/// <summary>
			/// Number of database connections opened and managed by framework layer
			/// to handle queries on each database.
			/// </summary>
			/// <remarks>
			/// Number of database connections opened and managed by framework layer
			/// to handle queries on each database.
			/// </remarks>
			public const int db_connection_pool_size = unchecked((int)(0x010e0025));

			/// <summary>
			/// The maximum number of action buttons that should be permitted within
			/// an action bar/action mode.
			/// </summary>
			/// <remarks>
			/// The maximum number of action buttons that should be permitted within
			/// an action bar/action mode. This will be used to determine how many
			/// showAsAction="ifRoom" items can fit. "always" items can override this.
			/// The maximum number of action buttons that should be permitted within
			/// an action bar/action mode. This will be used to determine how many
			/// showAsAction="ifRoom" items can fit. "always" items can override this.
			/// The maximum number of action buttons that should be permitted within
			/// an action bar/action mode. This will be used to determine how many
			/// showAsAction="ifRoom" items can fit. "always" items can override this.
			/// The maximum number of action buttons that should be permitted within
			/// an action bar/action mode. This will be used to determine how many
			/// showAsAction="ifRoom" items can fit. "always" items can override this.
			/// The maximum number of action buttons that should be permitted within
			/// an action bar/action mode. This will be used to determine how many
			/// showAsAction="ifRoom" items can fit. "always" items can override this.
			/// </remarks>
			public const int max_action_buttons = unchecked((int)(0x010e002c));

			/// <summary>
			/// outsideOverlay
			/// insideOverlay
			/// insideOverlay
			/// </summary>
			public const int preference_fragment_scrollbarStyle = unchecked((int)(0x010e0030)
				);

			public const int preference_screen_header_scrollbarStyle = unchecked((int)(0x010e002f
				));

			/// <summary>Weight of the left pane in a multi-pane preference layout.</summary>
			/// <remarks>
			/// Weight of the left pane in a multi-pane preference layout.
			/// Weight of the left pane in a multi-pane preference layout.
			/// </remarks>
			public const int preferences_left_pane_weight = unchecked((int)(0x010e002d));

			/// <summary>Weight of the right pane in a multi-pane preference layout.</summary>
			/// <remarks>
			/// Weight of the right pane in a multi-pane preference layout. So the split is 40:60
			/// Weight of the right pane in a multi-pane preference layout. So the split is 1:2
			/// </remarks>
			public const int preferences_right_pane_weight = unchecked((int)(0x010e002e));

			/// <summary>
			/// Maximum numerical value that will be shown in a status bar
			/// notification icon or in the notification itself.
			/// </summary>
			/// <remarks>
			/// Maximum numerical value that will be shown in a status bar
			/// notification icon or in the notification itself. Will be replaced
			/// with @string/status_bar_notification_info_overflow when shown in the
			/// UI.
			/// </remarks>
			public const int status_bar_notification_info_maxnum = unchecked((int)(0x010e0003
				));
		}

		public sealed class interpolator
		{
			/// <summary>Acceleration curve matching a cubic ease out function.</summary>
			/// <remarks>Acceleration curve matching a cubic ease out function.</remarks>
			public const int accelerate_cubic = unchecked((int)(0x010c0002));

			/// <summary>Acceleration curve matching an ease in + ease out function</summary>
			public const int accelerate_decelerate = unchecked((int)(0x010c0006));

			/// <summary>Acceleration curve matching a quadtratic ease out function.</summary>
			/// <remarks>Acceleration curve matching a quadtratic ease out function.</remarks>
			public const int accelerate_quad = unchecked((int)(0x010c0000));

			/// <summary>Acceleration curve matching a quint ease out function.</summary>
			/// <remarks>Acceleration curve matching a quint ease out function.</remarks>
			public const int accelerate_quint = unchecked((int)(0x010c0004));

			/// <summary>An interpolator where the change starts backward then flings forward.</summary>
			/// <remarks>An interpolator where the change starts backward then flings forward.</remarks>
			public const int anticipate = unchecked((int)(0x010c0007));

			/// <summary>
			/// An interpolator where the change starts backward then flings forward and
			/// overshoots the target value and finally goes back to the final value.
			/// </summary>
			/// <remarks>
			/// An interpolator where the change starts backward then flings forward and
			/// overshoots the target value and finally goes back to the final value.
			/// </remarks>
			public const int anticipate_overshoot = unchecked((int)(0x010c0009));

			/// <summary>An interpolator where the change bounces at the end.</summary>
			/// <remarks>An interpolator where the change bounces at the end.</remarks>
			public const int bounce = unchecked((int)(0x010c000a));

			/// <summary>Repeats the animation for one cycle.</summary>
			/// <remarks>
			/// Repeats the animation for one cycle. The rate of change follows a
			/// sinusoidal pattern.
			/// </remarks>
			public const int cycle = unchecked((int)(0x010c000c));

			/// <summary>Acceleration curve matching a cubic ease in function.</summary>
			/// <remarks>Acceleration curve matching a cubic ease in function.</remarks>
			public const int decelerate_cubic = unchecked((int)(0x010c0003));

			/// <summary>Acceleration curve matching a quadtratic ease in function.</summary>
			/// <remarks>Acceleration curve matching a quadtratic ease in function.</remarks>
			public const int decelerate_quad = unchecked((int)(0x010c0001));

			/// <summary>Acceleration curve matching a quint ease in function.</summary>
			/// <remarks>Acceleration curve matching a quint ease in function.</remarks>
			public const int decelerate_quint = unchecked((int)(0x010c0005));

			/// <summary>An interpolator where the rate of change is constant.</summary>
			/// <remarks>An interpolator where the rate of change is constant.</remarks>
			public const int linear = unchecked((int)(0x010c000b));

			/// <summary>
			/// An interpolator where the change flings forward and overshoots the last
			/// value then comes back.
			/// </summary>
			/// <remarks>
			/// An interpolator where the change flings forward and overshoots the last
			/// value then comes back.
			/// </remarks>
			public const int overshoot = unchecked((int)(0x010c0008));
		}

		public sealed class layout
		{
			public const int action_bar_home = unchecked((int)(0x01090018));

			public const int action_bar_title_item = unchecked((int)(0x01090019));

			public const int action_menu_item_layout = unchecked((int)(0x0109001a));

			public const int action_menu_layout = unchecked((int)(0x0109001b));

			public const int action_mode_bar = unchecked((int)(0x0109001c));

			public const int action_mode_close_item = unchecked((int)(0x0109001d));

			public const int activity_chooser_view = unchecked((int)(0x0109001e));

			public const int activity_chooser_view_list_item = unchecked((int)(0x0109001f));

			public const int activity_list = unchecked((int)(0x01090020));

			public const int activity_list_item = unchecked((int)(0x01090000));

			public const int activity_list_item_2 = unchecked((int)(0x01090021));

			public const int alert_dialog = unchecked((int)(0x01090022));

			public const int alert_dialog_holo = unchecked((int)(0x01090023));

			public const int alert_dialog_progress = unchecked((int)(0x01090024));

			public const int alert_dialog_progress_holo = unchecked((int)(0x01090025));

			public const int always_use_checkbox = unchecked((int)(0x01090026));

			public const int am_compat_mode_dialog = unchecked((int)(0x01090027));

			public const int app_permission_item = unchecked((int)(0x01090028));

			public const int app_perms_summary = unchecked((int)(0x01090029));

			public const int auto_complete_list = unchecked((int)(0x0109002a));

			public const int breadcrumbs_in_fragment = unchecked((int)(0x0109002b));

			public const int browser_link_context_header = unchecked((int)(0x0109000e));

			public const int calendar_view = unchecked((int)(0x0109002c));

			public const int character_picker = unchecked((int)(0x0109002d));

			public const int character_picker_button = unchecked((int)(0x0109002e));

			public const int choose_account = unchecked((int)(0x0109002f));

			public const int choose_account_row = unchecked((int)(0x01090030));

			public const int choose_account_type = unchecked((int)(0x01090031));

			public const int choose_selected_account_row = unchecked((int)(0x01090032));

			public const int choose_type_and_account = unchecked((int)(0x01090033));

			public const int date_picker = unchecked((int)(0x01090034));

			public const int date_picker_dialog = unchecked((int)(0x01090035));

			public const int date_picker_holo = unchecked((int)(0x01090036));

			public const int dialog_custom_title = unchecked((int)(0x01090037));

			public const int dialog_custom_title_holo = unchecked((int)(0x01090038));

			public const int dialog_title = unchecked((int)(0x01090039));

			public const int dialog_title_holo = unchecked((int)(0x0109003a));

			public const int dialog_title_icons = unchecked((int)(0x0109003b));

			public const int dialog_title_icons_holo = unchecked((int)(0x0109003c));

			public const int expandable_list_content = unchecked((int)(0x01090001));

			public const int expanded_menu_layout = unchecked((int)(0x0109003d));

			public const int fragment_bread_crumb_item = unchecked((int)(0x0109003e));

			public const int fragment_bread_crumbs = unchecked((int)(0x0109003f));

			public const int global_actions_item = unchecked((int)(0x01090040));

			public const int grant_credentials_permission = unchecked((int)(0x01090041));

			public const int heavy_weight_switcher = unchecked((int)(0x01090042));

			public const int icon_menu_item_layout = unchecked((int)(0x01090043));

			public const int icon_menu_layout = unchecked((int)(0x01090044));

			public const int input_method = unchecked((int)(0x01090045));

			public const int input_method_extract_view = unchecked((int)(0x01090046));

			public const int js_prompt = unchecked((int)(0x01090047));

			public const int keyboard_key_preview = unchecked((int)(0x01090048));

			public const int keyboard_popup_keyboard = unchecked((int)(0x01090049));

			public const int keyguard = unchecked((int)(0x0109004a));

			public const int keyguard_screen_glogin_unlock = unchecked((int)(0x0109004b));

			public const int keyguard_screen_lock = unchecked((int)(0x0109004c));

			public const int keyguard_screen_password_landscape = unchecked((int)(0x0109004d)
				);

			public const int keyguard_screen_password_portrait = unchecked((int)(0x0109004e));

			public const int keyguard_screen_sim_pin_landscape = unchecked((int)(0x0109004f));

			public const int keyguard_screen_sim_pin_portrait = unchecked((int)(0x01090050));

			public const int keyguard_screen_sim_puk_landscape = unchecked((int)(0x01090051));

			public const int keyguard_screen_sim_puk_portrait = unchecked((int)(0x01090052));

			public const int keyguard_screen_status_land = unchecked((int)(0x01090053));

			public const int keyguard_screen_status_port = unchecked((int)(0x01090054));

			public const int keyguard_screen_tab_unlock = unchecked((int)(0x01090055));

			public const int keyguard_screen_tab_unlock_land = unchecked((int)(0x01090056));

			public const int keyguard_screen_unlock_landscape = unchecked((int)(0x01090057));

			public const int keyguard_screen_unlock_portrait = unchecked((int)(0x01090058));

			public const int keyguard_transport_control = unchecked((int)(0x01090059));

			public const int launch_warning = unchecked((int)(0x0109005a));

			/// <summary>
			/// Standard content view for a
			/// <see cref="android.app.ListFragment">android.app.ListFragment</see>
			/// .
			/// If you are implementing a subclass of ListFragment with your
			/// own customized content, you can include this layout in that
			/// content to still retain all of the standard functionality of
			/// the base class.
			/// </summary>
			public const int list_content = unchecked((int)(0x01090014));

			public const int list_content_simple = unchecked((int)(0x0109005b));

			public const int list_gestures_overlay = unchecked((int)(0x0109005c));

			public const int list_menu_item_checkbox = unchecked((int)(0x0109005d));

			public const int list_menu_item_icon = unchecked((int)(0x0109005e));

			public const int list_menu_item_layout = unchecked((int)(0x0109005f));

			public const int list_menu_item_radio = unchecked((int)(0x01090060));

			public const int locale_picker_item = unchecked((int)(0x01090061));

			public const int media_controller = unchecked((int)(0x01090062));

			public const int menu_item = unchecked((int)(0x01090063));

			public const int number_picker = unchecked((int)(0x01090064));

			public const int permissions_account_and_authtokentype = unchecked((int)(0x01090065
				));

			public const int permissions_package_list_item = unchecked((int)(0x01090066));

			public const int popup_menu_item_layout = unchecked((int)(0x01090067));

			public const int power_dialog = unchecked((int)(0x01090068));

			public const int preference = unchecked((int)(0x01090069));

			public const int preference_category = unchecked((int)(0x01090002));

			public const int preference_category_holo = unchecked((int)(0x0109006a));

			public const int preference_child = unchecked((int)(0x0109006b));

			public const int preference_child_holo = unchecked((int)(0x0109006c));

			public const int preference_dialog_edittext = unchecked((int)(0x0109006d));

			public const int preference_header_item = unchecked((int)(0x0109006e));

			public const int preference_holo = unchecked((int)(0x0109006f));

			public const int preference_information = unchecked((int)(0x01090070));

			public const int preference_information_holo = unchecked((int)(0x01090071));

			public const int preference_list_content = unchecked((int)(0x01090072));

			public const int preference_list_content_single = unchecked((int)(0x01090073));

			public const int preference_list_fragment = unchecked((int)(0x01090074));

			public const int preference_widget_checkbox = unchecked((int)(0x01090075));

			public const int preference_widget_seekbar = unchecked((int)(0x01090076));

			public const int preference_widget_switch = unchecked((int)(0x01090077));

			public const int preferences = unchecked((int)(0x01090078));

			public const int progress_dialog = unchecked((int)(0x01090079));

			public const int progress_dialog_holo = unchecked((int)(0x0109007a));

			public const int recent_apps_dialog = unchecked((int)(0x0109007b));

			public const int recent_apps_icon = unchecked((int)(0x0109007c));

			public const int remote_views_adapter_default_loading_view = unchecked((int)(0x0109007d
				));

			public const int resolve_list_item = unchecked((int)(0x0109007e));

			public const int safe_mode = unchecked((int)(0x0109007f));

			public const int screen = unchecked((int)(0x01090080));

			public const int screen_action_bar = unchecked((int)(0x01090081));

			public const int screen_action_bar_overlay = unchecked((int)(0x01090082));

			public const int screen_custom_title = unchecked((int)(0x01090083));

			public const int screen_progress = unchecked((int)(0x01090084));

			public const int screen_simple = unchecked((int)(0x01090085));

			public const int screen_simple_overlay_action_mode = unchecked((int)(0x01090086));

			public const int screen_title = unchecked((int)(0x01090087));

			public const int screen_title_icons = unchecked((int)(0x01090088));

			public const int search_bar = unchecked((int)(0x01090089));

			public const int search_dropdown_item_1line = unchecked((int)(0x0109008a));

			public const int search_dropdown_item_icons_2line = unchecked((int)(0x0109008b));

			public const int search_view = unchecked((int)(0x0109008c));

			public const int seekbar_dialog = unchecked((int)(0x0109008d));

			public const int select_dialog = unchecked((int)(0x0109008e));

			public const int select_dialog_holo = unchecked((int)(0x0109008f));

			public const int select_dialog_item = unchecked((int)(0x01090011));

			public const int select_dialog_item_holo = unchecked((int)(0x01090090));

			public const int select_dialog_multichoice = unchecked((int)(0x01090013));

			public const int select_dialog_multichoice_holo = unchecked((int)(0x01090091));

			public const int select_dialog_singlechoice = unchecked((int)(0x01090012));

			public const int select_dialog_singlechoice_holo = unchecked((int)(0x01090092));

			public const int simple_dropdown_hint = unchecked((int)(0x01090093));

			public const int simple_dropdown_item_1line = unchecked((int)(0x0109000a));

			public const int simple_dropdown_item_2line = unchecked((int)(0x01090094));

			public const int simple_expandable_list_item_1 = unchecked((int)(0x01090006));

			public const int simple_expandable_list_item_2 = unchecked((int)(0x01090007));

			public const int simple_gallery_item = unchecked((int)(0x0109000b));

			public const int simple_list_item_1 = unchecked((int)(0x01090003));

			public const int simple_list_item_2 = unchecked((int)(0x01090004));

			public const int simple_list_item_2_single_choice = unchecked((int)(0x01090095));

			/// <summary>
			/// A version of
			/// <see cref="simple_list_item_1">simple_list_item_1</see>
			/// that is able to change its
			/// background state to indicate when it is activated (that is checked by
			/// a ListView).
			/// </summary>
			public const int simple_list_item_activated_1 = unchecked((int)(0x01090016));

			/// <summary>
			/// A version of
			/// <see cref="simple_list_item_2">simple_list_item_2</see>
			/// that is able to change its
			/// background state to indicate when it is activated (that is checked by
			/// a ListView).
			/// </summary>
			public const int simple_list_item_activated_2 = unchecked((int)(0x01090017));

			public const int simple_list_item_checked = unchecked((int)(0x01090005));

			public const int simple_list_item_multiple_choice = unchecked((int)(0x01090010));

			public const int simple_list_item_single_choice = unchecked((int)(0x0109000f));

			/// <summary>A simple ListView item layout which can contain text and support (single or multiple) item selection.
			/// 	</summary>
			/// <remarks>A simple ListView item layout which can contain text and support (single or multiple) item selection.
			/// 	</remarks>
			public const int simple_selectable_list_item = unchecked((int)(0x01090015));

			public const int simple_spinner_dropdown_item = unchecked((int)(0x01090009));

			public const int simple_spinner_item = unchecked((int)(0x01090008));

			public const int ssl_certificate = unchecked((int)(0x01090096));

			public const int status_bar_latest_event_content = unchecked((int)(0x01090097));

			public const int status_bar_latest_event_content_large_icon = unchecked((int)(0x01090098
				));

			public const int status_bar_latest_event_ticker = unchecked((int)(0x01090099));

			public const int status_bar_latest_event_ticker_large_icon = unchecked((int)(0x0109009a
				));

			public const int tab_content = unchecked((int)(0x0109009b));

			public const int tab_indicator = unchecked((int)(0x0109009c));

			public const int tab_indicator_holo = unchecked((int)(0x0109009d));

			public const int test_list_item = unchecked((int)(0x0109000c));

			public const int text_drag_thumbnail = unchecked((int)(0x0109009e));

			public const int text_edit_action_popup_text = unchecked((int)(0x0109009f));

			public const int text_edit_no_paste_window = unchecked((int)(0x010900a0));

			public const int text_edit_paste_window = unchecked((int)(0x010900a1));

			public const int text_edit_side_no_paste_window = unchecked((int)(0x010900a2));

			public const int text_edit_side_paste_window = unchecked((int)(0x010900a3));

			public const int text_edit_suggestion_item = unchecked((int)(0x010900a4));

			public const int text_edit_suggestions_window = unchecked((int)(0x010900a5));

			public const int textview_hint = unchecked((int)(0x010900a6));

			public const int time_picker = unchecked((int)(0x010900a7));

			public const int time_picker_dialog = unchecked((int)(0x010900a8));

			public const int time_picker_holo = unchecked((int)(0x010900a9));

			public const int transient_notification = unchecked((int)(0x010900aa));

			public const int twelve_key_entry = unchecked((int)(0x010900ab));

			public const int two_line_list_item = unchecked((int)(0x0109000d));

			public const int typing_filter = unchecked((int)(0x010900ac));

			public const int usb_storage_activity = unchecked((int)(0x010900ad));

			public const int volume_adjust = unchecked((int)(0x010900ae));

			public const int volume_adjust_item = unchecked((int)(0x010900af));

			public const int web_runtime = unchecked((int)(0x010900b0));

			public const int web_text_view_dropdown = unchecked((int)(0x010900b1));

			public const int webview_find = unchecked((int)(0x010900b2));

			public const int webview_select_singlechoice = unchecked((int)(0x010900b3));

			public const int wifi_p2p_go_negotiation_request_alert = unchecked((int)(0x010900b4
				));

			public const int zoom_browser_accessory_buttons = unchecked((int)(0x010900b5));

			public const int zoom_container = unchecked((int)(0x010900b6));

			public const int zoom_controls = unchecked((int)(0x010900b7));

			public const int zoom_magnify = unchecked((int)(0x010900b8));
		}

		public sealed class menu
		{
			public const int webview_copy = unchecked((int)(0x01140000));

			public const int webview_find = unchecked((int)(0x01140001));
		}

		public sealed class mipmap
		{
			public const int sym_app_on_sd_unavailable_icon = unchecked((int)(0x010d0001));

			/// <summary>Default icon for applications that don't specify an icon.</summary>
			/// <remarks>Default icon for applications that don't specify an icon.</remarks>
			public const int sym_def_app_icon = unchecked((int)(0x010d0000));
		}

		public sealed class plurals
		{
			/// <summary>This is used to express that something will occur some number of abbreviated days in the future (e.g., in 5 days).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of abbreviated days in the future (e.g., in 5 days).
			/// 	</remarks>
			public const int abbrev_in_num_days = unchecked((int)(0x01130010));

			/// <summary>This is used to express that something will occur some number of abbreviated hours in the future (e.g., in 5 hrs).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of abbreviated hours in the future (e.g., in 5 hrs).
			/// 	</remarks>
			public const int abbrev_in_num_hours = unchecked((int)(0x0113000f));

			/// <summary>This is used to express that something will occur some number of abbreviated minutes in the future (e.g., in 5 mins).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of abbreviated minutes in the future (e.g., in 5 mins).
			/// 	</remarks>
			public const int abbrev_in_num_minutes = unchecked((int)(0x0113000e));

			/// <summary>This is used to express that something will occur some number of abbreviated seconds in the future (e.g., in 5 secs).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of abbreviated seconds in the future (e.g., in 5 secs).
			/// 	</remarks>
			public const int abbrev_in_num_seconds = unchecked((int)(0x0113000d));

			/// <summary>This is used to express that something occurred some number of abbreviated days in the past (e.g., 5 days ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of abbreviated days in the past (e.g., 5 days ago).
			/// 	</remarks>
			public const int abbrev_num_days_ago = unchecked((int)(0x0113000c));

			/// <summary>This is used to express that something occurred some number of abbreviated hours in the past (e.g., 5 hrs ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of abbreviated hours in the past (e.g., 5 hrs ago).
			/// 	</remarks>
			public const int abbrev_num_hours_ago = unchecked((int)(0x0113000b));

			/// <summary>This is used to express that something occurred some number of abbreviated minutes in the past (e.g., 5 mins ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of abbreviated minutes in the past (e.g., 5 mins ago).
			/// 	</remarks>
			public const int abbrev_num_minutes_ago = unchecked((int)(0x0113000a));

			/// <summary>This is used to express that something occurred some number of abbreviated seconds in the past (e.g., 5 secs ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of abbreviated seconds in the past (e.g., 5 secs ago).
			/// 	</remarks>
			public const int abbrev_num_seconds_ago = unchecked((int)(0x01130009));

			/// <summary>This is used to express that something will occur some number of days in the future (e.g., in 5 days).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of days in the future (e.g., in 5 days).
			/// 	</remarks>
			public const int in_num_days = unchecked((int)(0x01130008));

			/// <summary>This is used to express that something will occur some number of hours in the future (e.g., in 5 hours).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of hours in the future (e.g., in 5 hours).
			/// 	</remarks>
			public const int in_num_hours = unchecked((int)(0x01130007));

			/// <summary>This is used to express that something will occur some number of minutes in the future (e.g., in 5 minutes).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of minutes in the future (e.g., in 5 minutes).
			/// 	</remarks>
			public const int in_num_minutes = unchecked((int)(0x01130006));

			/// <summary>This is used to express that something will occur some number of seconds in the future (e.g., in 5 seconds).
			/// 	</summary>
			/// <remarks>This is used to express that something will occur some number of seconds in the future (e.g., in 5 seconds).
			/// 	</remarks>
			public const int in_num_seconds = unchecked((int)(0x01130005));

			/// <summary>This is used to express that something occurred within the last X days (e.g., Last 7 days).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred within the last X days (e.g., Last 7 days).
			/// 	</remarks>
			public const int last_num_days = unchecked((int)(0x01130003));

			/// <summary>
			/// Displayed on the Find dialog to display the index of the highlighted
			/// match and total number of matches found in the current page.
			/// </summary>
			/// <remarks>
			/// Displayed on the Find dialog to display the index of the highlighted
			/// match and total number of matches found in the current page. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int matches_found = unchecked((int)(0x01130013));

			/// <summary>This is used to express that something occurred some number of days in the past (e.g., 5 days ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of days in the past (e.g., 5 days ago).
			/// 	</remarks>
			public const int num_days_ago = unchecked((int)(0x01130004));

			/// <summary>This is used to express that something occurred some number of hours in the past (e.g., 5 hours ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of hours in the past (e.g., 5 hours ago).
			/// 	</remarks>
			public const int num_hours_ago = unchecked((int)(0x01130002));

			/// <summary>This is used to express that something occurred some number of minutes in the past (e.g., 5 minutes ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of minutes in the past (e.g., 5 minutes ago).
			/// 	</remarks>
			public const int num_minutes_ago = unchecked((int)(0x01130001));

			/// <summary>This is used to express that something occurred some number of seconds in the past (e.g., 5 seconds ago).
			/// 	</summary>
			/// <remarks>This is used to express that something occurred some number of seconds in the past (e.g., 5 seconds ago).
			/// 	</remarks>
			public const int num_seconds_ago = unchecked((int)(0x01130000));

			/// <summary>A notification is shown when there are open wireless networks nearby.</summary>
			/// <remarks>A notification is shown when there are open wireless networks nearby.  This is the notification's title.
			/// 	</remarks>
			public const int wifi_available = unchecked((int)(0x01130011));

			/// <summary>A notification is shown when there are open wireless networks nearby.</summary>
			/// <remarks>A notification is shown when there are open wireless networks nearby.  This is the notification's message.
			/// 	</remarks>
			public const int wifi_available_detailed = unchecked((int)(0x01130012));
		}

		public sealed class raw
		{
			public const int fallbackring = unchecked((int)(0x01100000));

			public const int incognito_mode_start_page = unchecked((int)(0x01100001));

			public const int loaderror = unchecked((int)(0x01100002));

			public const int nodomain = unchecked((int)(0x01100003));
		}

		public sealed class @string
		{
			/// <summary>Displayed as the title for a success/failure report enabling/disabling call barring.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report enabling/disabling call barring.
			/// 	</remarks>
			public const int BaMmi = unchecked((int)(0x010400d0));

			/// <summary>Displayed to confirm to the user that caller ID will not be restricted on the next call or in general.
			/// 	</summary>
			/// <remarks>Displayed to confirm to the user that caller ID will not be restricted on the next call or in general.
			/// 	</remarks>
			public const int CLIRDefaultOffNextCallOff = unchecked((int)(0x010400dc));

			/// <summary>Displayed to confirm to the user that caller ID will not be restricted on the next call but usually is.
			/// 	</summary>
			/// <remarks>Displayed to confirm to the user that caller ID will not be restricted on the next call but usually is.
			/// 	</remarks>
			public const int CLIRDefaultOffNextCallOn = unchecked((int)(0x010400db));

			/// <summary>Displayed to confirm to the user that caller ID will be not restricted on the next call even though it usually is.
			/// 	</summary>
			/// <remarks>Displayed to confirm to the user that caller ID will be not restricted on the next call even though it usually is.
			/// 	</remarks>
			public const int CLIRDefaultOnNextCallOff = unchecked((int)(0x010400da));

			/// <summary>Displayed to confirm to the user that caller ID will be restricted on the next call as usual.
			/// 	</summary>
			/// <remarks>Displayed to confirm to the user that caller ID will be restricted on the next call as usual.
			/// 	</remarks>
			public const int CLIRDefaultOnNextCallOn = unchecked((int)(0x010400d9));

			/// <summary>Displayed to tell the user that they cannot change the caller ID setting.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that they cannot change the caller ID setting.
			/// 	</remarks>
			public const int CLIRPermanent = unchecked((int)(0x010400de));

			/// <summary>Displayed as the title for a success/failure report enabling/disabling call forwarding.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report enabling/disabling call forwarding.
			/// 	</remarks>
			public const int CfMmi = unchecked((int)(0x010400ce));

			/// <summary>Displayed as the title for a success/failure report enabling/disabling caller ID.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report enabling/disabling caller ID.
			/// 	</remarks>
			public const int ClipMmi = unchecked((int)(0x010400cc));

			/// <summary>Displayed as the title for a success/failure report enabling/disabling caller ID.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report enabling/disabling caller ID.
			/// 	</remarks>
			public const int ClirMmi = unchecked((int)(0x010400cd));

			public const int CndMmi = unchecked((int)(0x010400d7));

			public const int CnipMmi = unchecked((int)(0x010400d3));

			public const int CnirMmi = unchecked((int)(0x010400d4));

			/// <summary>Displayed as the title for a success/failure report enabling/disabling call waiting.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report enabling/disabling call waiting.
			/// 	</remarks>
			public const int CwMmi = unchecked((int)(0x010400cf));

			public const int DndMmi = unchecked((int)(0x010400d8));

			/// <summary>Quoted name for 12am, uppercase first letter</summary>
			public const int Midnight = unchecked((int)(0x01040381));

			/// <summary>Quoted name for 12pm, uppercase first letter</summary>
			public const int Noon = unchecked((int)(0x0104037f));

			/// <summary>Displayed as the title for a success/failure report changing the SIM PIN.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report changing the SIM PIN.
			/// 	</remarks>
			public const int PinMmi = unchecked((int)(0x010400d2));

			/// <summary>Displayed as the title for a success/failure report changing the SIM password.
			/// 	</summary>
			/// <remarks>Displayed as the title for a success/failure report changing the SIM password.
			/// 	</remarks>
			public const int PwdMmi = unchecked((int)(0x010400d1));

			/// <summary>Notification title to tell the user that restricted state is changed by access control.
			/// 	</summary>
			/// <remarks>Notification title to tell the user that restricted state is changed by access control.
			/// 	</remarks>
			public const int RestrictedChangedTitle = unchecked((int)(0x010400df));

			/// <summary>Displayed to tell the user that all service is blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that all service is blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnAll = unchecked((int)(0x010400e7));

			/// <summary>Displayed to tell the user that all emergency and normal voice services are blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that all emergency and normal voice services are blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnAllVoice = unchecked((int)(0x010400e3));

			/// <summary>Displayed to tell the user that data service is blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that data service is blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnData = unchecked((int)(0x010400e0));

			/// <summary>Displayed to tell the user that emergency service is blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that emergency service is blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnEmergency = unchecked((int)(0x010400e1));

			/// <summary>Displayed to tell the user that normal service is blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that normal service is blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnNormal = unchecked((int)(0x010400e2));

			/// <summary>Displayed to tell the user that sms service is blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that sms service is blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnSms = unchecked((int)(0x010400e4));

			/// <summary>Displayed to tell the user that voice/data service is blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that voice/data service is blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnVoiceData = unchecked((int)(0x010400e5));

			/// <summary>Displayed to tell the user that voice and sms service are blocked by access control.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that voice and sms service are blocked by access control.
			/// 	</remarks>
			public const int RestrictedOnVoiceSms = unchecked((int)(0x010400e6));

			public const int RuacMmi = unchecked((int)(0x010400d6));

			public const int ThreeWCMmi = unchecked((int)(0x010400d5));

			/// <summary>Button to close error alert when a video cannot be played</summary>
			public const int VideoView_error_button = unchecked((int)(0x01040010));

			/// <summary>Text for error alert when a video container is not valid for progressive download/playback.
			/// 	</summary>
			/// <remarks>Text for error alert when a video container is not valid for progressive download/playback.
			/// 	</remarks>
			public const int VideoView_error_text_invalid_progressive_playback = unchecked((int
				)(0x01040015));

			/// <summary>Text for error alert when a video cannot be played.</summary>
			/// <remarks>Text for error alert when a video cannot be played. it can be used by any app.
			/// 	</remarks>
			public const int VideoView_error_text_unknown = unchecked((int)(0x01040011));

			/// <summary>Title for error alert when a video cannot be played.</summary>
			/// <remarks>Title for error alert when a video cannot be played.  it can be used by any app.
			/// 	</remarks>
			public const int VideoView_error_title = unchecked((int)(0x01040012));

			public const int abbrev_month = unchecked((int)(0x01040087));

			public const int abbrev_month_day = unchecked((int)(0x01040086));

			public const int abbrev_month_day_year = unchecked((int)(0x01040082));

			public const int abbrev_month_year = unchecked((int)(0x01040088));

			public const int abbrev_wday_month_day_year = unchecked((int)(0x010400ab));

			/// <summary>Label to show for a service that is running because it is an accessibility module.
			/// 	</summary>
			/// <remarks>Label to show for a service that is running because it is an accessibility module.
			/// 	</remarks>
			public const int accessibility_binding_label = unchecked((int)(0x0104042e));

			/// <summary>Content description for the action bar "home" affordance.</summary>
			/// <remarks>Content description for the action bar "home" affordance. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int action_bar_home_description = unchecked((int)(0x0104048e));

			/// <summary>Content description for the action bar "up" affordance.</summary>
			/// <remarks>Content description for the action bar "up" affordance. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int action_bar_up_description = unchecked((int)(0x0104048f));

			/// <summary>Content description for the action menu overflow button.</summary>
			/// <remarks>Content description for the action menu overflow button. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int action_menu_overflow_description = unchecked((int)(0x01040490));

			/// <summary>Label for the "Done" button on the far left of action mode toolbars.</summary>
			/// <remarks>Label for the "Done" button on the far left of action mode toolbars.</remarks>
			public const int action_mode_done = unchecked((int)(0x01040447));

			/// <summary>Title default for a dialog showing possible activities in ActivityChooserView [CHAR LIMIT=25]
			/// 	</summary>
			public const int activity_chooser_view_dialog_title_default = unchecked((int)(0x010404b2
				));

			/// <summary>Title for a button to expand the list of activities in ActivityChooserView [CHAR LIMIT=25]
			/// 	</summary>
			public const int activity_chooser_view_see_all = unchecked((int)(0x010404b1));

			/// <summary>Shown in LauncherActivity when the requested target Intent didn't return any matching Activities, leaving the list empty.
			/// 	</summary>
			/// <remarks>Shown in LauncherActivity when the requested target Intent didn't return any matching Activities, leaving the list empty.
			/// 	</remarks>
			public const int activity_list_empty = unchecked((int)(0x01040415));

			/// <summary>
			/// ActivityChooserView - accessibility support
			/// Description of the shwoing of a popup window with activities to choose from.
			/// </summary>
			/// <remarks>
			/// ActivityChooserView - accessibility support
			/// Description of the shwoing of a popup window with activities to choose from. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int activitychooserview_choose_application = unchecked((int)(0x01040480
				));

			/// <summary>Message of notification shown when ADB is actively connected to the phone.
			/// 	</summary>
			/// <remarks>Message of notification shown when ADB is actively connected to the phone.
			/// 	</remarks>
			public const int adb_active_notification_message = unchecked((int)(0x01040402));

			/// <summary>Title of notification shown when ADB is actively connected to the phone.
			/// 	</summary>
			/// <remarks>Title of notification shown when ADB is actively connected to the phone.
			/// 	</remarks>
			public const int adb_active_notification_title = unchecked((int)(0x01040401));

			/// <summary>Option to add the current misspelled word to the user dictionary.</summary>
			/// <remarks>Option to add the current misspelled word to the user dictionary. [CHAR LIMIT=25]
			/// 	</remarks>
			public const int addToDictionary = unchecked((int)(0x01040387));

			/// <summary>Button label to add an account [CHAR LIMIT=20]</summary>
			public const int add_account_button_label = unchecked((int)(0x01040460));

			public const int add_account_label = unchecked((int)(0x0104045e));

			/// <summary>Text of the alert that is displayed when an application has crashed.</summary>
			/// <remarks>Text of the alert that is displayed when an application has crashed.</remarks>
			public const int aerr_application = unchecked((int)(0x01040397));

			/// <summary>Text of the alert that is displayed when an application has crashed.</summary>
			/// <remarks>Text of the alert that is displayed when an application has crashed.</remarks>
			public const int aerr_process = unchecked((int)(0x01040398));

			/// <summary>Title of the alert when an application has crashed.</summary>
			/// <remarks>Title of the alert when an application has crashed.</remarks>
			public const int aerr_title = unchecked((int)(0x01040396));

			public const int allow = unchecked((int)(0x01040428));

			/// <summary>Do Not Translate: Alternate eri.xml</summary>
			public const int alternate_eri_file = unchecked((int)(0x01040431));

			/// <summary>Option to always use the selected application resolution in the future.</summary>
			/// <remarks>Option to always use the selected application resolution in the future. See the "Complete action using" dialog title
			/// 	</remarks>
			public const int alwaysUse = unchecked((int)(0x01040391));

			public const int am = unchecked((int)(0x01040070));

			/// <summary>Label for the Android system components when they are shown to the user.
			/// 	</summary>
			/// <remarks>Label for the Android system components when they are shown to the user.
			/// 	</remarks>
			public const int android_system_label = unchecked((int)(0x0104012e));

			/// <summary>[CHAR LIMIT=NONE] Message shown in upgrading dialog for each .apk that is optimized.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=NONE] Message shown in upgrading dialog for each .apk that is optimized.
			/// 	</remarks>
			public const int android_upgrading_apk = unchecked((int)(0x010403aa));

			/// <summary>[CHAR LIMIT=NONE] Message to show in upgrading dialog when the bulk of the upgrade work is done.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=NONE] Message to show in upgrading dialog when the bulk of the upgrade work is done.
			/// 	</remarks>
			public const int android_upgrading_complete = unchecked((int)(0x010403ac));

			/// <summary>[CHAR LIMIT=NONE] Message to show in upgrading dialog when reached the point of starting apps.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=NONE] Message to show in upgrading dialog when reached the point of starting apps.
			/// 	</remarks>
			public const int android_upgrading_starting_apps = unchecked((int)(0x010403ab));

			/// <summary>[CHAR LIMIT=40] Title of dialog that is shown when performing a system upgrade.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=40] Title of dialog that is shown when performing a system upgrade.
			/// 	</remarks>
			public const int android_upgrading_title = unchecked((int)(0x010403a9));

			/// <summary>Text of the alert that is displayed when an application is not responding.
			/// 	</summary>
			/// <remarks>Text of the alert that is displayed when an application is not responding.
			/// 	</remarks>
			public const int anr_activity_application = unchecked((int)(0x0104039a));

			/// <summary>Text of the alert that is displayed when an application is not responding.
			/// 	</summary>
			/// <remarks>Text of the alert that is displayed when an application is not responding.
			/// 	</remarks>
			public const int anr_activity_process = unchecked((int)(0x0104039b));

			/// <summary>Text of the alert that is displayed when an application is not responding.
			/// 	</summary>
			/// <remarks>Text of the alert that is displayed when an application is not responding.
			/// 	</remarks>
			public const int anr_application_process = unchecked((int)(0x0104039c));

			/// <summary>Text of the alert that is displayed when an application is not responding.
			/// 	</summary>
			/// <remarks>Text of the alert that is displayed when an application is not responding.
			/// 	</remarks>
			public const int anr_process = unchecked((int)(0x0104039d));

			/// <summary>Title of the alert when an application is not responding.</summary>
			/// <remarks>Title of the alert when an application is not responding.</remarks>
			public const int anr_title = unchecked((int)(0x01040399));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// zh-CN
			/// </remarks>
			public const int autofill_address_line_1_label_re = unchecked((int)(0x0104031b));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// en-GB
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// </remarks>
			public const int autofill_address_line_1_re = unchecked((int)(0x0104031a));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// </remarks>
			public const int autofill_address_line_2_re = unchecked((int)(0x0104031c));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// es
			/// fr-FR
			/// it-IT
			/// </remarks>
			public const int autofill_address_line_3_re = unchecked((int)(0x0104031d));

			/// <summary>
			/// String used to separate FirstName and LastName when writing out a local name
			/// e.g.
			/// </summary>
			/// <remarks>
			/// String used to separate FirstName and LastName when writing out a local name
			/// e.g. John<separator>Smith [CHAR-LIMIT=NONE]
			/// </remarks>
			public const int autofill_address_name_separator = unchecked((int)(0x01040313));

			/// <summary>Format string for displaying a name and address summary.</summary>
			/// <remarks>
			/// Format string for displaying a name and address summary. $1 is the Full Name, $2 is autofill_address_summary_separator, $3 is the Address
			/// e.g. (John Smith)(, )(123 Main Street)
			/// </remarks>
			public const int autofill_address_summary_format = unchecked((int)(0x01040316));

			/// <summary>Format string for displaying a name.</summary>
			/// <remarks>
			/// Format string for displaying a name. $1 is First Name, $2 is autofill_address_name_separator, $3 is Last Name.
			/// e.g. (John)( )(Smith)
			/// </remarks>
			public const int autofill_address_summary_name_format = unchecked((int)(0x01040314
				));

			/// <summary>
			/// String used to separate Name and Address Line 1
			/// e.g.
			/// </summary>
			/// <remarks>
			/// String used to separate Name and Address Line 1
			/// e.g. John Smith<separator>123 Main Street [CHAR-LIMIT=NONE]
			/// </remarks>
			public const int autofill_address_summary_separator = unchecked((int)(0x01040315)
				);

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_address_type_same_as_re = unchecked((int)(0x01040323));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_address_type_use_my_re = unchecked((int)(0x01040324));

			/// <summary>Label in a web form for "Area" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_area = unchecked((int)(0x0104034a));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_area_code_notext_re = unchecked((int)(0x0104033d));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_area_code_re = unchecked((int)(0x01040330));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_attention_ignored_re = unchecked((int)(0x01040317));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_billing_designator_re = unchecked((int)(0x01040325));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_card_cvc_re = unchecked((int)(0x01040336));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_card_ignored_re = unchecked((int)(0x0104033a));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// ja-JP
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_card_number_re = unchecked((int)(0x01040337));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// en-AU
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_city_re = unchecked((int)(0x01040321));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// ru
			/// zh-CN
			/// </remarks>
			public const int autofill_company_re = unchecked((int)(0x01040319));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_country_code_re = unchecked((int)(0x0104033c));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// ja-JP
			/// zh-CN
			/// </remarks>
			public const int autofill_country_re = unchecked((int)(0x0104031e));

			/// <summary>Label in a web form for "County" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_county = unchecked((int)(0x01040344));

			/// <summary>Label in a web form for "Department" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_department = unchecked((int)(0x01040347));

			/// <summary>Label in a web form for "District" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_district = unchecked((int)(0x01040346));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// ja-JP
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_email_re = unchecked((int)(0x01040327));

			/// <summary>Label in a web form for "Emirate" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_emirate = unchecked((int)(0x0104034b));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// it-IT
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// </remarks>
			public const int autofill_expiration_date_re = unchecked((int)(0x01040339));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// </remarks>
			public const int autofill_expiration_month_re = unchecked((int)(0x01040338));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// fr-FR
			/// ja-JP
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_fax_re = unchecked((int)(0x0104033b));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// </remarks>
			public const int autofill_first_name_re = unchecked((int)(0x0104032b));

			/// <summary>Label in a web form for "Island" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_island = unchecked((int)(0x01040345));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// </remarks>
			public const int autofill_last_name_re = unchecked((int)(0x0104032e));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_middle_initial_re = unchecked((int)(0x0104032c));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// es
			/// </remarks>
			public const int autofill_middle_name_re = unchecked((int)(0x0104032d));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_name_on_card_contextual_re = unchecked((int)(0x01040335
				));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_name_on_card_re = unchecked((int)(0x01040334));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// es
			/// fr-FR
			/// ja-JP
			/// pt-BR, pt-PT
			/// zh-CN
			/// </remarks>
			public const int autofill_name_re = unchecked((int)(0x01040329));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// fr-FR
			/// pt-BR, pt-PT
			/// </remarks>
			public const int autofill_name_specific_re = unchecked((int)(0x0104032a));

			/// <summary>Label in a web form for "Parish" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_parish = unchecked((int)(0x01040349));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// pt-BR, pt-PT
			/// </remarks>
			public const int autofill_phone_extension_re = unchecked((int)(0x01040333));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// fr-FR
			/// pt-BR, pt-PT
			/// </remarks>
			public const int autofill_phone_prefix_re = unchecked((int)(0x01040331));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_phone_prefix_separator_re = unchecked((int)(0x0104033e)
				);

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// </remarks>
			public const int autofill_phone_re = unchecked((int)(0x0104032f));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_phone_suffix_re = unchecked((int)(0x01040332));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_phone_suffix_separator_re = unchecked((int)(0x0104033f)
				);

			/// <summary>Label in a web form for "Postal code" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_postal_code = unchecked((int)(0x01040341));

			/// <summary>Label in a web form for "Prefecture" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_prefecture = unchecked((int)(0x01040348));

			/// <summary>Label in a web form for "Province" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_province = unchecked((int)(0x01040340));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// es
			/// pt-BR, pt-PT
			/// </remarks>
			public const int autofill_region_ignored_re = unchecked((int)(0x01040318));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Regex used by AutoFill.</remarks>
			public const int autofill_shipping_designator_re = unchecked((int)(0x01040326));

			/// <summary>Label in a web form for "State" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_state = unchecked((int)(0x01040342));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// en-UK
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_state_re = unchecked((int)(0x01040322));

			/// <summary>Text to show in the auto complete drop down list on a text view when the WebView can auto fill the entire form, and the user has configured an AutoFill profile [CHAR-LIMIT=8]
			/// 	</summary>
			public const int autofill_this_form = unchecked((int)(0x01040311));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// zh-CN
			/// </remarks>
			public const int autofill_username_re = unchecked((int)(0x01040328));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// pt-BR, pt-PT
			/// </remarks>
			public const int autofill_zip_4_re = unchecked((int)(0x01040320));

			/// <summary>Label in a web form for "ZIP code" [CHAR-LIMIT=NONE]</summary>
			public const int autofill_zip_code = unchecked((int)(0x01040343));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate. Regex used by AutoFill.
			/// de-DE
			/// es
			/// fr-FR
			/// it-IT
			/// ja-JP
			/// pt-BR, pt-PT
			/// ru
			/// zh-CN
			/// zh-TW
			/// </remarks>
			public const int autofill_zip_code_re = unchecked((int)(0x0104031f));

			/// <summary>Strings for possible PreferenceActivity Back/Next buttons</summary>
			public const int back_button_label = unchecked((int)(0x0104043e));

			/// <summary>Displayed when a SIM PIN password is entered incorrectly.</summary>
			/// <remarks>Displayed when a SIM PIN password is entered incorrectly.</remarks>
			public const int badPin = unchecked((int)(0x010400c5));

			/// <summary>Displayed when a SIM PUK password is entered incorrectly.</summary>
			/// <remarks>Displayed when a SIM PUK password is entered incorrectly.</remarks>
			public const int badPuk = unchecked((int)(0x010400c6));

			/// <summary>String used to display the date.</summary>
			/// <remarks>String used to display the date. This is the string to say something happened more than 1 month ago.
			/// 	</remarks>
			public const int beforeOneMonthDurationPast = unchecked((int)(0x0104036b));

			/// <summary>Suffix added to a number to signify size in bytes.</summary>
			/// <remarks>Suffix added to a number to signify size in bytes.</remarks>
			public const int byteShort = unchecked((int)(0x010400b3));

			/// <summary>Preference framework strings.</summary>
			/// <remarks>Preference framework strings.</remarks>
			public const int cancel = unchecked((int)(0x01040000));

			public const int candidates_style = unchecked((int)(0x01040408));

			/// <summary>Default text for a button that can be toggled on and off.</summary>
			/// <remarks>Default text for a button that can be toggled on and off.</remarks>
			public const int capital_off = unchecked((int)(0x0104038f));

			/// <summary>Default text for a button that can be toggled on and off.</summary>
			/// <remarks>Default text for a button that can be toggled on and off.</remarks>
			public const int capital_on = unchecked((int)(0x0104038e));

			public const int car_mode_disable_notification_message = unchecked((int)(0x0104043b
				));

			/// <summary>
			/// Strings for car mode notification
			/// Shown when car mode is enabled
			/// </summary>
			public const int car_mode_disable_notification_title = unchecked((int)(0x0104043a
				));

			/// <summary>Displayed when the call forwarding query was forwarded.</summary>
			/// <remarks>Displayed when the call forwarding query was forwarded.</remarks>
			public const int cfTemplateForwarded = unchecked((int)(0x010400ff));

			/// <summary>Displayed when the call forwarding query will be forwarded after some time.
			/// 	</summary>
			/// <remarks>Displayed when the call forwarding query will be forwarded after some time.
			/// 	</remarks>
			public const int cfTemplateForwardedTime = unchecked((int)(0x01040100));

			/// <summary>Displayed when the call forwarding query was not able to be forwarded.</summary>
			/// <remarks>Displayed when the call forwarding query was not able to be forwarded.</remarks>
			public const int cfTemplateNotForwarded = unchecked((int)(0x010400fe));

			/// <summary>Displayed when the call forwarding query was set but forwarding is not enabled.
			/// 	</summary>
			/// <remarks>Displayed when the call forwarding query was set but forwarding is not enabled.
			/// 	</remarks>
			public const int cfTemplateRegistered = unchecked((int)(0x01040101));

			/// <summary>Displayed when the call forwarding query was set but forwarding is not enabled.
			/// 	</summary>
			/// <remarks>Displayed when the call forwarding query was set but forwarding is not enabled.
			/// 	</remarks>
			public const int cfTemplateRegisteredTime = unchecked((int)(0x01040102));

			/// <summary>
			/// CheckBox - accessibility support
			/// Description of the checked state of a CheckBox.
			/// </summary>
			/// <remarks>
			/// CheckBox - accessibility support
			/// Description of the checked state of a CheckBox. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int checkbox_checked = unchecked((int)(0x01040471));

			/// <summary>Description of the not checked state of a CheckBox.</summary>
			/// <remarks>Description of the not checked state of a CheckBox. [CHAR LIMIT=NONE]</remarks>
			public const int checkbox_not_checked = unchecked((int)(0x01040472));

			/// <summary>Default title for the activity chooser, when one is not given.</summary>
			/// <remarks>Default title for the activity chooser, when one is not given. Android allows multiple activities to perform an action.  for example, there may be many ringtone pickers installed.  A dialog is shown to the user allowing him to pick which activity should be used.  This is the title.
			/// 	</remarks>
			public const int chooseActivity = unchecked((int)(0x01040393));

			/// <summary>title for the USB activity chooser.</summary>
			/// <remarks>title for the USB activity chooser.</remarks>
			public const int chooseUsbActivity = unchecked((int)(0x01040394));

			/// <summary>Choose Account Activity label</summary>
			public const int choose_account_label = unchecked((int)(0x0104045d));

			public const int choose_account_text = unchecked((int)(0x0104045f));

			/// <summary>Dialog title for user to select a different wallpaper from service list</summary>
			public const int chooser_wallpaper = unchecked((int)(0x01040430));

			/// <summary>Text displayed when the user selects the check box for setting default application.
			/// 	</summary>
			/// <remarks>Text displayed when the user selects the check box for setting default application.  See the "Use by default for this action" check box.
			/// 	</remarks>
			public const int clearDefaultHintMsg = unchecked((int)(0x01040392));

			public const int common_last_name_prefixes = unchecked((int)(0x010400ae));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int common_name = unchecked((int)(0x010404a6));

			public const int common_name_conjunctions = unchecked((int)(0x010400af));

			public const int common_name_prefixes = unchecked((int)(0x010400ac));

			public const int common_name_suffixes = unchecked((int)(0x010400ad));

			/// <summary>The default iface on which to monitor data use</summary>
			public const int config_datause_iface = unchecked((int)(0x0104001e));

			/// <summary>IP address of the dns server to use if nobody else suggests one</summary>
			public const int config_default_dns_server = unchecked((int)(0x0104001f));

			/// <summary>Regex of wired ethernet ifaces</summary>
			public const int config_ethernet_iface_regex = unchecked((int)(0x01040018));

			/// <summary>Component name of the service providing geocoder API support.</summary>
			/// <remarks>Component name of the service providing geocoder API support.</remarks>
			public const int config_geocodeProvider = unchecked((int)(0x0104001d));

			/// <summary>Path to an ISO image to be shared with via USB mass storage.</summary>
			/// <remarks>
			/// Path to an ISO image to be shared with via USB mass storage.
			/// This is intended to allow packaging drivers or tools for installation on a PC.
			/// </remarks>
			public const int config_isoImagePath = unchecked((int)(0x01040022));

			/// <summary>Component name of the service providing network location support.</summary>
			/// <remarks>Component name of the service providing network location support.</remarks>
			public const int config_networkLocationProvider = unchecked((int)(0x0104001c));

			/// <summary>Remote server that can provide NTP responses.</summary>
			/// <remarks>Remote server that can provide NTP responses.</remarks>
			public const int config_ntpServer = unchecked((int)(0x01040023));

			/// <summary>String containing the apn value for tethering.</summary>
			/// <remarks>
			/// String containing the apn value for tethering.  May be overriden by secure settings
			/// TETHER_DUN_APN.  Value is a comma separated series of strings:
			/// "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
			/// note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN"
			/// String containing the apn value for tethering.  May be overriden by secure settings
			/// TETHER_DUN_APN.  Value is a comma separated series of strings:
			/// "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
			/// note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN"
			/// </remarks>
			public const int config_tether_apndata = unchecked((int)(0x01040019));

			/// <summary>
			/// The URL that should be sent in an x-wap-profile header with an HTTP request,
			/// as defined in the Open Mobile Alliance User Agent Profile specification
			/// OMA-TS-UAProf-V2_0-20060206-A Section 8.1.1.1.
			/// </summary>
			/// <remarks>
			/// The URL that should be sent in an x-wap-profile header with an HTTP request,
			/// as defined in the Open Mobile Alliance User Agent Profile specification
			/// OMA-TS-UAProf-V2_0-20060206-A Section 8.1.1.1. If the URL contains a '%s'
			/// format string then that substring will be replaced with the value of
			/// Build.MODEL. The format string shall not be escaped.
			/// </remarks>
			public const int config_useragentprofile_url = unchecked((int)(0x01040021));

			/// <summary>Device type information conforming to Annex B format in WiFi Direct specification.
			/// 	</summary>
			/// <remarks>
			/// Device type information conforming to Annex B format in WiFi Direct specification.
			/// The default represents a dual-mode smartphone
			/// </remarks>
			public const int config_wifi_p2p_device_type = unchecked((int)(0x0104001a));

			/// <summary>Title of a button to open the settings for input methods [CHAR LIMIT=30]
			/// 	</summary>
			public const int configure_input_methods = unchecked((int)(0x01040405));

			/// <summary>A notification is shown when there is a sync error.</summary>
			/// <remarks>A notification is shown when there is a sync error.  This is the text that will scroll through the notification bar (will be seen by the user as he uses another application).
			/// 	</remarks>
			public const int contentServiceSync = unchecked((int)(0x01040114));

			/// <summary>A notification is shown when there is a sync error.</summary>
			/// <remarks>A notification is shown when there is a sync error.  This is the title of the notification.  It will be seen in the pull-down notification tray.
			/// 	</remarks>
			public const int contentServiceSyncNotificationTitle = unchecked((int)(0x01040115
				));

			/// <summary>A notification is shown when there is a sync error.</summary>
			/// <remarks>A notification is shown when there is a sync error.  This is the message of the notification.  It describes the error, in this case is there were too many deletes. The argument is the type of content, for example Gmail or Calendar. It will be seen in the pull-down notification tray.
			/// 	</remarks>
			public const int contentServiceTooManyDeletesNotificationDesc = unchecked((int)(0x01040116
				));

			/// <summary>
			/// Slide lock screen
			/// Description of the sliding handle in the Slide unlock screen.
			/// </summary>
			/// <remarks>
			/// Slide lock screen
			/// Description of the sliding handle in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int content_description_sliding_handle = unchecked((int)(0x01040483)
				);

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu. This action is used to cut selected the text into the clipboard.
			/// 	</remarks>
			public const int copy = unchecked((int)(0x01040001));

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard.
			/// 	</remarks>
			public const int copyUrl = unchecked((int)(0x01040002));

			/// <summary>This string appears (on two lines) when you type a number into contacts search, to let you create a contact whose phone number is the number you typed.
			/// 	</summary>
			/// <remarks>This string appears (on two lines) when you type a number into contacts search, to let you create a contact whose phone number is the number you typed.  The first line will be in bigger type than the second.
			/// 	</remarks>
			public const int create_contact_using = unchecked((int)(0x01040424));

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu.  This action is used to cut selected the text into the clipboard.
			/// 	</remarks>
			public const int cut = unchecked((int)(0x01040003));

			/// <summary>Notification title when 2G-3G data usage has exceeded limit threshold.</summary>
			/// <remarks>Notification title when 2G-3G data usage has exceeded limit threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_3g_limit_snoozed_title = unchecked((int)(0x0104049c));

			/// <summary>Notification title when 2G-3G data usage has exceeded limit threshold, and has been disabled.
			/// 	</summary>
			/// <remarks>Notification title when 2G-3G data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_3g_limit_title = unchecked((int)(0x01040497));

			/// <summary>Notification title when 4G data usage has exceeded limit threshold.</summary>
			/// <remarks>Notification title when 4G data usage has exceeded limit threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_4g_limit_snoozed_title = unchecked((int)(0x0104049d));

			/// <summary>Notification title when 4G data usage has exceeded limit threshold, and has been disabled.
			/// 	</summary>
			/// <remarks>Notification title when 4G data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_4g_limit_title = unchecked((int)(0x01040498));

			/// <summary>Notification body when data usage has exceeded limit threshold, and has been disabled.
			/// 	</summary>
			/// <remarks>Notification body when data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_limit_body = unchecked((int)(0x0104049b));

			/// <summary>Notification body when data usage has exceeded limit threshold.</summary>
			/// <remarks>Notification body when data usage has exceeded limit threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_limit_snoozed_body = unchecked((int)(0x010404a0));

			/// <summary>Notification title when mobile data usage has exceeded limit threshold.</summary>
			/// <remarks>Notification title when mobile data usage has exceeded limit threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_mobile_limit_snoozed_title = unchecked((int)(0x0104049e
				));

			/// <summary>Notification title when mobile data usage has exceeded limit threshold, and has been disabled.
			/// 	</summary>
			/// <remarks>Notification title when mobile data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_mobile_limit_title = unchecked((int)(0x01040499));

			/// <summary>Notification body when background data usage is limited.</summary>
			/// <remarks>Notification body when background data usage is limited. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_restricted_body = unchecked((int)(0x010404a2));

			/// <summary>Notification title when background data usage is limited.</summary>
			/// <remarks>Notification title when background data usage is limited. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_restricted_title = unchecked((int)(0x010404a1));

			/// <summary>Notification body when data usage has exceeded warning threshold.</summary>
			/// <remarks>Notification body when data usage has exceeded warning threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_warning_body = unchecked((int)(0x01040496));

			/// <summary>Notification title when data usage has exceeded warning threshold.</summary>
			/// <remarks>Notification title when data usage has exceeded warning threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_warning_title = unchecked((int)(0x01040495));

			/// <summary>Notification title when Wi-Fi data usage has exceeded limit threshold.</summary>
			/// <remarks>Notification title when Wi-Fi data usage has exceeded limit threshold. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_wifi_limit_snoozed_title = unchecked((int)(0x0104049f
				));

			/// <summary>Notification title when Wi-Fi data usage has exceeded limit threshold, and has been disabled.
			/// 	</summary>
			/// <remarks>Notification title when Wi-Fi data usage has exceeded limit threshold, and has been disabled. [CHAR LIMIT=32]
			/// 	</remarks>
			public const int data_usage_wifi_limit_title = unchecked((int)(0x0104049a));

			public const int date1_date2 = unchecked((int)(0x0104008a));

			public const int date1_time1_date2_time2 = unchecked((int)(0x01040095));

			public const int date_and_time = unchecked((int)(0x0104007f));

			/// <summary>Description of the button to decrement the DatePicker's day value.</summary>
			/// <remarks>Description of the button to decrement the DatePicker's day value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int date_picker_decrement_day_button = unchecked((int)(0x0104046e));

			/// <summary>Description of the button to decrement the DatePicker's month value.</summary>
			/// <remarks>Description of the button to decrement the DatePicker's month value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int date_picker_decrement_month_button = unchecked((int)(0x0104046c)
				);

			/// <summary>Description of the button to decrement the DatePicker's year value.</summary>
			/// <remarks>Description of the button to decrement the DatePicker's year value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int date_picker_decrement_year_button = unchecked((int)(0x01040470));

			/// <summary>The title of the date picker dialog.</summary>
			/// <remarks>The title of the date picker dialog. [CHAR LIMIT=NONE]</remarks>
			public const int date_picker_dialog_title = unchecked((int)(0x010403e1));

			/// <summary>Description of the button to increment the DatePicker's day value.</summary>
			/// <remarks>Description of the button to increment the DatePicker's day value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int date_picker_increment_day_button = unchecked((int)(0x0104046d));

			/// <summary>
			/// DatePicker - accessibility support
			/// Description of the button to increment the DatePicker's month value.
			/// </summary>
			/// <remarks>
			/// DatePicker - accessibility support
			/// Description of the button to increment the DatePicker's month value. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int date_picker_increment_month_button = unchecked((int)(0x0104046b)
				);

			/// <summary>Description of the button to increment the DatePicker's year value.</summary>
			/// <remarks>Description of the button to increment the DatePicker's year value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int date_picker_increment_year_button = unchecked((int)(0x0104046f));

			public const int date_time = unchecked((int)(0x01040080));

			/// <summary>Name of the button in the date/time picker to accept the date/time change
			/// 	</summary>
			public const int date_time_set = unchecked((int)(0x010403e2));

			/// <summary>Appened to express the value is this unit of time: singular day</summary>
			public const int day = unchecked((int)(0x01040371));

			public const int day_of_week_long_friday = unchecked((int)(0x01040059));

			public const int day_of_week_long_monday = unchecked((int)(0x01040055));

			public const int day_of_week_long_saturday = unchecked((int)(0x0104005a));

			public const int day_of_week_long_sunday = unchecked((int)(0x01040054));

			public const int day_of_week_long_thursday = unchecked((int)(0x01040058));

			public const int day_of_week_long_tuesday = unchecked((int)(0x01040056));

			public const int day_of_week_long_wednesday = unchecked((int)(0x01040057));

			public const int day_of_week_medium_friday = unchecked((int)(0x01040060));

			public const int day_of_week_medium_monday = unchecked((int)(0x0104005c));

			public const int day_of_week_medium_saturday = unchecked((int)(0x01040061));

			public const int day_of_week_medium_sunday = unchecked((int)(0x0104005b));

			public const int day_of_week_medium_thursday = unchecked((int)(0x0104005f));

			public const int day_of_week_medium_tuesday = unchecked((int)(0x0104005d));

			public const int day_of_week_medium_wednesday = unchecked((int)(0x0104005e));

			public const int day_of_week_short_friday = unchecked((int)(0x01040067));

			public const int day_of_week_short_monday = unchecked((int)(0x01040063));

			public const int day_of_week_short_saturday = unchecked((int)(0x01040068));

			public const int day_of_week_short_sunday = unchecked((int)(0x01040062));

			public const int day_of_week_short_thursday = unchecked((int)(0x01040066));

			public const int day_of_week_short_tuesday = unchecked((int)(0x01040064));

			public const int day_of_week_short_wednesday = unchecked((int)(0x01040065));

			public const int day_of_week_shortest_friday = unchecked((int)(0x0104006e));

			public const int day_of_week_shortest_monday = unchecked((int)(0x0104006a));

			public const int day_of_week_shortest_saturday = unchecked((int)(0x0104006f));

			public const int day_of_week_shortest_sunday = unchecked((int)(0x01040069));

			public const int day_of_week_shortest_thursday = unchecked((int)(0x0104006d));

			public const int day_of_week_shortest_tuesday = unchecked((int)(0x0104006b));

			public const int day_of_week_shortest_wednesday = unchecked((int)(0x0104006c));

			/// <summary>Appened to express the value is this unit of time: plural days</summary>
			public const int days = unchecked((int)(0x01040372));

			/// <summary>What the UI should display for "Msisdn" unless overridden by the SIM</summary>
			public const int defaultMsisdnAlphaTag = unchecked((int)(0x01040005));

			/// <summary>What the UI should display for "voice mail" unless overridden by the SIM
			/// 	</summary>
			public const int defaultVoiceMailAlphaTag = unchecked((int)(0x01040004));

			/// <summary>
			/// Security Permissions strings
			/// The default permission group for any permissions that have not explicitly set a group.
			/// </summary>
			/// <remarks>
			/// Security Permissions strings
			/// The default permission group for any permissions that have not explicitly set a group.
			/// </remarks>
			public const int default_permission_group = unchecked((int)(0x010403e3));

			/// <summary>Default text encoding for WebSettings.</summary>
			/// <remarks>
			/// Default text encoding for WebSettings.
			/// Default text encoding for WebSettings.
			/// </remarks>
			public const int default_text_encoding = unchecked((int)(0x010400b0));

			/// <summary>Component name of the default wallpaper.</summary>
			/// <remarks>
			/// Component name of the default wallpaper. This will be ImageWallpaper if not
			/// specified
			/// </remarks>
			public const int default_wallpaper_component = unchecked((int)(0x0104001b));

			/// <summary>Item on EditText pop-up window.</summary>
			/// <remarks>Item on EditText pop-up window. This action is used to delete the text that the user recently added. [CHAR LIMIT=15]
			/// 	</remarks>
			public const int delete = unchecked((int)(0x01040385));

			/// <summary>Option to delete the highlighted part of the text from the suggestion popup.
			/// 	</summary>
			/// <remarks>Option to delete the highlighted part of the text from the suggestion popup. [CHAR LIMIT=25]
			/// 	</remarks>
			public const int deleteText = unchecked((int)(0x01040388));

			public const int deny = unchecked((int)(0x01040429));

			/// <summary>Description of the down direction in which one can to slide the handle in the Slide unlock screen.
			/// 	</summary>
			/// <remarks>Description of the down direction in which one can to slide the handle in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_direction_down = unchecked((int)(0x01040485));

			/// <summary>Description of the left direction in which one can to slide the handle in the Slide unlock screen.
			/// 	</summary>
			/// <remarks>Description of the left direction in which one can to slide the handle in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_direction_left = unchecked((int)(0x01040486));

			/// <summary>Description of the right direction in which one can to slide the handle in the Slide unlock screen.
			/// 	</summary>
			/// <remarks>Description of the right direction in which one can to slide the handle in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_direction_right = unchecked((int)(0x01040487));

			/// <summary>Description of the up direction in which one can to slide the handle in the Slide unlock screen.
			/// 	</summary>
			/// <remarks>Description of the up direction in which one can to slide the handle in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_direction_up = unchecked((int)(0x01040484));

			/// <summary>Description of the camera target in the Slide unlock screen.</summary>
			/// <remarks>Description of the camera target in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_target_camera = unchecked((int)(0x01040489));

			/// <summary>Description of the silent target in the Slide unlock screen.</summary>
			/// <remarks>Description of the silent target in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_target_silent = unchecked((int)(0x0104048a));

			/// <summary>Description of the sound on target in the Slide unlock screen.</summary>
			/// <remarks>Description of the sound on target in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_target_soundon = unchecked((int)(0x0104048b));

			/// <summary>Description of the unlock target in the Slide unlock screen.</summary>
			/// <remarks>Description of the unlock target in the Slide unlock screen. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int description_target_unlock = unchecked((int)(0x01040488));

			/// <summary>This string appears (on two lines) when you type a number into contacts search, to let you dial the phone number you typed.
			/// 	</summary>
			/// <remarks>This string appears (on two lines) when you type a number into contacts search, to let you dial the phone number you typed.  The first line will be in bigger type than the second.
			/// 	</remarks>
			public const int dial_number_using = unchecked((int)(0x01040423));

			/// <summary>This is the generic "attention" string to be used in attention dialogs.</summary>
			/// <remarks>
			/// This is the generic "attention" string to be used in attention dialogs.  Typically
			/// combined with setIconAttribute(android.R.attr.alertDialogIcon)
			/// (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform)
			/// </remarks>
			public const int dialog_alert_title = unchecked((int)(0x01040014));

			/// <summary>USB_STORAGE_KILL_STORAGE_USERS dialog message text</summary>
			public const int dlg_confirm_kill_storage_users_text = unchecked((int)(0x010403f6
				));

			/// <summary>USB_STORAGE_KILL_STORAGE_USERS dialog</summary>
			public const int dlg_confirm_kill_storage_users_title = unchecked((int)(0x010403f5
				));

			/// <summary>
			/// USB_STORAGE_ERROR dialog  dialog
			/// outdated translation 8048999973837339174
			/// </summary>
			public const int dlg_error_title = unchecked((int)(0x010403f7));

			/// <summary>USB_STORAGE_ERROR dialog  ok button</summary>
			public const int dlg_ok = unchecked((int)(0x010403f8));

			/// <summary>Toast for double-tap</summary>
			public const int double_tap_toast = unchecked((int)(0x01040310));

			/// <summary>Title for EditText context menu [CHAR LIMIT=20]</summary>
			public const int editTextMenuTitle = unchecked((int)(0x0104038a));

			/// <summary>
			/// Format string for times like "1:43:33" (1 hour, 43 minutes, 33 seconds)
			/// no translation found for elapsed_time_short_format_h_mm_ss (2997059666628785039)
			/// no translation found for elapsed_time_short_format_h_mm_ss (2997059666628785039)
			/// </summary>
			public const int elapsed_time_short_format_h_mm_ss = unchecked((int)(0x01040383));

			/// <summary>
			/// Format string for durations like "01:23" (1 minute, 23 seconds)
			/// no translation found for elapsed_time_short_format_mm_ss (1294409362352514646)
			/// no translation found for elapsed_time_short_format_mm_ss (1294409362352514646)
			/// </summary>
			public const int elapsed_time_short_format_mm_ss = unchecked((int)(0x01040382));

			/// <summary>
			/// Used to replace a range of characters in text that is too wide
			/// for the space allocated to it (three dots).
			/// </summary>
			/// <remarks>
			/// Used to replace a range of characters in text that is too wide
			/// for the space allocated to it (three dots).
			/// </remarks>
			public const int ellipsis = unchecked((int)(0x010400ba));

			/// <summary>
			/// Used to replace a range of characters in text that is too wide
			/// for the space allocated to it (two dots).
			/// </summary>
			/// <remarks>
			/// Used to replace a range of characters in text that is too wide
			/// for the space allocated to it (two dots).
			/// </remarks>
			public const int ellipsis_two_dots = unchecked((int)(0x010400bb));

			/// <summary>Custom email type</summary>
			public const int emailTypeCustom = unchecked((int)(0x01040294));

			/// <summary>Home email type</summary>
			public const int emailTypeHome = unchecked((int)(0x01040295));

			/// <summary>Mobile email type</summary>
			public const int emailTypeMobile = unchecked((int)(0x01040298));

			/// <summary>Other email type</summary>
			public const int emailTypeOther = unchecked((int)(0x01040297));

			/// <summary>Work email type</summary>
			public const int emailTypeWork = unchecked((int)(0x01040296));

			/// <summary>This can be used in any application wanting to disable the text "Emergency number"
			/// 	</summary>
			public const int emergency_call_dialog_number_for_display = unchecked((int)(0x010402ca
				));

			/// <summary>Shown in the lock screen when there is emergency calls only mode.</summary>
			/// <remarks>Shown in the lock screen when there is emergency calls only mode.</remarks>
			public const int emergency_calls_only = unchecked((int)(0x010402e3));

			/// <summary>How to display the lack of a phone number</summary>
			public const int emptyPhoneNumber = unchecked((int)(0x01040006));

			/// <summary>Label for an anniversary event  [CHAR LIMIT=20]</summary>
			public const int eventTypeAnniversary = unchecked((int)(0x01040292));

			/// <summary>Label for a birthday event  [CHAR LIMIT=20]</summary>
			public const int eventTypeBirthday = unchecked((int)(0x01040291));

			/// <summary>Label for custom events  [CHAR LIMIT=20]</summary>
			public const int eventTypeCustom = unchecked((int)(0x01040290));

			/// <summary>
			/// Label for other events  [CHAR LIMIT=20]
			/// outdated translation 5834288791948564594
			/// </summary>
			public const int eventTypeOther = unchecked((int)(0x01040293));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int expires_on = unchecked((int)(0x010404ac));

			/// <summary>outdated translation 7260183293747448241</summary>
			public const int ext_media_badremoval_notification_message = unchecked((int)(0x01040410
				));

			/// <summary>
			/// Shown when external media is unsafely removed
			/// outdated translation 6872152882604407837
			/// </summary>
			public const int ext_media_badremoval_notification_title = unchecked((int)(0x0104040f
				));

			public const int ext_media_checking_notification_message = unchecked((int)(0x0104040a
				));

			/// <summary>
			/// Shown when external media is being checked
			/// outdated translation 5457603418970994050
			/// </summary>
			public const int ext_media_checking_notification_title = unchecked((int)(0x01040409
				));

			/// <summary>outdated translation 1312266820092958014</summary>
			public const int ext_media_nofs_notification_message = unchecked((int)(0x0104040c
				));

			/// <summary>
			/// Shown when external media is blank (or unsupported filesystem)
			/// outdated translation 780477838241212997
			/// </summary>
			public const int ext_media_nofs_notification_title = unchecked((int)(0x0104040b));

			/// <summary>outdated translation 4205117227342822275</summary>
			public const int ext_media_nomedia_notification_message = unchecked((int)(0x01040414
				));

			/// <summary>
			/// Shown when external media is missing
			/// outdated translation 8902518030404381318
			/// </summary>
			public const int ext_media_nomedia_notification_title = unchecked((int)(0x01040413
				));

			/// <summary>outdated translation 7613960686747592770</summary>
			public const int ext_media_safe_unmount_notification_message = unchecked((int)(0x01040412
				));

			/// <summary>
			/// Shown when external media has been safely removed
			/// outdated translation 6729801130790616200
			/// </summary>
			public const int ext_media_safe_unmount_notification_title = unchecked((int)(0x01040411
				));

			/// <summary>outdated translation 2679412884290061775</summary>
			public const int ext_media_unmountable_notification_message = unchecked((int)(0x0104040e
				));

			/// <summary>
			/// Shown when external media is unmountable (corrupt))
			/// outdated translation 6410723906019100189
			/// </summary>
			public const int ext_media_unmountable_notification_title = unchecked((int)(0x0104040d
				));

			/// <summary>See EXTMEDIA_FORMAT.</summary>
			/// <remarks>See EXTMEDIA_FORMAT.    This is the button text to format the sd card.</remarks>
			public const int extmedia_format_button_format = unchecked((int)(0x01040400));

			/// <summary>See EXTMEDIA_FORMAT.</summary>
			/// <remarks>
			/// See EXTMEDIA_FORMAT.   This is the message.
			/// outdated translation 3621369962433523619
			/// </remarks>
			public const int extmedia_format_message = unchecked((int)(0x010403ff));

			/// <summary>See EXTMEDIA_FORMAT.</summary>
			/// <remarks>
			/// See EXTMEDIA_FORMAT.  EXTMEDIA_FORMAT_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to format the SD card.  This is the title.
			/// outdated translation 8663247929551095854
			/// </remarks>
			public const int extmedia_format_title = unchecked((int)(0x010403fe));

			/// <summary>Button text for the edit menu in input method extract mode.</summary>
			/// <remarks>Button text for the edit menu in input method extract mode. [CHAR LIMIT=16]
			/// 	</remarks>
			public const int extract_edit_menu_button = unchecked((int)(0x01040494));

			/// <summary>Title of the alert when something went wrong in the factory test.</summary>
			/// <remarks>Title of the alert when something went wrong in the factory test.</remarks>
			public const int factorytest_failed = unchecked((int)(0x01040306));

			/// <summary>Error message displayed when the factory test could not be started.</summary>
			/// <remarks>Error message displayed when the factory test could not be started.</remarks>
			public const int factorytest_no_action = unchecked((int)(0x01040308));

			/// <summary>Error message displayed when a non-system application tries to start a factory test.
			/// 	</summary>
			/// <remarks>Error message displayed when a non-system application tries to start a factory test.
			/// 	</remarks>
			public const int factorytest_not_system = unchecked((int)(0x01040307));

			/// <summary>Button to restart the device after the factory test.</summary>
			/// <remarks>Button to restart the device after the factory test.</remarks>
			public const int factorytest_reboot = unchecked((int)(0x01040309));

			public const int fast_scroll_alphabet = unchecked((int)(0x01040406));

			public const int fast_scroll_numeric_alphabet = unchecked((int)(0x01040407));

			/// <summary>Displayed when a feature code (non-phone number) is dialed and completes successfully.
			/// 	</summary>
			/// <remarks>Displayed when a feature code (non-phone number) is dialed and completes successfully.
			/// 	</remarks>
			public const int fcComplete = unchecked((int)(0x01040103));

			/// <summary>Displayed when a feature code (non-phone number) is dialed and completes unsuccessfully.
			/// 	</summary>
			/// <remarks>Displayed when a feature code (non-phone number) is dialed and completes unsuccessfully.
			/// 	</remarks>
			public const int fcError = unchecked((int)(0x01040104));

			/// <summary>
			/// Format string used to add a suffix like "KB" or "MB" to a number
			/// to display a size in kilobytes, megabytes, or other size units.
			/// </summary>
			/// <remarks>
			/// Format string used to add a suffix like "KB" or "MB" to a number
			/// to display a size in kilobytes, megabytes, or other size units.
			/// Some languages (like French) will want to add a space between
			/// the placeholders.
			/// </remarks>
			public const int fileSizeSuffix = unchecked((int)(0x010400b9));

			/// <summary>ActionBar action to use the current selection to open the Find on page functionality [CHAR LIMIT=10]
			/// 	</summary>
			public const int find = unchecked((int)(0x01040451));

			/// <summary>Find dialog hint text.</summary>
			/// <remarks>Find dialog hint text.  Also used in the menu item to open find on page [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int find_on_page = unchecked((int)(0x01040446));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int fingerprints = unchecked((int)(0x010404ae));

			/// <summary>Button allowing the user to close an application that is not responding.
			/// 	</summary>
			/// <remarks>
			/// Button allowing the user to close an application that is not responding. This will kill the application.
			/// outdated translation 3653416315450806396
			/// </remarks>
			public const int force_close = unchecked((int)(0x0104039e));

			/// <summary>Text for message to user that an error happened when formatting SD card [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int format_error = unchecked((int)(0x0104044a));

			public const int full_wday_month_day_no_year = unchecked((int)(0x010400aa));

			/// <summary>Shown in gadget hosts (e.g.</summary>
			/// <remarks>
			/// Shown in gadget hosts (e.g. the home screen) when there was an error inflating
			/// the gadget.
			/// </remarks>
			public const int gadget_host_error_inflating = unchecked((int)(0x0104041b));

			/// <summary>Suffix added to a number to signify size in gigabytes.</summary>
			/// <remarks>Suffix added to a number to signify size in gigabytes.</remarks>
			public const int gigabyteShort = unchecked((int)(0x010400b6));

			/// <summary>label for item that locks the phone in the phone options dialog</summary>
			public const int global_action_lock = unchecked((int)(0x01040125));

			/// <summary>label for item that turns off power in phone options dialog</summary>
			public const int global_action_power_off = unchecked((int)(0x01040126));

			/// <summary>status message in phone options dialog for when silent mode is disabled</summary>
			public const int global_action_silent_mode_off_status = unchecked((int)(0x01040129
				));

			/// <summary>status message in phone options dialog for when silent mode is enabled</summary>
			public const int global_action_silent_mode_on_status = unchecked((int)(0x01040128
				));

			/// <summary>label for item that enables silent mode in phone options dialog</summary>
			public const int global_action_toggle_silent_mode = unchecked((int)(0x01040127));

			/// <summary>
			/// Title of the Global Actions Dialog
			/// outdated translation 2406416831541615258
			/// </summary>
			public const int global_actions = unchecked((int)(0x01040124));

			/// <summary>status message in phone options dialog for when airplane mode is off</summary>
			public const int global_actions_airplane_mode_off_status = unchecked((int)(0x0104012c
				));

			/// <summary>status message in phone options dialog for when airplane mode is on</summary>
			public const int global_actions_airplane_mode_on_status = unchecked((int)(0x0104012b
				));

			/// <summary>label for item that toggles airplane mode</summary>
			public const int global_actions_toggle_airplane_mode = unchecked((int)(0x0104012a
				));

			/// <summary>Network positioning notification message.</summary>
			/// <remarks>
			/// Network positioning notification message. The name of the user (e.g. John Doe) and
			/// service (SUPL-service) who sent the request is shown as dynamic strings.
			/// Translation should not be longer than master text.
			/// </remarks>
			public const int gpsNotifMessage = unchecked((int)(0x01040455));

			/// <summary>Network positioning notification ticker.</summary>
			/// <remarks>
			/// Network positioning notification ticker. The name of the user (e.g. John Doe) who sent
			/// the request is shown as a dynamic string.
			/// </remarks>
			public const int gpsNotifTicker = unchecked((int)(0x01040453));

			/// <summary>
			/// Network positioning notification and verification title to inform the user about
			/// an incoming location request.
			/// </summary>
			/// <remarks>
			/// Network positioning notification and verification title to inform the user about
			/// an incoming location request.
			/// </remarks>
			public const int gpsNotifTitle = unchecked((int)(0x01040454));

			/// <summary>Network positioning verification No.</summary>
			/// <remarks>
			/// Network positioning verification No. Button to push to deny sharing of location
			/// information.
			/// </remarks>
			public const int gpsVerifNo = unchecked((int)(0x01040457));

			/// <summary>Network positioning verification Yes.</summary>
			/// <remarks>Network positioning verification Yes. Button to push to share location information.
			/// 	</remarks>
			public const int gpsVerifYes = unchecked((int)(0x01040456));

			public const int grant_credentials_permission_message_footer = unchecked((int)(0x01040426
				));

			public const int grant_credentials_permission_message_header = unchecked((int)(0x01040425
				));

			public const int grant_permissions_header_text = unchecked((int)(0x01040427));

			/// <summary>
			/// The default character set for GsmAlphabet
			/// Empty string means MBCS is not considered
			/// </summary>
			public const int gsm_alphabet_default_charset = unchecked((int)(0x01040020));

			/// <summary>Notification text to tell the user that a heavy-weight application is running.
			/// 	</summary>
			/// <remarks>Notification text to tell the user that a heavy-weight application is running.
			/// 	</remarks>
			public const int heavy_weight_notification = unchecked((int)(0x010403ad));

			/// <summary>Notification details to tell the user that a heavy-weight application is running.
			/// 	</summary>
			/// <remarks>Notification details to tell the user that a heavy-weight application is running.
			/// 	</remarks>
			public const int heavy_weight_notification_detail = unchecked((int)(0x010403ae));

			/// <summary>Descriptive text for switching to a new heavy-weight application.</summary>
			/// <remarks>Descriptive text for switching to a new heavy-weight application.</remarks>
			public const int heavy_weight_switcher_text = unchecked((int)(0x010403b0));

			/// <summary>Title of dialog prompting whether user wants to switch between heavy-weight apps.
			/// 	</summary>
			/// <remarks>Title of dialog prompting whether user wants to switch between heavy-weight apps.
			/// 	</remarks>
			public const int heavy_weight_switcher_title = unchecked((int)(0x010403af));

			/// <summary>Appened to express the value is this unit of time: singular hour</summary>
			public const int hour = unchecked((int)(0x01040373));

			/// <summary>A format string for 12-hour time of day, just the hour, not the minute, with lower-case "am" or "pm" (example: "3pm").
			/// 	</summary>
			/// <remarks>A format string for 12-hour time of day, just the hour, not the minute, with lower-case "am" or "pm" (example: "3pm").
			/// 	</remarks>
			public const int hour_ampm = unchecked((int)(0x01040304));

			/// <summary>A format string for 12-hour time of day, just the hour, not the minute, with capital "AM" or "PM" (example: "3PM").
			/// 	</summary>
			/// <remarks>A format string for 12-hour time of day, just the hour, not the minute, with capital "AM" or "PM" (example: "3PM").
			/// 	</remarks>
			public const int hour_cap_ampm = unchecked((int)(0x01040305));

			public const int hour_minute_24 = unchecked((int)(0x01040075));

			public const int hour_minute_ampm = unchecked((int)(0x01040076));

			public const int hour_minute_cap_ampm = unchecked((int)(0x01040077));

			/// <summary>Appened to express the value is this unit of time: plural hours</summary>
			public const int hours = unchecked((int)(0x01040374));

			/// <summary>Displayed when a web request failed with a generic network error.</summary>
			/// <remarks>
			/// Displayed when a web request failed with a generic network error.
			/// outdated translation 2567300624552921790
			/// </remarks>
			public const int httpError = unchecked((int)(0x01040106));

			/// <summary>Displayed when a web request failed because the authentication failed.</summary>
			/// <remarks>Displayed when a web request failed because the authentication failed.</remarks>
			public const int httpErrorAuth = unchecked((int)(0x01040109));

			/// <summary>Displayed when a web request failed because the URL isn't in a valid form.
			/// 	</summary>
			/// <remarks>Displayed when a web request failed because the URL isn't in a valid form.
			/// 	</remarks>
			public const int httpErrorBadUrl = unchecked((int)(0x01040007));

			/// <summary>Displayed when a web request failed because there was a connection error.
			/// 	</summary>
			/// <remarks>Displayed when a web request failed because there was a connection error.
			/// 	</remarks>
			public const int httpErrorConnect = unchecked((int)(0x0104010b));

			/// <summary>Displayed when a web request failed because the a secure connection couldn't be made to the server.
			/// 	</summary>
			/// <remarks>Displayed when a web request failed because the a secure connection couldn't be made to the server.
			/// 	</remarks>
			public const int httpErrorFailedSslHandshake = unchecked((int)(0x0104010f));

			/// <summary>Displayed when a request failed because we failed to open the file.</summary>
			/// <remarks>Displayed when a request failed because we failed to open the file.</remarks>
			public const int httpErrorFile = unchecked((int)(0x01040110));

			/// <summary>Displayed when a request failed because the file wasn't found.</summary>
			/// <remarks>Displayed when a request failed because the file wasn't found.</remarks>
			public const int httpErrorFileNotFound = unchecked((int)(0x01040111));

			/// <summary>Displayed when a web request failed because there was an input or output error.
			/// 	</summary>
			/// <remarks>
			/// Displayed when a web request failed because there was an input or output error.
			/// outdated translation 5047872902739125260
			/// </remarks>
			public const int httpErrorIO = unchecked((int)(0x0104010c));

			/// <summary>Displayed when a web request failed because the URL could not be found.</summary>
			/// <remarks>Displayed when a web request failed because the URL could not be found.</remarks>
			public const int httpErrorLookup = unchecked((int)(0x01040107));

			/// <summary>Displayed when a web request was successful.</summary>
			/// <remarks>Displayed when a web request was successful.</remarks>
			public const int httpErrorOk = unchecked((int)(0x01040105));

			/// <summary>Displayed when a web request failed because the authentication with the proxy failed.
			/// 	</summary>
			/// <remarks>Displayed when a web request failed because the authentication with the proxy failed.
			/// 	</remarks>
			public const int httpErrorProxyAuth = unchecked((int)(0x0104010a));

			/// <summary>Displayed when a web request failed because the site tried to redirect us one too many times
			/// 	</summary>
			public const int httpErrorRedirectLoop = unchecked((int)(0x0104010e));

			/// <summary>Displayed when a web request failed because the request timed out</summary>
			public const int httpErrorTimeout = unchecked((int)(0x0104010d));

			/// <summary>Displayed when a request failed because there are too many requests right now.
			/// 	</summary>
			/// <remarks>Displayed when a request failed because there are too many requests right now.
			/// 	</remarks>
			public const int httpErrorTooManyRequests = unchecked((int)(0x01040112));

			/// <summary>Displayed when a web request failed because the site's authentication scheme is not supported by us.
			/// 	</summary>
			/// <remarks>Displayed when a web request failed because the site's authentication scheme is not supported by us.
			/// 	</remarks>
			public const int httpErrorUnsupportedAuthScheme = unchecked((int)(0x01040108));

			/// <summary>Displayed when a web request failed because the protocol of the server is not supported.
			/// 	</summary>
			/// <remarks>Displayed when a web request failed because the protocol of the server is not supported.
			/// 	</remarks>
			public const int httpErrorUnsupportedScheme = unchecked((int)(0x01040008));

			/// <summary>AIM IM protocol type</summary>
			public const int imProtocolAim = unchecked((int)(0x010402a2));

			/// <summary>Custom IM protocol type</summary>
			public const int imProtocolCustom = unchecked((int)(0x010402a1));

			/// <summary>Google Talk IM protocol type</summary>
			public const int imProtocolGoogleTalk = unchecked((int)(0x010402a7));

			/// <summary>ICQ IM protocol type</summary>
			public const int imProtocolIcq = unchecked((int)(0x010402a8));

			/// <summary>Jabber IM protocol type</summary>
			public const int imProtocolJabber = unchecked((int)(0x010402a9));

			/// <summary>MSN IM protocol type</summary>
			public const int imProtocolMsn = unchecked((int)(0x010402a3));

			/// <summary>NetMeeting IM protocol type</summary>
			public const int imProtocolNetMeeting = unchecked((int)(0x010402aa));

			/// <summary>QQ IM protocol type</summary>
			public const int imProtocolQq = unchecked((int)(0x010402a6));

			/// <summary>Skype IM protocol type</summary>
			public const int imProtocolSkype = unchecked((int)(0x010402a5));

			/// <summary>Yahoo IM protocol type</summary>
			public const int imProtocolYahoo = unchecked((int)(0x010402a4));

			/// <summary>Custom IM address type</summary>
			public const int imTypeCustom = unchecked((int)(0x0104029d));

			/// <summary>Home IM address type</summary>
			public const int imTypeHome = unchecked((int)(0x0104029e));

			/// <summary>Other IM address type</summary>
			public const int imTypeOther = unchecked((int)(0x010402a0));

			/// <summary>Work IM address type</summary>
			public const int imTypeWork = unchecked((int)(0x0104029f));

			/// <summary>Long label for a button on a full-screen input method for an unknown action.
			/// 	</summary>
			/// <remarks>Long label for a button on a full-screen input method for an unknown action.
			/// 	</remarks>
			public const int ime_action_default = unchecked((int)(0x01040422));

			/// <summary>Long label for a button on a full-screen input method for the "Done" action.
			/// 	</summary>
			/// <remarks>Long label for a button on a full-screen input method for the "Done" action.
			/// 	</remarks>
			public const int ime_action_done = unchecked((int)(0x01040420));

			/// <summary>Long label for a button on a full-screen input method for the "Go" action.
			/// 	</summary>
			/// <remarks>Long label for a button on a full-screen input method for the "Go" action.
			/// 	</remarks>
			public const int ime_action_go = unchecked((int)(0x0104041c));

			/// <summary>Long label for a button on a full-screen input method for the "Next" action.
			/// 	</summary>
			/// <remarks>Long label for a button on a full-screen input method for the "Next" action.
			/// 	</remarks>
			public const int ime_action_next = unchecked((int)(0x0104041f));

			/// <summary>[CHAR LIMIT=6] Long label for a button on a full-screen input method for the "Previous" action.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=6] Long label for a button on a full-screen input method for the "Previous" action.
			/// 	</remarks>
			public const int ime_action_previous = unchecked((int)(0x01040421));

			/// <summary>Long label for a button on a full-screen input method for the "Search" action.
			/// 	</summary>
			/// <remarks>Long label for a button on a full-screen input method for the "Search" action.
			/// 	</remarks>
			public const int ime_action_search = unchecked((int)(0x0104041d));

			/// <summary>Long label for a button on a full-screen input method for the "Send" action.
			/// 	</summary>
			/// <remarks>Long label for a button on a full-screen input method for the "Send" action.
			/// 	</remarks>
			public const int ime_action_send = unchecked((int)(0x0104041e));

			/// <summary>EditText context menu</summary>
			public const int inputMethod = unchecked((int)(0x01040389));

			/// <summary>Label to show for a service that is running because it is an input method.
			/// 	</summary>
			/// <remarks>Label to show for a service that is running because it is an input method.
			/// 	</remarks>
			public const int input_method_binding_label = unchecked((int)(0x0104042c));

			/// <summary>Displayed when a SIM PIN password is too long or too short.</summary>
			/// <remarks>Displayed when a SIM PIN password is too long or too short.</remarks>
			public const int invalidPin = unchecked((int)(0x010400c8));

			/// <summary>Displayed when a SIM PUK password is too short.</summary>
			/// <remarks>Displayed when a SIM PUK password is too short.</remarks>
			public const int invalidPuk = unchecked((int)(0x010400c9));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int issued_by = unchecked((int)(0x010404a9));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int issued_on = unchecked((int)(0x010404ab));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int issued_to = unchecked((int)(0x010404a5));

			/// <summary>
			/// Message in a javascript dialog asking if the user wishes to leave the
			/// current page
			/// </summary>
			public const int js_dialog_before_unload = unchecked((int)(0x0104030e));

			/// <summary>Title for a JavaScript dialog.</summary>
			/// <remarks>Title for a JavaScript dialog. "The page at <url of current page> says:"
			/// 	</remarks>
			public const int js_dialog_title = unchecked((int)(0x0104030c));

			/// <summary>Default title for a javascript dialog</summary>
			public const int js_dialog_title_default = unchecked((int)(0x0104030d));

			/// <summary>Announce that a headset is required to hear keyboard keys while typing a password.
			/// 	</summary>
			/// <remarks>Announce that a headset is required to hear keyboard keys while typing a password. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int keyboard_headset_required_to_hear_password = unchecked((int)(0x0104048c
				));

			/// <summary>The value of a keyboard key announced when accessibility is enabled and no headsed is used.
			/// 	</summary>
			/// <remarks>The value of a keyboard key announced when accessibility is enabled and no headsed is used. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int keyboard_password_character_no_headset = unchecked((int)(0x0104048d
				));

			/// <summary>
			/// KeyboardView - accessibility support
			/// Description of the Alt button in a KeyboardView.
			/// </summary>
			/// <remarks>
			/// KeyboardView - accessibility support
			/// Description of the Alt button in a KeyboardView. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int keyboardview_keycode_alt = unchecked((int)(0x01040479));

			/// <summary>Description of the Cancel button in a KeyboardView.</summary>
			/// <remarks>Description of the Cancel button in a KeyboardView. [CHAR LIMIT=NONE]</remarks>
			public const int keyboardview_keycode_cancel = unchecked((int)(0x0104047a));

			/// <summary>Description of the Delete button in a KeyboardView.</summary>
			/// <remarks>Description of the Delete button in a KeyboardView. [CHAR LIMIT=NONE]</remarks>
			public const int keyboardview_keycode_delete = unchecked((int)(0x0104047b));

			/// <summary>Description of the Done button in a KeyboardView.</summary>
			/// <remarks>Description of the Done button in a KeyboardView. [CHAR LIMIT=NONE]</remarks>
			public const int keyboardview_keycode_done = unchecked((int)(0x0104047c));

			/// <summary>Description of the Enter button in a KeyboardView.</summary>
			/// <remarks>Description of the Enter button in a KeyboardView. [CHAR LIMIT=NONE]</remarks>
			public const int keyboardview_keycode_enter = unchecked((int)(0x0104047f));

			/// <summary>Description of the Mode change button in a KeyboardView.</summary>
			/// <remarks>Description of the Mode change button in a KeyboardView. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int keyboardview_keycode_mode_change = unchecked((int)(0x0104047d));

			/// <summary>Description of the Shift button in a KeyboardView.</summary>
			/// <remarks>Description of the Shift button in a KeyboardView. [CHAR LIMIT=NONE]</remarks>
			public const int keyboardview_keycode_shift = unchecked((int)(0x0104047e));

			/// <summary>Instructions telling the user how to unlock the phone.</summary>
			/// <remarks>Instructions telling the user how to unlock the phone.</remarks>
			public const int keyguard_label_text = unchecked((int)(0x010402c9));

			/// <summary>Instructions telling the user to enter their text password to unlock the keyguard.
			/// 	</summary>
			/// <remarks>
			/// Instructions telling the user to enter their text password to unlock the keyguard.
			/// Displayed in one line in a large font.
			/// </remarks>
			public const int keyguard_password_enter_password_code = unchecked((int)(0x010402c6
				));

			/// <summary>Instructions telling the user to enter their SIM PIN to unlock the keyguard.
			/// 	</summary>
			/// <remarks>
			/// Instructions telling the user to enter their SIM PIN to unlock the keyguard.
			/// Displayed in one line in a large font.
			/// </remarks>
			public const int keyguard_password_enter_pin_code = unchecked((int)(0x010402c1));

			/// <summary>Instructions telling the user to enter their PIN password to unlock the keyguard.
			/// 	</summary>
			/// <remarks>
			/// Instructions telling the user to enter their PIN password to unlock the keyguard.
			/// Displayed in one line in a large font.
			/// </remarks>
			public const int keyguard_password_enter_pin_password_code = unchecked((int)(0x010402c7
				));

			/// <summary>Prompt to enter New SIM PIN in Edit Text Box in unlock screen</summary>
			public const int keyguard_password_enter_pin_prompt = unchecked((int)(0x010402c4)
				);

			/// <summary>Instructions telling the user to enter their SIM PUK to unlock the keyguard.
			/// 	</summary>
			/// <remarks>
			/// Instructions telling the user to enter their SIM PUK to unlock the keyguard.
			/// Displayed in one line in a large font.
			/// </remarks>
			public const int keyguard_password_enter_puk_code = unchecked((int)(0x010402c2));

			/// <summary>Prompt to enter SIM PUK in Edit Text Box in unlock screen</summary>
			public const int keyguard_password_enter_puk_prompt = unchecked((int)(0x010402c3)
				);

			/// <summary>Displayed as hint in passwordEntry EditText on PasswordUnlockScreen [CHAR LIMIT=30]
			/// 	</summary>
			public const int keyguard_password_entry_touch_hint = unchecked((int)(0x010402c5)
				);

			/// <summary>
			/// Instructions telling the user that they entered the wrong pin while trying
			/// to unlock the keyguard.
			/// </summary>
			/// <remarks>
			/// Instructions telling the user that they entered the wrong pin while trying
			/// to unlock the keyguard.  Displayed in one line in a large font.
			/// </remarks>
			public const int keyguard_password_wrong_pin_code = unchecked((int)(0x010402c8));

			/// <summary>Suffix added to a number to signify size in kilobytes.</summary>
			/// <remarks>Suffix added to a number to signify size in kilobytes.</remarks>
			public const int kilobyteShort = unchecked((int)(0x010400b4));

			/// <summary>This is used to express that something has occurred within the last month
			/// 	</summary>
			public const int last_month = unchecked((int)(0x0104036c));

			/// <summary>[CHAR LIMIT=50] Title of the alert when application launches on top of another.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=50] Title of the alert when application launches on top of another.
			/// 	</remarks>
			public const int launch_warning_original = unchecked((int)(0x010403a3));

			/// <summary>[CHAR LIMIT=50] Title of the alert when application launches on top of another.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=50] Title of the alert when application launches on top of another.
			/// 	</remarks>
			public const int launch_warning_replace = unchecked((int)(0x010403a2));

			/// <summary>[CHAR LIMIT=25] Title of the alert when application launches on top of another.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=25] Title of the alert when application launches on top of another.
			/// 	</remarks>
			public const int launch_warning_title = unchecked((int)(0x010403a1));

			/// <summary>Delimeter used between each item in a textual list; for example "Alpha, Beta".
			/// 	</summary>
			/// <remarks>Delimeter used between each item in a textual list; for example "Alpha, Beta". [CHAR LIMIT=3]
			/// 	</remarks>
			public const int list_delimeter = unchecked((int)(0x010404b5));

			/// <summary>Text shown by list fragment when waiting for data to display.</summary>
			/// <remarks>Text shown by list fragment when waiting for data to display.</remarks>
			public const int loading = unchecked((int)(0x0104038d));

			/// <summary>Used to replace %s in urls retreived from the signin server with locales.
			/// 	</summary>
			/// <remarks>
			/// Used to replace %s in urls retreived from the signin server with locales.  For Some
			/// devices we don't support all the locales we ship to and need to replace the '%s' with a
			/// locale string based on mcc values.  By default (0-length string) we don't replace the %s
			/// at all and later replace it with a locale string based on the users chosen locale
			/// DO NOT TRANSLATE
			/// A string used to replace %s in a URL to fill in the locale for countries
			/// whose locale we don't natively support.  A 0 length string triggers no replacement.  Do not translate
			/// A string used to replace %s in a URL to fill in the locale for countries
			/// whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate
			/// A string used to replace %s in a URL to fill in the locale for countries
			/// whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate
			/// A string used to replace %s in a URL to fill in the locale for countries
			/// whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate
			/// A string used to replace %s in a URL to fill in the locale for countries
			/// whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate
			/// A string used to replace %s in a URL to fill in the locale for countries
			/// whose locale we don't natively support.  A 0 length string triggers no replacement. Do not translate
			/// </remarks>
			public const int locale_replacement = unchecked((int)(0x01040403));

			/// <hide>DO NOT TRANSLATE. Control aspect ratio of lock pattern</hide>
			/// <hide>DO NOT TRANSLATE. There isn't enough room on mdpi devices, allow height to vary
			/// 	</hide>
			public const int lock_pattern_view_aspect = unchecked((int)(0x010400b1));

			/// <summary>Accessibility description sent when user adds a cell to the pattern.</summary>
			/// <remarks>Accessibility description sent when user adds a cell to the pattern. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int lockscreen_access_pattern_cell_added = unchecked((int)(0x010402ff
				));

			/// <summary>Accessibility description sent when the pattern times out and is cleared.
			/// 	</summary>
			/// <remarks>Accessibility description sent when the pattern times out and is cleared. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int lockscreen_access_pattern_cleared = unchecked((int)(0x010402fe));

			/// <summary>Accessibility description sent when user completes drawing a pattern.</summary>
			/// <remarks>Accessibility description sent when user completes drawing a pattern. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int lockscreen_access_pattern_detected = unchecked((int)(0x01040300)
				);

			/// <summary>Accessibility description sent when user starts drawing a lock pattern.</summary>
			/// <remarks>Accessibility description sent when user starts drawing a lock pattern. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int lockscreen_access_pattern_start = unchecked((int)(0x010402fd));

			/// <summary>A short representation of charging information, e.g "34%"</summary>
			public const int lockscreen_battery_short = unchecked((int)(0x010402d7));

			/// <summary>On the keyguard screen, it shows the carrier the phone is connected to.</summary>
			/// <remarks>
			/// On the keyguard screen, it shows the carrier the phone is connected to.  This is displayed if the phone is not connected to a carrier.
			/// outdated translation 8812714795156374435
			/// </remarks>
			public const int lockscreen_carrier_default = unchecked((int)(0x010402cb));

			/// <summary>
			/// When the lock screen is showing, the phone is plugged in and the battery is fully
			/// charged, say that it is charged.
			/// </summary>
			/// <remarks>
			/// When the lock screen is showing, the phone is plugged in and the battery is fully
			/// charged, say that it is charged.
			/// </remarks>
			public const int lockscreen_charged = unchecked((int)(0x010402d6));

			/// <summary>Button at the bottom of the unlock screen to make an emergency call.</summary>
			/// <remarks>Button at the bottom of the unlock screen to make an emergency call.</remarks>
			public const int lockscreen_emergency_call = unchecked((int)(0x010402d0));

			/// <summary>
			/// For the unlock screen, informational message shown in dialog when user is almost at the limit
			/// where the device will be wiped.
			/// </summary>
			/// <remarks>
			/// For the unlock screen, informational message shown in dialog when user is almost at the limit
			/// where the device will be wiped.
			/// </remarks>
			public const int lockscreen_failed_attempts_almost_at_wipe = unchecked((int)(0x010402ed
				));

			/// <summary>
			/// For the unlock screen, informational message shown in dialog when user is almost at the limit
			/// where they will be locked out and may have to enter an alternate username/password to unlock the phone
			/// </summary>
			public const int lockscreen_failed_attempts_almost_glogin = unchecked((int)(0x010402ec
				));

			/// <summary>
			/// For the unlock screen, informational message shown in dialog when user has exceeded the
			/// maximum attempts and the device will now be wiped
			/// </summary>
			public const int lockscreen_failed_attempts_now_wiping = unchecked((int)(0x010402ee
				));

			/// <summary>
			/// On the unlock screen, message shown on button that appears once it's apparent the user may have forgotten
			/// their lock gesture
			/// </summary>
			public const int lockscreen_forgot_pattern_button_text = unchecked((int)(0x010402f0
				));

			/// <summary>Hint displayed on account unlock screen to advise the user on how to recover the account.
			/// 	</summary>
			/// <remarks>Hint displayed on account unlock screen to advise the user on how to recover the account.
			/// 	</remarks>
			public const int lockscreen_glogin_account_recovery_hint = unchecked((int)(0x010402f8
				));

			/// <summary>Displayed in a progress dialog while a username and password are being checked.
			/// 	</summary>
			/// <remarks>Displayed in a progress dialog while a username and password are being checked.
			/// 	</remarks>
			public const int lockscreen_glogin_checking_password = unchecked((int)(0x010402f9
				));

			/// <summary>
			/// Title of the unlock screen that uses your Google login and password when the user hit
			/// the 'forgot pattern' button.
			/// </summary>
			/// <remarks>
			/// Title of the unlock screen that uses your Google login and password when the user hit
			/// the 'forgot pattern' button.
			/// </remarks>
			public const int lockscreen_glogin_forgot_pattern = unchecked((int)(0x010402f1));

			/// <summary>In the unlock screen, message telling the user that they need to use their Google login and password to unlock the phone
			/// 	</summary>
			public const int lockscreen_glogin_instructions = unchecked((int)(0x010402f3));

			/// <summary>Displayed to the user when unlocking the phone with a username and password fails.
			/// 	</summary>
			/// <remarks>Displayed to the user when unlocking the phone with a username and password fails.
			/// 	</remarks>
			public const int lockscreen_glogin_invalid_input = unchecked((int)(0x010402f7));

			/// <summary>Hint caption for the password field when unlocking the phone using login and password
			/// 	</summary>
			public const int lockscreen_glogin_password_hint = unchecked((int)(0x010402f5));

			/// <summary>Button to try to unlock the phone using username and password</summary>
			public const int lockscreen_glogin_submit_button = unchecked((int)(0x010402f6));

			/// <summary>
			/// Title of the unlock screen that uses your Google login and password when the user attempted
			/// too many patterns and we are forcing them to use their account instead.
			/// </summary>
			/// <remarks>
			/// Title of the unlock screen that uses your Google login and password when the user attempted
			/// too many patterns and we are forcing them to use their account instead.
			/// </remarks>
			public const int lockscreen_glogin_too_many_attempts = unchecked((int)(0x010402f2
				));

			/// <summary>Hint caption for the username field when unlocking the phone using login and password
			/// 	</summary>
			public const int lockscreen_glogin_username_hint = unchecked((int)(0x010402f4));

			/// <summary>On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.
			/// 	</summary>
			/// <remarks>On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.  This is shown in small font at the bottom.
			/// 	</remarks>
			public const int lockscreen_instructions_when_pattern_disabled = unchecked((int)(
				0x010402ce));

			/// <summary>when pattern lock is enabled, tell them about the emergency dial</summary>
			public const int lockscreen_instructions_when_pattern_enabled = unchecked((int)(0x010402cd
				));

			/// <summary>
			/// When the lock screen is showing and the battery is low, warn user to plug
			/// in the phone soon.
			/// </summary>
			/// <remarks>
			/// When the lock screen is showing and the battery is low, warn user to plug
			/// in the phone soon.
			/// </remarks>
			public const int lockscreen_low_battery = unchecked((int)(0x010402d8));

			/// <summary>Shown in the lock screen to ask the user to insert a SIM card.</summary>
			/// <remarks>Shown in the lock screen to ask the user to insert a SIM card.</remarks>
			public const int lockscreen_missing_sim_instructions = unchecked((int)(0x010402db
				));

			/// <summary>Shown in the lock screen to ask the user to insert a SIM card when sim is missing or not readable.
			/// 	</summary>
			/// <remarks>Shown in the lock screen to ask the user to insert a SIM card when sim is missing or not readable.
			/// 	</remarks>
			public const int lockscreen_missing_sim_instructions_long = unchecked((int)(0x010402dc
				));

			/// <summary>Shown in the lock screen when there is no SIM card.</summary>
			/// <remarks>
			/// Shown in the lock screen when there is no SIM card.
			/// outdated translation 2186920585695169078
			/// </remarks>
			public const int lockscreen_missing_sim_message = unchecked((int)(0x010402da));

			/// <summary>Shown in the lock screen when there is no SIM card.</summary>
			/// <remarks>Shown in the lock screen when there is no SIM card.</remarks>
			public const int lockscreen_missing_sim_message_short = unchecked((int)(0x010402d9
				));

			/// <summary>
			/// When the user inserts a sim card from an unsupported network, it becomes network
			/// locked
			/// </summary>
			public const int lockscreen_network_locked_message = unchecked((int)(0x010402e4));

			/// <summary>On the unlock password screen, shown when the user enters the wrong lock password and must try again.
			/// 	</summary>
			/// <remarks>On the unlock password screen, shown when the user enters the wrong lock password and must try again.
			/// 	</remarks>
			public const int lockscreen_password_wrong = unchecked((int)(0x010402d4));

			/// <summary>Shown to confirm that the user entered their lock pattern correctly.</summary>
			/// <remarks>Shown to confirm that the user entered their lock pattern correctly.</remarks>
			public const int lockscreen_pattern_correct = unchecked((int)(0x010402d2));

			/// <summary>On the unlock pattern screen, shown at the top of the unlock screen to tell the user what to do.
			/// 	</summary>
			/// <remarks>On the unlock pattern screen, shown at the top of the unlock screen to tell the user what to do. Below this text is the place for theu ser to draw the pattern.
			/// 	</remarks>
			public const int lockscreen_pattern_instructions = unchecked((int)(0x010402cf));

			/// <summary>On the unlock pattern screen, shown when the user enters the wrong lock pattern and must try again.
			/// 	</summary>
			/// <remarks>On the unlock pattern screen, shown when the user enters the wrong lock pattern and must try again.
			/// 	</remarks>
			public const int lockscreen_pattern_wrong = unchecked((int)(0x010402d3));

			/// <summary>Shown in the lock screen to inform the user to SIM card is permanently disabled.
			/// 	</summary>
			/// <remarks>Shown in the lock screen to inform the user to SIM card is permanently disabled.
			/// 	</remarks>
			public const int lockscreen_permanent_disabled_sim_instructions = unchecked((int)
				(0x010402dd));

			/// <summary>
			/// When the lock screen is showing and the phone plugged in, and the battery
			/// is not fully charged, show the current charge %.
			/// </summary>
			/// <remarks>
			/// When the lock screen is showing and the phone plugged in, and the battery
			/// is not fully charged, show the current charge %.
			/// </remarks>
			public const int lockscreen_plugged_in = unchecked((int)(0x010402d5));

			/// <summary>Button at the bottom of the unlock screen that lets the user return to a call
			/// 	</summary>
			public const int lockscreen_return_to_call = unchecked((int)(0x010402d1));

			/// <summary>Shown in the lock screen to tell the user that the screen is locked.</summary>
			/// <remarks>Shown in the lock screen to tell the user that the screen is locked.</remarks>
			public const int lockscreen_screen_locked = unchecked((int)(0x010402cc));

			/// <summary>Shown in the lock screen to tell the user that their SIM is locked and they must unlock it.
			/// 	</summary>
			/// <remarks>Shown in the lock screen to tell the user that their SIM is locked and they must unlock it.
			/// 	</remarks>
			public const int lockscreen_sim_locked_message = unchecked((int)(0x010402e7));

			/// <summary>Shown in the lock screen when the SIM has become PUK locked and the user must call customer care to unlock it.
			/// 	</summary>
			/// <remarks>Shown in the lock screen when the SIM has become PUK locked and the user must call customer care to unlock it.
			/// 	</remarks>
			public const int lockscreen_sim_puk_locked_instructions = unchecked((int)(0x010402e6
				));

			/// <summary>
			/// When the user enters a wrong sim pin too many times, it becomes
			/// PUK locked (Pin Unlock Kode)
			/// </summary>
			public const int lockscreen_sim_puk_locked_message = unchecked((int)(0x010402e5));

			/// <summary>
			/// For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
			/// whether it is valid, and to unlock the sim if it is valid.
			/// </summary>
			/// <remarks>
			/// For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
			/// whether it is valid, and to unlock the sim if it is valid.  we display a
			/// progress dialog in the meantime.  this is the emssage.
			/// </remarks>
			public const int lockscreen_sim_unlock_progress_dialog_message = unchecked((int)(
				0x010402e8));

			/// <summary>Displayed on lock screen's right tab - turn sound off</summary>
			public const int lockscreen_sound_off_label = unchecked((int)(0x010402fc));

			/// <summary>Displayed on lock screen's right tab - turn sound on</summary>
			public const int lockscreen_sound_on_label = unchecked((int)(0x010402fb));

			/// <summary>
			/// On the unlock screen, countdown message shown while user is waiting to try again after too many
			/// failed attempts
			/// </summary>
			public const int lockscreen_too_many_failed_attempts_countdown = unchecked((int)(
				0x010402ef));

			/// <summary>
			/// For the unlock screen, Information message shown in dialog when user has too many failed attempts at
			/// drawing the unlock pattern
			/// </summary>
			public const int lockscreen_too_many_failed_attempts_dialog_message = unchecked((
				int)(0x010402e9));

			/// <summary>
			/// For the unlock screen, Information message shown in dialog when user has too many failed attempts at
			/// entering the password
			/// </summary>
			public const int lockscreen_too_many_failed_password_attempts_dialog_message = unchecked(
				(int)(0x010402ea));

			/// <summary>
			/// For the unlock screen, Information message shown in dialog when user has too many failed attempts at
			/// entering the PIN
			/// </summary>
			public const int lockscreen_too_many_failed_pin_attempts_dialog_message = unchecked(
				(int)(0x010402eb));

			/// <summary>Shown on transport control of lockscreen.</summary>
			/// <remarks>Shown on transport control of lockscreen. Pressing button goes to next track.
			/// 	</remarks>
			public const int lockscreen_transport_next_description = unchecked((int)(0x010402df
				));

			/// <summary>Shown on transport control of lockscreen.</summary>
			/// <remarks>Shown on transport control of lockscreen. Pressing button pauses playback
			/// 	</remarks>
			public const int lockscreen_transport_pause_description = unchecked((int)(0x010402e0
				));

			/// <summary>Shown on transport control of lockscreen.</summary>
			/// <remarks>Shown on transport control of lockscreen. Pressing button pauses playback
			/// 	</remarks>
			public const int lockscreen_transport_play_description = unchecked((int)(0x010402e1
				));

			/// <summary>Shown on transport control of lockscreen.</summary>
			/// <remarks>Shown on transport control of lockscreen. Pressing button goes to previous track.
			/// 	</remarks>
			public const int lockscreen_transport_prev_description = unchecked((int)(0x010402de
				));

			/// <summary>Shown on transport control of lockscreen.</summary>
			/// <remarks>Shown on transport control of lockscreen. Pressing button pauses playback
			/// 	</remarks>
			public const int lockscreen_transport_stop_description = unchecked((int)(0x010402e2
				));

			/// <summary>Displayed on lock screen's left tab - unlock</summary>
			public const int lockscreen_unlock_label = unchecked((int)(0x010402fa));

			/// <summary>If the device is getting low on internal storage, a notification is shown to the user.
			/// 	</summary>
			/// <remarks>
			/// If the device is getting low on internal storage, a notification is shown to the user.  This is the message of that notification.
			/// outdated translation 635106544616378836
			/// </remarks>
			public const int low_internal_storage_view_text = unchecked((int)(0x0104038c));

			/// <summary>If the device is getting low on internal storage, a notification is shown to the user.
			/// 	</summary>
			/// <remarks>If the device is getting low on internal storage, a notification is shown to the user.  This is the title of that notification.
			/// 	</remarks>
			public const int low_internal_storage_view_title = unchecked((int)(0x0104038b));

			/// <summary>If MMS discovers there isn't much space left on the device, it will show a toast with this message.
			/// 	</summary>
			/// <remarks>
			/// If MMS discovers there isn't much space left on the device, it will show a toast with this message.
			/// outdated translation 6632412458436461203
			/// </remarks>
			public const int low_memory = unchecked((int)(0x01040117));

			/// <summary>Display name for any time a piece of data refers to the owner of the phone.
			/// 	</summary>
			/// <remarks>Display name for any time a piece of data refers to the owner of the phone. For example, this could be used in place of the phone's phone number.
			/// 	</remarks>
			public const int me = unchecked((int)(0x01040118));

			/// <summary>Text for message to user that SD card has been removed while in use [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int media_bad_removal = unchecked((int)(0x0104044b));

			/// <summary>Text for message to user SD card is currently being checked [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int media_checking = unchecked((int)(0x0104044c));

			/// <summary>Text for message to user SD card has been removed [CHAR LIMIT=NONE]</summary>
			public const int media_removed = unchecked((int)(0x0104044d));

			/// <summary>Text for message to user SD card is currently mounted on a computer [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int media_shared = unchecked((int)(0x0104044e));

			/// <summary>Text for message for an unknown external media state [CHAR LIMIT=NONE]</summary>
			public const int media_unknown_state = unchecked((int)(0x0104044f));

			/// <summary>Suffix added to a number to signify size in megabytes.</summary>
			/// <remarks>Suffix added to a number to signify size in megabytes.</remarks>
			public const int megabyteShort = unchecked((int)(0x010400b5));

			/// <summary>Displayed in place of the regular shortcut letter when a menu item has Menu+delete for the shortcut.
			/// 	</summary>
			/// <remarks>Displayed in place of the regular shortcut letter when a menu item has Menu+delete for the shortcut.
			/// 	</remarks>
			public const int menu_delete_shortcut_label = unchecked((int)(0x01040364));

			/// <summary>Displayed in place of the regular shortcut letter when a menu item has Menu+enter for the shortcut.
			/// 	</summary>
			/// <remarks>Displayed in place of the regular shortcut letter when a menu item has Menu+enter for the shortcut.
			/// 	</remarks>
			public const int menu_enter_shortcut_label = unchecked((int)(0x01040363));

			/// <summary>Displayed in place of the regular shortcut letter when a menu item has Menu+space for the shortcut.
			/// 	</summary>
			/// <remarks>Displayed in place of the regular shortcut letter when a menu item has Menu+space for the shortcut.
			/// 	</remarks>
			public const int menu_space_shortcut_label = unchecked((int)(0x01040362));

			/// <summary>Quoted name for 12am, lowercase</summary>
			public const int midnight = unchecked((int)(0x01040380));

			/// <summary>Appened to express the value is this unit of time: singular minute</summary>
			public const int minute = unchecked((int)(0x01040375));

			/// <summary>Appened to express the value is this unit of time: plural minutes</summary>
			public const int minutes = unchecked((int)(0x01040376));

			/// <summary>Displayed when SIM PIN passwords are entered inconsistently.</summary>
			/// <remarks>Displayed when SIM PIN passwords are entered inconsistently.</remarks>
			public const int mismatchPin = unchecked((int)(0x010400c7));

			/// <summary>Displayed when a phone feature triggered by an MMI code is complete.</summary>
			/// <remarks>Displayed when a phone feature triggered by an MMI code is complete.</remarks>
			public const int mmiComplete = unchecked((int)(0x010400c4));

			/// <summary>
			/// Displayed when the user dialed an MMI code whose function
			/// could not be performed.
			/// </summary>
			/// <remarks>
			/// Displayed when the user dialed an MMI code whose function
			/// could not be performed. This will be displayed in a toast.
			/// </remarks>
			public const int mmiError = unchecked((int)(0x010400bc));

			/// <summary>
			/// Displayed when the user dialed an MMI code whose function
			/// could not be performed because FDN is enabled.
			/// </summary>
			/// <remarks>
			/// Displayed when the user dialed an MMI code whose function
			/// could not be performed because FDN is enabled. This will be displayed in a toast.
			/// </remarks>
			public const int mmiFdnError = unchecked((int)(0x010400bd));

			public const int month = unchecked((int)(0x01040084));

			public const int month_day = unchecked((int)(0x01040083));

			public const int month_day_year = unchecked((int)(0x0104007d));

			public const int month_long_april = unchecked((int)(0x01040033));

			public const int month_long_august = unchecked((int)(0x01040037));

			public const int month_long_december = unchecked((int)(0x0104003b));

			public const int month_long_february = unchecked((int)(0x01040031));

			public const int month_long_january = unchecked((int)(0x01040030));

			public const int month_long_july = unchecked((int)(0x01040036));

			public const int month_long_june = unchecked((int)(0x01040035));

			public const int month_long_march = unchecked((int)(0x01040032));

			public const int month_long_may = unchecked((int)(0x01040034));

			public const int month_long_november = unchecked((int)(0x0104003a));

			public const int month_long_october = unchecked((int)(0x01040039));

			public const int month_long_september = unchecked((int)(0x01040038));

			public const int month_long_standalone_april = unchecked((int)(0x01040027));

			public const int month_long_standalone_august = unchecked((int)(0x0104002b));

			public const int month_long_standalone_december = unchecked((int)(0x0104002f));

			public const int month_long_standalone_february = unchecked((int)(0x01040025));

			public const int month_long_standalone_january = unchecked((int)(0x01040024));

			public const int month_long_standalone_july = unchecked((int)(0x0104002a));

			public const int month_long_standalone_june = unchecked((int)(0x01040029));

			public const int month_long_standalone_march = unchecked((int)(0x01040026));

			public const int month_long_standalone_may = unchecked((int)(0x01040028));

			public const int month_long_standalone_november = unchecked((int)(0x0104002e));

			public const int month_long_standalone_october = unchecked((int)(0x0104002d));

			public const int month_long_standalone_september = unchecked((int)(0x0104002c));

			public const int month_medium_april = unchecked((int)(0x0104003f));

			public const int month_medium_august = unchecked((int)(0x01040043));

			public const int month_medium_december = unchecked((int)(0x01040047));

			public const int month_medium_february = unchecked((int)(0x0104003d));

			public const int month_medium_january = unchecked((int)(0x0104003c));

			public const int month_medium_july = unchecked((int)(0x01040042));

			public const int month_medium_june = unchecked((int)(0x01040041));

			public const int month_medium_march = unchecked((int)(0x0104003e));

			public const int month_medium_may = unchecked((int)(0x01040040));

			public const int month_medium_november = unchecked((int)(0x01040046));

			public const int month_medium_october = unchecked((int)(0x01040045));

			public const int month_medium_september = unchecked((int)(0x01040044));

			public const int month_shortest_april = unchecked((int)(0x0104004b));

			public const int month_shortest_august = unchecked((int)(0x0104004f));

			public const int month_shortest_december = unchecked((int)(0x01040053));

			public const int month_shortest_february = unchecked((int)(0x01040049));

			public const int month_shortest_january = unchecked((int)(0x01040048));

			public const int month_shortest_july = unchecked((int)(0x0104004e));

			public const int month_shortest_june = unchecked((int)(0x0104004d));

			public const int month_shortest_march = unchecked((int)(0x0104004a));

			public const int month_shortest_may = unchecked((int)(0x0104004c));

			public const int month_shortest_november = unchecked((int)(0x01040052));

			public const int month_shortest_october = unchecked((int)(0x01040051));

			public const int month_shortest_september = unchecked((int)(0x01040050));

			public const int month_year = unchecked((int)(0x01040085));

			/// <summary>Menu item displayed at the end of a menu to allow users to see another page worth of menu items.
			/// 	</summary>
			/// <remarks>Menu item displayed at the end of a menu to allow users to see another page worth of menu items. This is shown on any app's menu as long as the app has too many items in the menu.
			/// 	</remarks>
			public const int more_item_label = unchecked((int)(0x01040360));

			/// <summary>
			/// Displayed to prompt the user to type the PUK password to unlock
			/// the SIM card.
			/// </summary>
			/// <remarks>
			/// Displayed to prompt the user to type the PUK password to unlock
			/// the SIM card.
			/// </remarks>
			public const int needPuk = unchecked((int)(0x010400ca));

			public const int needPuk2 = unchecked((int)(0x010400cb));

			public const int new_app_action = unchecked((int)(0x010403b3));

			public const int new_app_description = unchecked((int)(0x010403b4));

			public const int next_button_label = unchecked((int)(0x0104043f));

			/// <summary>Preference framework strings.</summary>
			/// <remarks>Preference framework strings.</remarks>
			public const int no = unchecked((int)(0x01040009));

			/// <summary>
			/// Text to display when there are no activities found to display in the
			/// activity chooser.
			/// </summary>
			/// <remarks>
			/// Text to display when there are no activities found to display in the
			/// activity chooser. See the "Select an action" title.
			/// </remarks>
			public const int noApplications = unchecked((int)(0x01040395));

			/// <summary>Label for the file upload control when no file has been chosen yet</summary>
			public const int no_file_chosen = unchecked((int)(0x01040437));

			/// <summary>Displayed on the Find dialog when there are no matches [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int no_matches = unchecked((int)(0x01040445));

			/// <summary>Shown for an application when it doesn't require any permission grants.</summary>
			/// <remarks>Shown for an application when it doesn't require any permission grants.</remarks>
			public const int no_permissions = unchecked((int)(0x010403e5));

			/// <summary>
			/// Recent Tasks dialog: message when there are no recent applications
			/// TODO: this should move to SystemUI.apk, but the code for the old
			/// recent dialog is still in the framework
			/// </summary>
			public const int no_recent_tasks = unchecked((int)(0x01040123));

			/// <summary>Quoted name for 12pm, lowercase</summary>
			public const int noon = unchecked((int)(0x0104037e));

			/// <summary>
			/// A notification is shown when the AccountManager is unable to
			/// supply an auth token without prompting the user to re-enter the
			/// password.
			/// </summary>
			/// <remarks>
			/// A notification is shown when the AccountManager is unable to
			/// supply an auth token without prompting the user to re-enter the
			/// password.  This is the text that will scroll through the
			/// notification bar (will be seen by the user as he uses another application).
			/// </remarks>
			public const int notification_title = unchecked((int)(0x01040113));

			/// <summary>Description of the button to decrement the NumberPicker value.</summary>
			/// <remarks>Description of the button to decrement the NumberPicker value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int number_picker_decrement_button = unchecked((int)(0x01040462));

			/// <summary>
			/// NumberPicker - accessibility support
			/// Description of the button to increment the NumberPicker value.
			/// </summary>
			/// <remarks>
			/// NumberPicker - accessibility support
			/// Description of the button to increment the NumberPicker value. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int number_picker_increment_button = unchecked((int)(0x01040461));

			/// <summary>Description of the scrolling action in NumberPicker.</summary>
			/// <remarks>Description of the scrolling action in NumberPicker. [CHAR LIMIT=NONE]</remarks>
			public const int number_picker_increment_scroll_action = unchecked((int)(0x01040464
				));

			/// <summary>Description of the tap and hold action to get into scroll mode in NumberPicker.
			/// 	</summary>
			/// <remarks>Description of the tap and hold action to get into scroll mode in NumberPicker. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int number_picker_increment_scroll_mode = unchecked((int)(0x01040463
				));

			public const int numeric_date = unchecked((int)(0x0104007a));

			public const int numeric_date_format = unchecked((int)(0x0104007b));

			public const int numeric_date_template = unchecked((int)(0x0104007c));

			public const int numeric_md1_md2 = unchecked((int)(0x0104008b));

			public const int numeric_md1_time1_md2_time2 = unchecked((int)(0x01040090));

			public const int numeric_mdy1_mdy2 = unchecked((int)(0x0104008d));

			public const int numeric_mdy1_time1_mdy2_time2 = unchecked((int)(0x01040092));

			public const int numeric_wday1_md1_time1_wday2_md2_time2 = unchecked((int)(0x01040091
				));

			public const int numeric_wday1_md1_wday2_md2 = unchecked((int)(0x0104008c));

			public const int numeric_wday1_mdy1_time1_wday2_mdy2_time2 = unchecked((int)(0x0104008f
				));

			public const int numeric_wday1_mdy1_wday2_mdy2 = unchecked((int)(0x0104008e));

			/// <summary>Preference framework strings.</summary>
			/// <remarks>Preference framework strings.</remarks>
			public const int ok = unchecked((int)(0x0104000a));

			public const int old_app_action = unchecked((int)(0x010403b1));

			public const int old_app_description = unchecked((int)(0x010403b2));

			/// <summary>This is used to express that something happened longer ago than the previous options
			/// 	</summary>
			public const int older = unchecked((int)(0x0104036d));

			/// <summary>String used to display the date.</summary>
			/// <remarks>String used to display the date. This is the string to say something happened 1 month ago.
			/// 	</remarks>
			public const int oneMonthDurationPast = unchecked((int)(0x0104036a));

			/// <summary>Displayed to the user when they do not have permission to open a particular web page.
			/// 	</summary>
			/// <remarks>Displayed to the user when they do not have permission to open a particular web page.
			/// 	</remarks>
			public const int open_permission_deny = unchecked((int)(0x0104035e));

			/// <summary>Custom organization type</summary>
			public const int orgTypeCustom = unchecked((int)(0x010402ad));

			/// <summary>Other organization type</summary>
			public const int orgTypeOther = unchecked((int)(0x010402ac));

			/// <summary>Work organization type</summary>
			public const int orgTypeWork = unchecked((int)(0x010402ab));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int org_name = unchecked((int)(0x010404a7));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int org_unit = unchecked((int)(0x010404a8));

			/// <summary>Displayed when a SIM password was entered incorrectly.</summary>
			/// <remarks>Displayed when a SIM password was entered incorrectly.</remarks>
			public const int passwordIncorrect = unchecked((int)(0x010400c3));

			/// <summary>Label for "switch to alphabetic" key.</summary>
			/// <remarks>Label for "switch to alphabetic" key.  Must be short to fit on key!</remarks>
			public const int password_keyboard_label_alpha_key = unchecked((int)(0x01040302));

			/// <summary>Label for ALT modifier key.</summary>
			/// <remarks>Label for ALT modifier key.  Must be short to fit on key!</remarks>
			public const int password_keyboard_label_alt_key = unchecked((int)(0x01040303));

			/// <summary>Label for "switch to symbols" key.</summary>
			/// <remarks>Label for "switch to symbols" key.  Must be short to fit on key!</remarks>
			public const int password_keyboard_label_symbol_key = unchecked((int)(0x01040301)
				);

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu. This action is used to paste from the clipboard into the eidt field
			/// 	</remarks>
			public const int paste = unchecked((int)(0x0104000b));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 8235655958070862293
			/// </remarks>
			public const int permdesc_accessCoarseLocation = unchecked((int)(0x010401e2));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7411213317434337331
			/// </remarks>
			public const int permdesc_accessFineLocation = unchecked((int)(0x010401e0));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accessLocationExtraCommands = unchecked((int)(0x010401dc
				));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accessMockLocation = unchecked((int)(0x010401da));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accessMtp = unchecked((int)(0x01040206));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accessNetworkState = unchecked((int)(0x01040234));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accessSurfaceFlinger = unchecked((int)(0x010401e4));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accessWifiState = unchecked((int)(0x01040240));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_accountManagerService = unchecked((int)(0x0104022a));

			/// <summary>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int permdesc_addVoicemail = unchecked((int)(0x01040353));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7691616292170590244
			/// </remarks>
			public const int permdesc_asec_access = unchecked((int)(0x010401f6));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7041802322759014035
			/// </remarks>
			public const int permdesc_asec_create = unchecked((int)(0x010401f8));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5740754114967893169
			/// </remarks>
			public const int permdesc_asec_destroy = unchecked((int)(0x010401fa));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5438078121718738625
			/// </remarks>
			public const int permdesc_asec_mount_unmount = unchecked((int)(0x010401fc));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 1387881770708872470
			/// </remarks>
			public const int permdesc_asec_rename = unchecked((int)(0x010401fe));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_authenticateAccounts = unchecked((int)(0x0104022e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_backup = unchecked((int)(0x01040186));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_batteryStats = unchecked((int)(0x01040184));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindDeviceAdmin = unchecked((int)(0x010401a0));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindGadget = unchecked((int)(0x01040214));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindInputMethod = unchecked((int)(0x01040196));

			/// <summary>
			/// Description of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal heuristic.
			/// </summary>
			/// <remarks>
			/// Description of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal heuristic. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int permdesc_bindPackageVerifier = unchecked((int)(0x01040359));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindRemoteViews = unchecked((int)(0x0104019e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindTextService = unchecked((int)(0x01040198));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindVpnService = unchecked((int)(0x0104019a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_bindWallpaper = unchecked((int)(0x0104019c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 762515380679392945
			/// </remarks>
			public const int permdesc_bluetooth = unchecked((int)(0x01040248));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7256289774667054555
			/// </remarks>
			public const int permdesc_bluetoothAdmin = unchecked((int)(0x01040246));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5569526552607599221
			/// </remarks>
			public const int permdesc_brick = unchecked((int)(0x010401ee));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_broadcastPackageRemoved = unchecked((int)(0x0104017a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_broadcastSmsReceived = unchecked((int)(0x0104017c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 1920045289234052219
			/// </remarks>
			public const int permdesc_broadcastSticky = unchecked((int)(0x010401c8));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_broadcastWapPush = unchecked((int)(0x0104017e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_cache_filesystem = unchecked((int)(0x01040260));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_callPhone = unchecked((int)(0x0104020a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_callPrivileged = unchecked((int)(0x0104020c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_camera = unchecked((int)(0x010401ec));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_changeBackgroundDataSetting = unchecked((int)(0x0104023e
				));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 4569107043246700630
			/// outdated translation 4569107043246700630
			/// </remarks>
			public const int permdesc_changeComponentState = unchecked((int)(0x010401bc));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_changeConfiguration = unchecked((int)(0x01040166));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_changeNetworkState = unchecked((int)(0x0104023a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the applicaiton to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the applicaiton to do this.
			/// 	</remarks>
			public const int permdesc_changeTetherState = unchecked((int)(0x0104023c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_changeWifiMulticastState = unchecked((int)(0x01040244));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_changeWifiState = unchecked((int)(0x01040242));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_checkinProperties = unchecked((int)(0x01040212));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7740465694193671402
			/// </remarks>
			public const int permdesc_clearAppCache = unchecked((int)(0x010401b4));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_clearAppUserData = unchecked((int)(0x010401ac));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_confirm_full_backup = unchecked((int)(0x01040188));

			/// <summary>Description of an application permission,  used to invoke default container service to copy content.
			/// 	</summary>
			/// <remarks>Description of an application permission,  used to invoke default container service to copy content.
			/// 	</remarks>
			public const int permdesc_copyProtectedData = unchecked((int)(0x01040419));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_createNetworkSockets = unchecked((int)(0x01040236));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_deleteCacheFiles = unchecked((int)(0x010401ae));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_deletePackages = unchecked((int)(0x010401aa));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 4577331933252444818
			/// </remarks>
			public const int permdesc_devicePower = unchecked((int)(0x0104021c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_diagnostic = unchecked((int)(0x010401ba));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_disableKeyguard = unchecked((int)(0x0104024c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_dump = unchecked((int)(0x01040170));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_enableCarMode = unchecked((int)(0x01040168));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_expandStatusBar = unchecked((int)(0x0104014a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 8136644990319244802
			/// </remarks>
			public const int permdesc_factoryTest = unchecked((int)(0x0104021e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_flashlight = unchecked((int)(0x01040202));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_forceBack = unchecked((int)(0x0104016e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_forceStopPackages = unchecked((int)(0x0104016c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 6839262446413155394
			/// </remarks>
			public const int permdesc_getAccounts = unchecked((int)(0x0104022c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_getPackageSize = unchecked((int)(0x010401b0));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_getTasks = unchecked((int)(0x0104015e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_hardware_test = unchecked((int)(0x01040208));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 3946098050410874715
			/// </remarks>
			public const int permdesc_injectEvents = unchecked((int)(0x01040192));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_installLocationProvider = unchecked((int)(0x010401de));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_installPackages = unchecked((int)(0x010401b2));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_internalSystemWindow = unchecked((int)(0x0104018a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_killBackgroundProcesses = unchecked((int)(0x0104016a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_locationUpdates = unchecked((int)(0x01040210));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_manageAccounts = unchecked((int)(0x01040230));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_manageAppTokens = unchecked((int)(0x01040190));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_manageNetworkPolicy = unchecked((int)(0x01040266));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_manageUsb = unchecked((int)(0x01040204));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_masterClear = unchecked((int)(0x01040224));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int permdesc_mediaStorageWrite = unchecked((int)(0x0104025e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_modifyAudioSettings = unchecked((int)(0x010401e8));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_modifyNetworkAccounting = unchecked((int)(0x01040268));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_modifyPhoneState = unchecked((int)(0x01040216));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_mount_format_filesystems = unchecked((int)(0x010401f4));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_mount_unmount_filesystems = unchecked((int)(0x010401f2)
				);

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_movePackage = unchecked((int)(0x010401b6));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_nfc = unchecked((int)(0x0104024a));

			/// <summary>
			/// Description of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal heuristic.
			/// </summary>
			/// <remarks>
			/// Description of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal heuristic. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int permdesc_packageVerificationAgent = unchecked((int)(0x01040357));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_performCdmaProvisioning = unchecked((int)(0x0104020e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_persistentActivity = unchecked((int)(0x010401a8));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_pkgUsageStats = unchecked((int)(0x01040417));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_processOutgoingCalls = unchecked((int)(0x0104014c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5533029139652095734
			/// outdated translation 5533029139652095734
			/// </remarks>
			public const int permdesc_readCalendar = unchecked((int)(0x010401d6));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 3371591512896545975
			/// </remarks>
			public const int permdesc_readContacts = unchecked((int)(0x010401ca));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readDictionary = unchecked((int)(0x01040258));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readFrameBuffer = unchecked((int)(0x010401e6));

			/// <summary>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permdesc_readHistoryBookmarks = unchecked((int)(0x0104034d));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readInputState = unchecked((int)(0x01040194));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 2257937955580475902
			/// outdated translation 2257937955580475902
			/// </remarks>
			public const int permdesc_readLogs = unchecked((int)(0x010401b8));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readNetworkUsageHistory = unchecked((int)(0x01040264));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readPhoneState = unchecked((int)(0x01040218));

			/// <summary>Description of the read profile permission, listed so the user can decide whether to allow the application to read the user's personal profile data.
			/// 	</summary>
			/// <remarks>Description of the read profile permission, listed so the user can decide whether to allow the application to read the user's personal profile data. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int permdesc_readProfile = unchecked((int)(0x010401ce));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 3002170087197294591
			/// </remarks>
			public const int permdesc_readSms = unchecked((int)(0x01040158));

			public const int permdesc_readSocialStream = unchecked((int)(0x010401d2));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readSyncSettings = unchecked((int)(0x0104024e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_readSyncStats = unchecked((int)(0x01040252));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7914933292815491782
			/// </remarks>
			public const int permdesc_reboot = unchecked((int)(0x010401f0));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 698336728415008796
			/// </remarks>
			public const int permdesc_receiveBootCompleted = unchecked((int)(0x010401c6));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_receiveEmergencyBroadcast = unchecked((int)(0x01040152)
				);

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_receiveMms = unchecked((int)(0x01040150));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_receiveSms = unchecked((int)(0x0104014e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_receiveWapPush = unchecked((int)(0x0104015c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_recordAudio = unchecked((int)(0x010401ea));

			/// <summary>Description of an application permission, allowing an application to remove/kill tasks
			/// 	</summary>
			public const int permdesc_removeTasks = unchecked((int)(0x01040162));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_reorderTasks = unchecked((int)(0x01040160));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_retrieve_window_content = unchecked((int)(0x01040172));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 3228701938345388092
			/// </remarks>
			public const int permdesc_runSetActivityWatcher = unchecked((int)(0x01040178));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 6643963204976471878
			/// </remarks>
			public const int permdesc_sdcardWrite = unchecked((int)(0x0104025c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_sendSms = unchecked((int)(0x01040154));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_sendSmsNoConfirmation = unchecked((int)(0x01040156));

			/// <summary>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permdesc_setAlarm = unchecked((int)(0x01040351));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setAlwaysFinish = unchecked((int)(0x01040182));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setAnimationScale = unchecked((int)(0x0104018e));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setDebugApp = unchecked((int)(0x01040164));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setOrientation = unchecked((int)(0x010401a2));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int permdesc_setPointerSpeed = unchecked((int)(0x010401a4));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setPreferredApplications = unchecked((int)(0x010401be));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setProcessLimit = unchecked((int)(0x01040180));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 667294309287080045
			/// </remarks>
			public const int permdesc_setTime = unchecked((int)(0x01040226));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 1902540227418179364
			/// </remarks>
			public const int permdesc_setTimeZone = unchecked((int)(0x01040228));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setWallpaper = unchecked((int)(0x01040220));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_setWallpaperHints = unchecked((int)(0x01040222));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_shutdown = unchecked((int)(0x01040174));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_signalPersistentProcesses = unchecked((int)(0x010401a6)
				);

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_statusBar = unchecked((int)(0x01040146));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_statusBarService = unchecked((int)(0x01040148));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_stopAppSwitches = unchecked((int)(0x01040176));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_subscribedFeedsRead = unchecked((int)(0x01040254));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_subscribedFeedsWrite = unchecked((int)(0x01040256));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5109622689323490558
			/// </remarks>
			public const int permdesc_systemAlertWindow = unchecked((int)(0x0104018c));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_useCredentials = unchecked((int)(0x01040232));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_use_sip = unchecked((int)(0x01040262));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_vibrate = unchecked((int)(0x01040200));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7584036471227467099
			/// </remarks>
			public const int permdesc_wakeLock = unchecked((int)(0x0104021a));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7443433457842966680
			/// </remarks>
			public const int permdesc_writeApnSettings = unchecked((int)(0x01040238));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 2988871373544154221
			/// </remarks>
			public const int permdesc_writeCalendar = unchecked((int)(0x010401d8));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 3924383579108183601
			/// </remarks>
			public const int permdesc_writeContacts = unchecked((int)(0x010401cc));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_writeDictionary = unchecked((int)(0x0104025a));

			/// <summary>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permdesc_writeGeolocationPermissions = unchecked((int)(0x01040355
				));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_writeGservices = unchecked((int)(0x010401c4));

			/// <summary>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// outdated translation 945571990357114950
			/// </remarks>
			public const int permdesc_writeHistoryBookmarks = unchecked((int)(0x0104034f));

			/// <summary>Description of the write profile permission, listed so the user can decide whether to allow the application to write to the user's personal profile data.
			/// 	</summary>
			/// <remarks>Description of the write profile permission, listed so the user can decide whether to allow the application to write to the user's personal profile data. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int permdesc_writeProfile = unchecked((int)(0x010401d0));

			public const int permdesc_writeSecureSettings = unchecked((int)(0x010401c2));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_writeSettings = unchecked((int)(0x010401c0));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 6299398896177548095
			/// </remarks>
			public const int permdesc_writeSms = unchecked((int)(0x0104015a));

			public const int permdesc_writeSocialStream = unchecked((int)(0x010401d4));

			/// <summary>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permdesc_writeSyncSettings = unchecked((int)(0x01040250));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_accounts = unchecked((int)(0x0104013a));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_costMoney = unchecked((int)(0x01040130));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_developmentTools = unchecked((int)(0x01040142));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_hardwareControls = unchecked((int)(0x0104013c));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_location = unchecked((int)(0x01040136));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_messages = unchecked((int)(0x01040132));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_network = unchecked((int)(0x01040138));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5488050357388806068
			/// </remarks>
			public const int permgroupdesc_personalInfo = unchecked((int)(0x01040134));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_phoneCalls = unchecked((int)(0x0104013e));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 9203302214915355774
			/// </remarks>
			public const int permgroupdesc_storage = unchecked((int)(0x01040144));

			/// <summary>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Description of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgroupdesc_systemTools = unchecked((int)(0x01040140));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_accounts = unchecked((int)(0x01040139));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_costMoney = unchecked((int)(0x0104012f));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_developmentTools = unchecked((int)(0x01040141));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_hardwareControls = unchecked((int)(0x0104013b));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_location = unchecked((int)(0x01040135));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_messages = unchecked((int)(0x01040131));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_network = unchecked((int)(0x01040137));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_personalInfo = unchecked((int)(0x01040133));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_phoneCalls = unchecked((int)(0x0104013d));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_storage = unchecked((int)(0x01040143));

			/// <summary>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of a category of application permissions, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permgrouplab_systemTools = unchecked((int)(0x0104013f));

			public const int permission_request_notification_title = unchecked((int)(0x0104042a
				));

			public const int permission_request_notification_with_subtitle = unchecked((int)(
				0x0104042b));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate.</remarks>
			public const int permissions_format = unchecked((int)(0x010403e4));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessCoarseLocation = unchecked((int)(0x010401e1));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessFineLocation = unchecked((int)(0x010401df));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessLocationExtraCommands = unchecked((int)(0x010401db
				));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessMockLocation = unchecked((int)(0x010401d9));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessMtp = unchecked((int)(0x01040205));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessNetworkState = unchecked((int)(0x01040233));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessSurfaceFlinger = unchecked((int)(0x010401e3));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accessWifiState = unchecked((int)(0x0104023f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_accountManagerService = unchecked((int)(0x01040229));

			/// <summary>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int permlab_addVoicemail = unchecked((int)(0x01040352));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 1070364079249834666
			/// </remarks>
			public const int permlab_asec_access = unchecked((int)(0x010401f5));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7312078032326928899
			/// </remarks>
			public const int permlab_asec_create = unchecked((int)(0x010401f7));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7787322878955261006
			/// </remarks>
			public const int permlab_asec_destroy = unchecked((int)(0x010401f9));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7517449694667828592
			/// </remarks>
			public const int permlab_asec_mount_unmount = unchecked((int)(0x010401fb));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5685344390439934495
			/// </remarks>
			public const int permlab_asec_rename = unchecked((int)(0x010401fd));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_authenticateAccounts = unchecked((int)(0x0104022d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_backup = unchecked((int)(0x01040185));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_batteryStats = unchecked((int)(0x01040183));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindDeviceAdmin = unchecked((int)(0x0104019f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindGadget = unchecked((int)(0x01040213));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindInputMethod = unchecked((int)(0x01040195));

			/// <summary>
			/// Title of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal heuristic.
			/// </summary>
			/// <remarks>
			/// Title of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal heuristic. [CHAR LIMIT=40]
			/// </remarks>
			public const int permlab_bindPackageVerifier = unchecked((int)(0x01040358));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindRemoteViews = unchecked((int)(0x0104019d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindTextService = unchecked((int)(0x01040197));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindVpnService = unchecked((int)(0x01040199));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bindWallpaper = unchecked((int)(0x0104019b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bluetooth = unchecked((int)(0x01040247));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_bluetoothAdmin = unchecked((int)(0x01040245));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 8337817093326370537
			/// </remarks>
			public const int permlab_brick = unchecked((int)(0x010401ed));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_broadcastPackageRemoved = unchecked((int)(0x01040179));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_broadcastSmsReceived = unchecked((int)(0x0104017b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_broadcastSticky = unchecked((int)(0x010401c7));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_broadcastWapPush = unchecked((int)(0x0104017d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_cache_filesystem = unchecked((int)(0x0104025f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_callPhone = unchecked((int)(0x01040209));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_callPrivileged = unchecked((int)(0x0104020b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_camera = unchecked((int)(0x010401eb));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeBackgroundDataSetting = unchecked((int)(0x0104023d
				));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeComponentState = unchecked((int)(0x010401bb));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeConfiguration = unchecked((int)(0x01040165));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeNetworkState = unchecked((int)(0x01040239));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeTetherState = unchecked((int)(0x0104023b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeWifiMulticastState = unchecked((int)(0x01040243));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_changeWifiState = unchecked((int)(0x01040241));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_checkinProperties = unchecked((int)(0x01040211));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_clearAppCache = unchecked((int)(0x010401b3));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_clearAppUserData = unchecked((int)(0x010401ab));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_confirm_full_backup = unchecked((int)(0x01040187));

			/// <summary>
			/// permission attributes related to default container service
			/// Title of an application permission that lets an application use default container service.
			/// </summary>
			/// <remarks>
			/// permission attributes related to default container service
			/// Title of an application permission that lets an application use default container service.
			/// </remarks>
			public const int permlab_copyProtectedData = unchecked((int)(0x01040418));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_createNetworkSockets = unchecked((int)(0x01040235));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_deleteCacheFiles = unchecked((int)(0x010401ad));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_deletePackages = unchecked((int)(0x010401a9));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 4928622470980943206
			/// </remarks>
			public const int permlab_devicePower = unchecked((int)(0x0104021b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_diagnostic = unchecked((int)(0x010401b9));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_disableKeyguard = unchecked((int)(0x0104024b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_dump = unchecked((int)(0x0104016f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_enableCarMode = unchecked((int)(0x01040167));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_expandStatusBar = unchecked((int)(0x01040149));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_factoryTest = unchecked((int)(0x0104021d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_flashlight = unchecked((int)(0x01040201));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_forceBack = unchecked((int)(0x0104016d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_forceStopPackages = unchecked((int)(0x0104016b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_getAccounts = unchecked((int)(0x0104022b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_getPackageSize = unchecked((int)(0x010401af));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_getTasks = unchecked((int)(0x0104015d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_hardware_test = unchecked((int)(0x01040207));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_injectEvents = unchecked((int)(0x01040191));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_installLocationProvider = unchecked((int)(0x010401dd));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_installPackages = unchecked((int)(0x010401b1));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_internalSystemWindow = unchecked((int)(0x01040189));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_killBackgroundProcesses = unchecked((int)(0x01040169));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_locationUpdates = unchecked((int)(0x0104020f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_manageAccounts = unchecked((int)(0x0104022f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_manageAppTokens = unchecked((int)(0x0104018f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_manageNetworkPolicy = unchecked((int)(0x01040265));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_manageUsb = unchecked((int)(0x01040203));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_masterClear = unchecked((int)(0x01040223));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30]
			/// 	</remarks>
			public const int permlab_mediaStorageWrite = unchecked((int)(0x0104025d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_modifyAudioSettings = unchecked((int)(0x010401e7));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_modifyNetworkAccounting = unchecked((int)(0x01040267));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_modifyPhoneState = unchecked((int)(0x01040215));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_mount_format_filesystems = unchecked((int)(0x010401f3));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_mount_unmount_filesystems = unchecked((int)(0x010401f1));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_movePackage = unchecked((int)(0x010401b5));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_nfc = unchecked((int)(0x01040249));

			/// <summary>
			/// Title of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal logic.
			/// </summary>
			/// <remarks>
			/// Title of an application permission which allows the application to verify whether
			/// a different package is able to be installed by some internal logic. [CHAR LIMIT=40]
			/// </remarks>
			public const int permlab_packageVerificationAgent = unchecked((int)(0x01040356));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 5604848095315421425
			/// </remarks>
			public const int permlab_performCdmaProvisioning = unchecked((int)(0x0104020d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_persistentActivity = unchecked((int)(0x010401a7));

			/// <summary>
			/// permission attributes related to package usage statistics
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// permission attributes related to package usage statistics
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// </remarks>
			public const int permlab_pkgUsageStats = unchecked((int)(0x01040416));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_processOutgoingCalls = unchecked((int)(0x0104014b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 6898987798303840534
			/// </remarks>
			public const int permlab_readCalendar = unchecked((int)(0x010401d5));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readContacts = unchecked((int)(0x010401c9));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readDictionary = unchecked((int)(0x01040257));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readFrameBuffer = unchecked((int)(0x010401e5));

			/// <summary>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permlab_readHistoryBookmarks = unchecked((int)(0x0104034c));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readInputState = unchecked((int)(0x01040193));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 4811921703882532070
			/// </remarks>
			public const int permlab_readLogs = unchecked((int)(0x010401b7));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readNetworkUsageHistory = unchecked((int)(0x01040263));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readPhoneState = unchecked((int)(0x01040217));

			/// <summary>Title of the read profile permission, listed so the user can decide whether to allow the application to read the user's personal profile data.
			/// 	</summary>
			/// <remarks>Title of the read profile permission, listed so the user can decide whether to allow the application to read the user's personal profile data. [CHAR LIMIT=30]
			/// 	</remarks>
			public const int permlab_readProfile = unchecked((int)(0x010401cd));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readSms = unchecked((int)(0x01040157));

			/// <summary>Title of the read social stream permission, listed so the user can decide whether to allow the application to read information from the user's social stream.
			/// 	</summary>
			/// <remarks>Title of the read social stream permission, listed so the user can decide whether to allow the application to read information from the user's social stream. [CHAR LIMIT=30]
			/// 	</remarks>
			public const int permlab_readSocialStream = unchecked((int)(0x010401d1));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readSyncSettings = unchecked((int)(0x0104024d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_readSyncStats = unchecked((int)(0x01040251));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 2898560872462638242
			/// </remarks>
			public const int permlab_reboot = unchecked((int)(0x010401ef));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_receiveBootCompleted = unchecked((int)(0x010401c5));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_receiveEmergencyBroadcast = unchecked((int)(0x01040151));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_receiveMms = unchecked((int)(0x0104014f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_receiveSms = unchecked((int)(0x0104014d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_receiveWapPush = unchecked((int)(0x0104015b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_recordAudio = unchecked((int)(0x010401e9));

			/// <summary>Title of an application permission, allowing an application to remove/kill tasks
			/// 	</summary>
			public const int permlab_removeTasks = unchecked((int)(0x01040161));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_reorderTasks = unchecked((int)(0x0104015f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_retrieve_window_content = unchecked((int)(0x01040171));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_runSetActivityWatcher = unchecked((int)(0x01040177));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 8079403759001777291
			/// </remarks>
			public const int permlab_sdcardWrite = unchecked((int)(0x0104025b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_sendSms = unchecked((int)(0x01040153));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_sendSmsNoConfirmation = unchecked((int)(0x01040155));

			/// <summary>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permlab_setAlarm = unchecked((int)(0x01040350));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setAlwaysFinish = unchecked((int)(0x01040181));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setAnimationScale = unchecked((int)(0x0104018d));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setDebugApp = unchecked((int)(0x01040163));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setOrientation = unchecked((int)(0x010401a1));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this. [CHAR LIMIT=30]
			/// 	</remarks>
			public const int permlab_setPointerSpeed = unchecked((int)(0x010401a3));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setPreferredApplications = unchecked((int)(0x010401bd));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setProcessLimit = unchecked((int)(0x0104017f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setTime = unchecked((int)(0x01040225));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setTimeZone = unchecked((int)(0x01040227));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setWallpaper = unchecked((int)(0x0104021f));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_setWallpaperHints = unchecked((int)(0x01040221));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_shutdown = unchecked((int)(0x01040173));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_signalPersistentProcesses = unchecked((int)(0x010401a5));

			/// <summary>
			/// Permissions
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Permissions
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// </remarks>
			public const int permlab_statusBar = unchecked((int)(0x01040145));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_statusBarService = unchecked((int)(0x01040147));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_stopAppSwitches = unchecked((int)(0x01040175));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_subscribedFeedsRead = unchecked((int)(0x01040253));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_subscribedFeedsWrite = unchecked((int)(0x01040255));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_systemAlertWindow = unchecked((int)(0x0104018b));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_useCredentials = unchecked((int)(0x01040231));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_use_sip = unchecked((int)(0x01040261));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_vibrate = unchecked((int)(0x010401ff));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 573480187941496130
			/// </remarks>
			public const int permlab_wakeLock = unchecked((int)(0x01040219));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 7823599210086622545
			/// </remarks>
			public const int permlab_writeApnSettings = unchecked((int)(0x01040237));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// outdated translation 3894879352594904361
			/// </remarks>
			public const int permlab_writeCalendar = unchecked((int)(0x010401d7));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_writeContacts = unchecked((int)(0x010401cb));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_writeDictionary = unchecked((int)(0x01040259));

			/// <summary>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permlab_writeGeolocationPermissions = unchecked((int)(0x01040354
				));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_writeGservices = unchecked((int)(0x010401c3));

			/// <summary>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </summary>
			/// <remarks>
			/// Title of an application permission, listed so the user can choose whether
			/// they want to allow the application to do this.
			/// </remarks>
			public const int permlab_writeHistoryBookmarks = unchecked((int)(0x0104034e));

			/// <summary>Title of the write profile permission, listed so the user can decide whether to allow the application to write to the user's personal profile data.
			/// 	</summary>
			/// <remarks>Title of the write profile permission, listed so the user can decide whether to allow the application to write to the user's personal profile data. [CHAR LIMIT=30]
			/// 	</remarks>
			public const int permlab_writeProfile = unchecked((int)(0x010401cf));

			public const int permlab_writeSecureSettings = unchecked((int)(0x010401c1));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_writeSettings = unchecked((int)(0x010401bf));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_writeSms = unchecked((int)(0x01040159));

			/// <summary>Title of the write social stream permission, listed so the user can decide whether to allow the application to write information to the user's social stream.
			/// 	</summary>
			/// <remarks>Title of the write social stream permission, listed so the user can decide whether to allow the application to write information to the user's social stream. [CHAR LIMIT=30]
			/// 	</remarks>
			public const int permlab_writeSocialStream = unchecked((int)(0x010401d3));

			/// <summary>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</summary>
			/// <remarks>Title of an application permission, listed so the user can choose whether they want to allow the application to do this.
			/// 	</remarks>
			public const int permlab_writeSyncSettings = unchecked((int)(0x0104024f));

			/// <summary>When installing an application, the less-dangerous permissions are hidden.
			/// 	</summary>
			/// <remarks>When installing an application, the less-dangerous permissions are hidden.  If the user showed those, this is the text to hide them again.
			/// 	</remarks>
			public const int perms_hide = unchecked((int)(0x010403e6));

			/// <summary>When installing an application, the less-dangerous permissions are hidden.
			/// 	</summary>
			/// <remarks>When installing an application, the less-dangerous permissions are hidden.  This is the text to show those.
			/// 	</remarks>
			public const int perms_show_all = unchecked((int)(0x010403e7));

			/// <summary>Suffix added to a number to signify size in petabytes.</summary>
			/// <remarks>Suffix added to a number to signify size in petabytes.</remarks>
			public const int petabyteShort = unchecked((int)(0x010400b8));

			/// <summary>Assistant phone number type</summary>
			public const int phoneTypeAssistant = unchecked((int)(0x0104028e));

			/// <summary>Callback phone number type</summary>
			public const int phoneTypeCallback = unchecked((int)(0x01040283));

			/// <summary>Car phone number type</summary>
			public const int phoneTypeCar = unchecked((int)(0x01040284));

			/// <summary>Company main phone number type</summary>
			public const int phoneTypeCompanyMain = unchecked((int)(0x01040285));

			/// <summary>Custom phone number type</summary>
			public const int phoneTypeCustom = unchecked((int)(0x0104027b));

			/// <summary>Home fax phone number type</summary>
			public const int phoneTypeFaxHome = unchecked((int)(0x01040280));

			/// <summary>Work fax phone number type</summary>
			public const int phoneTypeFaxWork = unchecked((int)(0x0104027f));

			/// <summary>Home phone number type</summary>
			public const int phoneTypeHome = unchecked((int)(0x0104027c));

			/// <summary>ISDN phone number type</summary>
			public const int phoneTypeIsdn = unchecked((int)(0x01040286));

			/// <summary>Main phone number type</summary>
			public const int phoneTypeMain = unchecked((int)(0x01040287));

			/// <summary>MMS phone number type</summary>
			public const int phoneTypeMms = unchecked((int)(0x0104028f));

			/// <summary>Mobile phone number type</summary>
			public const int phoneTypeMobile = unchecked((int)(0x0104027d));

			/// <summary>Other phone number type</summary>
			public const int phoneTypeOther = unchecked((int)(0x01040282));

			/// <summary>Other fax phone number type</summary>
			public const int phoneTypeOtherFax = unchecked((int)(0x01040288));

			/// <summary>Pager phone number type</summary>
			public const int phoneTypePager = unchecked((int)(0x01040281));

			/// <summary>Radio phone number type</summary>
			public const int phoneTypeRadio = unchecked((int)(0x01040289));

			/// <summary>Telex phone number type</summary>
			public const int phoneTypeTelex = unchecked((int)(0x0104028a));

			/// <summary>TTY TDD phone number type</summary>
			public const int phoneTypeTtyTdd = unchecked((int)(0x0104028b));

			/// <summary>Work phone number type</summary>
			public const int phoneTypeWork = unchecked((int)(0x0104027e));

			/// <summary>Work mobile phone number type</summary>
			public const int phoneTypeWorkMobile = unchecked((int)(0x0104028c));

			/// <summary>Work pager phone number type</summary>
			public const int phoneTypeWorkPager = unchecked((int)(0x0104028d));

			public const int pm = unchecked((int)(0x01040071));

			/// <summary>Description of policy access to disable all device cameras [CHAR LIMIT=110]
			/// 	</summary>
			public const int policydesc_disableCamera = unchecked((int)(0x0104027a));

			/// <summary>Description of policy access to require encrypted storage [CHAR LIMIT=110]
			/// 	</summary>
			public const int policydesc_encryptedStorage = unchecked((int)(0x01040278));

			/// <summary>Description of policy access to enforce password expiration [CHAR LIMIT=110]
			/// 	</summary>
			public const int policydesc_expirePassword = unchecked((int)(0x01040276));

			/// <summary>
			/// Description of policy access to limiting the user's password choices
			/// outdated translation 2819868664946089740
			/// </summary>
			public const int policydesc_forceLock = unchecked((int)(0x01040270));

			/// <summary>
			/// Description of policy access to limiting the user's password choices
			/// outdated translation 1719877245692318299
			/// </summary>
			public const int policydesc_limitPassword = unchecked((int)(0x0104026a));

			/// <summary>
			/// Description of policy access to reset user's password
			/// outdated translation 3332167600331799991
			/// </summary>
			public const int policydesc_resetPassword = unchecked((int)(0x0104026e));

			/// <summary>Description of policy access to wipe the user's data</summary>
			public const int policydesc_setGlobalProxy = unchecked((int)(0x01040274));

			/// <summary>
			/// Description of policy access to watch user login attempts
			/// outdated translation 1961251179624843483
			/// outdated translation 1961251179624843483
			/// </summary>
			public const int policydesc_watchLogin = unchecked((int)(0x0104026c));

			/// <summary>
			/// Description of policy access to wipe the user's data
			/// outdated translation 2314060933796396205
			/// outdated translation 2314060933796396205
			/// </summary>
			public const int policydesc_wipeData = unchecked((int)(0x01040272));

			/// <summary>Title of policy access to disable all device cameras [CHAR LIMIT=30]</summary>
			public const int policylab_disableCamera = unchecked((int)(0x01040279));

			/// <summary>Title of policy access to require encrypted storage [CHAR LIMIT=30]</summary>
			public const int policylab_encryptedStorage = unchecked((int)(0x01040277));

			/// <summary>Title of policy access to enforce password expiration [CHAR LIMIT=30]</summary>
			public const int policylab_expirePassword = unchecked((int)(0x01040275));

			/// <summary>
			/// Title of policy access to force lock the device
			/// outdated translation 5760466025247634488
			/// </summary>
			public const int policylab_forceLock = unchecked((int)(0x0104026f));

			/// <summary>
			/// Policy administration
			/// Title of policy access to limiting the user's password choices
			/// outdated translation 4307861496302850201
			/// </summary>
			public const int policylab_limitPassword = unchecked((int)(0x01040269));

			/// <summary>
			/// Title of policy access to reset user's password
			/// outdated translation 9084772090797485420
			/// </summary>
			public const int policylab_resetPassword = unchecked((int)(0x0104026d));

			public const int policylab_setGlobalProxy = unchecked((int)(0x01040273));

			/// <summary>
			/// Title of policy access to watch user login attempts
			/// outdated translation 7374780712664285321
			/// </summary>
			public const int policylab_watchLogin = unchecked((int)(0x0104026b));

			/// <summary>Title of policy access to wipe the user's data</summary>
			public const int policylab_wipeData = unchecked((int)(0x01040271));

			/// <summary>Custom postal address type</summary>
			public const int postalTypeCustom = unchecked((int)(0x01040299));

			/// <summary>Home postal address type</summary>
			public const int postalTypeHome = unchecked((int)(0x0104029a));

			/// <summary>Other postal address type</summary>
			public const int postalTypeOther = unchecked((int)(0x0104029c));

			/// <summary>Work postal address type</summary>
			public const int postalTypeWork = unchecked((int)(0x0104029b));

			/// <summary>Title for the Phone Options dialog to lock the screen, turn off the phone etc.
			/// 	</summary>
			/// <remarks>
			/// Title for the Phone Options dialog to lock the screen, turn off the phone etc.
			/// outdated translation 1319919075463988638
			/// </remarks>
			public const int power_dialog = unchecked((int)(0x01040119));

			/// <summary>Button to turn off the phone, within the Phone Options dialog</summary>
			public const int power_off = unchecked((int)(0x0104011e));

			/// <summary>Prepended to the shortcut for a menu item to indicate that the user should hold the MENU button together with the shortcut to invoke the item.
			/// 	</summary>
			/// <remarks>Prepended to the shortcut for a menu item to indicate that the user should hold the MENU button together with the shortcut to invoke the item. For example, if the shortcut to open a new tab in browser is MENU and B together, then this would be prepended to the letter "B"
			/// 	</remarks>
			public const int prepend_shortcut_label = unchecked((int)(0x01040361));

			/// <summary>String used to display the date.</summary>
			/// <remarks>String used to display the date. Preposition for date display ("on May 29")
			/// 	</remarks>
			public const int preposition_for_date = unchecked((int)(0x0104036e));

			/// <summary>String used to display the date.</summary>
			/// <remarks>String used to display the date. Preposition for time display ("at 2:33am")
			/// 	</remarks>
			public const int preposition_for_time = unchecked((int)(0x0104036f));

			/// <summary>String used to display the date.</summary>
			/// <remarks>String used to display the date. Preposition for year display ("in 2008")
			/// 	</remarks>
			public const int preposition_for_year = unchecked((int)(0x01040370));

			/// <summary>Text for progress dialog while erasing SD card [CHAR LIMIT=NONE]</summary>
			public const int progress_erasing = unchecked((int)(0x01040449));

			/// <summary>Text for progress dialog while unmounting SD card [CHAR LIMIT=NONE]</summary>
			public const int progress_unmounting = unchecked((int)(0x01040448));

			/// <summary>Description of the not selected state of a RadioButton.</summary>
			/// <remarks>Description of the not selected state of a RadioButton. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int radiobutton_not_selected = unchecked((int)(0x01040474));

			/// <summary>
			/// RadioButton/CheckedTextView - accessibility support
			/// Description of the selected state of a RadioButton.
			/// </summary>
			/// <remarks>
			/// RadioButton/CheckedTextView - accessibility support
			/// Description of the selected state of a RadioButton. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int radiobutton_selected = unchecked((int)(0x01040473));

			/// <summary>
			/// Recent Tasks dialog: title
			/// TODO: this should move to SystemUI.apk, but the code for the old
			/// recent dialog is still in the framework
			/// </summary>
			public const int recent_tasks_title = unchecked((int)(0x01040122));

			/// <summary>Assistant relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeAssistant = unchecked((int)(0x010402af));

			/// <summary>Brother relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeBrother = unchecked((int)(0x010402b0));

			/// <summary>Child relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeChild = unchecked((int)(0x010402b1));

			/// <summary>Custom relationship custom [CHAR LIMIT=20]</summary>
			public const int relationTypeCustom = unchecked((int)(0x010402ae));

			/// <summary>Domestic Partner relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeDomesticPartner = unchecked((int)(0x010402b2));

			/// <summary>Father relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeFather = unchecked((int)(0x010402b3));

			/// <summary>Friend relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeFriend = unchecked((int)(0x010402b4));

			/// <summary>Manager relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeManager = unchecked((int)(0x010402b5));

			/// <summary>Mother relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeMother = unchecked((int)(0x010402b6));

			/// <summary>Parent relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeParent = unchecked((int)(0x010402b7));

			/// <summary>Partner relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypePartner = unchecked((int)(0x010402b8));

			/// <summary>Referred by relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeReferredBy = unchecked((int)(0x010402b9));

			/// <summary>Relative relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeRelative = unchecked((int)(0x010402ba));

			/// <summary>Sister relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeSister = unchecked((int)(0x010402bb));

			/// <summary>Spouse relationship type [CHAR LIMIT=20]</summary>
			public const int relationTypeSpouse = unchecked((int)(0x010402bc));

			/// <summary>Format indicating a relative expression and time.</summary>
			/// <remarks>
			/// Format indicating a relative expression and time.
			/// Example: "4 hours ago, 11:00 am"
			/// </remarks>
			public const int relative_time = unchecked((int)(0x0104037d));

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu. This action is used to replace the current word by other suggested words, suggested by the IME or the spell checker
			/// 	</remarks>
			public const int replace = unchecked((int)(0x01040384));

			/// <summary>Button allowing the user to send a bug report for application which has encountered an error.
			/// 	</summary>
			/// <remarks>Button allowing the user to send a bug report for application which has encountered an error.
			/// 	</remarks>
			public const int report = unchecked((int)(0x0104039f));

			/// <summary>Label for <input type="reset"> button in html</summary>
			public const int reset = unchecked((int)(0x01040438));

			/// <summary>Choice in the ringtone picker.</summary>
			/// <remarks>Choice in the ringtone picker.  If chosen, the default ringtone will be used.
			/// 	</remarks>
			public const int ringtone_default = unchecked((int)(0x010403c4));

			/// <summary>Choice in the ringtone picker.</summary>
			/// <remarks>Choice in the ringtone picker.  If chosen, the default ringtone will be used. This fills in the actual ringtone's title into the message.
			/// 	</remarks>
			public const int ringtone_default_with_actual = unchecked((int)(0x010403c5));

			/// <summary>The title of the ringtone picker dialog.</summary>
			/// <remarks>The title of the ringtone picker dialog.</remarks>
			public const int ringtone_picker_title = unchecked((int)(0x010403c7));

			/// <summary>Choice in the ringtone picker.</summary>
			/// <remarks>Choice in the ringtone picker.  If chosen, there will be silence instead of a ringtone played.
			/// 	</remarks>
			public const int ringtone_silent = unchecked((int)(0x010403c6));

			/// <summary>If there is ever a ringtone set for some setting, but that ringtone can no longer be resolved, t his is shown instead.
			/// 	</summary>
			/// <remarks>If there is ever a ringtone set for some setting, but that ringtone can no longer be resolved, t his is shown instead.  For example, if the ringtone was on a SD card and it had been removed, this woudl be shown for ringtones on that SD card.
			/// 	</remarks>
			public const int ringtone_unknown = unchecked((int)(0x010403c8));

			/// <summary>Default roaming indicator text</summary>
			public const int roamingText0 = unchecked((int)(0x010400f0));

			public const int roamingText1 = unchecked((int)(0x010400f1));

			public const int roamingText10 = unchecked((int)(0x010400fa));

			public const int roamingText11 = unchecked((int)(0x010400fb));

			public const int roamingText12 = unchecked((int)(0x010400fc));

			public const int roamingText2 = unchecked((int)(0x010400f2));

			public const int roamingText3 = unchecked((int)(0x010400f3));

			public const int roamingText4 = unchecked((int)(0x010400f4));

			public const int roamingText5 = unchecked((int)(0x010400f5));

			public const int roamingText6 = unchecked((int)(0x010400f6));

			public const int roamingText7 = unchecked((int)(0x010400f7));

			public const int roamingText8 = unchecked((int)(0x010400f8));

			public const int roamingText9 = unchecked((int)(0x010400f9));

			public const int roamingTextSearching = unchecked((int)(0x010400fd));

			/// <summary>Displayed to the user to tell them that they have started up the phone in "safe mode"
			/// 	</summary>
			public const int safeMode = unchecked((int)(0x0104012d));

			public const int same_month_md1_md2 = unchecked((int)(0x010400a4));

			public const int same_month_md1_time1_md2_time2 = unchecked((int)(0x0104009c));

			public const int same_month_mdy1_mdy2 = unchecked((int)(0x010400a7));

			public const int same_month_mdy1_time1_mdy2_time2 = unchecked((int)(0x010400a0));

			public const int same_month_wday1_md1_time1_wday2_md2_time2 = unchecked((int)(0x0104009e
				));

			public const int same_month_wday1_md1_wday2_md2 = unchecked((int)(0x010400a5));

			public const int same_month_wday1_mdy1_time1_wday2_mdy2_time2 = unchecked((int)(0x010400a2
				));

			public const int same_month_wday1_mdy1_wday2_mdy2 = unchecked((int)(0x010400a3));

			public const int same_year_md1_md2 = unchecked((int)(0x01040099));

			public const int same_year_md1_time1_md2_time2 = unchecked((int)(0x0104009b));

			public const int same_year_mdy1_mdy2 = unchecked((int)(0x010400a6));

			public const int same_year_mdy1_time1_mdy2_time2 = unchecked((int)(0x0104009f));

			public const int same_year_wday1_md1_time1_wday2_md2_time2 = unchecked((int)(0x0104009d
				));

			public const int same_year_wday1_md1_wday2_md2 = unchecked((int)(0x0104009a));

			public const int same_year_wday1_mdy1_time1_wday2_mdy2_time2 = unchecked((int)(0x010400a1
				));

			public const int same_year_wday1_mdy1_wday2_mdy2 = unchecked((int)(0x010400a8));

			/// <summary>Title of the WebView save password dialog.</summary>
			/// <remarks>Title of the WebView save password dialog.  If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password.
			/// 	</remarks>
			public const int save_password_label = unchecked((int)(0x0104030f));

			/// <summary>If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password.
			/// 	</summary>
			/// <remarks>If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Text in the save password dialog, asking if the browser should remember a password.
			/// 	</remarks>
			public const int save_password_message = unchecked((int)(0x0104035a));

			/// <summary>Button in the save password dialog, saying never to remember this password.
			/// 	</summary>
			/// <remarks>Button in the save password dialog, saying never to remember this password. This should be short. Should be "Never for this site". But it is too long, use "Never" instead
			/// 	</remarks>
			public const int save_password_never = unchecked((int)(0x0104035d));

			/// <summary>If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password.
			/// 	</summary>
			/// <remarks>If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying not to remember this password.
			/// 	</remarks>
			public const int save_password_notnow = unchecked((int)(0x0104035b));

			/// <summary>If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password.
			/// 	</summary>
			/// <remarks>If the user enters a password in a form on a website, a dialog will come up asking if they want to save the password. Button in the save password dialog, saying to remember this password.
			/// 	</remarks>
			public const int save_password_remember = unchecked((int)(0x0104035c));

			/// <summary>[CHAR LIMIT=200] Compat mode dialog: hint to re-enable compat mode dialog.
			/// 	</summary>
			/// <remarks>[CHAR LIMIT=200] Compat mode dialog: hint to re-enable compat mode dialog.
			/// 	</remarks>
			public const int screen_compat_mode_hint = unchecked((int)(0x010403a6));

			/// <summary>[CHAR LIMIT=50] Compat mode dialog: compat mode switch label.</summary>
			/// <remarks>[CHAR LIMIT=50] Compat mode dialog: compat mode switch label.</remarks>
			public const int screen_compat_mode_scale = unchecked((int)(0x010403a4));

			/// <summary>[CHAR LIMIT=50] Compat mode dialog: compat mode switch label.</summary>
			/// <remarks>[CHAR LIMIT=50] Compat mode dialog: compat mode switch label.</remarks>
			public const int screen_compat_mode_show = unchecked((int)(0x010403a5));

			/// <summary>Button to lock the screen, within the Phone Options dialog</summary>
			public const int screen_lock = unchecked((int)(0x0104011d));

			/// <summary>This is the default button label in the system-wide search UI.</summary>
			/// <remarks>
			/// This is the default button label in the system-wide search UI.
			/// It is also used by the home screen's search "widget". It should be short
			/// </remarks>
			public const int search_go = unchecked((int)(0x0104000c));

			/// <summary>SearchView accessibility description for clear button [CHAR LIMIT=NONE]</summary>
			public const int searchview_description_clear = unchecked((int)(0x01040367));

			/// <summary>SearchView accessibility description for search text field [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int searchview_description_query = unchecked((int)(0x01040366));

			/// <summary>SearchView accessibility description for search button [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int searchview_description_search = unchecked((int)(0x01040365));

			/// <summary>SearchView accessibility description for submit button [CHAR LIMIT=NONE]
			/// 	</summary>
			public const int searchview_description_submit = unchecked((int)(0x01040368));

			/// <summary>SearchView accessibility description for voice button [CHAR LIMIT=NONE]</summary>
			public const int searchview_description_voice = unchecked((int)(0x01040369));

			/// <summary>Appened to express the value is this unit of time.</summary>
			/// <remarks>Appened to express the value is this unit of time.</remarks>
			public const int second = unchecked((int)(0x01040377));

			/// <summary>Appened to express the value is this unit of time.</summary>
			/// <remarks>Appened to express the value is this unit of time.</remarks>
			public const int seconds = unchecked((int)(0x01040378));

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu. This action is used to select all text in the edit field.
			/// 	</remarks>
			public const int selectAll = unchecked((int)(0x0104000d));

			/// <summary>Item on EditText context menu.</summary>
			/// <remarks>Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20]
			/// 	</remarks>
			public const int selectTextMode = unchecked((int)(0x01040016));

			/// <summary>Name of the dialog that lets the user choose an accented character to insert
			/// 	</summary>
			public const int select_character = unchecked((int)(0x010403d4));

			/// <summary>Title of the pop-up dialog in which the user switches input method components.
			/// 	</summary>
			/// <remarks>Title of the pop-up dialog in which the user switches input method components.
			/// 	</remarks>
			public const int select_input_method = unchecked((int)(0x01040404));

			/// <summary>
			/// Displayed in the title of the chooser for things to do with text that
			/// is to be sent to another application.
			/// </summary>
			/// <remarks>
			/// Displayed in the title of the chooser for things to do with text that
			/// is to be sent to another application. For example, I can send
			/// text through SMS or IM.  A dialog with those choices would be shown,
			/// and this would be the title.
			/// </remarks>
			public const int sendText = unchecked((int)(0x010403b5));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int serial_number = unchecked((int)(0x010404ad));

			/// <summary>Example: Service was enabled for: Voice, Data</summary>
			public const int serviceClassData = unchecked((int)(0x010400e9));

			/// <summary>Meaning: asynchronous data.</summary>
			/// <remarks>Meaning: asynchronous data.  Example: Service was enabled for: Voice, Async
			/// 	</remarks>
			public const int serviceClassDataAsync = unchecked((int)(0x010400ec));

			/// <summary>Meaning: synchronous data.</summary>
			/// <remarks>Meaning: synchronous data.  Example: Service was enabled for: Voice, Async
			/// 	</remarks>
			public const int serviceClassDataSync = unchecked((int)(0x010400ed));

			/// <summary>Example: Service was enabled for: Voice, FAX</summary>
			public const int serviceClassFAX = unchecked((int)(0x010400ea));

			/// <summary>Meaning: unknown.</summary>
			/// <remarks>Meaning: unknown.  Example: Service was enabled for: Voice, PAD</remarks>
			public const int serviceClassPAD = unchecked((int)(0x010400ef));

			/// <summary>Meaning: packet data.</summary>
			/// <remarks>Meaning: packet data.  Example: Service was enabled for: Voice, Packet</remarks>
			public const int serviceClassPacket = unchecked((int)(0x010400ee));

			/// <summary>Example: Service was enabled for: Voice, SMS</summary>
			public const int serviceClassSMS = unchecked((int)(0x010400eb));

			/// <summary>Example: Service was enabled for: Voice, Data</summary>
			public const int serviceClassVoice = unchecked((int)(0x010400e8));

			/// <summary>Displayed when a phone feature such as call forwarding was deactivated.</summary>
			/// <remarks>Displayed when a phone feature such as call forwarding was deactivated.</remarks>
			public const int serviceDisabled = unchecked((int)(0x010400c0));

			/// <summary>Displayed when a phone feature such as call barring was activated.</summary>
			/// <remarks>Displayed when a phone feature such as call barring was activated.</remarks>
			public const int serviceEnabled = unchecked((int)(0x010400be));

			/// <summary>
			/// Displayed in front of the list of a set of service classes
			/// (voice, data, fax, etc.) that were enabled.
			/// </summary>
			/// <remarks>
			/// Displayed in front of the list of a set of service classes
			/// (voice, data, fax, etc.) that were enabled.
			/// </remarks>
			public const int serviceEnabledFor = unchecked((int)(0x010400bf));

			/// <summary>Displayed when a phone property such as a SIM password was erased.</summary>
			/// <remarks>Displayed when a phone property such as a SIM password was erased.</remarks>
			public const int serviceErased = unchecked((int)(0x010400c2));

			/// <summary>Displayed to tell the user that caller ID is not provisioned for their SIM.
			/// 	</summary>
			/// <remarks>Displayed to tell the user that caller ID is not provisioned for their SIM.
			/// 	</remarks>
			public const int serviceNotProvisioned = unchecked((int)(0x010400dd));

			/// <summary>Displayed when a phone property such as a SIM password was registered.</summary>
			/// <remarks>Displayed when a phone property such as a SIM password was registered.</remarks>
			public const int serviceRegistered = unchecked((int)(0x010400c1));

			/// <summary>Text to show in the auto complete drop down list on a text view when the WebView can auto fill the entire form but the user has not configured an AutoFill profile [CHAR-LIMIT=16]
			/// 	</summary>
			public const int setup_autofill = unchecked((int)(0x01040312));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int sha1_fingerprint = unchecked((int)(0x010404b0));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int sha256_fingerprint = unchecked((int)(0x010404af));

			/// <summary>
			/// Text for WebView's text selection Action Mode
			/// ActionBar action to share the current selection [CHAR LIMIT=10]
			/// </summary>
			public const int share = unchecked((int)(0x01040450));

			/// <summary>Title for a dialog showing possible activities for sharing in ShareActionProvider [CHAR LIMIT=25]
			/// 	</summary>
			public const int share_action_provider_share_with = unchecked((int)(0x010404b3));

			/// <summary>
			/// ShareActionProvider - accessibility support
			/// Description of the choose target button in a ShareActionProvider (share UI).
			/// </summary>
			/// <remarks>
			/// ShareActionProvider - accessibility support
			/// Description of the choose target button in a ShareActionProvider (share UI). [CHAR LIMIT=NONE]
			/// </remarks>
			public const int shareactionprovider_share_with = unchecked((int)(0x01040481));

			/// <summary>Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI).
			/// 	</summary>
			/// <remarks>Description of a share target (both in the list of such or the default share button) in a ShareActionProvider (share UI). [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int shareactionprovider_share_with_application = unchecked((int)(0x01040482
				));

			public const int short_format_month = unchecked((int)(0x010400a9));

			/// <summary>Shutdown Confirmation Dialog.</summary>
			/// <remarks>
			/// Shutdown Confirmation Dialog.  When the user chooses to power off the phone, there will
			/// be a confirmation dialog.  This is the message.
			/// </remarks>
			public const int shutdown_confirm = unchecked((int)(0x01040120));

			/// <summary>Shutdown Confirmation Dialog.</summary>
			/// <remarks>
			/// Shutdown Confirmation Dialog.  When the user chooses to power off the phone, it asks
			/// the user if they'd like to shut down.  This is the message.  This is used instead of
			/// shutdown_confirm when the system is configured to use long press to go directly to the
			/// power off dialog instead of the global actions menu.
			/// </remarks>
			public const int shutdown_confirm_question = unchecked((int)(0x01040121));

			/// <summary>Shutdown Progress Dialog.</summary>
			/// <remarks>Shutdown Progress Dialog. This is shown if the user chooses to power off the phone.
			/// 	</remarks>
			public const int shutdown_progress = unchecked((int)(0x0104011f));

			/// <summary>Button to turn on silent mode, within the Phone Options dialog</summary>
			public const int silent_mode = unchecked((int)(0x0104011a));

			/// <summary>See SIM_ADDED_DIALOG.</summary>
			/// <remarks>See SIM_ADDED_DIALOG.  This is the message of that dialog.</remarks>
			public const int sim_added_message = unchecked((int)(0x010403de));

			/// <summary>See SIM_ADDED_DIALOG.</summary>
			/// <remarks>See SIM_ADDED_DIALOG.  This is the title of that dialog.</remarks>
			public const int sim_added_title = unchecked((int)(0x010403dd));

			/// <summary>See SIM_REMOVED_DIALOG.</summary>
			/// <remarks>See SIM_REMOVED_DIALOG.  This is the button of that dialog.</remarks>
			public const int sim_done_button = unchecked((int)(0x010403dc));

			/// <summary>See SIM_REMOVED_DIALOG.</summary>
			/// <remarks>See SIM_REMOVED_DIALOG.  This is the message of that dialog.</remarks>
			public const int sim_removed_message = unchecked((int)(0x010403db));

			/// <summary>See SIM_REMOVED_DIALOG.</summary>
			/// <remarks>See SIM_REMOVED_DIALOG.  This is the title of that dialog.</remarks>
			public const int sim_removed_title = unchecked((int)(0x010403da));

			/// <summary>See SIM_ADDED_DIALOG.</summary>
			/// <remarks>See SIM_ADDED_DIALOG.  This is the button of that dialog.</remarks>
			public const int sim_restart_button = unchecked((int)(0x010403df));

			/// <summary>Custom SIP address type</summary>
			public const int sipAddressTypeCustom = unchecked((int)(0x010402bd));

			/// <summary>Home SIP address type</summary>
			public const int sipAddressTypeHome = unchecked((int)(0x010402be));

			/// <summary>Other SIP address type</summary>
			public const int sipAddressTypeOther = unchecked((int)(0x010402c0));

			/// <summary>Work SIP address type</summary>
			public const int sipAddressTypeWork = unchecked((int)(0x010402bf));

			/// <summary>Optional button to Skip a PreferenceActivity [CHAR LIMIT=20]</summary>
			public const int skip_button_label = unchecked((int)(0x01040440));

			/// <summary>See SMS_DIALOG.</summary>
			/// <remarks>See SMS_DIALOG.  This is shown if the current application's name cannot be figuerd out.
			/// 	</remarks>
			public const int sms_control_default_app_name = unchecked((int)(0x010403d5));

			/// <summary>See SMS_DIALOG.</summary>
			/// <remarks>See SMS_DIALOG.  This is the message shown in that dialog.</remarks>
			public const int sms_control_message = unchecked((int)(0x010403d7));

			/// <summary>See SMS_DIALOG.</summary>
			/// <remarks>See SMS_DIALOG.  This is a button choice to disallow sending the SMSes..
			/// 	</remarks>
			public const int sms_control_no = unchecked((int)(0x010403d9));

			/// <summary>SMS_DIALOG: An SMS dialog is shown if an application tries to send too many SMSes.
			/// 	</summary>
			/// <remarks>SMS_DIALOG: An SMS dialog is shown if an application tries to send too many SMSes.  This is the title of that dialog.
			/// 	</remarks>
			public const int sms_control_title = unchecked((int)(0x010403d6));

			/// <summary>See SMS_DIALOG.</summary>
			/// <remarks>See SMS_DIALOG.  This is a button choice to allow sending the SMSes.</remarks>
			public const int sms_control_yes = unchecked((int)(0x010403d8));

			/// <summary>Text of the alert that is displayed when an application has violated StrictMode.
			/// 	</summary>
			/// <remarks>Text of the alert that is displayed when an application has violated StrictMode.
			/// 	</remarks>
			public const int smv_application = unchecked((int)(0x010403a7));

			/// <summary>Text of the alert that is displayed when an application has violated StrictMode.
			/// 	</summary>
			/// <remarks>Text of the alert that is displayed when an application has violated StrictMode.
			/// 	</remarks>
			public const int smv_process = unchecked((int)(0x010403a8));

			/// <summary>
			/// SSL Certificate dialogs
			/// Title for an SSL Certificate dialog
			/// </summary>
			public const int ssl_certificate = unchecked((int)(0x010404a3));

			/// <summary>Message on an SSL Certificate dialog</summary>
			public const int ssl_certificate_is_valid = unchecked((int)(0x010404a4));

			/// <summary>
			/// Status Bar icon descriptions
			/// Description of for the status bar's icon that the device is locked for accessibility.
			/// </summary>
			/// <remarks>
			/// Status Bar icon descriptions
			/// Description of for the status bar's icon that the device is locked for accessibility. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int status_bar_device_locked = unchecked((int)(0x010404b4));

			/// <summary>
			/// Text to use when the number in a notification info is too large
			/// (greater than status_bar_notification_info_maxnum, defined in
			/// values/config.xml) and must be truncated.
			/// </summary>
			/// <remarks>
			/// Text to use when the number in a notification info is too large
			/// (greater than status_bar_notification_info_maxnum, defined in
			/// values/config.xml) and must be truncated. May need to be localized
			/// for most appropriate textual indicator of "more than X".
			/// [CHAR LIMIT=4]
			/// </remarks>
			public const int status_bar_notification_info_overflow = unchecked((int)(0x01040017
				));

			/// <summary>Storage description for internal storage.</summary>
			/// <remarks>Storage description for internal storage. [CHAR LIMIT=NONE]</remarks>
			public const int storage_internal = unchecked((int)(0x01040491));

			/// <summary>Storage description for the SD card.</summary>
			/// <remarks>Storage description for the SD card. [CHAR LIMIT=NONE]</remarks>
			public const int storage_sd_card = unchecked((int)(0x01040492));

			/// <summary>Storage description for USB storage.</summary>
			/// <remarks>Storage description for USB storage. [CHAR LIMIT=NONE]</remarks>
			public const int storage_usb = unchecked((int)(0x01040493));

			/// <summary>Label for <input type="submit"> button in html</summary>
			public const int submit = unchecked((int)(0x01040439));

			/// <summary>Description of the off state of a Switch.</summary>
			/// <remarks>Description of the off state of a Switch. [CHAR LIMIT=NONE]</remarks>
			public const int switch_off = unchecked((int)(0x01040476));

			/// <summary>
			/// Switch - accessibility support
			/// Description of the on state of a Switch.
			/// </summary>
			/// <remarks>
			/// Switch - accessibility support
			/// Description of the on state of a Switch. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int switch_on = unchecked((int)(0x01040475));

			/// <summary>Label to show for a service that is running because it is a sync adapter.
			/// 	</summary>
			/// <remarks>Label to show for a service that is running because it is a sync adapter.
			/// 	</remarks>
			public const int sync_binding_label = unchecked((int)(0x0104042d));

			/// <summary>Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to do nothing for now
			/// 	</summary>
			public const int sync_do_nothing = unchecked((int)(0x0104045c));

			/// <summary>Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to delete the items
			/// 	</summary>
			public const int sync_really_delete = unchecked((int)(0x0104045a));

			/// <summary>Error message when the sync tried to delete too many things</summary>
			public const int sync_too_many_deletes = unchecked((int)(0x01040458));

			/// <summary>Dialog message for when there are too many deletes that would take place and we want user confirmation
			/// 	</summary>
			public const int sync_too_many_deletes_desc = unchecked((int)(0x01040459));

			/// <summary>Dialog action for when there are too many deletes that would take place and we want user confirmation, and the user wants to undo the deletions
			/// 	</summary>
			public const int sync_undo_deletes = unchecked((int)(0x0104045b));

			/// <summary>Suffix added to a number to signify size in terabytes.</summary>
			/// <remarks>Suffix added to a number to signify size in terabytes.</remarks>
			public const int terabyteShort = unchecked((int)(0x010400b7));

			public const int tethered_notification_message = unchecked((int)(0x0104043d));

			/// <summary>
			/// Strings for tethered notification
			/// Shown when the device is tethered
			/// </summary>
			public const int tethered_notification_title = unchecked((int)(0x0104043c));

			/// <summary>Text selection contextual mode title, displayed in the CAB.</summary>
			/// <remarks>Text selection contextual mode title, displayed in the CAB. [CHAR LIMIT=20]
			/// 	</remarks>
			public const int textSelectionCABTitle = unchecked((int)(0x01040386));

			/// <summary>Displayed to the user to confirm that they have copied text from a web page to the clipboard.
			/// 	</summary>
			/// <remarks>Displayed to the user to confirm that they have copied text from a web page to the clipboard.
			/// 	</remarks>
			public const int text_copied = unchecked((int)(0x0104035f));

			public const int throttle_warning_notification_message = unchecked((int)(0x01040442
				));

			/// <summary>
			/// Strings for throttling notification
			/// Shown when the user is in danger of being throttled
			/// </summary>
			public const int throttle_warning_notification_title = unchecked((int)(0x01040441
				));

			public const int throttled_notification_message = unchecked((int)(0x01040444));

			/// <summary>
			/// Strings for throttling notification
			/// Shown when the users bandwidth is reduced because of excessive data use
			/// </summary>
			public const int throttled_notification_title = unchecked((int)(0x01040443));

			public const int time1_time2 = unchecked((int)(0x01040089));

			public const int time_date = unchecked((int)(0x01040081));

			public const int time_of_day = unchecked((int)(0x0104007e));

			/// <summary>Description of the button to decrement the TimePicker's hour value.</summary>
			/// <remarks>Description of the button to decrement the TimePicker's hour value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int time_picker_decrement_hour_button = unchecked((int)(0x01040468));

			/// <summary>Description of the button to decrement the TimePicker's minute value.</summary>
			/// <remarks>Description of the button to decrement the TimePicker's minute value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int time_picker_decrement_minute_button = unchecked((int)(0x01040466
				));

			/// <summary>Description of the button to decrement the TimePicker's set AM value.</summary>
			/// <remarks>Description of the button to decrement the TimePicker's set AM value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int time_picker_decrement_set_am_button = unchecked((int)(0x0104046a
				));

			/// <summary>
			/// Date/Time picker dialogs strings
			/// The title of the time picker dialog.
			/// </summary>
			/// <remarks>
			/// Date/Time picker dialogs strings
			/// The title of the time picker dialog. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int time_picker_dialog_title = unchecked((int)(0x010403e0));

			/// <summary>Description of the button to increment the TimePicker's hour value.</summary>
			/// <remarks>Description of the button to increment the TimePicker's hour value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int time_picker_increment_hour_button = unchecked((int)(0x01040467));

			/// <summary>
			/// TimePicker - accessibility support
			/// Description of the button to increment the TimePicker's minute value.
			/// </summary>
			/// <remarks>
			/// TimePicker - accessibility support
			/// Description of the button to increment the TimePicker's minute value. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int time_picker_increment_minute_button = unchecked((int)(0x01040465
				));

			/// <summary>Description of the button to increment the TimePicker's set PM value.</summary>
			/// <remarks>Description of the button to increment the TimePicker's set PM value. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int time_picker_increment_set_pm_button = unchecked((int)(0x01040469
				));

			/// <hide>DO NOT TRANSLATE. Separator between the hour and minute elements in a TimePicker widget
			/// 	</hide>
			public const int time_picker_separator = unchecked((int)(0x010400b2));

			public const int time_wday = unchecked((int)(0x01040098));

			public const int time_wday_date = unchecked((int)(0x01040096));

			public const int today = unchecked((int)(0x01040073));

			/// <summary>Description of the not pressed state of a ToggleButton.</summary>
			/// <remarks>Description of the not pressed state of a ToggleButton. [CHAR LIMIT=NONE]
			/// 	</remarks>
			public const int togglebutton_not_pressed = unchecked((int)(0x01040478));

			/// <summary>
			/// ToggleButton - accessibility support
			/// Description of the pressed state of a ToggleButton.
			/// </summary>
			/// <remarks>
			/// ToggleButton - accessibility support
			/// Description of the pressed state of a ToggleButton. [CHAR LIMIT=NONE]
			/// </remarks>
			public const int togglebutton_pressed = unchecked((int)(0x01040477));

			public const int tomorrow = unchecked((int)(0x01040074));

			/// <summary>Button to turn off the radio, within the Phone Options dialog</summary>
			public const int turn_off_radio = unchecked((int)(0x0104011c));

			/// <summary>Button to turn on the radio, within the Phone Options dialog</summary>
			public const int turn_on_radio = unchecked((int)(0x0104011b));

			/// <summary>Shown in the tutorial for tap twice for zoom control.</summary>
			/// <remarks>Shown in the tutorial for tap twice for zoom control.</remarks>
			public const int tutorial_double_tap_to_zoom_message_short = unchecked((int)(0x0104041a
				));

			public const int twelve_hour_time_format = unchecked((int)(0x01040078));

			public const int twenty_four_hour_time_format = unchecked((int)(0x01040079));

			/// <summary>How to display the lack of a name</summary>
			public const int unknownName = unchecked((int)(0x0104000e));

			/// <summary>
			/// Used in Contacts for a field that has no label and in Note Pad
			/// for a note with no name.
			/// </summary>
			/// <remarks>
			/// Used in Contacts for a field that has no label and in Note Pad
			/// for a note with no name.
			/// </remarks>
			public const int untitled = unchecked((int)(0x0104000f));

			/// <summary>
			/// Localized strings for WebView
			/// Label for button in a WebView that will open a chooser to choose a file to upload
			/// </summary>
			public const int upload_file = unchecked((int)(0x01040436));

			/// <summary>USB_PREFERENCES: Notification for when a USB accessory is attached.</summary>
			/// <remarks>USB_PREFERENCES: Notification for when a USB accessory is attached.  This is the title
			/// 	</remarks>
			public const int usb_accessory_notification_title = unchecked((int)(0x010403fc));

			/// <summary>USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in mass storage mode (for installer CD image).
			/// 	</summary>
			/// <remarks>USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in mass storage mode (for installer CD image).  This is the title
			/// 	</remarks>
			public const int usb_cd_installer_notification_title = unchecked((int)(0x010403fb
				));

			/// <summary>USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in MTP mode.
			/// 	</summary>
			/// <remarks>USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in MTP mode.  This is the title
			/// 	</remarks>
			public const int usb_mtp_notification_title = unchecked((int)(0x010403f9));

			/// <summary>See USB_PREFERENCES.</summary>
			/// <remarks>See USB_PREFERENCES. This is the message.</remarks>
			public const int usb_notification_message = unchecked((int)(0x010403fd));

			/// <summary>USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in PTP mode.
			/// 	</summary>
			/// <remarks>USB_PREFERENCES: Notification for when the user connects the phone to a computer via USB in PTP mode.  This is the title
			/// 	</remarks>
			public const int usb_ptp_notification_title = unchecked((int)(0x010403fa));

			/// <summary>
			/// USB storage dialog strings
			/// This is the title for the activity's window.
			/// </summary>
			/// <remarks>
			/// USB storage dialog strings
			/// This is the title for the activity's window.
			/// </remarks>
			public const int usb_storage_activity_title = unchecked((int)(0x010403e8));

			/// <summary>See USB_STORAGE.</summary>
			/// <remarks>See USB_STORAGE.    This is the button text to mount the phone on the computer.
			/// 	</remarks>
			public const int usb_storage_button_mount = unchecked((int)(0x010403eb));

			/// <summary>See USB_STORAGE_DIALOG.</summary>
			/// <remarks>
			/// See USB_STORAGE_DIALOG.  If there was an error mounting, this is the text.
			/// outdated translation 2534784751603345363
			/// outdated translation 2534784751603345363
			/// </remarks>
			public const int usb_storage_error_message = unchecked((int)(0x010403ec));

			/// <summary>See USB_STORAGE.</summary>
			/// <remarks>
			/// See USB_STORAGE.    This is the message. [CHAR LIMIT=NONE]
			/// outdated translation 4796759646167247178
			/// outdated translation 4796759646167247178
			/// </remarks>
			public const int usb_storage_message = unchecked((int)(0x010403ea));

			/// <summary>See USB_STORAGE.</summary>
			/// <remarks>See USB_STORAGE. This is the message.</remarks>
			public const int usb_storage_notification_message = unchecked((int)(0x010403ee));

			/// <summary>USB_STORAGE: When the user connects the phone to a computer via USB, we show a notification asking if he wants to share files across.
			/// 	</summary>
			/// <remarks>USB_STORAGE: When the user connects the phone to a computer via USB, we show a notification asking if he wants to share files across.  This is the title
			/// 	</remarks>
			public const int usb_storage_notification_title = unchecked((int)(0x010403ed));

			/// <summary>See USB_STORAGE_STOP.</summary>
			/// <remarks>See USB_STORAGE_STOP.    This is the button text to stop usb storage.</remarks>
			public const int usb_storage_stop_button_mount = unchecked((int)(0x010403f3));

			/// <summary>See USB_STORAGE_STOP_DIALOG.</summary>
			/// <remarks>See USB_STORAGE_STOP_DIALOG.  If there was an error stopping, this is the text.
			/// 	</remarks>
			public const int usb_storage_stop_error_message = unchecked((int)(0x010403f4));

			/// <summary>See USB_STORAGE_STOP.</summary>
			/// <remarks>
			/// See USB_STORAGE_STOP.    This is the message.
			/// outdated translation 3613713396426604104
			/// </remarks>
			public const int usb_storage_stop_message = unchecked((int)(0x010403f2));

			/// <summary>See USB_STORAGE.</summary>
			/// <remarks>See USB_STORAGE. This is the message.</remarks>
			public const int usb_storage_stop_notification_message = unchecked((int)(0x010403f0
				));

			/// <summary>USB_STORAGE_STOP: While USB storage is enabled, we show a notification dialog asking if he wants to stop.
			/// 	</summary>
			/// <remarks>USB_STORAGE_STOP: While USB storage is enabled, we show a notification dialog asking if he wants to stop. This is the title
			/// 	</remarks>
			public const int usb_storage_stop_notification_title = unchecked((int)(0x010403ef
				));

			/// <summary>
			/// USB storage stop dialog strings
			/// This is the label for the activity, and should never be visible to the user.
			/// </summary>
			/// <remarks>
			/// USB storage stop dialog strings
			/// This is the label for the activity, and should never be visible to the user.
			/// See USB_STORAGE_STOP.  USB_STORAGE_STOP_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to stop usb storage.  This is the title.
			/// </remarks>
			public const int usb_storage_stop_title = unchecked((int)(0x010403f1));

			/// <summary>See USB_STORAGE.</summary>
			/// <remarks>See USB_STORAGE.  USB_STORAGE_DIALOG:  After the user selects the notification, a dialog is shown asking if he wants to mount.  This is the title.
			/// 	</remarks>
			public const int usb_storage_title = unchecked((int)(0x010403e9));

			/// <summary>Label for an information field on an SSL Certificate Dialog</summary>
			public const int validity_period = unchecked((int)(0x010404aa));

			/// <summary>Title of the dialog where the user is adjusting the audio volume for alarms
			/// 	</summary>
			public const int volume_alarm = unchecked((int)(0x010403bc));

			/// <summary>Title of the dialog where the user is adjusting the phone call volume when connected on bluetooth
			/// 	</summary>
			public const int volume_bluetooth_call = unchecked((int)(0x010403bb));

			/// <summary>Title of the dialog where the user is adjusting the phone call volume</summary>
			public const int volume_call = unchecked((int)(0x010403ba));

			/// <summary>Content description for bluetooth volume icon [CHAR LIMIT=100]</summary>
			public const int volume_icon_description_bluetooth = unchecked((int)(0x010403bf));

			/// <summary>Content description for in-call volume icon [CHAR LIMIT=100]</summary>
			public const int volume_icon_description_incall = unchecked((int)(0x010403c1));

			/// <summary>Content description for media volume icon [CHAR LIMIT=100]</summary>
			public const int volume_icon_description_media = unchecked((int)(0x010403c2));

			/// <summary>Content description for notification volume icon [CHAR LIMIT=100]</summary>
			public const int volume_icon_description_notification = unchecked((int)(0x010403c3
				));

			/// <summary>Content description for ringer volume icon [CHAR LIMIT=100]</summary>
			public const int volume_icon_description_ringer = unchecked((int)(0x010403c0));

			/// <summary>Title of the dialog where the user is adjusting the music volume</summary>
			public const int volume_music = unchecked((int)(0x010403b7));

			/// <summary>Hint shown in the volume toast to inform the user that the media audio is playing through Bluetooth.
			/// 	</summary>
			/// <remarks>Hint shown in the volume toast to inform the user that the media audio is playing through Bluetooth.
			/// 	</remarks>
			public const int volume_music_hint_playing_through_bluetooth = unchecked((int)(0x010403b8
				));

			/// <summary>Hint shown in the volume toast to inform the user that the current ringtone is the silent ringtone.
			/// 	</summary>
			/// <remarks>Hint shown in the volume toast to inform the user that the current ringtone is the silent ringtone.
			/// 	</remarks>
			public const int volume_music_hint_silent_ringtone_selected = unchecked((int)(0x010403b9
				));

			/// <summary>Title of the dialog where the user is adjusting the audio volume for notifications
			/// 	</summary>
			public const int volume_notification = unchecked((int)(0x010403bd));

			/// <summary>Title of the dialog where the user is adjusting the phone ringer volume</summary>
			public const int volume_ringtone = unchecked((int)(0x010403b6));

			/// <summary>Title of the dialog where the user is adjusting the general audio volume
			/// 	</summary>
			public const int volume_unknown = unchecked((int)(0x010403be));

			/// <summary>The text of the notification when VPN is active.</summary>
			/// <remarks>The text of the notification when VPN is active.</remarks>
			public const int vpn_text = unchecked((int)(0x01040434));

			/// <summary>The text of the notification when VPN is active with a session name.</summary>
			/// <remarks>The text of the notification when VPN is active with a session name.</remarks>
			public const int vpn_text_long = unchecked((int)(0x01040435));

			/// <summary>The title of the notification when VPN is active.</summary>
			/// <remarks>The title of the notification when VPN is active.</remarks>
			public const int vpn_title = unchecked((int)(0x01040432));

			/// <summary>The title of the notification when VPN is active with an application name.
			/// 	</summary>
			/// <remarks>The title of the notification when VPN is active with an application name.
			/// 	</remarks>
			public const int vpn_title_long = unchecked((int)(0x01040433));

			/// <summary>Button allowing the user to choose to wait for an application that is not responding to become responsive again.
			/// 	</summary>
			/// <remarks>Button allowing the user to choose to wait for an application that is not responding to become responsive again.
			/// 	</remarks>
			public const int _wait = unchecked((int)(0x010403a0));

			/// <summary>Label to show for a service that is running because it is a wallpaper.</summary>
			/// <remarks>Label to show for a service that is running because it is a wallpaper.</remarks>
			public const int wallpaper_binding_label = unchecked((int)(0x0104042f));

			public const int wday1_date1_time1_wday2_date2_time2 = unchecked((int)(0x01040093
				));

			public const int wday1_date1_wday2_date2 = unchecked((int)(0x01040094));

			public const int wday_date = unchecked((int)(0x01040097));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate.  WebView User Agent string</remarks>
			public const int web_user_agent = unchecked((int)(0x0104030a));

			/// <summary>Do not translate.</summary>
			/// <remarks>
			/// Do not translate.  WebView User Agent targeted content
			/// Do not translate.  WebView User Agent targeted content
			/// Do not translate.  WebView User Agent targeted content
			/// </remarks>
			public const int web_user_agent_target_content = unchecked((int)(0x0104030b));

			/// <summary>ActionBar action to use the current selection to perform a web search [CHAR-LIMIT=16]
			/// 	</summary>
			public const int websearch = unchecked((int)(0x01040452));

			/// <summary>Appened to express the value is this unit of time.</summary>
			/// <remarks>Appened to express the value is this unit of time.</remarks>
			public const int week = unchecked((int)(0x01040379));

			/// <summary>Appened to express the value is this unit of time.</summary>
			/// <remarks>Appened to express the value is this unit of time.</remarks>
			public const int weeks = unchecked((int)(0x0104037a));

			/// <summary>Title of intent resolver dialog when selecting an application to run.</summary>
			/// <remarks>Title of intent resolver dialog when selecting an application to run.</remarks>
			public const int whichApplication = unchecked((int)(0x01040390));

			/// <summary>Wi-Fi p2p dialog title</summary>
			public const int wifi_p2p_dialog_title = unchecked((int)(0x010403cc));

			public const int wifi_p2p_enabled_notification_message = unchecked((int)(0x010403d3
				));

			public const int wifi_p2p_enabled_notification_title = unchecked((int)(0x010403d2
				));

			public const int wifi_p2p_failed_message = unchecked((int)(0x010403ce));

			public const int wifi_p2p_pbc_go_negotiation_request_message = unchecked((int)(0x010403cf
				));

			public const int wifi_p2p_pin_display_message = unchecked((int)(0x010403d1));

			public const int wifi_p2p_pin_go_negotiation_request_message = unchecked((int)(0x010403d0
				));

			public const int wifi_p2p_turnon_message = unchecked((int)(0x010403cd));

			/// <summary>Do not translate.</summary>
			/// <remarks>Do not translate. Default access point SSID used for tethering</remarks>
			public const int wifi_tether_configure_ssid_default = unchecked((int)(0x010403cb)
				);

			/// <summary>A notification is shown when a user's selected SSID is later disabled due to connectivity problems.
			/// 	</summary>
			/// <remarks>A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  This is the notification's title / ticker.
			/// 	</remarks>
			public const int wifi_watchdog_network_disabled = unchecked((int)(0x010403c9));

			/// <summary>A notification is shown when a user's selected SSID is later disabled due to connectivity problems.
			/// 	</summary>
			/// <remarks>A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  The complete alert msg is: <hotspot name> + this string, i.e. "Linksys has a poor internet connection"
			/// 	</remarks>
			public const int wifi_watchdog_network_disabled_detailed = unchecked((int)(0x010403ca
				));

			/// <summary>Appened to express the value is this unit of time.</summary>
			/// <remarks>Appened to express the value is this unit of time.</remarks>
			public const int year = unchecked((int)(0x0104037b));

			/// <summary>Appened to express the value is this unit of time.</summary>
			/// <remarks>Appened to express the value is this unit of time.</remarks>
			public const int years = unchecked((int)(0x0104037c));

			/// <summary>Preference framework strings.</summary>
			/// <remarks>Preference framework strings.</remarks>
			public const int yes = unchecked((int)(0x01040013));

			public const int yesterday = unchecked((int)(0x01040072));
		}

		public sealed class style
		{
			/// <summary>
			/// Style to apply on top of a wallpaper settings theme when it is being
			/// shown on top of the real wallpaper
			/// </summary>
			public const int ActiveWallpaperSettings = unchecked((int)(0x010302e9));

			public const int AlertDialog = unchecked((int)(0x010301d8));

			/// <summary>AlertDialog Styles</summary>
			public const int AlertDialog_DeviceDefault = unchecked((int)(0x010302e1));

			public const int AlertDialog_DeviceDefault_Light = unchecked((int)(0x010302e2));

			/// <summary>Dialog styles</summary>
			public const int AlertDialog_Holo = unchecked((int)(0x01030292));

			public const int AlertDialog_Holo_Light = unchecked((int)(0x01030293));

			/// <summary>Base style for animations.</summary>
			/// <remarks>Base style for animations.  This style specifies no animations.</remarks>
			public const int Animation = unchecked((int)(0x01030000));

			/// <summary>Standard animations for a full-screen window or activity.</summary>
			/// <remarks>Standard animations for a full-screen window or activity.</remarks>
			public const int Animation_Activity = unchecked((int)(0x01030001));

			/// <summary>Animation Styles</summary>
			public const int Animation_DeviceDefault_Activity = unchecked((int)(0x010302e3));

			public const int Animation_DeviceDefault_Dialog = unchecked((int)(0x010302e4));

			/// <summary>Standard animations for a non-full-screen window or activity.</summary>
			/// <remarks>Standard animations for a non-full-screen window or activity.</remarks>
			public const int Animation_Dialog = unchecked((int)(0x01030002));

			public const int Animation_DropDownDown = unchecked((int)(0x010301df));

			public const int Animation_DropDownUp = unchecked((int)(0x010301e0));

			/// <summary>Animation Styles</summary>
			public const int Animation_Holo = unchecked((int)(0x0103028f));

			public const int Animation_Holo_Activity = unchecked((int)(0x01030290));

			public const int Animation_Holo_Dialog = unchecked((int)(0x01030291));

			/// <summary>Window animations that are applied to input method overlay windows.</summary>
			/// <remarks>Window animations that are applied to input method overlay windows.</remarks>
			public const int Animation_InputMethod = unchecked((int)(0x01030056));

			/// <summary>Special optional fancy IM animations.</summary>
			/// <remarks>Special optional fancy IM animations. @hide</remarks>
			public const int Animation_InputMethodFancy = unchecked((int)(0x010301e1));

			/// <summary>Standard animations for a non-full-screen window or activity.</summary>
			/// <remarks>Standard animations for a non-full-screen window or activity.</remarks>
			public const int Animation_LockScreen = unchecked((int)(0x010301da));

			public const int Animation_OptionsPanel = unchecked((int)(0x010301db));

			/// <summary>A special animation value used internally for popup windows.</summary>
			/// <remarks>A special animation value used internally for popup windows.</remarks>
			public const int Animation_PopupWindow = unchecked((int)(0x010301e6));

			/// <summary>Window animations used for action mode UI in overlay mode.</summary>
			/// <remarks>Window animations used for action mode UI in overlay mode.</remarks>
			public const int Animation_PopupWindow_ActionMode = unchecked((int)(0x010301e7));

			/// <summary>
			/// A special animation we can use for recent applications,
			/// for devices that can support it (do alpha transformations).
			/// </summary>
			/// <remarks>
			/// A special animation we can use for recent applications,
			/// for devices that can support it (do alpha transformations).
			/// </remarks>
			public const int Animation_RecentApplications = unchecked((int)(0x010301e5));

			/// <summary>Window animations that are applied to the search bar overlay window.</summary>
			/// <remarks>
			/// Window animations that are applied to the search bar overlay window.
			/// Previously used, but currently unused.
			/// <hide>Pending API council approval</hide>
			/// 
			/// </remarks>
			public const int Animation_SearchBar = unchecked((int)(0x010301e2));

			public const int Animation_SubMenuPanel = unchecked((int)(0x010301dc));

			/// <summary>Style for animating text selection handles.</summary>
			/// <remarks>Style for animating text selection handles.</remarks>
			public const int Animation_TextSelectHandle = unchecked((int)(0x0103022c));

			public const int Animation_Toast = unchecked((int)(0x01030004));

			/// <summary>Standard animations for a translucent window or activity.</summary>
			/// <remarks>
			/// Standard animations for a translucent window or activity.  This
			/// style is <em>not<em> used by default for the translucent theme
			/// (since translucent activities are a special case that have no
			/// clear UI paradigm), but you can make your own specialized theme
			/// with this animation style if you would like to have the standard
			/// platform transition animation.
			/// </remarks>
			public const int Animation_Translucent = unchecked((int)(0x01030003));

			public const int Animation_TypingFilter = unchecked((int)(0x010301dd));

			public const int Animation_TypingFilterRestore = unchecked((int)(0x010301de));

			/// <summary>Window animations used for volume panel.</summary>
			/// <remarks>Window animations used for volume panel.</remarks>
			public const int Animation_VolumePanel = unchecked((int)(0x010301e8));

			/// <summary>Standard animations for wallpapers.</summary>
			/// <remarks>Standard animations for wallpapers.</remarks>
			public const int Animation_Wallpaper = unchecked((int)(0x010301e4));

			/// <summary>Window animations that are applied to the zoom buttons overlay window.</summary>
			/// <remarks>Window animations that are applied to the zoom buttons overlay window.</remarks>
			public const int Animation_ZoomButtons = unchecked((int)(0x010301e3));

			/// <summary>
			/// Style you can use with a container (typically a horizontal
			/// LinearLayout) to get the standard "button bar" background and
			/// spacing.
			/// </summary>
			/// <remarks>
			/// Style you can use with a container (typically a horizontal
			/// LinearLayout) to get the standard "button bar" background and
			/// spacing. @hide
			/// </remarks>
			public const int ButtonBar = unchecked((int)(0x01030058));

			/// <summary>Other Styles</summary>
			public const int DeviceDefault_ButtonBar = unchecked((int)(0x010301cf));

			public const int DeviceDefault_ButtonBar_AlertDialog = unchecked((int)(0x010301d0
				));

			public const int DeviceDefault_Light_ButtonBar = unchecked((int)(0x010301d2));

			public const int DeviceDefault_Light_ButtonBar_AlertDialog = unchecked((int)(0x010301d3
				));

			public const int DeviceDefault_Light_SegmentedButton = unchecked((int)(0x010301d4
				));

			public const int DeviceDefault_SegmentedButton = unchecked((int)(0x010301d1));

			public const int DialogWindowTitle = unchecked((int)(0x010301d7));

			/// <summary>DialogWindowTitle Styles</summary>
			public const int DialogWindowTitle_DeviceDefault = unchecked((int)(0x010302e5));

			public const int DialogWindowTitle_DeviceDefault_Light = unchecked((int)(0x010302e6
				));

			public const int DialogWindowTitle_Holo = unchecked((int)(0x01030296));

			public const int DialogWindowTitle_Holo_Light = unchecked((int)(0x01030297));

			public const int Holo = unchecked((int)(0x0103024f));

			public const int Holo_ButtonBar = unchecked((int)(0x010300e5));

			public const int Holo_ButtonBar_AlertDialog = unchecked((int)(0x010300e7));

			public const int Holo_Light = unchecked((int)(0x01030250));

			public const int Holo_Light_ButtonBar = unchecked((int)(0x010300e6));

			public const int Holo_Light_ButtonBar_AlertDialog = unchecked((int)(0x010300e8));

			public const int Holo_Light_SegmentedButton = unchecked((int)(0x010300ea));

			public const int Holo_SegmentedButton = unchecked((int)(0x010300e9));

			public const int MediaButton = unchecked((int)(0x01030037));

			public const int MediaButton_Ffwd = unchecked((int)(0x0103003b));

			public const int MediaButton_Next = unchecked((int)(0x01030039));

			public const int MediaButton_Pause = unchecked((int)(0x0103003d));

			public const int MediaButton_Play = unchecked((int)(0x0103003a));

			public const int MediaButton_Previous = unchecked((int)(0x01030038));

			public const int MediaButton_Rew = unchecked((int)(0x0103003c));

			/// <summary>Pointer styles</summary>
			public const int Pointer = unchecked((int)(0x01030299));

			/// <summary>Preference Styles</summary>
			public const int Preference = unchecked((int)(0x01030211));

			public const int Preference_Category = unchecked((int)(0x01030214));

			public const int Preference_CheckBoxPreference = unchecked((int)(0x01030215));

			/// <summary>Preference Styles</summary>
			public const int Preference_DeviceDefault = unchecked((int)(0x010302d7));

			public const int Preference_DeviceDefault_Category = unchecked((int)(0x010302d8));

			public const int Preference_DeviceDefault_CheckBoxPreference = unchecked((int)(0x010302d9
				));

			public const int Preference_DeviceDefault_DialogPreference = unchecked((int)(0x010302da
				));

			public const int Preference_DeviceDefault_DialogPreference_EditTextPreference = unchecked(
				(int)(0x010302db));

			public const int Preference_DeviceDefault_DialogPreference_YesNoPreference = unchecked(
				(int)(0x010302dc));

			public const int Preference_DeviceDefault_Information = unchecked((int)(0x010302dd
				));

			public const int Preference_DeviceDefault_PreferenceScreen = unchecked((int)(0x010302de
				));

			public const int Preference_DeviceDefault_RingtonePreference = unchecked((int)(0x010302df
				));

			public const int Preference_DeviceDefault_SwitchPreference = unchecked((int)(0x010302e0
				));

			public const int Preference_DialogPreference = unchecked((int)(0x01030218));

			public const int Preference_DialogPreference_EditTextPreference = unchecked((int)
				(0x0103021a));

			public const int Preference_DialogPreference_YesNoPreference = unchecked((int)(0x01030219
				));

			public const int Preference_Holo = unchecked((int)(0x0103021c));

			public const int Preference_Holo_Category = unchecked((int)(0x0103021f));

			public const int Preference_Holo_CheckBoxPreference = unchecked((int)(0x01030220)
				);

			public const int Preference_Holo_DialogPreference = unchecked((int)(0x01030223));

			public const int Preference_Holo_DialogPreference_EditTextPreference = unchecked(
				(int)(0x01030225));

			public const int Preference_Holo_DialogPreference_YesNoPreference = unchecked((int
				)(0x01030224));

			public const int Preference_Holo_Information = unchecked((int)(0x0103021e));

			public const int Preference_Holo_PreferenceScreen = unchecked((int)(0x01030222));

			public const int Preference_Holo_RingtonePreference = unchecked((int)(0x01030226)
				);

			public const int Preference_Holo_SwitchPreference = unchecked((int)(0x01030221));

			public const int Preference_Information = unchecked((int)(0x01030213));

			public const int Preference_PreferenceScreen = unchecked((int)(0x01030217));

			public const int Preference_RingtonePreference = unchecked((int)(0x0103021b));

			public const int Preference_SwitchPreference = unchecked((int)(0x01030216));

			public const int PreferenceFragment = unchecked((int)(0x01030212));

			public const int PreferenceFragment_Holo = unchecked((int)(0x0103021d));

			/// <summary>No margins or background by default.</summary>
			/// <remarks>No margins or background by default. Could be different for x-large screens
			/// 	</remarks>
			public const int PreferencePanel = unchecked((int)(0x01030227));

			/// <summary>
			/// The attributes are overridden here because the x-large or large resources may have
			/// changed the margins and background in the parent PreferencePanel style.
			/// </summary>
			/// <remarks>
			/// The attributes are overridden here because the x-large or large resources may have
			/// changed the margins and background in the parent PreferencePanel style.
			/// </remarks>
			public const int PreferencePanel_Dialog = unchecked((int)(0x01030228));

			/// <summary>
			/// Style to apply on top of a wallpaper settings theme when it is being
			/// shown on top of the real wallpaper
			/// </summary>
			public const int PreviewWallpaperSettings = unchecked((int)(0x010302ea));

			/// <summary>
			/// Style you can use with a container (typically a horizontal
			/// LinearLayout) to get a "segmented button" background and spacing.
			/// </summary>
			/// <remarks>
			/// Style you can use with a container (typically a horizontal
			/// LinearLayout) to get a "segmented button" background and spacing.
			/// </remarks>
			public const int SegmentedButton = unchecked((int)(0x0103022a));

			public const int TextAppearance = unchecked((int)(0x0103003e));

			public const int TextAppearance_AutoCorrectionSuggestion = unchecked((int)(0x010301f0
				));

			/// <summary>Text Appearance Styles</summary>
			public const int TextAppearance_DeviceDefault = unchecked((int)(0x010301ad));

			public const int TextAppearance_DeviceDefault_DialogWindowTitle = unchecked((int)
				(0x010301b8));

			public const int TextAppearance_DeviceDefault_Inverse = unchecked((int)(0x010301ae
				));

			public const int TextAppearance_DeviceDefault_Large = unchecked((int)(0x010301af)
				);

			public const int TextAppearance_DeviceDefault_Large_Inverse = unchecked((int)(0x010301b0
				));

			public const int TextAppearance_DeviceDefault_Light = unchecked((int)(0x010302ca)
				);

			public const int TextAppearance_DeviceDefault_Light_Inverse = unchecked((int)(0x010302cb
				));

			public const int TextAppearance_DeviceDefault_Light_Large = unchecked((int)(0x010302cc
				));

			public const int TextAppearance_DeviceDefault_Light_Large_Inverse = unchecked((int
				)(0x010302cd));

			public const int TextAppearance_DeviceDefault_Light_Medium = unchecked((int)(0x010302ce
				));

			public const int TextAppearance_DeviceDefault_Light_Medium_Inverse = unchecked((int
				)(0x010302cf));

			public const int TextAppearance_DeviceDefault_Light_SearchResult_Subtitle = unchecked(
				(int)(0x010302d0));

			public const int TextAppearance_DeviceDefault_Light_SearchResult_Title = unchecked(
				(int)(0x010302d1));

			public const int TextAppearance_DeviceDefault_Light_Small = unchecked((int)(0x010302d2
				));

			public const int TextAppearance_DeviceDefault_Light_Small_Inverse = unchecked((int
				)(0x010302d3));

			public const int TextAppearance_DeviceDefault_Light_Widget_Button = unchecked((int
				)(0x010302d4));

			public const int TextAppearance_DeviceDefault_Light_Widget_PopupMenu_Large = unchecked(
				(int)(0x010302d5));

			public const int TextAppearance_DeviceDefault_Light_Widget_PopupMenu_Small = unchecked(
				(int)(0x010302d6));

			public const int TextAppearance_DeviceDefault_Medium = unchecked((int)(0x010301b1
				));

			public const int TextAppearance_DeviceDefault_Medium_Inverse = unchecked((int)(0x010301b2
				));

			public const int TextAppearance_DeviceDefault_SearchResult_Subtitle = unchecked((
				int)(0x010301b6));

			public const int TextAppearance_DeviceDefault_SearchResult_Title = unchecked((int
				)(0x010301b5));

			public const int TextAppearance_DeviceDefault_Small = unchecked((int)(0x010301b3)
				);

			public const int TextAppearance_DeviceDefault_Small_Inverse = unchecked((int)(0x010301b4
				));

			public const int TextAppearance_DeviceDefault_Widget = unchecked((int)(0x010301b9
				));

			public const int TextAppearance_DeviceDefault_Widget_ActionBar_Menu = unchecked((
				int)(0x010301ce));

			public const int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle = unchecked(
				(int)(0x010301c7));

			public const int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse = 
				unchecked((int)(0x010301cb));

			public const int TextAppearance_DeviceDefault_Widget_ActionBar_Title = unchecked(
				(int)(0x010301c6));

			public const int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse = unchecked(
				(int)(0x010301ca));

			public const int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle = unchecked(
				(int)(0x010301c9));

			public const int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse = 
				unchecked((int)(0x010301cd));

			public const int TextAppearance_DeviceDefault_Widget_ActionMode_Title = unchecked(
				(int)(0x010301c8));

			public const int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse = unchecked(
				(int)(0x010301cc));

			public const int TextAppearance_DeviceDefault_Widget_Button = unchecked((int)(0x010301ba
				));

			public const int TextAppearance_DeviceDefault_Widget_DropDownHint = unchecked((int
				)(0x010301bf));

			public const int TextAppearance_DeviceDefault_Widget_DropDownItem = unchecked((int
				)(0x010301c0));

			public const int TextAppearance_DeviceDefault_Widget_EditText = unchecked((int)(0x010301c2
				));

			public const int TextAppearance_DeviceDefault_Widget_IconMenu_Item = unchecked((int
				)(0x010301bb));

			public const int TextAppearance_DeviceDefault_Widget_PopupMenu = unchecked((int)(
				0x010301c3));

			public const int TextAppearance_DeviceDefault_Widget_PopupMenu_Large = unchecked(
				(int)(0x010301c4));

			public const int TextAppearance_DeviceDefault_Widget_PopupMenu_Small = unchecked(
				(int)(0x010301c5));

			public const int TextAppearance_DeviceDefault_Widget_TabWidget = unchecked((int)(
				0x010301bc));

			public const int TextAppearance_DeviceDefault_Widget_TextView = unchecked((int)(0x010301bd
				));

			public const int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu = unchecked(
				(int)(0x010301be));

			public const int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem = unchecked(
				(int)(0x010301c1));

			public const int TextAppearance_DeviceDefault_WindowTitle = unchecked((int)(0x010301b7
				));

			public const int TextAppearance_DialogWindowTitle = unchecked((int)(0x01030041));

			public const int TextAppearance_EasyCorrectSuggestion = unchecked((int)(0x010301ee
				));

			/// <summary>
			/// Begin Holo theme styles
			/// Text Styles
			/// </summary>
			public const int TextAppearance_Holo = unchecked((int)(0x010300fb));

			public const int TextAppearance_Holo_CalendarViewWeekDayView = unchecked((int)(0x01030237
				));

			public const int TextAppearance_Holo_DialogWindowTitle = unchecked((int)(0x01030117
				));

			public const int TextAppearance_Holo_Inverse = unchecked((int)(0x010300fc));

			public const int TextAppearance_Holo_Large = unchecked((int)(0x010300fd));

			public const int TextAppearance_Holo_Large_Inverse = unchecked((int)(0x010300fe));

			/// <summary>Light text styles</summary>
			public const int TextAppearance_Holo_Light = unchecked((int)(0x01030238));

			public const int TextAppearance_Holo_Light_CalendarViewWeekDayView = unchecked((int
				)(0x0103024e));

			public const int TextAppearance_Holo_Light_DialogWindowTitle = unchecked((int)(0x0103024d
				));

			public const int TextAppearance_Holo_Light_Inverse = unchecked((int)(0x01030239));

			public const int TextAppearance_Holo_Light_Large = unchecked((int)(0x0103023a));

			public const int TextAppearance_Holo_Light_Large_Inverse = unchecked((int)(0x0103023d
				));

			public const int TextAppearance_Holo_Light_Medium = unchecked((int)(0x0103023b));

			public const int TextAppearance_Holo_Light_Medium_Inverse = unchecked((int)(0x0103023e
				));

			public const int TextAppearance_Holo_Light_SearchResult = unchecked((int)(0x01030240
				));

			public const int TextAppearance_Holo_Light_SearchResult_Subtitle = unchecked((int
				)(0x01030242));

			public const int TextAppearance_Holo_Light_SearchResult_Title = unchecked((int)(0x01030241
				));

			public const int TextAppearance_Holo_Light_Small = unchecked((int)(0x0103023c));

			public const int TextAppearance_Holo_Light_Small_Inverse = unchecked((int)(0x0103023f
				));

			public const int TextAppearance_Holo_Light_Widget = unchecked((int)(0x01030243));

			public const int TextAppearance_Holo_Light_Widget_ActionMode_Subtitle = unchecked(
				(int)(0x0103024b));

			public const int TextAppearance_Holo_Light_Widget_ActionMode_Title = unchecked((int
				)(0x0103024a));

			public const int TextAppearance_Holo_Light_Widget_Button = unchecked((int)(0x01030244
				));

			public const int TextAppearance_Holo_Light_Widget_DropDownHint = unchecked((int)(
				0x01030249));

			public const int TextAppearance_Holo_Light_Widget_EditText = unchecked((int)(0x01030245
				));

			public const int TextAppearance_Holo_Light_Widget_PopupMenu = unchecked((int)(0x01030246
				));

			public const int TextAppearance_Holo_Light_Widget_PopupMenu_Large = unchecked((int
				)(0x01030247));

			public const int TextAppearance_Holo_Light_Widget_PopupMenu_Small = unchecked((int
				)(0x01030248));

			public const int TextAppearance_Holo_Light_WindowTitle = unchecked((int)(0x0103024c
				));

			public const int TextAppearance_Holo_Medium = unchecked((int)(0x010300ff));

			public const int TextAppearance_Holo_Medium_Inverse = unchecked((int)(0x01030100)
				);

			public const int TextAppearance_Holo_SearchResult = unchecked((int)(0x01030234));

			public const int TextAppearance_Holo_SearchResult_Subtitle = unchecked((int)(0x01030104
				));

			public const int TextAppearance_Holo_SearchResult_Title = unchecked((int)(0x01030103
				));

			public const int TextAppearance_Holo_Small = unchecked((int)(0x01030101));

			public const int TextAppearance_Holo_Small_Inverse = unchecked((int)(0x01030102));

			public const int TextAppearance_Holo_Widget = unchecked((int)(0x01030105));

			public const int TextAppearance_Holo_Widget_ActionBar_Menu = unchecked((int)(0x01030120
				));

			public const int TextAppearance_Holo_Widget_ActionBar_Subtitle = unchecked((int)(
				0x01030113));

			public const int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse = unchecked(
				(int)(0x0103011d));

			public const int TextAppearance_Holo_Widget_ActionBar_Title = unchecked((int)(0x01030112
				));

			public const int TextAppearance_Holo_Widget_ActionBar_Title_Inverse = unchecked((
				int)(0x0103011c));

			public const int TextAppearance_Holo_Widget_ActionMode = unchecked((int)(0x01030235
				));

			public const int TextAppearance_Holo_Widget_ActionMode_Subtitle = unchecked((int)
				(0x01030115));

			public const int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse = unchecked(
				(int)(0x0103011f));

			public const int TextAppearance_Holo_Widget_ActionMode_Title = unchecked((int)(0x01030114
				));

			public const int TextAppearance_Holo_Widget_ActionMode_Title_Inverse = unchecked(
				(int)(0x0103011e));

			public const int TextAppearance_Holo_Widget_Button = unchecked((int)(0x01030106));

			public const int TextAppearance_Holo_Widget_DropDownHint = unchecked((int)(0x0103010b
				));

			public const int TextAppearance_Holo_Widget_DropDownItem = unchecked((int)(0x0103010c
				));

			public const int TextAppearance_Holo_Widget_EditText = unchecked((int)(0x0103010e
				));

			public const int TextAppearance_Holo_Widget_IconMenu_Item = unchecked((int)(0x01030107
				));

			public const int TextAppearance_Holo_Widget_PopupMenu = unchecked((int)(0x0103010f
				));

			public const int TextAppearance_Holo_Widget_PopupMenu_Large = unchecked((int)(0x01030110
				));

			public const int TextAppearance_Holo_Widget_PopupMenu_Small = unchecked((int)(0x01030111
				));

			public const int TextAppearance_Holo_Widget_Switch = unchecked((int)(0x01030236));

			/// <summary>
			/// This style is for smaller screens; values-xlarge defines a version
			/// for larger screens.
			/// </summary>
			/// <remarks>
			/// This style is for smaller screens; values-xlarge defines a version
			/// for larger screens.
			/// </remarks>
			public const int TextAppearance_Holo_Widget_TabWidget = unchecked((int)(0x01030108
				));

			public const int TextAppearance_Holo_Widget_TextView = unchecked((int)(0x01030109
				));

			public const int TextAppearance_Holo_Widget_TextView_PopupMenu = unchecked((int)(
				0x0103010a));

			public const int TextAppearance_Holo_Widget_TextView_SpinnerItem = unchecked((int
				)(0x0103010d));

			public const int TextAppearance_Holo_WindowTitle = unchecked((int)(0x01030116));

			public const int TextAppearance_Inverse = unchecked((int)(0x0103003f));

			public const int TextAppearance_Large = unchecked((int)(0x01030042));

			public const int TextAppearance_Large_Inverse = unchecked((int)(0x01030043));

			public const int TextAppearance_Large_Inverse_NumberPickerInputText = unchecked((
				int)(0x0103020f));

			public const int TextAppearance_Medium = unchecked((int)(0x01030044));

			public const int TextAppearance_Medium_Inverse = unchecked((int)(0x01030045));

			public const int TextAppearance_MisspelledSuggestion = unchecked((int)(0x010301ef
				));

			/// <hide></hide>
			public const int TextAppearance_SearchResult = unchecked((int)(0x0103020e));

			/// <hide></hide>
			public const int TextAppearance_SearchResult_Subtitle = unchecked((int)(0x01030064
				));

			/// <hide></hide>
			public const int TextAppearance_SearchResult_Title = unchecked((int)(0x01030063));

			/// <hide></hide>
			public const int TextAppearance_SlidingTabActive = unchecked((int)(0x0103020d));

			/// <hide></hide>
			public const int TextAppearance_SlidingTabNormal = unchecked((int)(0x0103020c));

			public const int TextAppearance_Small = unchecked((int)(0x01030046));

			public const int TextAppearance_Small_CalendarViewWeekDayView = unchecked((int)(0x010301ec
				));

			public const int TextAppearance_Small_Inverse = unchecked((int)(0x01030047));

			/// <summary>Status Bar Styles</summary>
			public const int TextAppearance_StatusBar = unchecked((int)(0x010301e9));

			public const int TextAppearance_StatusBar_EventContent = unchecked((int)(0x01030067
				));

			public const int TextAppearance_StatusBar_EventContent_Info = unchecked((int)(0x010301eb
				));

			public const int TextAppearance_StatusBar_EventContent_Title = unchecked((int)(0x01030068
				));

			public const int TextAppearance_StatusBar_Icon = unchecked((int)(0x01030066));

			public const int TextAppearance_StatusBar_Ticker = unchecked((int)(0x010301ea));

			public const int TextAppearance_StatusBar_Title = unchecked((int)(0x01030065));

			public const int TextAppearance_Suggestion = unchecked((int)(0x010301ed));

			public const int TextAppearance_SuggestionHighlight = unchecked((int)(0x01030118)
				);

			public const int TextAppearance_Theme = unchecked((int)(0x01030040));

			public const int TextAppearance_Theme_Dialog = unchecked((int)(0x01030048));

			public const int TextAppearance_Theme_Dialog_AppError = unchecked((int)(0x0103020b
				));

			public const int TextAppearance_Widget = unchecked((int)(0x01030049));

			public const int TextAppearance_Widget_ActionBar_Subtitle = unchecked((int)(0x01030230
				));

			public const int TextAppearance_Widget_ActionBar_Title = unchecked((int)(0x0103022f
				));

			public const int TextAppearance_Widget_ActionMode_Subtitle = unchecked((int)(0x01030232
				));

			public const int TextAppearance_Widget_ActionMode_Title = unchecked((int)(0x01030231
				));

			public const int TextAppearance_Widget_Button = unchecked((int)(0x0103004a));

			public const int TextAppearance_Widget_DropDownHint = unchecked((int)(0x01030050)
				);

			public const int TextAppearance_Widget_DropDownItem = unchecked((int)(0x01030051)
				);

			public const int TextAppearance_Widget_EditText = unchecked((int)(0x0103004c));

			public const int TextAppearance_Widget_IconMenu_Item = unchecked((int)(0x0103004b
				));

			public const int TextAppearance_Widget_PopupMenu = unchecked((int)(0x01030233));

			public const int TextAppearance_Widget_PopupMenu_Large = unchecked((int)(0x01030080
				));

			public const int TextAppearance_Widget_PopupMenu_Small = unchecked((int)(0x01030081
				));

			public const int TextAppearance_Widget_TabWidget = unchecked((int)(0x0103004d));

			public const int TextAppearance_Widget_TextView = unchecked((int)(0x0103004e));

			public const int TextAppearance_Widget_TextView_PopupMenu = unchecked((int)(0x0103004f
				));

			public const int TextAppearance_Widget_TextView_SpinnerItem = unchecked((int)(0x01030052
				));

			public const int TextAppearance_WindowTitle = unchecked((int)(0x01030053));

			/// <summary>The default system theme.</summary>
			/// <remarks>
			/// The default system theme. This is the theme used for activities
			/// that have not explicitly set their own theme.
			/// <p>You can count on this being a dark
			/// background with light text on top, but should try to make no
			/// other assumptions about its appearance. In particular, the text
			/// inside of widgets using this theme may be completely different,
			/// with the widget container being a light color and the text on top
			/// of it a dark color.
			/// </remarks>
			public const int Theme = unchecked((int)(0x01030005));

			/// <summary>
			/// Special variation on the default theme that ensures the background is
			/// completely black.
			/// </summary>
			/// <remarks>
			/// Special variation on the default theme that ensures the background is
			/// completely black.  This is useful for things like image viewers and
			/// media players.   If you want the normal (dark background) theme
			/// do <em>not</em> use this, use
			/// <see cref="Theme">Theme</see>
			/// .
			/// </remarks>
			public const int Theme_Black = unchecked((int)(0x01030008));

			/// <summary>Variant of the black theme with no title bar</summary>
			public const int Theme_Black_NoTitleBar = unchecked((int)(0x01030009));

			/// <summary>
			/// Variant of the black theme that has no title bar and
			/// fills the entire screen
			/// </summary>
			public const int Theme_Black_NoTitleBar_Fullscreen = unchecked((int)(0x0103000a));

			public const int Theme_DeviceDefault = unchecked((int)(0x01030128));

			public const int Theme_DeviceDefault_Dialog = unchecked((int)(0x0103012e));

			public const int Theme_DeviceDefault_Dialog_Alert = unchecked((int)(0x010302fc));

			public const int Theme_DeviceDefault_Dialog_MinWidth = unchecked((int)(0x0103012f
				));

			public const int Theme_DeviceDefault_Dialog_NoActionBar = unchecked((int)(0x01030130
				));

			public const int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth = unchecked((int
				)(0x01030131));

			public const int Theme_DeviceDefault_Dialog_NoFrame = unchecked((int)(0x01030300)
				);

			public const int Theme_DeviceDefault_DialogWhenLarge = unchecked((int)(0x01030136
				));

			public const int Theme_DeviceDefault_DialogWhenLarge_NoActionBar = unchecked((int
				)(0x01030137));

			public const int Theme_DeviceDefault_InputMethod = unchecked((int)(0x0103013e));

			public const int Theme_DeviceDefault_Light = unchecked((int)(0x0103012b));

			public const int Theme_DeviceDefault_Light_DarkActionBar = unchecked((int)(0x0103013f
				));

			public const int Theme_DeviceDefault_Light_Dialog = unchecked((int)(0x01030132));

			public const int Theme_DeviceDefault_Light_Dialog_Alert = unchecked((int)(0x010302fd
				));

			public const int Theme_DeviceDefault_Light_Dialog_MinWidth = unchecked((int)(0x01030133
				));

			public const int Theme_DeviceDefault_Light_Dialog_NoActionBar = unchecked((int)(0x01030134
				));

			public const int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth = unchecked(
				(int)(0x01030135));

			public const int Theme_DeviceDefault_Light_DialogWhenLarge = unchecked((int)(0x01030138
				));

			public const int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar = unchecked(
				(int)(0x01030139));

			public const int Theme_DeviceDefault_Light_NoActionBar = unchecked((int)(0x0103012c
				));

			public const int Theme_DeviceDefault_Light_NoActionBar_Fullscreen = unchecked((int
				)(0x0103012d));

			public const int Theme_DeviceDefault_Light_Panel = unchecked((int)(0x0103013b));

			public const int Theme_DeviceDefault_Light_SearchBar = unchecked((int)(0x010302ff
				));

			public const int Theme_DeviceDefault_NoActionBar = unchecked((int)(0x01030129));

			public const int Theme_DeviceDefault_NoActionBar_Fullscreen = unchecked((int)(0x0103012a
				));

			public const int Theme_DeviceDefault_Panel = unchecked((int)(0x0103013a));

			public const int Theme_DeviceDefault_SearchBar = unchecked((int)(0x010302fe));

			public const int Theme_DeviceDefault_Wallpaper = unchecked((int)(0x0103013c));

			public const int Theme_DeviceDefault_Wallpaper_NoTitleBar = unchecked((int)(0x0103013d
				));

			/// <summary>
			/// Default theme for dialog windows and activities, which is used by the
			/// <see cref="android.app.Dialog">android.app.Dialog</see>
			/// class.  This changes the window to be
			/// floating (not fill the entire screen), and puts a frame around its
			/// contents.  You can set this theme on an activity if you would like to
			/// make an activity that looks like a Dialog.
			/// </summary>
			public const int Theme_Dialog = unchecked((int)(0x0103000b));

			/// <summary>
			/// Default theme for alert dialog windows, which is used by the
			/// <see cref="android.app.AlertDialog">android.app.AlertDialog</see>
			/// class.  This is basically a dialog
			/// but sets the background to empty so it can do two-tone backgrounds.
			/// </summary>
			public const int Theme_Dialog_Alert = unchecked((int)(0x010302ec));

			/// <hide></hide>
			public const int Theme_Dialog_AppError = unchecked((int)(0x010302f5));

			/// <summary>Variation of Theme.Dialog that does not include a frame (or background).
			/// 	</summary>
			/// <remarks>
			/// Variation of Theme.Dialog that does not include a frame (or background).
			/// The view hierarchy of the dialog is responsible for drawing all of
			/// its pixels.
			/// </remarks>
			public const int Theme_Dialog_NoFrame = unchecked((int)(0x010302eb));

			/// <summary>
			/// Special theme for the recent apps dialog, to allow customization
			/// with overlays.
			/// </summary>
			/// <remarks>
			/// Special theme for the recent apps dialog, to allow customization
			/// with overlays.
			/// </remarks>
			public const int Theme_Dialog_RecentApplications = unchecked((int)(0x010302f6));

			public const int Theme_ExpandedMenu = unchecked((int)(0x010302f2));

			/// <summary>Theme for the search input bar when doing global search.</summary>
			/// <remarks>
			/// Theme for the search input bar when doing global search. The only
			/// difference from non-global search is that we do not dim the background.
			/// </remarks>
			public const int Theme_GlobalSearchBar = unchecked((int)(0x010302f0));

			/// <summary>New Honeycomb holographic theme.</summary>
			/// <remarks>
			/// New Honeycomb holographic theme. Dark version.  The widgets in the
			/// holographic theme are translucent on their brackground, so applications
			/// must ensure that any background they use with this theme is itself
			/// dark; otherwise, it will be difficult to see the widgets.  The new
			/// UI style also includes a full action bar by default.
			/// Styles used by the Holo theme are named using the convention Type.Holo.Etc.
			/// (For example, Widget.Holo.Button, TextAppearance.Holo.Widget.PopupMenu.Large.)
			/// Specific resources used by Holo are named using the convention @type/foo_bar_baz_holo
			/// with trailing _dark or _light specifiers if they are not shared between both light and
			/// dark versions of the theme.
			/// </remarks>
			public const int Theme_Holo = unchecked((int)(0x0103006b));

			public const int Theme_Holo_CompactMenu = unchecked((int)(0x010302f3));

			/// <summary>
			/// Dialog themes for Holo
			/// Holo theme for dialog windows and activities, which is used by the
			/// <see cref="android.app.Dialog">android.app.Dialog</see>
			/// class.  This changes the window to be
			/// floating (not fill the entire screen), and puts a frame around its
			/// contents.  You can set this theme on an activity if you would like to
			/// make an activity that looks like a Dialog.
			/// This is the default Dialog theme for applications targeting Honeycomb
			/// or newer.
			/// </summary>
			public const int Theme_Holo_Dialog = unchecked((int)(0x0103006f));

			/// <summary>
			/// Holo theme for alert dialog windows, which is used by the
			/// <see cref="android.app.AlertDialog">android.app.AlertDialog</see>
			/// class.  This is basically a dialog
			/// but sets the background to empty so it can do two-tone backgrounds.
			/// For applications targeting Honeycomb or newer, this is the default
			/// AlertDialog theme.
			/// </summary>
			public const int Theme_Holo_Dialog_Alert = unchecked((int)(0x010302fa));

			/// <summary>
			/// Variation of Theme.Holo.Dialog that has a nice minumum width for
			/// a regular dialog.
			/// </summary>
			/// <remarks>
			/// Variation of Theme.Holo.Dialog that has a nice minumum width for
			/// a regular dialog.
			/// </remarks>
			public const int Theme_Holo_Dialog_MinWidth = unchecked((int)(0x01030070));

			/// <summary>Variation of Theme.Holo.Dialog that does not include a title bar.</summary>
			/// <remarks>Variation of Theme.Holo.Dialog that does not include a title bar.</remarks>
			public const int Theme_Holo_Dialog_NoActionBar = unchecked((int)(0x01030071));

			/// <summary>
			/// Variation of Theme.Holo.Dialog.NoActionVar that has a nice minumum width for
			/// a regular dialog.
			/// </summary>
			/// <remarks>
			/// Variation of Theme.Holo.Dialog.NoActionVar that has a nice minumum width for
			/// a regular dialog.
			/// </remarks>
			public const int Theme_Holo_Dialog_NoActionBar_MinWidth = unchecked((int)(0x01030072
				));

			/// <summary>Variation of Theme.Holo.Dialog that does not include a frame (or background).
			/// 	</summary>
			/// <remarks>
			/// Variation of Theme.Holo.Dialog that does not include a frame (or background).
			/// The view hierarchy of the dialog is responsible for drawing all of
			/// its pixels.
			/// </remarks>
			public const int Theme_Holo_Dialog_NoFrame = unchecked((int)(0x010302f9));

			/// <summary>
			/// Theme for a window that will be displayed either full-screen on
			/// smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </summary>
			/// <remarks>
			/// Theme for a window that will be displayed either full-screen on
			/// smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </remarks>
			public const int Theme_Holo_DialogWhenLarge = unchecked((int)(0x01030077));

			/// <summary>
			/// Theme for a window without a title bar that will be displayed either
			/// full-screen on smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </summary>
			/// <remarks>
			/// Theme for a window without a title bar that will be displayed either
			/// full-screen on smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </remarks>
			public const int Theme_Holo_DialogWhenLarge_NoActionBar = unchecked((int)(0x01030078
				));

			/// <summary>
			/// Default theme for modern holo style input methods, which is used by the
			/// <see cref="android.inputmethodservice.InputMethodService">android.inputmethodservice.InputMethodService
			/// 	</see>
			/// class.
			/// this inherits from Theme.Panel, but sets up IME appropriate animations
			/// and a few custom attributes.
			/// </summary>
			public const int Theme_Holo_InputMethod = unchecked((int)(0x0103007f));

			/// <summary>New Honeycomb holographic theme.</summary>
			/// <remarks>
			/// New Honeycomb holographic theme. Light version.  The widgets in the
			/// holographic theme are translucent on their brackground, so applications
			/// must ensure that any background they use with this theme is itself
			/// light; otherwise, it will be difficult to see the widgets.  The new
			/// UI style also includes a full action bar by default.
			/// </remarks>
			public const int Theme_Holo_Light = unchecked((int)(0x0103006e));

			public const int Theme_Holo_Light_CompactMenu = unchecked((int)(0x010302f4));

			/// <summary>
			/// Variant of the holographic (light) theme that has a solid (opaque) action bar
			/// with an inverse color profile.
			/// </summary>
			/// <remarks>
			/// Variant of the holographic (light) theme that has a solid (opaque) action bar
			/// with an inverse color profile. The dark action bar sharply stands out against
			/// the light content.
			/// </remarks>
			public const int Theme_Holo_Light_DarkActionBar = unchecked((int)(0x01030119));

			/// <summary>
			/// Light holo dialog themes
			/// Holo light theme for dialog windows and activities, which is used by the
			/// <see cref="android.app.Dialog">android.app.Dialog</see>
			/// class.  This changes the window to be
			/// floating (not fill the entire screen), and puts a frame around its
			/// contents.  You can set this theme on an activity if you would like to
			/// make an activity that looks like a Dialog.
			/// This is the default Dialog theme for applications targeting Honeycomb
			/// or newer.
			/// </summary>
			public const int Theme_Holo_Light_Dialog = unchecked((int)(0x01030073));

			/// <summary>
			/// Holo light theme for alert dialog windows, which is used by the
			/// <see cref="android.app.AlertDialog">android.app.AlertDialog</see>
			/// class.  This is basically a dialog
			/// but sets the background to empty so it can do two-tone backgrounds.
			/// For applications targeting Honeycomb or newer, this is the default
			/// AlertDialog theme.
			/// </summary>
			public const int Theme_Holo_Light_Dialog_Alert = unchecked((int)(0x010302fb));

			/// <summary>
			/// Variation of Theme.Holo.Light.Dialog that has a nice minumum width for
			/// a regular dialog.
			/// </summary>
			/// <remarks>
			/// Variation of Theme.Holo.Light.Dialog that has a nice minumum width for
			/// a regular dialog.
			/// </remarks>
			public const int Theme_Holo_Light_Dialog_MinWidth = unchecked((int)(0x01030074));

			/// <summary>Variation of Theme.Holo.Light.Dialog that does not include a title bar.</summary>
			/// <remarks>Variation of Theme.Holo.Light.Dialog that does not include a title bar.</remarks>
			public const int Theme_Holo_Light_Dialog_NoActionBar = unchecked((int)(0x01030075
				));

			/// <summary>
			/// Variation of Theme.Holo.Light.Dialog.NoActionBar that has a nice minumum width for
			/// a regular dialog.
			/// </summary>
			/// <remarks>
			/// Variation of Theme.Holo.Light.Dialog.NoActionBar that has a nice minumum width for
			/// a regular dialog.
			/// </remarks>
			public const int Theme_Holo_Light_Dialog_NoActionBar_MinWidth = unchecked((int)(0x01030076
				));

			/// <summary>
			/// Theme for a window that will be displayed either full-screen on
			/// smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </summary>
			/// <remarks>
			/// Theme for a window that will be displayed either full-screen on
			/// smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </remarks>
			public const int Theme_Holo_Light_DialogWhenLarge = unchecked((int)(0x01030079));

			/// <summary>
			/// Theme for a window without an action bar that will be displayed either full-screen
			/// on smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </summary>
			/// <remarks>
			/// Theme for a window without an action bar that will be displayed either full-screen
			/// on smaller screens (small, normal) or as a dialog on larger screens
			/// (large, xlarge).
			/// </remarks>
			public const int Theme_Holo_Light_DialogWhenLarge_NoActionBar = unchecked((int)(0x0103007a
				));

			/// <summary>Variant of the holographic (light) theme with no action bar.</summary>
			/// <remarks>Variant of the holographic (light) theme with no action bar.</remarks>
			public const int Theme_Holo_Light_NoActionBar = unchecked((int)(0x010300f0));

			/// <summary>
			/// Variant of the holographic (light) theme that has no title bar and fills
			/// the entire screen
			/// </summary>
			public const int Theme_Holo_Light_NoActionBar_Fullscreen = unchecked((int)(0x010300f1
				));

			/// <summary>Default holo light theme for panel windows.</summary>
			/// <remarks>
			/// Default holo light theme for panel windows.  This removes all extraneous
			/// window decorations, so you basically have an empty rectangle in which
			/// to place your content.  It makes the window floating, with a transparent
			/// background, and turns off dimming behind the window.
			/// </remarks>
			public const int Theme_Holo_Light_Panel = unchecked((int)(0x0103007c));

			public const int Theme_Holo_Light_SearchBar = unchecked((int)(0x010302ef));

			/// <summary>Variant of the holographic (dark) theme with no action bar.</summary>
			/// <remarks>Variant of the holographic (dark) theme with no action bar.</remarks>
			public const int Theme_Holo_NoActionBar = unchecked((int)(0x0103006c));

			/// <summary>
			/// Variant of the holographic (dark) theme that has no title bar and fills
			/// the entire screen
			/// </summary>
			public const int Theme_Holo_NoActionBar_Fullscreen = unchecked((int)(0x0103006d));

			/// <summary>Default holo dark theme for panel windows.</summary>
			/// <remarks>
			/// Default holo dark theme for panel windows.  This removes all extraneous
			/// window decorations, so you basically have an empty rectangle in which
			/// to place your content.  It makes the window floating, with a transparent
			/// background, and turns off dimming behind the window.
			/// </remarks>
			public const int Theme_Holo_Panel = unchecked((int)(0x0103007b));

			public const int Theme_Holo_SearchBar = unchecked((int)(0x010302ee));

			/// <summary>
			/// Default holographic (dark) for windows that want to have the user's selected
			/// wallpaper appear behind them.
			/// </summary>
			/// <remarks>
			/// Default holographic (dark) for windows that want to have the user's selected
			/// wallpaper appear behind them.
			/// </remarks>
			public const int Theme_Holo_Wallpaper = unchecked((int)(0x0103007d));

			/// <summary>Variant of the holographic (dark) theme with no title bar</summary>
			public const int Theme_Holo_Wallpaper_NoTitleBar = unchecked((int)(0x0103007e));

			public const int Theme_IconMenu = unchecked((int)(0x010302f1));

			/// <summary>
			/// Default theme for input methods, which is used by the
			/// <see cref="android.inputmethodservice.InputMethodService">android.inputmethodservice.InputMethodService
			/// 	</see>
			/// class.
			/// this inherits from Theme.Panel, but sets up IME appropriate animations
			/// and a few custom attributes.
			/// </summary>
			public const int Theme_InputMethod = unchecked((int)(0x01030054));

			/// <summary>Theme for a light background with dark text on top.</summary>
			/// <remarks>
			/// Theme for a light background with dark text on top.  Set your activity
			/// to this theme if you would like such an appearance.  As with the
			/// default theme, you should try to assume little more than that the
			/// background will be a light color.
			/// </remarks>
			public const int Theme_Light = unchecked((int)(0x0103000c));

			/// <summary>Variant of the light theme with no title bar</summary>
			public const int Theme_Light_NoTitleBar = unchecked((int)(0x0103000d));

			/// <summary>
			/// Variant of the light theme that has no title bar and
			/// fills the entire screen
			/// </summary>
			public const int Theme_Light_NoTitleBar_Fullscreen = unchecked((int)(0x0103000e));

			/// <summary>Default light theme for panel windows.</summary>
			/// <remarks>
			/// Default light theme for panel windows.  This removes all extraneous
			/// window decorations, so you basically have an empty rectangle in which
			/// to place your content.  It makes the window floating, with a transparent
			/// background, and turns off dimming behind the window.
			/// </remarks>
			public const int Theme_Light_Panel = unchecked((int)(0x0103005a));

			/// <summary>
			/// Theme for a wallpaper's setting activity that is designed to be on
			/// top of a light background.
			/// </summary>
			/// <remarks>
			/// Theme for a wallpaper's setting activity that is designed to be on
			/// top of a light background.
			/// </remarks>
			public const int Theme_Light_WallpaperSettings = unchecked((int)(0x01030062));

			/// <summary>
			/// Default theme for activities that don't actually display a UI; that
			/// is, they finish themselves before being resumed.
			/// </summary>
			/// <remarks>
			/// Default theme for activities that don't actually display a UI; that
			/// is, they finish themselves before being resumed.
			/// </remarks>
			public const int Theme_NoDisplay = unchecked((int)(0x01030055));

			/// <summary>Variant of the default (dark) theme with no title bar</summary>
			public const int Theme_NoTitleBar = unchecked((int)(0x01030006));

			/// <summary>
			/// Variant of the default (dark) theme that has no title bar and
			/// fills the entire screen
			/// </summary>
			public const int Theme_NoTitleBar_Fullscreen = unchecked((int)(0x01030007));

			/// <summary>
			/// No title bar, but Action Mode bars will overlay application content
			/// instead of pushing it down to make room.
			/// </summary>
			/// <remarks>
			/// No title bar, but Action Mode bars will overlay application content
			/// instead of pushing it down to make room.
			/// </remarks>
			public const int Theme_NoTitleBar_OverlayActionModes = unchecked((int)(0x0103006a
				));

			/// <summary>Default dark theme for panel windows.</summary>
			/// <remarks>
			/// Default dark theme for panel windows.  This removes all extraneous
			/// window decorations, so you basically have an empty rectangle in which
			/// to place your content.  It makes the window floating, with a transparent
			/// background, and turns off dimming behind the window.
			/// </remarks>
			public const int Theme_Panel = unchecked((int)(0x01030059));

			public const int Theme_Panel_Volume = unchecked((int)(0x010302f8));

			/// <summary>Theme for the search input bar.</summary>
			/// <remarks>Theme for the search input bar.</remarks>
			public const int Theme_SearchBar = unchecked((int)(0x010302ed));

			/// <summary>Default theme for window that looks like a toast.</summary>
			/// <remarks>Default theme for window that looks like a toast.</remarks>
			public const int Theme_Toast = unchecked((int)(0x010302f7));

			/// <summary>
			/// Default theme for translucent activities, that is windows that allow you
			/// to see through them to the windows behind.
			/// </summary>
			/// <remarks>
			/// Default theme for translucent activities, that is windows that allow you
			/// to see through them to the windows behind.  This sets up the translucent
			/// flag and appropriate animations for your windows.
			/// </remarks>
			public const int Theme_Translucent = unchecked((int)(0x0103000f));

			/// <summary>Variant of the translucent theme with no title bar</summary>
			public const int Theme_Translucent_NoTitleBar = unchecked((int)(0x01030010));

			/// <summary>
			/// Variant of the translucent theme that has no title bar and
			/// fills the entire screen
			/// </summary>
			public const int Theme_Translucent_NoTitleBar_Fullscreen = unchecked((int)(0x01030011
				));

			/// <summary>
			/// Default theme for windows that want to have the user's selected
			/// wallpaper appear behind them.
			/// </summary>
			/// <remarks>
			/// Default theme for windows that want to have the user's selected
			/// wallpaper appear behind them.
			/// </remarks>
			public const int Theme_Wallpaper = unchecked((int)(0x0103005e));

			/// <summary>Variant of the translucent theme with no title bar</summary>
			public const int Theme_Wallpaper_NoTitleBar = unchecked((int)(0x0103005f));

			/// <summary>
			/// Variant of the translucent theme that has no title bar and
			/// fills the entire screen
			/// </summary>
			public const int Theme_Wallpaper_NoTitleBar_Fullscreen = unchecked((int)(0x01030060
				));

			/// <summary>
			/// Theme for a wallpaper's setting activity that is designed to be on
			/// top of a dark background.
			/// </summary>
			/// <remarks>
			/// Theme for a wallpaper's setting activity that is designed to be on
			/// top of a dark background.
			/// </remarks>
			public const int Theme_WallpaperSettings = unchecked((int)(0x01030061));

			/// <summary>Default theme with an Action Bar.</summary>
			/// <remarks>Default theme with an Action Bar.</remarks>
			public const int Theme_WithActionBar = unchecked((int)(0x01030069));

			/// <summary>Widget Styles</summary>
			public const int Widget = unchecked((int)(0x01030012));

			public const int Widget_AbsListView = unchecked((int)(0x01030013));

			public const int Widget_ActionBar = unchecked((int)(0x01030082));

			public const int Widget_ActionBar_TabBar = unchecked((int)(0x010300f4));

			public const int Widget_ActionBar_TabText = unchecked((int)(0x010300f3));

			public const int Widget_ActionBar_TabView = unchecked((int)(0x010300f2));

			public const int Widget_ActionButton = unchecked((int)(0x01030084));

			public const int Widget_ActionButton_CloseMode = unchecked((int)(0x01030088));

			public const int Widget_ActionButton_Overflow = unchecked((int)(0x01030087));

			public const int Widget_ActionMode = unchecked((int)(0x0103022e));

			public const int Widget_ActivityChooserView = unchecked((int)(0x01030210));

			public const int Widget_AutoCompleteTextView = unchecked((int)(0x01030027));

			public const int Widget_Button = unchecked((int)(0x01030014));

			public const int Widget_Button_Inset = unchecked((int)(0x01030015));

			public const int Widget_Button_Small = unchecked((int)(0x01030016));

			public const int Widget_Button_Toggle = unchecked((int)(0x01030017));

			public const int Widget_Button_Transparent = unchecked((int)(0x010301f3));

			public const int Widget_CalendarView = unchecked((int)(0x010300eb));

			public const int Widget_CompoundButton = unchecked((int)(0x01030018));

			public const int Widget_CompoundButton_CheckBox = unchecked((int)(0x01030019));

			public const int Widget_CompoundButton_RadioButton = unchecked((int)(0x0103001a));

			public const int Widget_CompoundButton_Star = unchecked((int)(0x0103001b));

			public const int Widget_CompoundButton_Switch = unchecked((int)(0x0103020a));

			public const int Widget_DatePicker = unchecked((int)(0x010300ee));

			/// <summary>Widget Styles</summary>
			public const int Widget_DeviceDefault = unchecked((int)(0x01030140));

			public const int Widget_DeviceDefault_AbsListView = unchecked((int)(0x0103029a));

			public const int Widget_DeviceDefault_ActionBar = unchecked((int)(0x0103016b));

			public const int Widget_DeviceDefault_ActionBar_Solid = unchecked((int)(0x01030173
				));

			public const int Widget_DeviceDefault_ActionBar_TabBar = unchecked((int)(0x01030172
				));

			public const int Widget_DeviceDefault_ActionBar_TabText = unchecked((int)(0x01030171
				));

			public const int Widget_DeviceDefault_ActionBar_TabView = unchecked((int)(0x01030170
				));

			public const int Widget_DeviceDefault_ActionButton = unchecked((int)(0x01030166));

			public const int Widget_DeviceDefault_ActionButton_CloseMode = unchecked((int)(0x0103016a
				));

			public const int Widget_DeviceDefault_ActionButton_Overflow = unchecked((int)(0x01030167
				));

			public const int Widget_DeviceDefault_ActionButton_TextButton = unchecked((int)(0x01030168
				));

			public const int Widget_DeviceDefault_ActionMode = unchecked((int)(0x01030169));

			public const int Widget_DeviceDefault_AutoCompleteTextView = unchecked((int)(0x01030147
				));

			public const int Widget_DeviceDefault_Button = unchecked((int)(0x01030141));

			public const int Widget_DeviceDefault_Button_Borderless = unchecked((int)(0x0103016c
				));

			public const int Widget_DeviceDefault_Button_Borderless_Small = unchecked((int)(0x01030145
				));

			public const int Widget_DeviceDefault_Button_Inset = unchecked((int)(0x01030143));

			public const int Widget_DeviceDefault_Button_Small = unchecked((int)(0x01030142));

			public const int Widget_DeviceDefault_Button_Toggle = unchecked((int)(0x01030144)
				);

			public const int Widget_DeviceDefault_CalendarView = unchecked((int)(0x0103016e));

			public const int Widget_DeviceDefault_CompoundButton_CheckBox = unchecked((int)(0x01030148
				));

			public const int Widget_DeviceDefault_CompoundButton_RadioButton = unchecked((int
				)(0x01030159));

			public const int Widget_DeviceDefault_CompoundButton_Star = unchecked((int)(0x0103015d
				));

			public const int Widget_DeviceDefault_CompoundButton_Switch = unchecked((int)(0x0103029d
				));

			public const int Widget_DeviceDefault_DatePicker = unchecked((int)(0x0103016f));

			public const int Widget_DeviceDefault_DropDownItem = unchecked((int)(0x01030161));

			public const int Widget_DeviceDefault_DropDownItem_Spinner = unchecked((int)(0x01030162
				));

			public const int Widget_DeviceDefault_EditText = unchecked((int)(0x0103014a));

			public const int Widget_DeviceDefault_EditText_NumberPickerInputText = unchecked(
				(int)(0x0103029e));

			public const int Widget_DeviceDefault_ExpandableListView = unchecked((int)(0x0103014b
				));

			public const int Widget_DeviceDefault_ExpandableListView_White = unchecked((int)(
				0x0103029f));

			public const int Widget_DeviceDefault_Gallery = unchecked((int)(0x010302a0));

			public const int Widget_DeviceDefault_GestureOverlayView = unchecked((int)(0x010302a1
				));

			public const int Widget_DeviceDefault_GridView = unchecked((int)(0x0103014c));

			public const int Widget_DeviceDefault_HorizontalScrollView = unchecked((int)(0x0103015b
				));

			public const int Widget_DeviceDefault_ImageButton = unchecked((int)(0x0103014d));

			public const int Widget_DeviceDefault_ImageButton_NumberPickerDownButton = unchecked(
				(int)(0x010302a2));

			public const int Widget_DeviceDefault_ImageButton_NumberPickerUpButton = unchecked(
				(int)(0x010302a3));

			public const int Widget_DeviceDefault_ImageWell = unchecked((int)(0x010302a4));

			public const int Widget_DeviceDefault_KeyboardView = unchecked((int)(0x010302a5));

			public const int Widget_DeviceDefault_Light = unchecked((int)(0x01030174));

			public const int Widget_DeviceDefault_Light_AbsListView = unchecked((int)(0x010302b8
				));

			public const int Widget_DeviceDefault_Light_ActionBar = unchecked((int)(0x010301a3
				));

			public const int Widget_DeviceDefault_Light_ActionBar_Solid = unchecked((int)(0x010301a7
				));

			public const int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse = unchecked((
				int)(0x010301a8));

			public const int Widget_DeviceDefault_Light_ActionBar_TabBar = unchecked((int)(0x010301a6
				));

			public const int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse = unchecked(
				(int)(0x010301a9));

			public const int Widget_DeviceDefault_Light_ActionBar_TabText = unchecked((int)(0x010301a5
				));

			public const int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse = unchecked(
				(int)(0x010301ab));

			public const int Widget_DeviceDefault_Light_ActionBar_TabView = unchecked((int)(0x010301a4
				));

			public const int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse = unchecked(
				(int)(0x010301aa));

			public const int Widget_DeviceDefault_Light_ActionButton = unchecked((int)(0x0103019f
				));

			public const int Widget_DeviceDefault_Light_ActionButton_CloseMode = unchecked((int
				)(0x010301a2));

			public const int Widget_DeviceDefault_Light_ActionButton_Overflow = unchecked((int
				)(0x010301a0));

			public const int Widget_DeviceDefault_Light_ActionMode = unchecked((int)(0x010301a1
				));

			public const int Widget_DeviceDefault_Light_ActionMode_Inverse = unchecked((int)(
				0x010301ac));

			public const int Widget_DeviceDefault_Light_AutoCompleteTextView = unchecked((int
				)(0x0103017b));

			public const int Widget_DeviceDefault_Light_Button = unchecked((int)(0x01030175));

			public const int Widget_DeviceDefault_Light_Button_Borderless = unchecked((int)(0x010302bb
				));

			public const int Widget_DeviceDefault_Light_Button_Borderless_Small = unchecked((
				int)(0x01030179));

			public const int Widget_DeviceDefault_Light_Button_Inset = unchecked((int)(0x01030177
				));

			public const int Widget_DeviceDefault_Light_Button_Small = unchecked((int)(0x01030176
				));

			public const int Widget_DeviceDefault_Light_Button_Toggle = unchecked((int)(0x01030178
				));

			public const int Widget_DeviceDefault_Light_CalendarView = unchecked((int)(0x0103019e
				));

			public const int Widget_DeviceDefault_Light_CompoundButton_CheckBox = unchecked((
				int)(0x0103017c));

			public const int Widget_DeviceDefault_Light_CompoundButton_RadioButton = unchecked(
				(int)(0x01030190));

			public const int Widget_DeviceDefault_Light_CompoundButton_Star = unchecked((int)
				(0x01030194));

			public const int Widget_DeviceDefault_Light_DatePicker = unchecked((int)(0x010302bc
				));

			public const int Widget_DeviceDefault_Light_DropDownItem = unchecked((int)(0x01030198
				));

			public const int Widget_DeviceDefault_Light_DropDownItem_Spinner = unchecked((int
				)(0x01030199));

			public const int Widget_DeviceDefault_Light_EditText = unchecked((int)(0x0103017e
				));

			public const int Widget_DeviceDefault_Light_EditText_NumberPickerInputText = unchecked(
				(int)(0x010302bd));

			public const int Widget_DeviceDefault_Light_ExpandableListView = unchecked((int)(
				0x0103017f));

			public const int Widget_DeviceDefault_Light_ExpandableListView_White = unchecked(
				(int)(0x010302be));

			public const int Widget_DeviceDefault_Light_Gallery = unchecked((int)(0x010302bf)
				);

			public const int Widget_DeviceDefault_Light_GestureOverlayView = unchecked((int)(
				0x010302c0));

			public const int Widget_DeviceDefault_Light_GridView = unchecked((int)(0x01030180
				));

			public const int Widget_DeviceDefault_Light_HorizontalScrollView = unchecked((int
				)(0x01030192));

			public const int Widget_DeviceDefault_Light_ImageButton = unchecked((int)(0x01030181
				));

			public const int Widget_DeviceDefault_Light_ImageButton_NumberPickerDownButton = 
				unchecked((int)(0x010302c1));

			public const int Widget_DeviceDefault_Light_ImageButton_NumberPickerUpButton = unchecked(
				(int)(0x010302c2));

			public const int Widget_DeviceDefault_Light_ImageWell = unchecked((int)(0x010302c3
				));

			public const int Widget_DeviceDefault_Light_ListPopupWindow = unchecked((int)(0x0103019b
				));

			public const int Widget_DeviceDefault_Light_ListView = unchecked((int)(0x01030182
				));

			public const int Widget_DeviceDefault_Light_ListView_DropDown = unchecked((int)(0x0103017d
				));

			public const int Widget_DeviceDefault_Light_ListView_White = unchecked((int)(0x010302c4
				));

			public const int Widget_DeviceDefault_Light_NumberPicker = unchecked((int)(0x010302c5
				));

			public const int Widget_DeviceDefault_Light_PopupMenu = unchecked((int)(0x0103019c
				));

			public const int Widget_DeviceDefault_Light_PopupWindow = unchecked((int)(0x01030183
				));

			public const int Widget_DeviceDefault_Light_PopupWindow_ActionMode = unchecked((int
				)(0x010302ba));

			public const int Widget_DeviceDefault_Light_ProgressBar = unchecked((int)(0x01030184
				));

			public const int Widget_DeviceDefault_Light_ProgressBar_Horizontal = unchecked((int
				)(0x01030185));

			public const int Widget_DeviceDefault_Light_ProgressBar_Inverse = unchecked((int)
				(0x01030189));

			public const int Widget_DeviceDefault_Light_ProgressBar_Large = unchecked((int)(0x01030188
				));

			public const int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse = unchecked(
				(int)(0x0103018b));

			public const int Widget_DeviceDefault_Light_ProgressBar_Small = unchecked((int)(0x01030186
				));

			public const int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse = unchecked(
				(int)(0x0103018a));

			public const int Widget_DeviceDefault_Light_ProgressBar_Small_Title = unchecked((
				int)(0x01030187));

			public const int Widget_DeviceDefault_Light_RatingBar = unchecked((int)(0x0103018d
				));

			public const int Widget_DeviceDefault_Light_RatingBar_Indicator = unchecked((int)
				(0x0103018e));

			public const int Widget_DeviceDefault_Light_RatingBar_Small = unchecked((int)(0x0103018f
				));

			public const int Widget_DeviceDefault_Light_ScrollView = unchecked((int)(0x01030191
				));

			public const int Widget_DeviceDefault_Light_SeekBar = unchecked((int)(0x0103018c)
				);

			public const int Widget_DeviceDefault_Light_Spinner = unchecked((int)(0x01030193)
				);

			public const int Widget_DeviceDefault_Light_Spinner_DropDown = unchecked((int)(0x010302c6
				));

			public const int Widget_DeviceDefault_Light_Spinner_DropDown_ActionBar = unchecked(
				(int)(0x010302b9));

			public const int Widget_DeviceDefault_Light_Tab = unchecked((int)(0x0103019d));

			public const int Widget_DeviceDefault_Light_TabWidget = unchecked((int)(0x01030195
				));

			public const int Widget_DeviceDefault_Light_TextSuggestionsPopupWindow = unchecked(
				(int)(0x010302c9));

			public const int Widget_DeviceDefault_Light_TextView = unchecked((int)(0x0103017a
				));

			public const int Widget_DeviceDefault_Light_TextView_ListSeparator = unchecked((int
				)(0x010302c7));

			public const int Widget_DeviceDefault_Light_TextView_SpinnerItem = unchecked((int
				)(0x0103019a));

			public const int Widget_DeviceDefault_Light_TimePicker = unchecked((int)(0x010302c8
				));

			public const int Widget_DeviceDefault_Light_WebTextView = unchecked((int)(0x01030196
				));

			public const int Widget_DeviceDefault_Light_WebView = unchecked((int)(0x01030197)
				);

			public const int Widget_DeviceDefault_ListPopupWindow = unchecked((int)(0x01030164
				));

			public const int Widget_DeviceDefault_ListView = unchecked((int)(0x0103014e));

			public const int Widget_DeviceDefault_ListView_DropDown = unchecked((int)(0x01030149
				));

			public const int Widget_DeviceDefault_ListView_White = unchecked((int)(0x010302a6
				));

			public const int Widget_DeviceDefault_NumberPicker = unchecked((int)(0x010302a7));

			public const int Widget_DeviceDefault_PopupMenu = unchecked((int)(0x01030165));

			public const int Widget_DeviceDefault_PopupWindow = unchecked((int)(0x0103014f));

			public const int Widget_DeviceDefault_PopupWindow_ActionMode = unchecked((int)(0x0103029c
				));

			public const int Widget_DeviceDefault_PreferenceFrameLayout = unchecked((int)(0x010302a8
				));

			public const int Widget_DeviceDefault_ProgressBar = unchecked((int)(0x01030150));

			public const int Widget_DeviceDefault_ProgressBar_Horizontal = unchecked((int)(0x01030151
				));

			public const int Widget_DeviceDefault_ProgressBar_Inverse = unchecked((int)(0x010302a9
				));

			public const int Widget_DeviceDefault_ProgressBar_Large = unchecked((int)(0x01030154
				));

			public const int Widget_DeviceDefault_ProgressBar_Large_Inverse = unchecked((int)
				(0x010302aa));

			public const int Widget_DeviceDefault_ProgressBar_Small = unchecked((int)(0x01030152
				));

			public const int Widget_DeviceDefault_ProgressBar_Small_Inverse = unchecked((int)
				(0x010302ab));

			public const int Widget_DeviceDefault_ProgressBar_Small_Title = unchecked((int)(0x01030153
				));

			public const int Widget_DeviceDefault_QuickContactBadge_WindowLarge = unchecked((
				int)(0x010302ac));

			public const int Widget_DeviceDefault_QuickContactBadge_WindowMedium = unchecked(
				(int)(0x010302ad));

			public const int Widget_DeviceDefault_QuickContactBadge_WindowSmall = unchecked((
				int)(0x010302ae));

			public const int Widget_DeviceDefault_QuickContactBadgeSmall_WindowLarge = unchecked(
				(int)(0x010302af));

			public const int Widget_DeviceDefault_QuickContactBadgeSmall_WindowMedium = unchecked(
				(int)(0x010302b0));

			public const int Widget_DeviceDefault_QuickContactBadgeSmall_WindowSmall = unchecked(
				(int)(0x010302b1));

			public const int Widget_DeviceDefault_RatingBar = unchecked((int)(0x01030156));

			public const int Widget_DeviceDefault_RatingBar_Indicator = unchecked((int)(0x01030157
				));

			public const int Widget_DeviceDefault_RatingBar_Small = unchecked((int)(0x01030158
				));

			public const int Widget_DeviceDefault_ScrollView = unchecked((int)(0x0103015a));

			public const int Widget_DeviceDefault_SeekBar = unchecked((int)(0x01030155));

			public const int Widget_DeviceDefault_Spinner = unchecked((int)(0x0103015c));

			public const int Widget_DeviceDefault_Spinner_DropDown = unchecked((int)(0x010302b2
				));

			public const int Widget_DeviceDefault_Spinner_DropDown_ActionBar = unchecked((int
				)(0x0103029b));

			public const int Widget_DeviceDefault_StackView = unchecked((int)(0x010302b3));

			public const int Widget_DeviceDefault_Tab = unchecked((int)(0x0103016d));

			public const int Widget_DeviceDefault_TabWidget = unchecked((int)(0x0103015e));

			public const int Widget_DeviceDefault_TextSelectHandle = unchecked((int)(0x010302b4
				));

			public const int Widget_DeviceDefault_TextSuggestionsPopupWindow = unchecked((int
				)(0x010302b5));

			public const int Widget_DeviceDefault_TextView = unchecked((int)(0x01030146));

			public const int Widget_DeviceDefault_TextView_ListSeparator = unchecked((int)(0x010302b6
				));

			public const int Widget_DeviceDefault_TextView_SpinnerItem = unchecked((int)(0x01030163
				));

			public const int Widget_DeviceDefault_TimePicker = unchecked((int)(0x010302b7));

			public const int Widget_DeviceDefault_WebTextView = unchecked((int)(0x0103015f));

			public const int Widget_DeviceDefault_WebView = unchecked((int)(0x01030160));

			public const int Widget_DropDownItem = unchecked((int)(0x0103002b));

			public const int Widget_DropDownItem_Spinner = unchecked((int)(0x0103002c));

			public const int Widget_EditText = unchecked((int)(0x01030023));

			public const int Widget_EditText_NumberPickerInputText = unchecked((int)(0x010301fe
				));

			public const int Widget_ExpandableListView = unchecked((int)(0x01030024));

			public const int Widget_ExpandableListView_White = unchecked((int)(0x010301f9));

			/// <summary>
			/// Default style for
			/// <see cref="android.app.FragmentBreadCrumbs">android.app.FragmentBreadCrumbs</see>
			/// view.
			/// </summary>
			public const int Widget_FragmentBreadCrumbs = unchecked((int)(0x01030089));

			public const int Widget_Gallery = unchecked((int)(0x01030035));

			public const int Widget_GenericQuickContactBadge = unchecked((int)(0x01030201));

			public const int Widget_GestureOverlayView = unchecked((int)(0x010301f1));

			public const int Widget_GestureOverlayView_White = unchecked((int)(0x010301f2));

			public const int Widget_GridView = unchecked((int)(0x01030032));

			/// <summary>Widget Styles</summary>
			public const int Widget_Holo = unchecked((int)(0x0103008a));

			public const int Widget_Holo_AbsListView = unchecked((int)(0x01030255));

			public const int Widget_Holo_ActionBar = unchecked((int)(0x010300b4));

			public const int Widget_Holo_ActionBar_Solid = unchecked((int)(0x01030121));

			public const int Widget_Holo_ActionBar_TabBar = unchecked((int)(0x010300f7));

			public const int Widget_Holo_ActionBar_TabText = unchecked((int)(0x010300f6));

			public const int Widget_Holo_ActionBar_TabView = unchecked((int)(0x010300f5));

			public const int Widget_Holo_ActionButton = unchecked((int)(0x010300af));

			public const int Widget_Holo_ActionButton_CloseMode = unchecked((int)(0x010300b3)
				);

			public const int Widget_Holo_ActionButton_Overflow = unchecked((int)(0x010300b0));

			public const int Widget_Holo_ActionButton_TextButton = unchecked((int)(0x010300b1
				));

			public const int Widget_Holo_ActionMode = unchecked((int)(0x010300b2));

			public const int Widget_Holo_ActivityChooserView = unchecked((int)(0x0103025f));

			public const int Widget_Holo_AutoCompleteTextView = unchecked((int)(0x01030090));

			public const int Widget_Holo_Button = unchecked((int)(0x0103008b));

			public const int Widget_Holo_Button_Borderless = unchecked((int)(0x010300e2));

			public const int Widget_Holo_Button_Borderless_Small = unchecked((int)(0x0103011a
				));

			public const int Widget_Holo_Button_Inset = unchecked((int)(0x0103008d));

			public const int Widget_Holo_Button_Small = unchecked((int)(0x0103008c));

			public const int Widget_Holo_Button_Toggle = unchecked((int)(0x0103008e));

			public const int Widget_Holo_ButtonBar = unchecked((int)(0x01030270));

			public const int Widget_Holo_ButtonBar_Button = unchecked((int)(0x01030271));

			public const int Widget_Holo_CalendarView = unchecked((int)(0x010300ec));

			public const int Widget_Holo_CompoundButton = unchecked((int)(0x01030256));

			public const int Widget_Holo_CompoundButton_CheckBox = unchecked((int)(0x01030091
				));

			public const int Widget_Holo_CompoundButton_RadioButton = unchecked((int)(0x010300a2
				));

			public const int Widget_Holo_CompoundButton_Star = unchecked((int)(0x010300a6));

			public const int Widget_Holo_CompoundButton_Switch = unchecked((int)(0x01030272));

			public const int Widget_Holo_DatePicker = unchecked((int)(0x010300ef));

			public const int Widget_Holo_DropDownItem = unchecked((int)(0x010300aa));

			public const int Widget_Holo_DropDownItem_Spinner = unchecked((int)(0x010300ab));

			public const int Widget_Holo_EditText = unchecked((int)(0x01030093));

			public const int Widget_Holo_EditText_NumberPickerInputText = unchecked((int)(0x0103025e
				));

			public const int Widget_Holo_ExpandableListView = unchecked((int)(0x01030094));

			public const int Widget_Holo_ExpandableListView_White = unchecked((int)(0x01030257
				));

			public const int Widget_Holo_Gallery = unchecked((int)(0x01030258));

			public const int Widget_Holo_GestureOverlayView = unchecked((int)(0x01030259));

			public const int Widget_Holo_GridView = unchecked((int)(0x01030095));

			public const int Widget_Holo_HorizontalScrollView = unchecked((int)(0x010300a4));

			public const int Widget_Holo_ImageButton = unchecked((int)(0x01030096));

			public const int Widget_Holo_ImageButton_NumberPickerDownButton = unchecked((int)
				(0x0103025d));

			public const int Widget_Holo_ImageButton_NumberPickerUpButton = unchecked((int)(0x0103025c
				));

			public const int Widget_Holo_ImageWell = unchecked((int)(0x01030260));

			public const int Widget_Holo_KeyboardView = unchecked((int)(0x01030269));

			/// <summary>Light widget styles</summary>
			public const int Widget_Holo_Light = unchecked((int)(0x010300b5));

			public const int Widget_Holo_Light_AbsListView = unchecked((int)(0x01030277));

			public const int Widget_Holo_Light_ActionBar = unchecked((int)(0x010300e1));

			public const int Widget_Holo_Light_ActionBar_Solid = unchecked((int)(0x01030122));

			public const int Widget_Holo_Light_ActionBar_Solid_Inverse = unchecked((int)(0x01030123
				));

			public const int Widget_Holo_Light_ActionBar_TabBar = unchecked((int)(0x010300fa)
				);

			public const int Widget_Holo_Light_ActionBar_TabBar_Inverse = unchecked((int)(0x01030124
				));

			public const int Widget_Holo_Light_ActionBar_TabText = unchecked((int)(0x010300f9
				));

			public const int Widget_Holo_Light_ActionBar_TabText_Inverse = unchecked((int)(0x01030126
				));

			public const int Widget_Holo_Light_ActionBar_TabView = unchecked((int)(0x010300f8
				));

			public const int Widget_Holo_Light_ActionBar_TabView_Inverse = unchecked((int)(0x01030125
				));

			public const int Widget_Holo_Light_ActionButton = unchecked((int)(0x010300dd));

			public const int Widget_Holo_Light_ActionButton_CloseMode = unchecked((int)(0x010300e0
				));

			public const int Widget_Holo_Light_ActionButton_Overflow = unchecked((int)(0x010300de
				));

			public const int Widget_Holo_Light_ActionMode = unchecked((int)(0x010300df));

			public const int Widget_Holo_Light_ActionMode_Inverse = unchecked((int)(0x01030127
				));

			public const int Widget_Holo_Light_ActivityChooserView = unchecked((int)(0x01030281
				));

			public const int Widget_Holo_Light_AutoCompleteTextView = unchecked((int)(0x010300bb
				));

			public const int Widget_Holo_Light_Button = unchecked((int)(0x010300b6));

			public const int Widget_Holo_Light_Button_Borderless = unchecked((int)(0x01030273
				));

			public const int Widget_Holo_Light_Button_Borderless_Small = unchecked((int)(0x0103011b
				));

			public const int Widget_Holo_Light_Button_Inset = unchecked((int)(0x010300b8));

			public const int Widget_Holo_Light_Button_Small = unchecked((int)(0x010300b7));

			public const int Widget_Holo_Light_Button_Toggle = unchecked((int)(0x010300b9));

			public const int Widget_Holo_Light_CalendarView = unchecked((int)(0x010300ed));

			public const int Widget_Holo_Light_CompoundButton_CheckBox = unchecked((int)(0x010300bc
				));

			public const int Widget_Holo_Light_CompoundButton_RadioButton = unchecked((int)(0x010300d0
				));

			public const int Widget_Holo_Light_CompoundButton_Star = unchecked((int)(0x010300d4
				));

			public const int Widget_Holo_Light_CompoundButton_Switch = unchecked((int)(0x0103028e
				));

			public const int Widget_Holo_Light_DatePicker = unchecked((int)(0x0103027d));

			public const int Widget_Holo_Light_DropDownItem = unchecked((int)(0x010300d8));

			public const int Widget_Holo_Light_DropDownItem_Spinner = unchecked((int)(0x010300d9
				));

			public const int Widget_Holo_Light_EditText = unchecked((int)(0x010300be));

			public const int Widget_Holo_Light_EditText_NumberPickerInputText = unchecked((int
				)(0x01030280));

			public const int Widget_Holo_Light_ExpandableListView = unchecked((int)(0x010300bf
				));

			public const int Widget_Holo_Light_ExpandableListView_White = unchecked((int)(0x01030278
				));

			public const int Widget_Holo_Light_Gallery = unchecked((int)(0x01030279));

			public const int Widget_Holo_Light_GestureOverlayView = unchecked((int)(0x0103027a
				));

			public const int Widget_Holo_Light_GridView = unchecked((int)(0x010300c0));

			public const int Widget_Holo_Light_HorizontalScrollView = unchecked((int)(0x010300d2
				));

			public const int Widget_Holo_Light_ImageButton = unchecked((int)(0x010300c1));

			public const int Widget_Holo_Light_ImageButton_NumberPickerDownButton = unchecked(
				(int)(0x0103027f));

			public const int Widget_Holo_Light_ImageButton_NumberPickerUpButton = unchecked((
				int)(0x0103027e));

			public const int Widget_Holo_Light_ImageWell = unchecked((int)(0x01030282));

			public const int Widget_Holo_Light_KeyboardView = unchecked((int)(0x01030287));

			public const int Widget_Holo_Light_ListPopupWindow = unchecked((int)(0x010300db));

			public const int Widget_Holo_Light_ListView = unchecked((int)(0x010300c2));

			public const int Widget_Holo_Light_ListView_DropDown = unchecked((int)(0x010300bd
				));

			public const int Widget_Holo_Light_ListView_White = unchecked((int)(0x01030283));

			public const int Widget_Holo_Light_NumberPicker = unchecked((int)(0x0103027b));

			public const int Widget_Holo_Light_PopupMenu = unchecked((int)(0x010300dc));

			public const int Widget_Holo_Light_PopupWindow = unchecked((int)(0x010300c3));

			public const int Widget_Holo_Light_PopupWindow_ActionMode = unchecked((int)(0x01030284
				));

			public const int Widget_Holo_Light_ProgressBar = unchecked((int)(0x010300c4));

			public const int Widget_Holo_Light_ProgressBar_Horizontal = unchecked((int)(0x010300c5
				));

			public const int Widget_Holo_Light_ProgressBar_Inverse = unchecked((int)(0x010300c9
				));

			public const int Widget_Holo_Light_ProgressBar_Large = unchecked((int)(0x010300c8
				));

			public const int Widget_Holo_Light_ProgressBar_Large_Inverse = unchecked((int)(0x010300cb
				));

			public const int Widget_Holo_Light_ProgressBar_Small = unchecked((int)(0x010300c6
				));

			public const int Widget_Holo_Light_ProgressBar_Small_Inverse = unchecked((int)(0x010300ca
				));

			public const int Widget_Holo_Light_ProgressBar_Small_Title = unchecked((int)(0x010300c7
				));

			public const int Widget_Holo_Light_QuickContactBadge_WindowLarge = unchecked((int
				)(0x0103028a));

			public const int Widget_Holo_Light_QuickContactBadge_WindowMedium = unchecked((int
				)(0x01030289));

			public const int Widget_Holo_Light_QuickContactBadge_WindowSmall = unchecked((int
				)(0x01030288));

			public const int Widget_Holo_Light_QuickContactBadgeSmall_WindowLarge = unchecked(
				(int)(0x0103028d));

			public const int Widget_Holo_Light_QuickContactBadgeSmall_WindowMedium = unchecked(
				(int)(0x0103028c));

			public const int Widget_Holo_Light_QuickContactBadgeSmall_WindowSmall = unchecked(
				(int)(0x0103028b));

			public const int Widget_Holo_Light_RatingBar = unchecked((int)(0x010300cd));

			public const int Widget_Holo_Light_RatingBar_Indicator = unchecked((int)(0x010300ce
				));

			public const int Widget_Holo_Light_RatingBar_Small = unchecked((int)(0x010300cf));

			public const int Widget_Holo_Light_ScrollView = unchecked((int)(0x010300d1));

			public const int Widget_Holo_Light_SeekBar = unchecked((int)(0x010300cc));

			public const int Widget_Holo_Light_Spinner = unchecked((int)(0x010300d3));

			public const int Widget_Holo_Light_Spinner_DropDown = unchecked((int)(0x01030285)
				);

			public const int Widget_Holo_Light_Spinner_DropDown_ActionBar = unchecked((int)(0x01030286
				));

			public const int Widget_Holo_Light_Tab = unchecked((int)(0x010300e4));

			public const int Widget_Holo_Light_TabWidget = unchecked((int)(0x010300d5));

			public const int Widget_Holo_Light_TextSelectHandle = unchecked((int)(0x01030275)
				);

			public const int Widget_Holo_Light_TextSuggestionsPopupWindow = unchecked((int)(0x01030276
				));

			public const int Widget_Holo_Light_TextView = unchecked((int)(0x010300ba));

			public const int Widget_Holo_Light_TextView_ListSeparator = unchecked((int)(0x01030274
				));

			public const int Widget_Holo_Light_TextView_SpinnerItem = unchecked((int)(0x010300da
				));

			public const int Widget_Holo_Light_TimePicker = unchecked((int)(0x0103027c));

			public const int Widget_Holo_Light_WebTextView = unchecked((int)(0x010300d6));

			public const int Widget_Holo_Light_WebView = unchecked((int)(0x010300d7));

			public const int Widget_Holo_ListPopupWindow = unchecked((int)(0x010300ad));

			public const int Widget_Holo_ListView = unchecked((int)(0x01030097));

			public const int Widget_Holo_ListView_DropDown = unchecked((int)(0x01030092));

			public const int Widget_Holo_ListView_White = unchecked((int)(0x01030261));

			public const int Widget_Holo_NumberPicker = unchecked((int)(0x0103025a));

			public const int Widget_Holo_PopupMenu = unchecked((int)(0x010300ae));

			public const int Widget_Holo_PopupWindow = unchecked((int)(0x01030098));

			public const int Widget_Holo_PopupWindow_ActionMode = unchecked((int)(0x01030262)
				);

			public const int Widget_Holo_PreferenceFrameLayout = unchecked((int)(0x01030298));

			public const int Widget_Holo_ProgressBar = unchecked((int)(0x01030099));

			public const int Widget_Holo_ProgressBar_Horizontal = unchecked((int)(0x0103009a)
				);

			public const int Widget_Holo_ProgressBar_Inverse = unchecked((int)(0x01030263));

			public const int Widget_Holo_ProgressBar_Large = unchecked((int)(0x0103009d));

			public const int Widget_Holo_ProgressBar_Large_Inverse = unchecked((int)(0x01030265
				));

			public const int Widget_Holo_ProgressBar_Small = unchecked((int)(0x0103009b));

			public const int Widget_Holo_ProgressBar_Small_Inverse = unchecked((int)(0x01030264
				));

			public const int Widget_Holo_ProgressBar_Small_Title = unchecked((int)(0x0103009c
				));

			public const int Widget_Holo_QuickContactBadge_WindowLarge = unchecked((int)(0x0103026c
				));

			public const int Widget_Holo_QuickContactBadge_WindowMedium = unchecked((int)(0x0103026b
				));

			public const int Widget_Holo_QuickContactBadge_WindowSmall = unchecked((int)(0x0103026a
				));

			public const int Widget_Holo_QuickContactBadgeSmall_WindowLarge = unchecked((int)
				(0x0103026f));

			public const int Widget_Holo_QuickContactBadgeSmall_WindowMedium = unchecked((int
				)(0x0103026e));

			public const int Widget_Holo_QuickContactBadgeSmall_WindowSmall = unchecked((int)
				(0x0103026d));

			public const int Widget_Holo_RatingBar = unchecked((int)(0x0103009f));

			public const int Widget_Holo_RatingBar_Indicator = unchecked((int)(0x010300a0));

			public const int Widget_Holo_RatingBar_Small = unchecked((int)(0x010300a1));

			public const int Widget_Holo_ScrollView = unchecked((int)(0x010300a3));

			public const int Widget_Holo_SeekBar = unchecked((int)(0x0103009e));

			public const int Widget_Holo_Spinner = unchecked((int)(0x010300a5));

			public const int Widget_Holo_Spinner_DropDown = unchecked((int)(0x01030266));

			public const int Widget_Holo_Spinner_DropDown_ActionBar = unchecked((int)(0x01030267
				));

			public const int Widget_Holo_StackView = unchecked((int)(0x01030251));

			public const int Widget_Holo_Tab = unchecked((int)(0x010300e3));

			public const int Widget_Holo_TabText = unchecked((int)(0x01030268));

			public const int Widget_Holo_TabWidget = unchecked((int)(0x010300a7));

			public const int Widget_Holo_TextSelectHandle = unchecked((int)(0x01030253));

			public const int Widget_Holo_TextSuggestionsPopupWindow = unchecked((int)(0x01030254
				));

			public const int Widget_Holo_TextView = unchecked((int)(0x0103008f));

			public const int Widget_Holo_TextView_ListSeparator = unchecked((int)(0x01030252)
				);

			public const int Widget_Holo_TextView_SpinnerItem = unchecked((int)(0x010300ac));

			public const int Widget_Holo_TimePicker = unchecked((int)(0x0103025b));

			public const int Widget_Holo_WebTextView = unchecked((int)(0x010300a8));

			public const int Widget_Holo_WebView = unchecked((int)(0x010300a9));

			public const int Widget_HorizontalScrollView = unchecked((int)(0x010301ff));

			public const int Widget_ImageButton = unchecked((int)(0x01030026));

			public const int Widget_ImageButton_NumberPickerDownButton = unchecked((int)(0x010301fd
				));

			public const int Widget_ImageButton_NumberPickerUpButton = unchecked((int)(0x010301fc
				));

			public const int Widget_ImageWell = unchecked((int)(0x01030025));

			public const int Widget_KeyboardView = unchecked((int)(0x01030057));

			public const int Widget_ListPopupWindow = unchecked((int)(0x01030085));

			public const int Widget_ListView = unchecked((int)(0x0103002e));

			public const int Widget_ListView_DropDown = unchecked((int)(0x01030030));

			public const int Widget_ListView_Menu = unchecked((int)(0x01030031));

			public const int Widget_ListView_White = unchecked((int)(0x0103002f));

			public const int Widget_NumberPicker = unchecked((int)(0x010301fa));

			public const int Widget_PopupMenu = unchecked((int)(0x01030086));

			public const int Widget_PopupWindow = unchecked((int)(0x01030036));

			public const int Widget_PreferenceFrameLayout = unchecked((int)(0x010301d9));

			public const int Widget_ProgressBar = unchecked((int)(0x0103001c));

			public const int Widget_ProgressBar_Horizontal = unchecked((int)(0x0103001f));

			public const int Widget_ProgressBar_Inverse = unchecked((int)(0x0103005b));

			public const int Widget_ProgressBar_Large = unchecked((int)(0x0103001d));

			public const int Widget_ProgressBar_Large_Inverse = unchecked((int)(0x0103005c));

			public const int Widget_ProgressBar_Small = unchecked((int)(0x0103001e));

			public const int Widget_ProgressBar_Small_Inverse = unchecked((int)(0x0103005d));

			public const int Widget_ProgressBar_Small_Title = unchecked((int)(0x010301f4));

			public const int Widget_QuickContactBadge = unchecked((int)(0x01030202));

			public const int Widget_QuickContactBadge_WindowLarge = unchecked((int)(0x01030206
				));

			public const int Widget_QuickContactBadge_WindowMedium = unchecked((int)(0x01030205
				));

			public const int Widget_QuickContactBadge_WindowSmall = unchecked((int)(0x01030204
				));

			public const int Widget_QuickContactBadgeSmall = unchecked((int)(0x01030203));

			public const int Widget_QuickContactBadgeSmall_WindowLarge = unchecked((int)(0x01030209
				));

			public const int Widget_QuickContactBadgeSmall_WindowMedium = unchecked((int)(0x01030208
				));

			public const int Widget_QuickContactBadgeSmall_WindowSmall = unchecked((int)(0x01030207
				));

			public const int Widget_RatingBar = unchecked((int)(0x01030021));

			public const int Widget_RatingBar_Indicator = unchecked((int)(0x010301f5));

			public const int Widget_RatingBar_Small = unchecked((int)(0x010301f6));

			public const int Widget_ScrollView = unchecked((int)(0x0103002d));

			public const int Widget_SeekBar = unchecked((int)(0x01030020));

			public const int Widget_Spinner = unchecked((int)(0x01030028));

			public const int Widget_Spinner_DropDown = unchecked((int)(0x01030083));

			public const int Widget_TabWidget = unchecked((int)(0x01030034));

			/// <summary>Style for the small popup windows that contain text selection anchors.</summary>
			/// <remarks>Style for the small popup windows that contain text selection anchors.</remarks>
			public const int Widget_TextSelectHandle = unchecked((int)(0x0103022b));

			/// <summary>Style for the popup window that contains text suggestions.</summary>
			/// <remarks>Style for the popup window that contains text suggestions.</remarks>
			public const int Widget_TextSuggestionsPopupWindow = unchecked((int)(0x0103022d));

			public const int Widget_TextView = unchecked((int)(0x01030022));

			public const int Widget_TextView_ListSeparator = unchecked((int)(0x010301f7));

			public const int Widget_TextView_ListSeparator_White = unchecked((int)(0x010301f8
				));

			public const int Widget_TextView_PopupMenu = unchecked((int)(0x01030029));

			public const int Widget_TextView_SpinnerItem = unchecked((int)(0x0103002a));

			public const int Widget_TimePicker = unchecked((int)(0x010301fb));

			public const int Widget_WebTextView = unchecked((int)(0x01030200));

			public const int Widget_WebView = unchecked((int)(0x01030033));

			public const int WindowTitle = unchecked((int)(0x010301d6));

			/// <summary>WindowTitle Styles</summary>
			public const int WindowTitle_DeviceDefault = unchecked((int)(0x010302e7));

			public const int WindowTitle_Holo = unchecked((int)(0x01030295));

			public const int WindowTitleBackground = unchecked((int)(0x010301d5));

			public const int WindowTitleBackground_DeviceDefault = unchecked((int)(0x010302e8
				));

			/// <summary>Window title</summary>
			public const int WindowTitleBackground_Holo = unchecked((int)(0x01030294));

			public const int ZoomControls = unchecked((int)(0x01030229));
		}

		public sealed class xml
		{
			public const int apns = unchecked((int)(0x010f0000));

			public const int autotext = unchecked((int)(0x010f0001));

			public const int eri = unchecked((int)(0x010f0002));

			public const int password_kbd_extension = unchecked((int)(0x010f0003));

			public const int password_kbd_numeric = unchecked((int)(0x010f0004));

			public const int password_kbd_popup_template = unchecked((int)(0x010f0005));

			public const int password_kbd_qwerty = unchecked((int)(0x010f0006));

			public const int password_kbd_qwerty_shifted = unchecked((int)(0x010f0007));

			public const int password_kbd_symbols = unchecked((int)(0x010f0008));

			public const int password_kbd_symbols_shift = unchecked((int)(0x010f0009));

			public const int power_profile = unchecked((int)(0x010f000a));

			public const int preferred_time_zones = unchecked((int)(0x010f000b));

			public const int storage_list = unchecked((int)(0x010f000c));

			public const int time_zones_by_country = unchecked((int)(0x010f000d));
		}

		public sealed class styleable
		{
			/// <summary>Attributes that can be used with a AbsListView.</summary>
			/// <remarks>
			/// Attributes that can be used with a AbsListView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_cacheColorHint">android:cacheColorHint</see>
			/// </code></td><td> Indicates that this list will always be drawn on top of solid, single-color
			/// opaque background.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_choiceMode">android:choiceMode</see>
			/// </code></td><td> Defines the choice behavior for the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_drawSelectorOnTop">android:drawSelectorOnTop</see>
			/// </code></td><td> When set to true, the selector will be drawn over the selected item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_fastScrollAlwaysVisible">android:fastScrollAlwaysVisible</see>
			/// </code></td><td> When set to true, the list will always show the fast scroll interface.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_fastScrollEnabled">android:fastScrollEnabled</see>
			/// </code></td><td> Enables the fast scroll thumb that can be dragged to quickly scroll through
			/// the list.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_listSelector">android:listSelector</see>
			/// </code></td><td> Drawable used to indicate the currently selected item in the list.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_scrollingCache">android:scrollingCache</see>
			/// </code></td><td> When set to true, the list uses a drawing cache during scrolling.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_smoothScrollbar">android:smoothScrollbar</see>
			/// </code></td><td> When set to true, the list will use a more refined calculation
			/// method based on the pixels height of the items visible on screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_stackFromBottom">android:stackFromBottom</see>
			/// </code></td><td> Used by ListView and GridView to stack their content from the bottom.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_textFilterEnabled">android:textFilterEnabled</see>
			/// </code></td><td> When set to true, the list will filter results as the user types.</td></tr>
			/// <tr><td><code>
			/// <see cref="AbsListView_transcriptMode">android:transcriptMode</see>
			/// </code></td><td> Sets the transcript mode for the list.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AbsListView_cacheColorHint">AbsListView_cacheColorHint</seealso>
			/// <seealso cref="AbsListView_choiceMode">AbsListView_choiceMode</seealso>
			/// <seealso cref="AbsListView_drawSelectorOnTop">AbsListView_drawSelectorOnTop</seealso>
			/// <seealso cref="AbsListView_fastScrollAlwaysVisible">AbsListView_fastScrollAlwaysVisible
			/// 	</seealso>
			/// <seealso cref="AbsListView_fastScrollEnabled">AbsListView_fastScrollEnabled</seealso>
			/// <seealso cref="AbsListView_listSelector">AbsListView_listSelector</seealso>
			/// <seealso cref="AbsListView_scrollingCache">AbsListView_scrollingCache</seealso>
			/// <seealso cref="AbsListView_smoothScrollbar">AbsListView_smoothScrollbar</seealso>
			/// <seealso cref="AbsListView_stackFromBottom">AbsListView_stackFromBottom</seealso>
			/// <seealso cref="AbsListView_textFilterEnabled">AbsListView_textFilterEnabled</seealso>
			/// <seealso cref="AbsListView_transcriptMode">AbsListView_transcriptMode</seealso>
			public static readonly int[] AbsListView = new int[] { unchecked((int)(0x010100fb
				)), unchecked((int)(0x010100fc)), unchecked((int)(0x010100fd)), unchecked((int)(
				0x010100fe)), unchecked((int)(0x010100ff)), unchecked((int)(0x01010100)), unchecked(
				(int)(0x01010101)), unchecked((int)(0x0101012b)), unchecked((int)(0x01010226)), 
				unchecked((int)(0x01010231)), unchecked((int)(0x01010335)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates that this list will always be drawn on top of solid, single-color
			/// opaque background. This allows the list to optimize drawing.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.cacheColorHint">android.R.attr.cacheColorHint</see>
			/// .
			/// </attr>
			/// <attr>name android:cacheColorHint</attr>
			public const int AbsListView_cacheColorHint = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the choice behavior for the view. By default, lists do not have
			/// any choice behavior. By setting the choiceMode to singleChoice, the list
			/// allows up to one item to be in a chosen state. By setting the choiceMode to
			/// multipleChoice, the list allows any number of items to be chosen.
			/// Finally, by setting the choiceMode to multipleChoiceModal the list allows
			/// any number of items to be chosen in a special selection mode.
			/// The application will supply a
			/// <see cref="android.widget.AbsListView.MultiChoiceModeListener">android.widget.AbsListView.MultiChoiceModeListener
			/// 	</see>
			/// using
			/// <see cref="android.widget.AbsListView.setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)
			/// 	">android.widget.AbsListView.setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)
			/// 	</see>
			/// to control the
			/// selection mode. This uses the
			/// <see cref="android.view.ActionMode">android.view.ActionMode</see>
			/// API.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Normal list that does not indicate choices. </td></tr>
			/// <tr><td><code>singleChoice</code></td><td>1</td><td> The list allows up to one choice. </td></tr>
			/// <tr><td><code>multipleChoice</code></td><td>2</td><td> The list allows multiple choices. </td></tr>
			/// <tr><td><code>multipleChoiceModal</code></td><td>3</td><td> The list allows multiple choices in a custom selection mode. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.choiceMode">android.R.attr.choiceMode</see>
			/// .
			/// </attr>
			/// <attr>name android:choiceMode</attr>
			public const int AbsListView_choiceMode = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the selector will be drawn over the selected item.
			/// Otherwise the selector is drawn behind the selected item. The default
			/// value is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawSelectorOnTop">android.R.attr.drawSelectorOnTop</see>
			/// .
			/// </attr>
			/// <attr>name android:drawSelectorOnTop</attr>
			public const int AbsListView_drawSelectorOnTop = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the list will always show the fast scroll interface.
			/// This setting implies fastScrollEnabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollAlwaysVisible">android.R.attr.fastScrollAlwaysVisible
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollAlwaysVisible</attr>
			public const int AbsListView_fastScrollAlwaysVisible = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables the fast scroll thumb that can be dragged to quickly scroll through
			/// the list.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollEnabled">android.R.attr.fastScrollEnabled</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollEnabled</attr>
			public const int AbsListView_fastScrollEnabled = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used to indicate the currently selected item in the list.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listSelector">android.R.attr.listSelector</see>
			/// .
			/// </attr>
			/// <attr>name android:listSelector</attr>
			public const int AbsListView_listSelector = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the list uses a drawing cache during scrolling.
			/// This makes the rendering faster but uses more memory. The default
			/// value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollingCache">android.R.attr.scrollingCache</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollingCache</attr>
			public const int AbsListView_scrollingCache = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the list will use a more refined calculation
			/// method based on the pixels height of the items visible on screen. This
			/// property is set to true by default but should be set to false if your adapter
			/// will display items of varying heights. When this property is set to true and
			/// your adapter displays items of varying heights, the scrollbar thumb will
			/// change size as the user scrolls through the list. When set to fale, the list
			/// will use only the number of items in the adapter and the number of items visible
			/// on screen to determine the scrollbar's properties.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.smoothScrollbar">android.R.attr.smoothScrollbar</see>
			/// .
			/// </attr>
			/// <attr>name android:smoothScrollbar</attr>
			public const int AbsListView_smoothScrollbar = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Used by ListView and GridView to stack their content from the bottom.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.stackFromBottom">android.R.attr.stackFromBottom</see>
			/// .
			/// </attr>
			/// <attr>name android:stackFromBottom</attr>
			public const int AbsListView_stackFromBottom = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the list will filter results as the user types. The
			/// List's adapter must support the Filterable interface for this to work.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textFilterEnabled">android.R.attr.textFilterEnabled</see>
			/// .
			/// </attr>
			/// <attr>name android:textFilterEnabled</attr>
			public const int AbsListView_textFilterEnabled = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the transcript mode for the list. In transcript mode, the list
			/// scrolls to the bottom to make new items visible when they are added.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>disabled</code></td><td>0</td><td> Disables transcript mode. This is the default value. </td></tr>
			/// <tr><td><code>normal</code></td><td>1</td><td> The list will automatically scroll to the bottom when
			/// a data set change notification is received and only if the last item is
			/// already visible on screen. </td></tr>
			/// <tr><td><code>alwaysScroll</code></td><td>2</td><td> The list will automatically scroll to the bottom, no matter what items
			/// are currently visible. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.transcriptMode">android.R.attr.transcriptMode</see>
			/// .
			/// </attr>
			/// <attr>name android:transcriptMode</attr>
			public const int AbsListView_transcriptMode = 5;

			/// <summary>Attributes that can be used with a AbsSpinner.</summary>
			/// <remarks>
			/// Attributes that can be used with a AbsSpinner.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AbsSpinner_entries">android:entries</see>
			/// </code></td><td> Reference to an array resource that will populate the Spinner.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AbsSpinner_entries">AbsSpinner_entries</seealso>
			public static readonly int[] AbsSpinner = new int[] { unchecked((int)(0x010100b2)
				) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to an array resource that will populate the Spinner.  For static content,
			/// this is simpler than populating the Spinner programmatically.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.entries">android.R.attr.entries</see>
			/// .
			/// </attr>
			/// <attr>name android:entries</attr>
			public const int AbsSpinner_entries = 0;

			/// <summary>Attributes that can be used with a AbsoluteLayout_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a AbsoluteLayout_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AbsoluteLayout_Layout_layout_x">android:layout_x</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AbsoluteLayout_Layout_layout_y">android:layout_y</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AbsoluteLayout_Layout_layout_x">AbsoluteLayout_Layout_layout_x</seealso>
			/// <seealso cref="AbsoluteLayout_Layout_layout_y">AbsoluteLayout_Layout_layout_y</seealso>
			public static readonly int[] AbsoluteLayout_Layout = new int[] { unchecked((int)(
				0x0101017f)), unchecked((int)(0x01010180)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.layout_x">android.R.attr.layout_x</see>
			/// attribute's value can be found in the
			/// <see cref="AbsoluteLayout_Layout">AbsoluteLayout_Layout</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:layout_x</attr>
			public const int AbsoluteLayout_Layout_layout_x = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.layout_y">android.R.attr.layout_y</see>
			/// attribute's value can be found in the
			/// <see cref="AbsoluteLayout_Layout">AbsoluteLayout_Layout</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:layout_y</attr>
			public const int AbsoluteLayout_Layout_layout_y = 1;

			/// <summary>Attributes that can be used with a AccelerateInterpolator.</summary>
			/// <remarks>
			/// Attributes that can be used with a AccelerateInterpolator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AccelerateInterpolator_factor">android:factor</see>
			/// </code></td><td> This is the amount of deceleration to add when easing in.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AccelerateInterpolator_factor">AccelerateInterpolator_factor</seealso>
			public static readonly int[] AccelerateInterpolator = new int[] { unchecked((int)
				(0x010101d3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the amount of deceleration to add when easing in.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.factor">android.R.attr.factor</see>
			/// .
			/// </attr>
			/// <attr>name android:factor</attr>
			public const int AccelerateInterpolator_factor = 0;

			/// <summary>
			/// Use <code>accessibility-service</code> as the root tag of the XML resource that
			/// describes an
			/// <see cref="android.accessibilityservice.AccessibilityService">android.accessibilityservice.AccessibilityService
			/// 	</see>
			/// service,
			/// which is referenced from its
			/// <see cref="android.accessibilityservice.AccessibilityService.SERVICE_META_DATA">android.accessibilityservice.AccessibilityService.SERVICE_META_DATA
			/// 	</see>
			/// meta-data entry.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_accessibilityEventTypes">android:accessibilityEventTypes
			/// 	</see>
			/// </code></td><td> The event types this serivce would like to receive as specified in
			/// <see cref="android.view.accessibility.AccessibilityEvent">android.view.accessibility.AccessibilityEvent
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_accessibilityFeedbackType">android:accessibilityFeedbackType
			/// 	</see>
			/// </code></td><td> The feedback types this serivce provides as specified in
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo">android.accessibilityservice.AccessibilityServiceInfo
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_accessibilityFlags">android:accessibilityFlags</see>
			/// </code></td><td> Additional flags as specified in
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo">android.accessibilityservice.AccessibilityServiceInfo
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_canRetrieveWindowContent">android:canRetrieveWindowContent
			/// 	</see>
			/// </code></td><td> Flag whether the accessibility service wants to be able to retrieve the
			/// active window content.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_description">android:description</see>
			/// </code></td><td> Short description of the accessibility serivce purpose or behavior.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_notificationTimeout">android:notificationTimeout</see>
			/// </code></td><td> The minimal period in milliseconds between two accessibility events of the same type
			/// are sent to this serivce.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_packageNames">android:packageNames</see>
			/// </code></td><td> Comma separated package names from which this serivce would like to receive events (leave out for all packages).</td></tr>
			/// <tr><td><code>
			/// <see cref="AccessibilityService_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> Component name of an activity that allows the user to modify
			/// the settings for this service.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AccessibilityService_accessibilityEventTypes">AccessibilityService_accessibilityEventTypes
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_accessibilityFeedbackType">AccessibilityService_accessibilityFeedbackType
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_accessibilityFlags">AccessibilityService_accessibilityFlags
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_canRetrieveWindowContent">AccessibilityService_canRetrieveWindowContent
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_description">AccessibilityService_description
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_notificationTimeout">AccessibilityService_notificationTimeout
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_packageNames">AccessibilityService_packageNames
			/// 	</seealso>
			/// <seealso cref="AccessibilityService_settingsActivity">AccessibilityService_settingsActivity
			/// 	</seealso>
			public static readonly int[] AccessibilityService = new int[] { unchecked((int)(0x01010020
				)), unchecked((int)(0x01010225)), unchecked((int)(0x01010380)), unchecked((int)(
				0x01010381)), unchecked((int)(0x01010382)), unchecked((int)(0x01010383)), unchecked(
				(int)(0x01010384)), unchecked((int)(0x01010385)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The event types this serivce would like to receive as specified in
			/// <see cref="android.view.accessibility.AccessibilityEvent">android.view.accessibility.AccessibilityEvent
			/// 	</see>
			/// . This setting
			/// can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>typeViewClicked</code></td><td>0x00000001</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_CLICKED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_CLICKED
			/// 	</see>
			/// events.</td></tr>
			/// <tr><td><code>typeViewLongClicked</code></td><td>0x00000002</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_LONG_CLICKED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_LONG_CLICKED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewSelected</code></td><td>0x00000004</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SELECTED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewFocused</code></td><td>0x00000008</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_FOCUSED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_FOCUSED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewTextChanged</code></td><td>0x00000010</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeWindowStateChanged</code></td><td>0x00000020</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED</see>
			/// events. </td></tr>
			/// <tr><td><code>typeNotificationStateChanged</code></td><td>0x00000040</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewHoverEnter</code></td><td>0x00000080</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_ENTER">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_ENTER
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewHoverExit</code></td><td>0x00000100</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_EXIT">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_HOVER_EXIT
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeTouchExplorationGestureStart</code></td><td>0x00000200</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeTouchExplorationGestureEnd</code></td><td>0x00000400</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_END
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeWindowContentChanged</code></td><td>0x00000800</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewScrolled</code></td><td>0x000001000</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SCROLLED">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_SCROLLED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeViewTextSelectionChanged</code></td><td>0x000002000</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED
			/// 	">android.view.accessibility.AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED
			/// 	</see>
			/// events. </td></tr>
			/// <tr><td><code>typeAllMask</code></td><td>0xffffffff</td><td> Receives
			/// <see cref="android.view.accessibility.AccessibilityEvent.TYPES_ALL_MASK">android.view.accessibility.AccessibilityEvent.TYPES_ALL_MASK
			/// 	</see>
			/// i.e. all events. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.accessibilityEventTypes">android.R.attr.accessibilityEventTypes
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:accessibilityEventTypes</attr>
			public const int AccessibilityService_accessibilityEventTypes = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The feedback types this serivce provides as specified in
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo">android.accessibilityservice.AccessibilityServiceInfo
			/// 	</see>
			/// . This setting
			/// can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>feedbackSpoken</code></td><td>0x00000001</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_SPOKEN"
			/// 	>android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_SPOKEN</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackHaptic</code></td><td>0x00000002</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_HAPTIC"
			/// 	>android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_HAPTIC</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackAudible</code></td><td>0x00000004</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_AUDIBLE
			/// 	">android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_AUDIBLE</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackVisual</code></td><td>0x00000008</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_VISUAL"
			/// 	>android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_VISUAL</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackGeneric</code></td><td>0x00000010</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_GENERIC
			/// 	">android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_GENERIC</see>
			/// feedback. </td></tr>
			/// <tr><td><code>feedbackAllMask</code></td><td>0xffffffff</td><td> Provides
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_ALL_MASK
			/// 	">android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_ALL_MASK</see>
			/// feedback. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.accessibilityFeedbackType">android.R.attr.accessibilityFeedbackType
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:accessibilityFeedbackType</attr>
			public const int AccessibilityService_accessibilityFeedbackType = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Additional flags as specified in
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo">android.accessibilityservice.AccessibilityServiceInfo
			/// 	</see>
			/// .
			/// This setting can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>flagDefault</code></td><td>0x00000001</td><td> Has flag
			/// <see cref="android.accessibilityservice.AccessibilityServiceInfo.DEFAULT">android.accessibilityservice.AccessibilityServiceInfo.DEFAULT
			/// 	</see>
			/// </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.accessibilityFlags">android.R.attr.accessibilityFlags</see>
			/// .
			/// </attr>
			/// <attr>name android:accessibilityFlags</attr>
			public const int AccessibilityService_accessibilityFlags = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag whether the accessibility service wants to be able to retrieve the
			/// active window content. This setting cannot be changed at runtime.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.canRetrieveWindowContent">android.R.attr.canRetrieveWindowContent
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:canRetrieveWindowContent</attr>
			public const int AccessibilityService_canRetrieveWindowContent = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Short description of the accessibility serivce purpose or behavior.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AccessibilityService_description = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimal period in milliseconds between two accessibility events of the same type
			/// are sent to this serivce. This setting can be changed at runtime by calling
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.notificationTimeout">android.R.attr.notificationTimeout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:notificationTimeout</attr>
			public const int AccessibilityService_notificationTimeout = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Comma separated package names from which this serivce would like to receive events (leave out for all packages).
			/// <see cref="android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	">android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.packageNames">android.R.attr.packageNames</see>
			/// .
			/// </attr>
			/// <attr>name android:packageNames</attr>
			public const int AccessibilityService_packageNames = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Component name of an activity that allows the user to modify
			/// the settings for this service. This setting cannot be changed at runtime.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int AccessibilityService_settingsActivity = 1;

			/// <summary>
			/// Use <code>account-authenticator</code> as the root tag of the XML resource that
			/// describes an account authenticator.
			/// </summary>
			/// <remarks>
			/// Use <code>account-authenticator</code> as the root tag of the XML resource that
			/// describes an account authenticator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AccountAuthenticator_accountPreferences">android:accountPreferences</see>
			/// </code></td><td> A preferences.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccountAuthenticator_accountType">android:accountType</see>
			/// </code></td><td> The account type this authenticator handles.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccountAuthenticator_customTokens">android:customTokens</see>
			/// </code></td><td> Account handles its own token storage and permissions.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccountAuthenticator_icon">android:icon</see>
			/// </code></td><td> The icon of the authenticator.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccountAuthenticator_label">android:label</see>
			/// </code></td><td> The user-visible name of the authenticator.</td></tr>
			/// <tr><td><code>
			/// <see cref="AccountAuthenticator_smallIcon">android:smallIcon</see>
			/// </code></td><td> Smaller icon of the authenticator.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AccountAuthenticator_accountPreferences">AccountAuthenticator_accountPreferences
			/// 	</seealso>
			/// <seealso cref="AccountAuthenticator_accountType">AccountAuthenticator_accountType
			/// 	</seealso>
			/// <seealso cref="AccountAuthenticator_customTokens">AccountAuthenticator_customTokens
			/// 	</seealso>
			/// <seealso cref="AccountAuthenticator_icon">AccountAuthenticator_icon</seealso>
			/// <seealso cref="AccountAuthenticator_label">AccountAuthenticator_label</seealso>
			/// <seealso cref="AccountAuthenticator_smallIcon">AccountAuthenticator_smallIcon</seealso>
			public static readonly int[] AccountAuthenticator = new int[] { unchecked((int)(0x01010001
				)), unchecked((int)(0x01010002)), unchecked((int)(0x0101028f)), unchecked((int)(
				0x0101029e)), unchecked((int)(0x0101029f)), unchecked((int)(0x0101033b)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A preferences.xml file for authenticator-specific settings.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.accountPreferences">android.R.attr.accountPreferences</see>
			/// .
			/// </attr>
			/// <attr>name android:accountPreferences</attr>
			public const int AccountAuthenticator_accountPreferences = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The account type this authenticator handles.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.accountType">android.R.attr.accountType</see>
			/// .
			/// </attr>
			/// <attr>name android:accountType</attr>
			public const int AccountAuthenticator_accountType = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Account handles its own token storage and permissions.
			/// Default to false
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.customTokens">android.R.attr.customTokens</see>
			/// .
			/// </attr>
			/// <attr>name android:customTokens</attr>
			public const int AccountAuthenticator_customTokens = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The icon of the authenticator.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AccountAuthenticator_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The user-visible name of the authenticator.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AccountAuthenticator_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Smaller icon of the authenticator.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.smallIcon">android.R.attr.smallIcon</see>
			/// .
			/// </attr>
			/// <attr>name android:smallIcon</attr>
			public const int AccountAuthenticator_smallIcon = 3;

			/// <summary>Attributes used to style the Action Bar.</summary>
			/// <remarks>
			/// Attributes used to style the Action Bar.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_background">android:background</see>
			/// </code></td><td> Specifies a background drawable for the action bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_backgroundSplit">android:backgroundSplit</see>
			/// </code></td><td> Specifies a background drawable for the bottom component of a split action bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_backgroundStacked">android:backgroundStacked</see>
			/// </code></td><td> Specifies a background drawable for a second stacked row of the action bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_customNavigationLayout">android:customNavigationLayout</see>
			/// </code></td><td> Specifies a layout for custom navigation.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_displayOptions">android:displayOptions</see>
			/// </code></td><td> Options affecting how the action bar is displayed.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_divider">android:divider</see>
			/// </code></td><td> Specifies the drawable used for item dividers.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_height">android:height</see>
			/// </code></td><td> Specifies a fixed height.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_homeLayout">android:homeLayout</see>
			/// </code></td><td> Specifies a layout to use for the "home" section of the action bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_icon">android:icon</see>
			/// </code></td><td> Specifies the drawable used for the application icon.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_indeterminateProgressStyle">android:indeterminateProgressStyle
			/// 	</see>
			/// </code></td><td> Specifies a style resource to use for an indeterminate progress spinner.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_itemPadding">android:itemPadding</see>
			/// </code></td><td> Specifies padding that should be applied to the left and right sides of
			/// system-provided items in the bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_logo">android:logo</see>
			/// </code></td><td> Specifies the drawable used for the application logo.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_navigationMode">android:navigationMode</see>
			/// </code></td><td> The type of navigation to use.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_progressBarPadding">android:progressBarPadding</see>
			/// </code></td><td> Specifies the horizontal padding on either end for an embedded progress bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_progressBarStyle">android:progressBarStyle</see>
			/// </code></td><td> Specifies a style resource to use for an embedded progress bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_subtitle">android:subtitle</see>
			/// </code></td><td> Specifies subtitle text used for navigationMode="normal" </td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_subtitleTextStyle">android:subtitleTextStyle</see>
			/// </code></td><td> Specifies a style to use for subtitle text.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_title">android:title</see>
			/// </code></td><td> Specifies title text used for navigationMode="normal" </td></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_titleTextStyle">android:titleTextStyle</see>
			/// </code></td><td> Specifies a style to use for title text.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ActionBar_background">ActionBar_background</seealso>
			/// <seealso cref="ActionBar_backgroundSplit">ActionBar_backgroundSplit</seealso>
			/// <seealso cref="ActionBar_backgroundStacked">ActionBar_backgroundStacked</seealso>
			/// <seealso cref="ActionBar_customNavigationLayout">ActionBar_customNavigationLayout
			/// 	</seealso>
			/// <seealso cref="ActionBar_displayOptions">ActionBar_displayOptions</seealso>
			/// <seealso cref="ActionBar_divider">ActionBar_divider</seealso>
			/// <seealso cref="ActionBar_height">ActionBar_height</seealso>
			/// <seealso cref="ActionBar_homeLayout">ActionBar_homeLayout</seealso>
			/// <seealso cref="ActionBar_icon">ActionBar_icon</seealso>
			/// <seealso cref="ActionBar_indeterminateProgressStyle">ActionBar_indeterminateProgressStyle
			/// 	</seealso>
			/// <seealso cref="ActionBar_itemPadding">ActionBar_itemPadding</seealso>
			/// <seealso cref="ActionBar_logo">ActionBar_logo</seealso>
			/// <seealso cref="ActionBar_navigationMode">ActionBar_navigationMode</seealso>
			/// <seealso cref="ActionBar_progressBarPadding">ActionBar_progressBarPadding</seealso>
			/// <seealso cref="ActionBar_progressBarStyle">ActionBar_progressBarStyle</seealso>
			/// <seealso cref="ActionBar_subtitle">ActionBar_subtitle</seealso>
			/// <seealso cref="ActionBar_subtitleTextStyle">ActionBar_subtitleTextStyle</seealso>
			/// <seealso cref="ActionBar_title">ActionBar_title</seealso>
			/// <seealso cref="ActionBar_titleTextStyle">ActionBar_titleTextStyle</seealso>
			public static readonly int[] ActionBar = new int[] { unchecked((int)(0x01010002))
				, unchecked((int)(0x01010077)), unchecked((int)(0x010100d4)), unchecked((int)(0x01010129
				)), unchecked((int)(0x01010155)), unchecked((int)(0x010101e1)), unchecked((int)(
				0x010102be)), unchecked((int)(0x010102cf)), unchecked((int)(0x010102d0)), unchecked(
				(int)(0x010102d1)), unchecked((int)(0x010102d2)), unchecked((int)(0x010102f8)), 
				unchecked((int)(0x010102f9)), unchecked((int)(0x01010318)), unchecked((int)(0x01010319
				)), unchecked((int)(0x0101031d)), unchecked((int)(0x0101032d)), unchecked((int)(
				0x0101038a)), unchecked((int)(0x0101038b)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a background drawable for the action bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// .
			/// </attr>
			/// <attr>name android:background</attr>
			public const int ActionBar_background = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a background drawable for the bottom component of a split action bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundSplit">android.R.attr.backgroundSplit</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundSplit</attr>
			public const int ActionBar_backgroundSplit = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a background drawable for a second stacked row of the action bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundStacked">android.R.attr.backgroundStacked</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundStacked</attr>
			public const int ActionBar_backgroundStacked = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a layout for custom navigation. Overrides navigationMode.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.customNavigationLayout">android.R.attr.customNavigationLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:customNavigationLayout</attr>
			public const int ActionBar_customNavigationLayout = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Options affecting how the action bar is displayed.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>useLogo</code></td><td>0x1</td><td></td></tr>
			/// <tr><td><code>showHome</code></td><td>0x2</td><td></td></tr>
			/// <tr><td><code>homeAsUp</code></td><td>0x4</td><td></td></tr>
			/// <tr><td><code>showTitle</code></td><td>0x8</td><td></td></tr>
			/// <tr><td><code>showCustom</code></td><td>0x10</td><td></td></tr>
			/// <tr><td><code>disableHome</code></td><td>0x20</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.displayOptions">android.R.attr.displayOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:displayOptions</attr>
			public const int ActionBar_displayOptions = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the drawable used for item dividers.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.divider">android.R.attr.divider</see>
			/// .
			/// </attr>
			/// <attr>name android:divider</attr>
			public const int ActionBar_divider = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a fixed height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.height">android.R.attr.height</see>
			/// .
			/// </attr>
			/// <attr>name android:height</attr>
			public const int ActionBar_height = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a layout to use for the "home" section of the action bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.homeLayout">android.R.attr.homeLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:homeLayout</attr>
			public const int ActionBar_homeLayout = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the drawable used for the application icon.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int ActionBar_icon = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a style resource to use for an indeterminate progress spinner.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indeterminateProgressStyle">android.R.attr.indeterminateProgressStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:indeterminateProgressStyle</attr>
			public const int ActionBar_indeterminateProgressStyle = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies padding that should be applied to the left and right sides of
			/// system-provided items in the bar.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.itemPadding">android.R.attr.itemPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:itemPadding</attr>
			public const int ActionBar_itemPadding = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the drawable used for the application logo.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int ActionBar_logo = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The type of navigation to use.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> Normal static title text </td></tr>
			/// <tr><td><code>listMode</code></td><td>1</td><td> The action bar will use a selection list for navigation. </td></tr>
			/// <tr><td><code>tabMode</code></td><td>2</td><td> The action bar will use a series of horizontal tabs for navigation. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.navigationMode">android.R.attr.navigationMode</see>
			/// .
			/// </attr>
			/// <attr>name android:navigationMode</attr>
			public const int ActionBar_navigationMode = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the horizontal padding on either end for an embedded progress bar.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarPadding">android.R.attr.progressBarPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarPadding</attr>
			public const int ActionBar_progressBarPadding = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a style resource to use for an embedded progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyle">android.R.attr.progressBarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyle</attr>
			public const int ActionBar_progressBarStyle = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies subtitle text used for navigationMode="normal"
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.subtitle">android.R.attr.subtitle</see>
			/// .
			/// </attr>
			/// <attr>name android:subtitle</attr>
			public const int ActionBar_subtitle = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a style to use for subtitle text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.subtitleTextStyle">android.R.attr.subtitleTextStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:subtitleTextStyle</attr>
			public const int ActionBar_subtitleTextStyle = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies title text used for navigationMode="normal"
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.title">android.R.attr.title</see>
			/// .
			/// </attr>
			/// <attr>name android:title</attr>
			public const int ActionBar_title = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a style to use for title text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.titleTextStyle">android.R.attr.titleTextStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:titleTextStyle</attr>
			public const int ActionBar_titleTextStyle = 11;

			/// <summary>Attributes that can be used with a ActionBar_LayoutParams.</summary>
			/// <remarks>
			/// Attributes that can be used with a ActionBar_LayoutParams.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ActionBar_LayoutParams_layout_gravity">android:layout_gravity</see>
			/// </code></td><td> Standard gravity constant that a child can supply to its parent.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ActionBar_LayoutParams_layout_gravity">ActionBar_LayoutParams_layout_gravity
			/// 	</seealso>
			public static readonly int[] ActionBar_LayoutParams = new int[] { unchecked((int)
				(0x010100b3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Standard gravity constant that a child can supply to its parent.
			/// Defines how to place the view, both its x- and y-axis, within its parent view group.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_gravity">android.R.attr.layout_gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_gravity</attr>
			public const int ActionBar_LayoutParams_layout_gravity = 0;

			/// <summary>Attributes that can be used with a ActionMode.</summary>
			/// <remarks>
			/// Attributes that can be used with a ActionMode.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ActionMode_background">android:background</see>
			/// </code></td><td> Specifies a background for the action mode bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionMode_backgroundSplit">android:backgroundSplit</see>
			/// </code></td><td> Specifies a background for the split action mode bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionMode_height">android:height</see>
			/// </code></td><td> Specifies a fixed height for the action mode bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionMode_subtitleTextStyle">android:subtitleTextStyle</see>
			/// </code></td><td> Specifies a style to use for subtitle text.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActionMode_titleTextStyle">android:titleTextStyle</see>
			/// </code></td><td> Specifies a style to use for title text.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ActionMode_background">ActionMode_background</seealso>
			/// <seealso cref="ActionMode_backgroundSplit">ActionMode_backgroundSplit</seealso>
			/// <seealso cref="ActionMode_height">ActionMode_height</seealso>
			/// <seealso cref="ActionMode_subtitleTextStyle">ActionMode_subtitleTextStyle</seealso>
			/// <seealso cref="ActionMode_titleTextStyle">ActionMode_titleTextStyle</seealso>
			public static readonly int[] ActionMode = new int[] { unchecked((int)(0x010100d4)
				), unchecked((int)(0x01010155)), unchecked((int)(0x010102f8)), unchecked((int)(0x010102f9
				)), unchecked((int)(0x0101038b)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a background for the action mode bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// .
			/// </attr>
			/// <attr>name android:background</attr>
			public const int ActionMode_background = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a background for the split action mode bar.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundSplit">android.R.attr.backgroundSplit</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundSplit</attr>
			public const int ActionMode_backgroundSplit = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a fixed height for the action mode bar.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.height">android.R.attr.height</see>
			/// .
			/// </attr>
			/// <attr>name android:height</attr>
			public const int ActionMode_height = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a style to use for subtitle text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.subtitleTextStyle">android.R.attr.subtitleTextStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:subtitleTextStyle</attr>
			public const int ActionMode_subtitleTextStyle = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a style to use for title text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.titleTextStyle">android.R.attr.titleTextStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:titleTextStyle</attr>
			public const int ActionMode_titleTextStyle = 2;

			/// <summary>Attrbitutes for a ActvityChooserView.</summary>
			/// <remarks>
			/// Attrbitutes for a ActvityChooserView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ActivityChooserView_expandActivityOverflowButtonDrawable">android:expandActivityOverflowButtonDrawable
			/// 	</see>
			/// </code></td><td> The drawable to show in the button for expanding the activities overflow popup.</td></tr>
			/// <tr><td><code>
			/// <see cref="ActivityChooserView_initialActivityCount">android:initialActivityCount
			/// 	</see>
			/// </code></td><td> The maximal number of items initially shown in the activity list.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ActivityChooserView_expandActivityOverflowButtonDrawable">ActivityChooserView_expandActivityOverflowButtonDrawable
			/// 	</seealso>
			/// <seealso cref="ActivityChooserView_initialActivityCount">ActivityChooserView_initialActivityCount
			/// 	</seealso>
			public static readonly int[] ActivityChooserView = new int[] { unchecked((int)(0x010103fa
				)), unchecked((int)(0x010103fb)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to show in the button for expanding the activities overflow popup.
			/// <strong>Note:</strong> Clients would like to set this drawable
			/// as a clue about the action the chosen activity will perform. For
			/// example, if share activity is to be chosen the drawable should
			/// give a clue that sharing is to be performed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:expandActivityOverflowButtonDrawable</attr>
			public const int ActivityChooserView_expandActivityOverflowButtonDrawable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The maximal number of items initially shown in the activity list.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:initialActivityCount</attr>
			public const int ActivityChooserView_initialActivityCount = 0;

			/// <summary>Attributes that can be used with a AdapterViewAnimator.</summary>
			/// <remarks>
			/// Attributes that can be used with a AdapterViewAnimator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AdapterViewAnimator_animateFirstView">android:animateFirstView</see>
			/// </code></td><td> Defines whether to animate the current View when the ViewAnimation
			/// is first displayed.</td></tr>
			/// <tr><td><code>
			/// <see cref="AdapterViewAnimator_inAnimation">android:inAnimation</see>
			/// </code></td><td> Identifier for the animation to use when a view is shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="AdapterViewAnimator_loopViews">android:loopViews</see>
			/// </code></td><td>Defines whether the animator loops to the first view once it
			/// has reached the end of the list.</td></tr>
			/// <tr><td><code>
			/// <see cref="AdapterViewAnimator_outAnimation">android:outAnimation</see>
			/// </code></td><td> Identifier for the animation to use when a view is hidden.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AdapterViewAnimator_animateFirstView">AdapterViewAnimator_animateFirstView
			/// 	</seealso>
			/// <seealso cref="AdapterViewAnimator_inAnimation">AdapterViewAnimator_inAnimation</seealso>
			/// <seealso cref="AdapterViewAnimator_loopViews">AdapterViewAnimator_loopViews</seealso>
			/// <seealso cref="AdapterViewAnimator_outAnimation">AdapterViewAnimator_outAnimation
			/// 	</seealso>
			public static readonly int[] AdapterViewAnimator = new int[] { unchecked((int)(0x01010177
				)), unchecked((int)(0x01010178)), unchecked((int)(0x010102d5)), unchecked((int)(
				0x01010307)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether to animate the current View when the ViewAnimation
			/// is first displayed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animateFirstView">android.R.attr.animateFirstView</see>
			/// .
			/// </attr>
			/// <attr>name android:animateFirstView</attr>
			public const int AdapterViewAnimator_animateFirstView = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier for the animation to use when a view is shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inAnimation">android.R.attr.inAnimation</see>
			/// .
			/// </attr>
			/// <attr>name android:inAnimation</attr>
			public const int AdapterViewAnimator_inAnimation = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the animator loops to the first view once it
			/// has reached the end of the list.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.loopViews">android.R.attr.loopViews</see>
			/// .
			/// </attr>
			/// <attr>name android:loopViews</attr>
			public const int AdapterViewAnimator_loopViews = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier for the animation to use when a view is hidden.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.outAnimation">android.R.attr.outAnimation</see>
			/// .
			/// </attr>
			/// <attr>name android:outAnimation</attr>
			public const int AdapterViewAnimator_outAnimation = 1;

			/// <summary>Attributes that can be used with a AdapterViewFlipper.</summary>
			/// <remarks>
			/// Attributes that can be used with a AdapterViewFlipper.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AdapterViewFlipper_autoStart">android:autoStart</see>
			/// </code></td><td> When true, automatically start animating </td></tr>
			/// <tr><td><code>
			/// <see cref="AdapterViewFlipper_flipInterval">android:flipInterval</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AdapterViewFlipper_autoStart">AdapterViewFlipper_autoStart</seealso>
			/// <seealso cref="AdapterViewFlipper_flipInterval">AdapterViewFlipper_flipInterval</seealso>
			public static readonly int[] AdapterViewFlipper = new int[] { unchecked((int)(0x01010179
				)), unchecked((int)(0x010102b5)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When true, automatically start animating
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoStart">android.R.attr.autoStart</see>
			/// .
			/// </attr>
			/// <attr>name android:autoStart</attr>
			public const int AdapterViewFlipper_autoStart = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.flipInterval">android.R.attr.flipInterval</see>
			/// attribute's value can be found in the
			/// <see cref="AdapterViewFlipper">AdapterViewFlipper</see>
			/// array.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:flipInterval</attr>
			public const int AdapterViewFlipper_flipInterval = 0;

			/// <summary>The set of attributes that describe a AlertDialog's theme.</summary>
			/// <remarks>
			/// The set of attributes that describe a AlertDialog's theme.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_bottomBright">android:bottomBright</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_bottomDark">android:bottomDark</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_bottomMedium">android:bottomMedium</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_centerBright">android:centerBright</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_centerDark">android:centerDark</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_centerMedium">android:centerMedium</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_fullBright">android:fullBright</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_fullDark">android:fullDark</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_horizontalProgressLayout">android:horizontalProgressLayout
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_layout">android:layout</see>
			/// </code></td><td> Supply an identifier for the layout resource to inflate when the ViewStub
			/// becomes visible or when forced to do so.</td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_listItemLayout">android:listItemLayout</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_listLayout">android:listLayout</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_multiChoiceItemLayout">android:multiChoiceItemLayout</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_progressLayout">android:progressLayout</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_singleChoiceItemLayout">android:singleChoiceItemLayout</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_topBright">android:topBright</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlertDialog_topDark">android:topDark</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AlertDialog_bottomBright">AlertDialog_bottomBright</seealso>
			/// <seealso cref="AlertDialog_bottomDark">AlertDialog_bottomDark</seealso>
			/// <seealso cref="AlertDialog_bottomMedium">AlertDialog_bottomMedium</seealso>
			/// <seealso cref="AlertDialog_centerBright">AlertDialog_centerBright</seealso>
			/// <seealso cref="AlertDialog_centerDark">AlertDialog_centerDark</seealso>
			/// <seealso cref="AlertDialog_centerMedium">AlertDialog_centerMedium</seealso>
			/// <seealso cref="AlertDialog_fullBright">AlertDialog_fullBright</seealso>
			/// <seealso cref="AlertDialog_fullDark">AlertDialog_fullDark</seealso>
			/// <seealso cref="AlertDialog_horizontalProgressLayout">AlertDialog_horizontalProgressLayout
			/// 	</seealso>
			/// <seealso cref="AlertDialog_layout">AlertDialog_layout</seealso>
			/// <seealso cref="AlertDialog_listItemLayout">AlertDialog_listItemLayout</seealso>
			/// <seealso cref="AlertDialog_listLayout">AlertDialog_listLayout</seealso>
			/// <seealso cref="AlertDialog_multiChoiceItemLayout">AlertDialog_multiChoiceItemLayout
			/// 	</seealso>
			/// <seealso cref="AlertDialog_progressLayout">AlertDialog_progressLayout</seealso>
			/// <seealso cref="AlertDialog_singleChoiceItemLayout">AlertDialog_singleChoiceItemLayout
			/// 	</seealso>
			/// <seealso cref="AlertDialog_topBright">AlertDialog_topBright</seealso>
			/// <seealso cref="AlertDialog_topDark">AlertDialog_topDark</seealso>
			public static readonly int[] AlertDialog = new int[] { unchecked((int)(0x010100c6
				)), unchecked((int)(0x010100c7)), unchecked((int)(0x010100c8)), unchecked((int)(
				0x010100c9)), unchecked((int)(0x010100ca)), unchecked((int)(0x010100cb)), unchecked(
				(int)(0x010100cc)), unchecked((int)(0x010100cd)), unchecked((int)(0x010100ce)), 
				unchecked((int)(0x010100cf)), unchecked((int)(0x010100f2)), unchecked((int)(0x010103d7
				)), unchecked((int)(0x010103d8)), unchecked((int)(0x010103d9)), unchecked((int)(
				0x010103da)), unchecked((int)(0x010103db)), unchecked((int)(0x010103dc)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.bottomBright">android.R.attr.bottomBright</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:bottomBright</attr>
			public const int AlertDialog_bottomBright = 7;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.bottomDark">android.R.attr.bottomDark</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:bottomDark</attr>
			public const int AlertDialog_bottomDark = 3;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.bottomMedium">android.R.attr.bottomMedium</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:bottomMedium</attr>
			public const int AlertDialog_bottomMedium = 8;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.centerBright">android.R.attr.centerBright</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:centerBright</attr>
			public const int AlertDialog_centerBright = 6;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.centerDark">android.R.attr.centerDark</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:centerDark</attr>
			public const int AlertDialog_centerDark = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.centerMedium">android.R.attr.centerMedium</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:centerMedium</attr>
			public const int AlertDialog_centerMedium = 9;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fullBright">android.R.attr.fullBright</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:fullBright</attr>
			public const int AlertDialog_fullBright = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fullDark">android.R.attr.fullDark</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:fullDark</attr>
			public const int AlertDialog_fullDark = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.horizontalProgressLayout">attr.horizontalProgressLayout</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:horizontalProgressLayout</attr>
			public const int AlertDialog_horizontalProgressLayout = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply an identifier for the layout resource to inflate when the ViewStub
			/// becomes visible or when forced to do so. The layout resource must be a
			/// valid reference to a layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout">android.R.attr.layout</see>
			/// .
			/// </attr>
			/// <attr>name android:layout</attr>
			public const int AlertDialog_layout = 10;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.listItemLayout">attr.listItemLayout</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:listItemLayout</attr>
			public const int AlertDialog_listItemLayout = 14;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.listLayout">attr.listLayout</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:listLayout</attr>
			public const int AlertDialog_listLayout = 11;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.multiChoiceItemLayout">attr.multiChoiceItemLayout</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:multiChoiceItemLayout</attr>
			public const int AlertDialog_multiChoiceItemLayout = 12;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.progressLayout">attr.progressLayout</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:progressLayout</attr>
			public const int AlertDialog_progressLayout = 15;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.singleChoiceItemLayout">attr.singleChoiceItemLayout</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:singleChoiceItemLayout</attr>
			public const int AlertDialog_singleChoiceItemLayout = 13;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.topBright">android.R.attr.topBright</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:topBright</attr>
			public const int AlertDialog_topBright = 5;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.topDark">android.R.attr.topDark</see>
			/// attribute's value can be found in the
			/// <see cref="AlertDialog">AlertDialog</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:topDark</attr>
			public const int AlertDialog_topDark = 1;

			/// <summary>Attributes that can be used with a AlphaAnimation.</summary>
			/// <remarks>
			/// Attributes that can be used with a AlphaAnimation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AlphaAnimation_fromAlpha">android:fromAlpha</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AlphaAnimation_toAlpha">android:toAlpha</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AlphaAnimation_fromAlpha">AlphaAnimation_fromAlpha</seealso>
			/// <seealso cref="AlphaAnimation_toAlpha">AlphaAnimation_toAlpha</seealso>
			public static readonly int[] AlphaAnimation = new int[] { unchecked((int)(0x010101ca
				)), unchecked((int)(0x010101cb)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromAlpha">android.R.attr.fromAlpha</see>
			/// attribute's value can be found in the
			/// <see cref="AlphaAnimation">AlphaAnimation</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromAlpha</attr>
			public const int AlphaAnimation_fromAlpha = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toAlpha">android.R.attr.toAlpha</see>
			/// attribute's value can be found in the
			/// <see cref="AlphaAnimation">AlphaAnimation</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toAlpha</attr>
			public const int AlphaAnimation_toAlpha = 1;

			/// <summary>Attributes that can be used with a AnalogClock.</summary>
			/// <remarks>
			/// Attributes that can be used with a AnalogClock.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnalogClock_dial">android:dial</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnalogClock_hand_hour">android:hand_hour</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnalogClock_hand_minute">android:hand_minute</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnalogClock_dial">AnalogClock_dial</seealso>
			/// <seealso cref="AnalogClock_hand_hour">AnalogClock_hand_hour</seealso>
			/// <seealso cref="AnalogClock_hand_minute">AnalogClock_hand_minute</seealso>
			public static readonly int[] AnalogClock = new int[] { unchecked((int)(0x01010102
				)), unchecked((int)(0x01010103)), unchecked((int)(0x01010104)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.dial">android.R.attr.dial</see>
			/// attribute's value can be found in the
			/// <see cref="AnalogClock">AnalogClock</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:dial</attr>
			public const int AnalogClock_dial = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.hand_hour">android.R.attr.hand_hour</see>
			/// attribute's value can be found in the
			/// <see cref="AnalogClock">AnalogClock</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:hand_hour</attr>
			public const int AnalogClock_hand_hour = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.hand_minute">android.R.attr.hand_minute</see>
			/// attribute's value can be found in the
			/// <see cref="AnalogClock">AnalogClock</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:hand_minute</attr>
			public const int AnalogClock_hand_minute = 2;

			/// <summary>
			/// The <code>manifest</code> tag is the root of an
			/// <code>AndroidManifest.xml</code> file,
			/// describing the contents of an Android package (.apk) file.
			/// </summary>
			/// <remarks>
			/// The <code>manifest</code> tag is the root of an
			/// <code>AndroidManifest.xml</code> file,
			/// describing the contents of an Android package (.apk) file.  One
			/// attribute must always be supplied: <code>package</code> gives a
			/// unique name for the package, using a Java-style naming convention
			/// to avoid name collisions.  For example, applications published
			/// by Google could have names of the form
			/// <code>com.google.app.<em>appname</em></code>
			/// <p>Inside of the manifest tag, may appear the following tags
			/// in any order:
			/// <see cref="AndroidManifestPermission">permission</see>
			/// ,
			/// <see cref="AndroidManifestPermissionGroup">permission-group</see>
			/// ,
			/// <see cref="AndroidManifestPermissionTree">permission-tree</see>
			/// ,
			/// <see cref="AndroidManifestUsesSdk">uses-sdk</see>
			/// ,
			/// <see cref="AndroidManifestUsesPermission">uses-permission</see>
			/// ,
			/// <see cref="AndroidManifestUsesConfiguration">uses-configuration</see>
			/// ,
			/// <see cref="AndroidManifestApplication">application</see>
			/// ,
			/// <see cref="AndroidManifestInstrumentation">instrumentation</see>
			/// ,
			/// <see cref="AndroidManifestUsesFeature">uses-feature</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifest_installLocation">android:installLocation</see>
			/// </code></td><td> The default install location defined by an application.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifest_sharedUserId">android:sharedUserId</see>
			/// </code></td><td> Specify the name of a user ID that will be shared between multiple
			/// packages.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifest_sharedUserLabel">android:sharedUserLabel</see>
			/// </code></td><td> Specify a label for the shared user UID of this package.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifest_versionCode">android:versionCode</see>
			/// </code></td><td> Internal version code.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifest_versionName">android:versionName</see>
			/// </code></td><td> The text shown to the user to indicate the version they have.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifest_installLocation">AndroidManifest_installLocation</seealso>
			/// <seealso cref="AndroidManifest_sharedUserId">AndroidManifest_sharedUserId</seealso>
			/// <seealso cref="AndroidManifest_sharedUserLabel">AndroidManifest_sharedUserLabel</seealso>
			/// <seealso cref="AndroidManifest_versionCode">AndroidManifest_versionCode</seealso>
			/// <seealso cref="AndroidManifest_versionName">AndroidManifest_versionName</seealso>
			public static readonly int[] AndroidManifest = new int[] { unchecked((int)(0x0101000b
				)), unchecked((int)(0x0101021b)), unchecked((int)(0x0101021c)), unchecked((int)(
				0x01010261)), unchecked((int)(0x010102b7)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The default install location defined by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>auto</code></td><td>0</td><td> Let the system decide ideal install location </td></tr>
			/// <tr><td><code>internalOnly</code></td><td>1</td><td> Explicitly request to be installed on internal phone storage
			/// only. </td></tr>
			/// <tr><td><code>preferExternal</code></td><td>2</td><td> Prefer to be installed on SD card. There is no guarantee that
			/// the system will honor this request. The application might end
			/// up being installed on internal storage if external media
			/// is unavailable or too full. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.installLocation">android.R.attr.installLocation</see>
			/// .
			/// </attr>
			/// <attr>name android:installLocation</attr>
			public const int AndroidManifest_installLocation = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify the name of a user ID that will be shared between multiple
			/// packages.  By default, each package gets its own unique user-id.
			/// By setting this value on two or more packages, each of these packages
			/// will be given a single shared user ID, so they can for example run
			/// in the same process.  Note that for them to actually get the same
			/// user ID, they must also be signed with the same signature.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.sharedUserId">android.R.attr.sharedUserId</see>
			/// .
			/// </attr>
			/// <attr>name android:sharedUserId</attr>
			public const int AndroidManifest_sharedUserId = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a label for the shared user UID of this package.  This is
			/// only used if you have also used android:sharedUserId.  This must
			/// be a reference to a string resource; it can not be an explicit
			/// string.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.sharedUserLabel">android.R.attr.sharedUserLabel</see>
			/// .
			/// </attr>
			/// <attr>name android:sharedUserLabel</attr>
			public const int AndroidManifest_sharedUserLabel = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Internal version code.  This is the number used to determine whether
			/// one version is more recent than another: it has no other meaning than
			/// that higher numbers are more recent.  You could use this number to
			/// encode a "x.y" in the lower and upper 16 bits, make it a build
			/// number, simply increase it by one each time a new version is
			/// released, or define it however else you want, as long as each
			/// successive version has a higher number.  This is not a version
			/// number generally shown to the user, that is usually supplied
			/// with
			/// <see cref="android.R.attr.versionName">android.R.attr.versionName</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.versionCode">android.R.attr.versionCode</see>
			/// .
			/// </attr>
			/// <attr>name android:versionCode</attr>
			public const int AndroidManifest_versionCode = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text shown to the user to indicate the version they have.  This
			/// is used for no other purpose than display to the user; the actual
			/// significant version number is given by
			/// <see cref="android.R.attr.versionCode">android.R.attr.versionCode</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.versionName">android.R.attr.versionName</see>
			/// .
			/// </attr>
			/// <attr>name android:versionName</attr>
			public const int AndroidManifest_versionName = 2;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>action</code> tag, a child of the
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tag.
			/// See
			/// <see cref="android.content.IntentFilter.addAction(string)">android.content.IntentFilter.addAction(string)
			/// 	</see>
			/// for
			/// more information.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestAction_name">android:name</see>
			/// </code></td><td> The name of an action that is handled, using the Java-style
			/// naming convention.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestAction_name">AndroidManifestAction_name</seealso>
			public static readonly int[] AndroidManifestAction = new int[] { unchecked((int)(
				0x01010003)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of an action that is handled, using the Java-style
			/// naming convention.  For example, to support
			/// <see cref="android.content.Intent.ACTION_VIEW">Intent.ACTION_VIEW</see>
			/// you would put <code>android.intent.action.VIEW</code> here.
			/// Custom actions should generally use a prefix matching the
			/// package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestAction_name = 0;

			/// <summary>
			/// The <code>activity</code> tag declares an
			/// <see cref="android.app.Activity">android.app.Activity</see>
			/// class that is available
			/// as part of the package's application components, implementing
			/// a part of the application's user interface.
			/// <p>Zero or more
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tags can be included inside of an activity, to specify the Intents
			/// that it can handle.  If none are specified, the activity can
			/// only be started through direct specification of its class name.
			/// The activity tag appears as a child tag of the
			/// <see cref="AndroidManifestApplication">application</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_allowTaskReparenting">android:allowTaskReparenting
			/// 	</see>
			/// </code></td><td> Specify that an activity can be moved out of a task it is in to
			/// the task it has an affinity for when appropriate.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_alwaysRetainTaskState">android:alwaysRetainTaskState
			/// 	</see>
			/// </code></td><td> Specify whether an acitivty's task state should always be maintained
			/// by the system, or if it is allowed to reset the task to its initial
			/// state in certain situations.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_clearTaskOnLaunch">android:clearTaskOnLaunch</see>
			/// </code></td><td> Specify whether an activity's task should be cleared when it
			/// is re-launched from the home screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_configChanges">android:configChanges</see>
			/// </code></td><td> Specify one or more configuration changes that the activity will
			/// handle itself.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_enabled">android:enabled</see>
			/// </code></td><td> Specify whether the activity is enabled or not (that is, can be instantiated by the system).</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_excludeFromRecents">android:excludeFromRecents
			/// 	</see>
			/// </code></td><td> Indicates that an Activity should be excluded from the list of
			/// recently launched activities.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_exported">android:exported</see>
			/// </code></td><td> Flag indicating whether the given application component is available
			/// to other applications.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_finishOnCloseSystemDialogs">android:finishOnCloseSystemDialogs
			/// 	</see>
			/// </code></td><td> Specify whether an activity should be finished when a "close system
			/// windows" request has been made.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_finishOnTaskLaunch">android:finishOnTaskLaunch
			/// 	</see>
			/// </code></td><td> Specify whether an activity should be finished when its task is
			/// brought to the foreground by relaunching from the home screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_hardwareAccelerated">android:hardwareAccelerated
			/// 	</see>
			/// </code></td><td> <p>Flag indicating whether the application's rendering should be hardware
			/// accelerated if possible.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_immersive">android:immersive</see>
			/// </code></td><td> Flag declaring this activity to be 'immersive'; immersive activities
			/// should not be interrupted with other activities or notifications.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_launchMode">android:launchMode</see>
			/// </code></td><td> Specify how an activity should be launched.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_multiprocess">android:multiprocess</see>
			/// </code></td><td> Specify whether a component is allowed to have multiple instances
			/// of itself running in different processes.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_name">android:name</see>
			/// </code></td><td> Required name of the class implementing the activity, deriving from
			/// <see cref="android.app.Activity">android.app.Activity</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_noHistory">android:noHistory</see>
			/// </code></td><td> Specify whether an activity should be kept in its history stack.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_process">android:process</see>
			/// </code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_screenOrientation">android:screenOrientation</see>
			/// </code></td><td> Specify the orientation an activity should be run in.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_stateNotNeeded">android:stateNotNeeded</see>
			/// </code></td><td> Indicates that an Activity does not need to have its freeze state
			/// (as returned by
			/// <see cref="android.app.Activity.onSaveInstanceState(android.os.Bundle)">android.app.Activity.onSaveInstanceState(android.os.Bundle)
			/// 	</see>
			/// retained in order to be restarted.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_taskAffinity">android:taskAffinity</see>
			/// </code></td><td> Specify a task name that activities have an "affinity" to.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_theme">android:theme</see>
			/// </code></td><td> The overall theme to use for an activity.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_uiOptions">android:uiOptions</see>
			/// </code></td><td> Extra options for an activity's UI.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivity_windowSoftInputMode">android:windowSoftInputMode
			/// 	</see>
			/// </code></td><td> Specify the default soft-input mode for the main window of
			/// this activity.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestActivity_allowTaskReparenting">AndroidManifestActivity_allowTaskReparenting
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_alwaysRetainTaskState">AndroidManifestActivity_alwaysRetainTaskState
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_clearTaskOnLaunch">AndroidManifestActivity_clearTaskOnLaunch
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_configChanges">AndroidManifestActivity_configChanges
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_description">AndroidManifestActivity_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_enabled">AndroidManifestActivity_enabled</seealso>
			/// <seealso cref="AndroidManifestActivity_excludeFromRecents">AndroidManifestActivity_excludeFromRecents
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_exported">AndroidManifestActivity_exported
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_finishOnCloseSystemDialogs">AndroidManifestActivity_finishOnCloseSystemDialogs
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_finishOnTaskLaunch">AndroidManifestActivity_finishOnTaskLaunch
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_hardwareAccelerated">AndroidManifestActivity_hardwareAccelerated
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_icon">AndroidManifestActivity_icon</seealso>
			/// <seealso cref="AndroidManifestActivity_immersive">AndroidManifestActivity_immersive
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_label">AndroidManifestActivity_label</seealso>
			/// <seealso cref="AndroidManifestActivity_launchMode">AndroidManifestActivity_launchMode
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_logo">AndroidManifestActivity_logo</seealso>
			/// <seealso cref="AndroidManifestActivity_multiprocess">AndroidManifestActivity_multiprocess
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_name">AndroidManifestActivity_name</seealso>
			/// <seealso cref="AndroidManifestActivity_noHistory">AndroidManifestActivity_noHistory
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_permission">AndroidManifestActivity_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_process">AndroidManifestActivity_process</seealso>
			/// <seealso cref="AndroidManifestActivity_screenOrientation">AndroidManifestActivity_screenOrientation
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_stateNotNeeded">AndroidManifestActivity_stateNotNeeded
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_taskAffinity">AndroidManifestActivity_taskAffinity
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_theme">AndroidManifestActivity_theme</seealso>
			/// <seealso cref="AndroidManifestActivity_uiOptions">AndroidManifestActivity_uiOptions
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivity_windowSoftInputMode">AndroidManifestActivity_windowSoftInputMode
			/// 	</seealso>
			public static readonly int[] AndroidManifestActivity = new int[] { unchecked((int
				)(0x01010000)), unchecked((int)(0x01010001)), unchecked((int)(0x01010002)), unchecked(
				(int)(0x01010003)), unchecked((int)(0x01010006)), unchecked((int)(0x0101000e)), 
				unchecked((int)(0x01010010)), unchecked((int)(0x01010011)), unchecked((int)(0x01010012
				)), unchecked((int)(0x01010013)), unchecked((int)(0x01010014)), unchecked((int)(
				0x01010015)), unchecked((int)(0x01010016)), unchecked((int)(0x01010017)), unchecked(
				(int)(0x0101001d)), unchecked((int)(0x0101001e)), unchecked((int)(0x0101001f)), 
				unchecked((int)(0x01010020)), unchecked((int)(0x01010203)), unchecked((int)(0x01010204
				)), unchecked((int)(0x0101022b)), unchecked((int)(0x0101022d)), unchecked((int)(
				0x010102a7)), unchecked((int)(0x010102be)), unchecked((int)(0x010102c0)), unchecked(
				(int)(0x010102d3)), unchecked((int)(0x01010398)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify that an activity can be moved out of a task it is in to
			/// the task it has an affinity for when appropriate.  Use with the
			/// application tag (to supply a default for all activities in the
			/// application), or with an activity tag (to supply a specific
			/// setting for that component).
			/// <p>Normally when an application is started, it is associated with
			/// the task of the activity that started it and stays there for its
			/// entire lifetime.  You can use the allowTaskReparenting feature to force an
			/// activity to be re-parented to a different task when the task it is
			/// in goes to the background.  Typically this is used to cause the
			/// activities of an application to move back to the main task associated
			/// with that application.  The activity is re-parented to the task
			/// with the same
			/// <see cref="android.R.attr.taskAffinity">android.R.attr.taskAffinity</see>
			/// as it has.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allowTaskReparenting">android.R.attr.allowTaskReparenting
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:allowTaskReparenting</attr>
			public const int AndroidManifestActivity_allowTaskReparenting = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether an acitivty's task state should always be maintained
			/// by the system, or if it is allowed to reset the task to its initial
			/// state in certain situations.
			/// <p>Normally the system will reset a task (remove all activities from
			/// the stack and reset the root activity) in certain situations when
			/// the user re-selects that task from the home screen.  Typically this
			/// will be done if the user hasn't visited that task for a certain
			/// amount of time, such as 30 minutes.
			/// <p>By setting this attribute, the user will always return to your
			/// task in its last state, regardless of how they get there.  This is
			/// useful, for example, in an application like the web browser where there
			/// is a lot of state (such as multiple open tabs) that the application
			/// would not like to lose.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alwaysRetainTaskState">android.R.attr.alwaysRetainTaskState
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:alwaysRetainTaskState</attr>
			public const int AndroidManifestActivity_alwaysRetainTaskState = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether an activity's task should be cleared when it
			/// is re-launched from the home screen.  As a result, every time the
			/// user starts the task, they will be brought to its root activity,
			/// regardless of whether they used BACK or HOME to last leave it.
			/// This flag only applies to activities that
			/// are used to start the root of a new task.
			/// <p>An example of the use of this flag would be for the case where
			/// a user launches activity A from home, and from there goes to
			/// activity B.  They now press home, and then return to activity A.
			/// Normally they would see activity B, since that is what they were
			/// last doing in A's task.  However, if A has set this flag to true,
			/// then upon going to the background all of the tasks on top of it (B
			/// in this case) are removed, so when the user next returns to A they
			/// will restart at its original activity.
			/// <p>When this option is used in conjunction with
			/// <see cref="android.R.attr.allowTaskReparenting">android.R.attr.allowTaskReparenting
			/// 	</see>
			/// , the allowTaskReparenting trumps the
			/// clear.  That is, all activities above the root activity of the
			/// task will be removed: those that have an affinity will be moved
			/// to the task they are associated with, otherwise they will simply
			/// be dropped as described here.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.clearTaskOnLaunch">android.R.attr.clearTaskOnLaunch</see>
			/// .
			/// </attr>
			/// <attr>name android:clearTaskOnLaunch</attr>
			public const int AndroidManifestActivity_clearTaskOnLaunch = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify one or more configuration changes that the activity will
			/// handle itself.  If not specified, the activity will be restarted
			/// if any of these configuration changes happen in the system.  Otherwise,
			/// the activity will remain running and its
			/// <see cref="android.app.Activity.onConfigurationChanged(android.content.res.Configuration)
			/// 	">Activity.onConfigurationChanged</see>
			/// method called with the new configuration.
			/// <p>Note that all of these configuration changes can impact the
			/// resource values seen by the application, so you will generally need
			/// to re-retrieve all resources (including view layouts, drawables, etc)
			/// to correctly handle any configuration change.
			/// <p>These values must be kept in sync with those in
			/// <see cref="android.content.pm.ActivityInfo">android.content.pm.ActivityInfo</see>
			/// and
			/// include/utils/ResourceTypes.h.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>mcc</code></td><td>0x0001</td><td> The IMSI MCC has changed, that is a SIM has been detected and
			/// updated the Mobile Country Code. </td></tr>
			/// <tr><td><code>mnc</code></td><td>0x0002</td><td> The IMSI MNC has changed, that is a SIM has been detected and
			/// updated the Mobile Network Code. </td></tr>
			/// <tr><td><code>locale</code></td><td>0x0004</td><td> The locale has changed, that is the user has selected a new
			/// language that text should be displayed in. </td></tr>
			/// <tr><td><code>touchscreen</code></td><td>0x0008</td><td> The touchscreen has changed.  Should never normally happen. </td></tr>
			/// <tr><td><code>keyboard</code></td><td>0x0010</td><td> The keyboard type has changed, for example the user has plugged
			/// in an external keyboard. </td></tr>
			/// <tr><td><code>keyboardHidden</code></td><td>0x0020</td><td> The keyboard or navigation accessibility has changed, for example
			/// the user has slid the keyboard out to expose it.  Note that
			/// despite its name, this applied to any accessibility: keyboard
			/// or navigation. </td></tr>
			/// <tr><td><code>navigation</code></td><td>0x0040</td><td> The navigation type has changed.  Should never normally happen. </td></tr>
			/// <tr><td><code>orientation</code></td><td>0x0080</td><td> The screen orientation has changed, that is the user has
			/// rotated the device. </td></tr>
			/// <tr><td><code>screenLayout</code></td><td>0x0100</td><td> The screen layout has changed.  This might be caused by a
			/// different display being activated. </td></tr>
			/// <tr><td><code>uiMode</code></td><td>0x0200</td><td> The global user interface mode has changed.  For example,
			/// going in or out of car mode, night mode changing, etc. </td></tr>
			/// <tr><td><code>screenSize</code></td><td>0x0400</td><td> The current available screen size has changed.  If applications don't
			/// target at least
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// then the activity will always handle this itself (the change
			/// will not result in a restart).  This represents a change in the
			/// currently available size, so will change when the user switches
			/// between landscape and portrait. </td></tr>
			/// <tr><td><code>smallestScreenSize</code></td><td>0x0800</td><td> The physical screen size has changed.  If applications don't
			/// target at least
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// then the activity will always handle this itself (the change
			/// will not result in a restart).  This represents a change in size
			/// regardless of orientation, so will only change when the actual
			/// physical screen size has changed such as switching to an external
			/// display. </td></tr>
			/// <tr><td><code>fontScale</code></td><td>0x40000000</td><td> The font scaling factor has changed, that is the user has
			/// selected a new global font size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.configChanges">android.R.attr.configChanges</see>
			/// .
			/// </attr>
			/// <attr>name android:configChanges</attr>
			public const int AndroidManifestActivity_configChanges = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestActivity_description = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether the activity is enabled or not (that is, can be instantiated by the system).
			/// It can also be specified for an application as a whole, in which case a value of "false"
			/// will override any component specific values (a value of "true" will not override the
			/// component specific values).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int AndroidManifestActivity_enabled = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates that an Activity should be excluded from the list of
			/// recently launched activities.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.excludeFromRecents">android.R.attr.excludeFromRecents</see>
			/// .
			/// </attr>
			/// <attr>name android:excludeFromRecents</attr>
			public const int AndroidManifestActivity_excludeFromRecents = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the given application component is available
			/// to other applications.  If false, it can only be accessed by
			/// applications with its same user id (which usually means only by
			/// code in its own package).  If true, it can be invoked by external
			/// entities, though which ones can do so may be controlled through
			/// permissions.  The default value is false for activity, receiver,
			/// and service components that do not specify any intent filters; it
			/// is true for activity, receiver, and service components that do
			/// have intent filters (implying they expect to be invoked by others
			/// who do not know their particular component name) and for all
			/// content providers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.exported">android.R.attr.exported</see>
			/// .
			/// </attr>
			/// <attr>name android:exported</attr>
			public const int AndroidManifestActivity_exported = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether an activity should be finished when a "close system
			/// windows" request has been made.  This happens, for example, when
			/// the home key is pressed, when the device is locked, when a system
			/// dialog showing recent applications is displayed, etc.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.finishOnCloseSystemDialogs">android.R.attr.finishOnCloseSystemDialogs
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:finishOnCloseSystemDialogs</attr>
			public const int AndroidManifestActivity_finishOnCloseSystemDialogs = 22;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether an activity should be finished when its task is
			/// brought to the foreground by relaunching from the home screen.
			/// <p>If both this option and
			/// <see cref="android.R.attr.allowTaskReparenting">android.R.attr.allowTaskReparenting
			/// 	</see>
			/// are
			/// specified, the finish trumps the affinity: the affinity will be
			/// ignored and the activity simply finished.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.finishOnTaskLaunch">android.R.attr.finishOnTaskLaunch</see>
			/// .
			/// </attr>
			/// <attr>name android:finishOnTaskLaunch</attr>
			public const int AndroidManifestActivity_finishOnTaskLaunch = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// <p>Flag indicating whether the application's rendering should be hardware
			/// accelerated if possible. This flag is turned on by default for applications
			/// that are targeting
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// or later.</p>
			/// <p>This flag can be set on the application and any activity declared
			/// in the manifest. When enabled for the application, each activity is
			/// automatically assumed to be hardware accelerated. This flag can be
			/// overridden in the activity tags, either turning it off (if on for the
			/// application) or on (if off for the application.)</p>
			/// <p>When this flag is turned on for an activity (either directly or via
			/// the application tag), every window created from the activity, including
			/// the activity's own window, will be hardware accelerated, if possible.</p>
			/// <p>Please refer to the documentation of
			/// <see cref="android.view.WindowManagerClass.LayoutParams.FLAG_HARDWARE_ACCELERATED
			/// 	">android.view.WindowManagerClass.LayoutParams.FLAG_HARDWARE_ACCELERATED</see>
			/// for more information on how to control this flag programmatically.</p>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.hardwareAccelerated">android.R.attr.hardwareAccelerated
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:hardwareAccelerated</attr>
			public const int AndroidManifestActivity_hardwareAccelerated = 25;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestActivity_icon = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag declaring this activity to be 'immersive'; immersive activities
			/// should not be interrupted with other activities or notifications.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.immersive">android.R.attr.immersive</see>
			/// .
			/// </attr>
			/// <attr>name android:immersive</attr>
			public const int AndroidManifestActivity_immersive = 24;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestActivity_label = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify how an activity should be launched.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/fundamentals/tasks-and-back-stack.html"&gt;Tasks and Back
			/// Stack</a> document for important information on how these options impact
			/// the behavior of your application.
			/// <p>If this attribute is not specified, <code>standard</code> launch
			/// mode will be used.  Note that the particular launch behavior can
			/// be changed in some ways at runtime through the
			/// <see cref="android.content.Intent">android.content.Intent</see>
			/// flags
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP">android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP
			/// 	</see>
			/// ,
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_NEW_TASK">android.content.Intent.FLAG_ACTIVITY_NEW_TASK
			/// 	</see>
			/// , and
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK">android.content.Intent.FLAG_ACTIVITY_MULTIPLE_TASK
			/// 	</see>
			/// .
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>standard</code></td><td>0</td><td> The default mode, which will usually create a new instance of
			/// the activity when it is started, though this behavior may change
			/// with the introduction of other options such as
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_NEW_TASK">Intent.FLAG_ACTIVITY_NEW_TASK
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>singleTop</code></td><td>1</td><td> If, when starting the activity, there is already an
			/// instance of the same activity class in the foreground that is
			/// interacting with the user, then
			/// re-use that instance.  This existing instance will receive a call to
			/// <see cref="android.app.Activity.onNewIntent(android.content.Intent)">Activity.onNewIntent()
			/// 	</see>
			/// with
			/// the new Intent that is being started. </td></tr>
			/// <tr><td><code>singleTask</code></td><td>2</td><td> If, when starting the activity, there is already a task running
			/// that starts with this activity, then instead of starting a new
			/// instance the current task is brought to the front.  The existing
			/// instance will receive a call to
			/// <see cref="android.app.Activity.onNewIntent(android.content.Intent)">Activity.onNewIntent()
			/// 	</see>
			/// with the new Intent that is being started, and with the
			/// <see cref="android.content.Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT">Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT
			/// 	</see>
			/// flag set.  This is a superset
			/// of the singleTop mode, where if there is already an instance
			/// of the activity being started at the top of the stack, it will
			/// receive the Intent as described there (without the
			/// FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/fundamentals/tasks-and-back-stack.html"&gt;Tasks and Back
			/// Stack</a> document for more details about tasks.</td></tr>
			/// <tr><td><code>singleInstance</code></td><td>3</td><td> Only allow one instance of this activity to ever be
			/// running.  This activity gets a unique task with only itself running
			/// in it; if it is ever launched again with the same Intent, then that
			/// task will be brought forward and its
			/// <see cref="android.app.Activity.onNewIntent(android.content.Intent)">Activity.onNewIntent()
			/// 	</see>
			/// method called.  If this
			/// activity tries to start a new activity, that new activity will be
			/// launched in a separate task.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/fundamentals/tasks-and-back-stack.html"&gt;Tasks and Back
			/// Stack</a> document for more details about tasks.</td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.launchMode">android.R.attr.launchMode</see>
			/// .
			/// </attr>
			/// <attr>name android:launchMode</attr>
			public const int AndroidManifestActivity_launchMode = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestActivity_logo = 23;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether a component is allowed to have multiple instances
			/// of itself running in different processes.  Use with the activity
			/// and provider tags.
			/// <p>Normally the system will ensure that all instances of a particular
			/// component are only running in a single process.  You can use this
			/// attribute to disable that behavior, allowing the system to create
			/// instances wherever they are used (provided permissions allow it).
			/// This is most often used with content providers, so that instances
			/// of a provider can be created in each client process, allowing them
			/// to be used without performing IPC.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.multiprocess">android.R.attr.multiprocess</see>
			/// .
			/// </attr>
			/// <attr>name android:multiprocess</attr>
			public const int AndroidManifestActivity_multiprocess = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the class implementing the activity, deriving from
			/// <see cref="android.app.Activity">android.app.Activity</see>
			/// .  This is a fully
			/// qualified class name (for example, com.mycompany.myapp.MyActivity); as a
			/// short-hand if the first character of the class
			/// is a period then it is appended to your package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestActivity_name = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether an activity should be kept in its history stack.
			/// If this attribute is set, then as soon as the user navigates away
			/// from the activity it will be finished and they will no longer be
			/// able to return to it.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.noHistory">android.R.attr.noHistory</see>
			/// .
			/// </attr>
			/// <attr>name android:noHistory</attr>
			public const int AndroidManifestActivity_noHistory = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestActivity_permission = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a specific process that the associated code is to run in.
			/// Use with the application tag (to supply a default process for all
			/// application components), or with the activity, receiver, service,
			/// or provider tag (to supply a specific icon for that component).
			/// <p>Application components are normally run in a single process that
			/// is created for the entire application.  You can use this tag to modify
			/// where they run.  If the process name begins with a ':' character,
			/// a new process private to that application will be created when needed
			/// to run that component (allowing you to spread your application across
			/// multiple processes).  If the process name begins with a lower-case
			/// character, the component will be run in a global process of that name,
			/// provided that you have permission to do so, allowing multiple
			/// applications to share one process to reduce resource usage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.process">android.R.attr.process</see>
			/// .
			/// </attr>
			/// <attr>name android:process</attr>
			public const int AndroidManifestActivity_process = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify the orientation an activity should be run in.  If not
			/// specified, it will run in the current preferred orientation
			/// of the screen.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>unspecified</code></td><td>-1</td><td> No preference specified: let the system decide the best
			/// orientation.  This will either be the orientation selected
			/// by the activity below, or the user's preferred orientation
			/// if this activity is the bottom of a task. If the user
			/// explicitly turned off sensor based orientation through settings
			/// sensor based device rotation will be ignored. If not by default
			/// sensor based orientation will be taken into account and the
			/// orientation will changed based on how the user rotates the device </td></tr>
			/// <tr><td><code>landscape</code></td><td>0</td><td> Would like to have the screen in a landscape orientation: that
			/// is, with the display wider than it is tall, ignoring sensor data. </td></tr>
			/// <tr><td><code>portrait</code></td><td>1</td><td> Would like to have the screen in a portrait orientation: that
			/// is, with the display taller than it is wide, ignoring sensor data. </td></tr>
			/// <tr><td><code>user</code></td><td>2</td><td> Use the user's current preferred orientation of the handset. </td></tr>
			/// <tr><td><code>behind</code></td><td>3</td><td> Keep the screen in the same orientation as whatever is behind
			/// this activity. </td></tr>
			/// <tr><td><code>sensor</code></td><td>4</td><td> Orientation is determined by a physical orientation sensor:
			/// the display will rotate based on how the user moves the device. </td></tr>
			/// <tr><td><code>nosensor</code></td><td>5</td><td> Always ignore orientation determined by orientation sensor:
			/// the display will not rotate when the user moves the device. </td></tr>
			/// <tr><td><code>sensorLandscape</code></td><td>6</td><td> Would like to have the screen in landscape orientation, but can
			/// use the sensor to change which direction the screen is facing. </td></tr>
			/// <tr><td><code>sensorPortait</code></td><td>7</td><td> Would like to have the screen in portrait orientation, but can
			/// use the sensor to change which direction the screen is facing. </td></tr>
			/// <tr><td><code>reverseLandscape</code></td><td>8</td><td> Would like to have the screen in landscape orientation, turned in
			/// the opposite direction from normal landscape. </td></tr>
			/// <tr><td><code>reversePortait</code></td><td>9</td><td> Would like to have the screen in portrait orientation, turned in
			/// the opposite direction from normal portrait. </td></tr>
			/// <tr><td><code>fullSensor</code></td><td>10</td><td> Orientation is determined by a physical orientation sensor:
			/// the display will rotate based on how the user moves the device.
			/// This allows any of the 4 possible rotations, regardless of what
			/// the device will normally do (for example some devices won't
			/// normally use 180 degree rotation). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.screenOrientation">android.R.attr.screenOrientation</see>
			/// .
			/// </attr>
			/// <attr>name android:screenOrientation</attr>
			public const int AndroidManifestActivity_screenOrientation = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates that an Activity does not need to have its freeze state
			/// (as returned by
			/// <see cref="android.app.Activity.onSaveInstanceState(android.os.Bundle)">android.app.Activity.onSaveInstanceState(android.os.Bundle)
			/// 	</see>
			/// retained in order to be restarted.  Generally you use this for activities
			/// that do not store any state.  When this flag is set, if for some reason
			/// the activity is killed before it has a chance to save its state,
			/// then the system will not remove it from the activity stack like
			/// it normally would.  Instead, the next time the user navigates to
			/// it its
			/// <see cref="android.app.Activity.onCreate(android.os.Bundle)">android.app.Activity.onCreate(android.os.Bundle)
			/// 	</see>
			/// method will be called
			/// with a null icicle, just like it was starting for the first time.
			/// <p>This is used by the Home activity to make sure it does not get
			/// removed if it crashes for some reason.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.stateNotNeeded">android.R.attr.stateNotNeeded</see>
			/// .
			/// </attr>
			/// <attr>name android:stateNotNeeded</attr>
			public const int AndroidManifestActivity_stateNotNeeded = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a task name that activities have an "affinity" to.
			/// Use with the application tag (to supply a default affinity for all
			/// activities in the application), or with the activity tag (to supply
			/// a specific affinity for that component).
			/// <p>The default value for this attribute is the same as the package
			/// name, indicating that all activities in the manifest should generally
			/// be considered a single "application" to the user.  You can use this
			/// attribute to modify that behavior: either giving them an affinity
			/// for another task, if the activities are intended to be part of that
			/// task from the user's perspective, or using an empty string for
			/// activities that have no affinity to a task.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskAffinity">android.R.attr.taskAffinity</see>
			/// .
			/// </attr>
			/// <attr>name android:taskAffinity</attr>
			public const int AndroidManifestActivity_taskAffinity = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The overall theme to use for an activity.  Use with either the
			/// application tag (to supply a default theme for all activities) or
			/// the activity tag (to supply a specific theme for that activity).
			/// <p>This automatically sets
			/// your activity's Context to use this theme, and may also be used
			/// for "starting" animations prior to the activity being launched (to
			/// better match what the activity actually looks like).  It is a reference
			/// to a style resource defining the theme.  If not set, the default
			/// system theme will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.theme">android.R.attr.theme</see>
			/// .
			/// </attr>
			/// <attr>name android:theme</attr>
			public const int AndroidManifestActivity_theme = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Extra options for an activity's UI. Applies to either the
			/// <code>&lt;activity&gt;</code>
			/// or
			/// <code>&lt;application&gt;</code>
			/// tag. If specified on the
			/// <code>&lt;application&gt;</code>
			/// tag these will be considered defaults for all activities in the
			/// application.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> No extra UI options. This is the default. </td></tr>
			/// <tr><td><code>splitActionBarWhenNarrow</code></td><td>1</td><td> Split the options menu into a separate bar at the bottom of
			/// the screen when severely constrained for horizontal space.
			/// (e.g. portrait mode on a phone.) Instead of a small number
			/// of action buttons appearing in the action bar at the top
			/// of the screen, the action bar will split into the top navigation
			/// section and the bottom menu section. Menu items will not be
			/// split across the two bars; they will always appear together. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.uiOptions">android.R.attr.uiOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:uiOptions</attr>
			public const int AndroidManifestActivity_uiOptions = 26;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify the default soft-input mode for the main window of
			/// this activity.  A value besides "unspecified" here overrides
			/// any value in the theme.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
			/// is the default. </td></tr>
			/// <tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
			/// last was. </td></tr>
			/// <tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
			/// the system will automatically select between resize and pan
			/// modes, depending
			/// on whether the content of the window has any layout views
			/// that can scroll their contents.  If there is such a view,
			/// then the window will be resized, with the assumption being
			/// that the resizeable area can be reduced to make room for
			/// the input UI. </td></tr>
			/// <tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
			/// reduced to make room for the soft input area. </td></tr>
			/// <tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
			/// instead pan the contents of the window as focus moves inside
			/// of it so that the user can see what they are typing.  This is
			/// generally less desireable than panning because the user may
			/// need to close the input area to get at and interact with
			/// parts of the window. </td></tr>
			/// <tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
			/// soft input area; the window is never adjusted for it. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowSoftInputMode">android.R.attr.windowSoftInputMode
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowSoftInputMode</attr>
			public const int AndroidManifestActivity_windowSoftInputMode = 20;

			/// <summary>
			/// The <code>activity-alias</code> tag declares a new
			/// name for an existing
			/// <see cref="AndroidManifestActivity">activity</see>
			/// tag.
			/// <p>Zero or more
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tags can be included inside of an activity-alias, to specify the Intents
			/// that it can handle.  If none are specified, the activity can
			/// only be started through direct specification of its class name.
			/// The activity-alias tag appears as a child tag of the
			/// <see cref="AndroidManifestApplication">application</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_enabled">android:enabled</see>
			/// </code></td><td> Specify whether the activity-alias is enabled or not (that is, can be instantiated by the system).</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_exported">android:exported</see>
			/// </code></td><td> Flag indicating whether the given application component is available
			/// to other applications.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_name">android:name</see>
			/// </code></td><td> Required name of the class implementing the activity, deriving from
			/// <see cref="android.app.Activity">android.app.Activity</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestActivityAlias_targetActivity">android:targetActivity</see>
			/// </code></td><td> The name of the activity this alias should launch.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestActivityAlias_description">AndroidManifestActivityAlias_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_enabled">AndroidManifestActivityAlias_enabled
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_exported">AndroidManifestActivityAlias_exported
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_icon">AndroidManifestActivityAlias_icon
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_label">AndroidManifestActivityAlias_label
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_logo">AndroidManifestActivityAlias_logo
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_name">AndroidManifestActivityAlias_name
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_permission">AndroidManifestActivityAlias_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestActivityAlias_targetActivity">AndroidManifestActivityAlias_targetActivity
			/// 	</seealso>
			public static readonly int[] AndroidManifestActivityAlias = new int[] { unchecked(
				(int)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), 
				unchecked((int)(0x01010006)), unchecked((int)(0x0101000e)), unchecked((int)(0x01010010
				)), unchecked((int)(0x01010020)), unchecked((int)(0x01010202)), unchecked((int)(
				0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestActivityAlias_description = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether the activity-alias is enabled or not (that is, can be instantiated by the system).
			/// It can also be specified for an application as a whole, in which case a value of "false"
			/// will override any component specific values (a value of "true" will not override the
			/// component specific values).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int AndroidManifestActivityAlias_enabled = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the given application component is available
			/// to other applications.  If false, it can only be accessed by
			/// applications with its same user id (which usually means only by
			/// code in its own package).  If true, it can be invoked by external
			/// entities, though which ones can do so may be controlled through
			/// permissions.  The default value is false for activity, receiver,
			/// and service components that do not specify any intent filters; it
			/// is true for activity, receiver, and service components that do
			/// have intent filters (implying they expect to be invoked by others
			/// who do not know their particular component name) and for all
			/// content providers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.exported">android.R.attr.exported</see>
			/// .
			/// </attr>
			/// <attr>name android:exported</attr>
			public const int AndroidManifestActivityAlias_exported = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestActivityAlias_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestActivityAlias_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestActivityAlias_logo = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the class implementing the activity, deriving from
			/// <see cref="android.app.Activity">android.app.Activity</see>
			/// .  This is a fully
			/// qualified class name (for example, com.mycompany.myapp.MyActivity); as a
			/// short-hand if the first character of the class
			/// is a period then it is appended to your package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestActivityAlias_name = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestActivityAlias_permission = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the activity this alias should launch.  The activity
			/// must be in the same manifest as the alias, and have been defined
			/// in that manifest before the alias here.  This must use a Java-style
			/// naming convention to ensure the name is unique, for example
			/// "com.mycompany.MyName".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.targetActivity">android.R.attr.targetActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:targetActivity</attr>
			public const int AndroidManifestActivityAlias_targetActivity = 7;

			/// <summary>
			/// The <code>application</code> tag describes application-level components
			/// contained in the package, as well as general application
			/// attributes.
			/// </summary>
			/// <remarks>
			/// The <code>application</code> tag describes application-level components
			/// contained in the package, as well as general application
			/// attributes.  Many of the attributes you can supply here (such
			/// as theme, label, icon, permission, process, taskAffinity,
			/// and allowTaskReparenting) serve
			/// as default values for the corresponding attributes of components
			/// declared inside of the application.
			/// <p>Inside of this element you specify what the application contains,
			/// using the elements
			/// <see cref="AndroidManifestProvider">provider</see>
			/// ,
			/// <see cref="AndroidManifestService">service</see>
			/// ,
			/// <see cref="AndroidManifestReceiver">receiver</see>
			/// ,
			/// <see cref="AndroidManifestActivity">activity</see>
			/// ,
			/// <see cref="AndroidManifestActivityAlias">activity-alias</see>
			/// , and
			/// <see cref="AndroidManifestUsesLibrary">uses-library</see>
			/// .  The application tag
			/// appears as a child of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_allowBackup">android:allowBackup</see>
			/// </code></td><td> Whether to allow the application to participate in backup
			/// infrastructure.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_allowClearUserData">android:allowClearUserData
			/// 	</see>
			/// </code></td><td> Option to let applications specify that user data can/cannot be
			/// cleared.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_allowTaskReparenting">android:allowTaskReparenting
			/// 	</see>
			/// </code></td><td> Specify that an activity can be moved out of a task it is in to
			/// the task it has an affinity for when appropriate.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_backupAgent">android:backupAgent</see>
			/// </code></td><td> The name of the class subclassing <code>BackupAgent</code> to manage
			/// backup and restore of the application's data on external storage.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_cantSaveState">android:cantSaveState</see>
			/// </code></td><td> Declare that this application can't participate in the normal
			/// state save/restore mechanism.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_debuggable">android:debuggable</see>
			/// </code></td><td> Flag indicating whether the application can be debugged, even when
			/// running on a device that is running in user mode.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_enabled">android:enabled</see>
			/// </code></td><td> Specify whether the components in this application are enabled or not (that is, can be
			/// instantiated by the system).</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_hardwareAccelerated">android:hardwareAccelerated
			/// 	</see>
			/// </code></td><td> <p>Flag indicating whether the application's rendering should be hardware
			/// accelerated if possible.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_hasCode">android:hasCode</see>
			/// </code></td><td> Indicate whether this application contains code.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_killAfterRestore">android:killAfterRestore</see>
			/// </code></td><td> Whether the application in question should be terminated after its
			/// settings have been restored during a full-system restore operation.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_largeHeap">android:largeHeap</see>
			/// </code></td><td> Request that your application's processes be created with
			/// a large Dalvik heap.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_manageSpaceActivity">android:manageSpaceActivity
			/// 	</see>
			/// </code></td><td> Name of activity to be launched for managing the application's space on the device.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_name">android:name</see>
			/// </code></td><td> An optional name of a class implementing the overall
			/// <see cref="android.app.Application">android.app.Application</see>
			/// for this package.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_neverEncrypt">android:neverEncrypt</see>
			/// </code></td><td> Option to let applications specify that user data should
			/// never be encrypted if an Encrypted File System solution
			/// is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_persistent">android:persistent</see>
			/// </code></td><td> Flag to control special persistent mode of an application.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_process">android:process</see>
			/// </code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_restoreAnyVersion">android:restoreAnyVersion
			/// 	</see>
			/// </code></td><td> Indicate that the application is prepared to attempt a restore of any
			/// backed-up dataset, even if the backup is apparently from a newer version
			/// of the application than is currently installed on the device.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_restoreNeedsApplication">android:restoreNeedsApplication
			/// 	</see>
			/// </code></td><td> @deprecated This attribute is not used by the Android operating system.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_taskAffinity">android:taskAffinity</see>
			/// </code></td><td> Specify a task name that activities have an "affinity" to.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_testOnly">android:testOnly</see>
			/// </code></td><td> Option to indicate this application is only for testing purposes.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_theme">android:theme</see>
			/// </code></td><td> The overall theme to use for an activity.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_uiOptions">android:uiOptions</see>
			/// </code></td><td> Extra options for an activity's UI.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestApplication_vmSafeMode">android:vmSafeMode</see>
			/// </code></td><td> Flag indicating whether the application requests the VM to operate in
			/// the safe mode.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestApplication_allowBackup">AndroidManifestApplication_allowBackup
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_allowClearUserData">AndroidManifestApplication_allowClearUserData
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_allowTaskReparenting">AndroidManifestApplication_allowTaskReparenting
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_backupAgent">AndroidManifestApplication_backupAgent
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_cantSaveState">AndroidManifestApplication_cantSaveState
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_debuggable">AndroidManifestApplication_debuggable
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_description">AndroidManifestApplication_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_enabled">AndroidManifestApplication_enabled
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_hardwareAccelerated">AndroidManifestApplication_hardwareAccelerated
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_hasCode">AndroidManifestApplication_hasCode
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_icon">AndroidManifestApplication_icon</seealso>
			/// <seealso cref="AndroidManifestApplication_killAfterRestore">AndroidManifestApplication_killAfterRestore
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_label">AndroidManifestApplication_label
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_largeHeap">AndroidManifestApplication_largeHeap
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_logo">AndroidManifestApplication_logo</seealso>
			/// <seealso cref="AndroidManifestApplication_manageSpaceActivity">AndroidManifestApplication_manageSpaceActivity
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_name">AndroidManifestApplication_name</seealso>
			/// <seealso cref="AndroidManifestApplication_neverEncrypt">AndroidManifestApplication_neverEncrypt
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_permission">AndroidManifestApplication_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_persistent">AndroidManifestApplication_persistent
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_process">AndroidManifestApplication_process
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_restoreAnyVersion">AndroidManifestApplication_restoreAnyVersion
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_restoreNeedsApplication">AndroidManifestApplication_restoreNeedsApplication
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_taskAffinity">AndroidManifestApplication_taskAffinity
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_testOnly">AndroidManifestApplication_testOnly
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_theme">AndroidManifestApplication_theme
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_uiOptions">AndroidManifestApplication_uiOptions
			/// 	</seealso>
			/// <seealso cref="AndroidManifestApplication_vmSafeMode">AndroidManifestApplication_vmSafeMode
			/// 	</seealso>
			public static readonly int[] AndroidManifestApplication = new int[] { unchecked((
				int)(0x01010000)), unchecked((int)(0x01010001)), unchecked((int)(0x01010002)), unchecked(
				(int)(0x01010003)), unchecked((int)(0x01010004)), unchecked((int)(0x01010005)), 
				unchecked((int)(0x01010006)), unchecked((int)(0x0101000c)), unchecked((int)(0x0101000d
				)), unchecked((int)(0x0101000e)), unchecked((int)(0x0101000f)), unchecked((int)(
				0x01010011)), unchecked((int)(0x01010012)), unchecked((int)(0x01010020)), unchecked(
				(int)(0x01010204)), unchecked((int)(0x01010272)), unchecked((int)(0x0101027f)), 
				unchecked((int)(0x01010280)), unchecked((int)(0x0101029c)), unchecked((int)(0x0101029d
				)), unchecked((int)(0x010102b8)), unchecked((int)(0x010102ba)), unchecked((int)(
				0x010102be)), unchecked((int)(0x010102d3)), unchecked((int)(0x0101035a)), unchecked(
				(int)(0x01010398)), unchecked((int)(0x0101041b)), unchecked((int)(0x0101041c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether to allow the application to participate in backup
			/// infrastructure.  If this attribute is set to <code>false</code>, no backup
			/// of the application will ever be performed, even by a full-system backup that
			/// would otherwise cause all application data to be saved via adb.  The
			/// default value of this attribute is <code>true</code>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allowBackup">android.R.attr.allowBackup</see>
			/// .
			/// </attr>
			/// <attr>name android:allowBackup</attr>
			public const int AndroidManifestApplication_allowBackup = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Option to let applications specify that user data can/cannot be
			/// cleared. This flag is turned on by default.
			/// <em>This attribute is usable only by applications
			/// included in the system image. Third-party apps cannot use it.</em>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allowClearUserData">android.R.attr.allowClearUserData</see>
			/// .
			/// </attr>
			/// <attr>name android:allowClearUserData</attr>
			public const int AndroidManifestApplication_allowClearUserData = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify that an activity can be moved out of a task it is in to
			/// the task it has an affinity for when appropriate.  Use with the
			/// application tag (to supply a default for all activities in the
			/// application), or with an activity tag (to supply a specific
			/// setting for that component).
			/// <p>Normally when an application is started, it is associated with
			/// the task of the activity that started it and stays there for its
			/// entire lifetime.  You can use the allowTaskReparenting feature to force an
			/// activity to be re-parented to a different task when the task it is
			/// in goes to the background.  Typically this is used to cause the
			/// activities of an application to move back to the main task associated
			/// with that application.  The activity is re-parented to the task
			/// with the same
			/// <see cref="android.R.attr.taskAffinity">android.R.attr.taskAffinity</see>
			/// as it has.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allowTaskReparenting">android.R.attr.allowTaskReparenting
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:allowTaskReparenting</attr>
			public const int AndroidManifestApplication_allowTaskReparenting = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the class subclassing <code>BackupAgent</code> to manage
			/// backup and restore of the application's data on external storage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backupAgent">android.R.attr.backupAgent</see>
			/// .
			/// </attr>
			/// <attr>name android:backupAgent</attr>
			public const int AndroidManifestApplication_backupAgent = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Declare that this application can't participate in the normal
			/// state save/restore mechanism.  Since it is not able to save and
			/// restore its state on demand,
			/// it can not participate in the normal activity lifecycle.  It will
			/// not be killed while in the background; the user must explicitly
			/// quit it.  Only one such app can be running at a time; if the user
			/// tries to launch a second such app, they will be prompted
			/// to quit the first before doing so.  While the
			/// application is running, the user will be informed of this.
			/// </attr>
			/// <hide>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </hide>
			/// <attr>name android:cantSaveState</attr>
			public const int AndroidManifestApplication_cantSaveState = 27;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the application can be debugged, even when
			/// running on a device that is running in user mode.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.debuggable">android.R.attr.debuggable</see>
			/// .
			/// </attr>
			/// <attr>name android:debuggable</attr>
			public const int AndroidManifestApplication_debuggable = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestApplication_description = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether the components in this application are enabled or not (that is, can be
			/// instantiated by the system).
			/// If "false", it overrides any component specific values (a value of "true" will not
			/// override the component specific values).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int AndroidManifestApplication_enabled = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// <p>Flag indicating whether the application's rendering should be hardware
			/// accelerated if possible. This flag is turned on by default for applications
			/// that are targeting
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// or later.</p>
			/// <p>This flag can be set on the application and any activity declared
			/// in the manifest. When enabled for the application, each activity is
			/// automatically assumed to be hardware accelerated. This flag can be
			/// overridden in the activity tags, either turning it off (if on for the
			/// application) or on (if off for the application.)</p>
			/// <p>When this flag is turned on for an activity (either directly or via
			/// the application tag), every window created from the activity, including
			/// the activity's own window, will be hardware accelerated, if possible.</p>
			/// <p>Please refer to the documentation of
			/// <see cref="android.view.WindowManagerClass.LayoutParams.FLAG_HARDWARE_ACCELERATED
			/// 	">android.view.WindowManagerClass.LayoutParams.FLAG_HARDWARE_ACCELERATED</see>
			/// for more information on how to control this flag programmatically.</p>
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.hardwareAccelerated">android.R.attr.hardwareAccelerated
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:hardwareAccelerated</attr>
			public const int AndroidManifestApplication_hardwareAccelerated = 23;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicate whether this application contains code.  If set to false,
			/// there is no code associated with it and thus the system will not
			/// try to load its code when launching components.  The default is true
			/// for normal behavior.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.hasCode">android.R.attr.hasCode</see>
			/// .
			/// </attr>
			/// <attr>name android:hasCode</attr>
			public const int AndroidManifestApplication_hasCode = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestApplication_icon = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the application in question should be terminated after its
			/// settings have been restored during a full-system restore operation.
			/// Single-package restore operations will never cause the application to
			/// be shut down.  Full-system restore operations typically only occur once,
			/// when the phone is first set up.  Third-party applications will not usually
			/// need to use this attribute.
			/// <p>The default is <code>true</code>, which means that after the application
			/// has finished processing its data during a full-system restore, it will be
			/// terminated.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.killAfterRestore">android.R.attr.killAfterRestore</see>
			/// .
			/// </attr>
			/// <attr>name android:killAfterRestore</attr>
			public const int AndroidManifestApplication_killAfterRestore = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestApplication_label = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Request that your application's processes be created with
			/// a large Dalvik heap.  This applies to <em>all</em> processes
			/// created for the application.  It only applies to the first
			/// application loaded into a process; if using a sharedUserId
			/// to allow multiple applications to use a process, they all must
			/// use this option consistently or will get unpredictable results.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.largeHeap">android.R.attr.largeHeap</see>
			/// .
			/// </attr>
			/// <attr>name android:largeHeap</attr>
			public const int AndroidManifestApplication_largeHeap = 24;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestApplication_logo = 22;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Name of activity to be launched for managing the application's space on the device.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.manageSpaceActivity">android.R.attr.manageSpaceActivity
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:manageSpaceActivity</attr>
			public const int AndroidManifestApplication_manageSpaceActivity = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional name of a class implementing the overall
			/// <see cref="android.app.Application">android.app.Application</see>
			/// for this package.  When the
			/// process for your package is started, this class is instantiated
			/// before any of the other application components.  Note that this
			/// is not required, and in fact most applications will probably
			/// not need it.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestApplication_name = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Option to let applications specify that user data should
			/// never be encrypted if an Encrypted File System solution
			/// is enabled. Specifically, this is an "opt-out" feature, meaning
			/// that, by default, user data will be encrypted if the EFS feature
			/// is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:neverEncrypt</attr>
			public const int AndroidManifestApplication_neverEncrypt = 26;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestApplication_permission = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag to control special persistent mode of an application.  This should
			/// not normally be used by applications; it requires that the system keep
			/// your application running at all times.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.persistent">android.R.attr.persistent</see>
			/// .
			/// </attr>
			/// <attr>name android:persistent</attr>
			public const int AndroidManifestApplication_persistent = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a specific process that the associated code is to run in.
			/// Use with the application tag (to supply a default process for all
			/// application components), or with the activity, receiver, service,
			/// or provider tag (to supply a specific icon for that component).
			/// <p>Application components are normally run in a single process that
			/// is created for the entire application.  You can use this tag to modify
			/// where they run.  If the process name begins with a ':' character,
			/// a new process private to that application will be created when needed
			/// to run that component (allowing you to spread your application across
			/// multiple processes).  If the process name begins with a lower-case
			/// character, the component will be run in a global process of that name,
			/// provided that you have permission to do so, allowing multiple
			/// applications to share one process to reduce resource usage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.process">android.R.attr.process</see>
			/// .
			/// </attr>
			/// <attr>name android:process</attr>
			public const int AndroidManifestApplication_process = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicate that the application is prepared to attempt a restore of any
			/// backed-up dataset, even if the backup is apparently from a newer version
			/// of the application than is currently installed on the device.  Setting
			/// this attribute to <code>true</code> will permit the Backup Manager to
			/// attempt restore even when a version mismatch suggests that the data are
			/// incompatible.  <em>Use with caution!</em>
			/// <p>The default value of this attribute is <code>false</code>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.restoreAnyVersion">android.R.attr.restoreAnyVersion</see>
			/// .
			/// </attr>
			/// <attr>name android:restoreAnyVersion</attr>
			public const int AndroidManifestApplication_restoreAnyVersion = 21;

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <attr>name android:restoreNeedsApplication</attr>
			[System.ObsoleteAttribute(@"This attribute is not used by the Android operating system. <p>Must be a boolean value, either ""<code>true</code>"" or ""<code>false</code>"". <p>This may also be a reference to a resource (in the form ""<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>"") or theme attribute (in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"") containing a value of this type. <p>This corresponds to the global attribute          resource symbol android.R.attr.restoreNeedsApplication ."
				)]
			public const int AndroidManifestApplication_restoreNeedsApplication = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a task name that activities have an "affinity" to.
			/// Use with the application tag (to supply a default affinity for all
			/// activities in the application), or with the activity tag (to supply
			/// a specific affinity for that component).
			/// <p>The default value for this attribute is the same as the package
			/// name, indicating that all activities in the manifest should generally
			/// be considered a single "application" to the user.  You can use this
			/// attribute to modify that behavior: either giving them an affinity
			/// for another task, if the activities are intended to be part of that
			/// task from the user's perspective, or using an empty string for
			/// activities that have no affinity to a task.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskAffinity">android.R.attr.taskAffinity</see>
			/// .
			/// </attr>
			/// <attr>name android:taskAffinity</attr>
			public const int AndroidManifestApplication_taskAffinity = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Option to indicate this application is only for testing purposes.
			/// For example, it may expose functionality or data outside of itself
			/// that would cause a security hole, but is useful for testing.  This
			/// kind of application can not be installed without the
			/// INSTALL_ALLOW_TEST flag, which means only through adb install.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.testOnly">android.R.attr.testOnly</see>
			/// .
			/// </attr>
			/// <attr>name android:testOnly</attr>
			public const int AndroidManifestApplication_testOnly = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The overall theme to use for an activity.  Use with either the
			/// application tag (to supply a default theme for all activities) or
			/// the activity tag (to supply a specific theme for that activity).
			/// <p>This automatically sets
			/// your activity's Context to use this theme, and may also be used
			/// for "starting" animations prior to the activity being launched (to
			/// better match what the activity actually looks like).  It is a reference
			/// to a style resource defining the theme.  If not set, the default
			/// system theme will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.theme">android.R.attr.theme</see>
			/// .
			/// </attr>
			/// <attr>name android:theme</attr>
			public const int AndroidManifestApplication_theme = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Extra options for an activity's UI. Applies to either the
			/// <code>&lt;activity&gt;</code>
			/// or
			/// <code>&lt;application&gt;</code>
			/// tag. If specified on the
			/// <code>&lt;application&gt;</code>
			/// tag these will be considered defaults for all activities in the
			/// application.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> No extra UI options. This is the default. </td></tr>
			/// <tr><td><code>splitActionBarWhenNarrow</code></td><td>1</td><td> Split the options menu into a separate bar at the bottom of
			/// the screen when severely constrained for horizontal space.
			/// (e.g. portrait mode on a phone.) Instead of a small number
			/// of action buttons appearing in the action bar at the top
			/// of the screen, the action bar will split into the top navigation
			/// section and the bottom menu section. Menu items will not be
			/// split across the two bars; they will always appear together. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.uiOptions">android.R.attr.uiOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:uiOptions</attr>
			public const int AndroidManifestApplication_uiOptions = 25;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the application requests the VM to operate in
			/// the safe mode.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.vmSafeMode">android.R.attr.vmSafeMode</see>
			/// .
			/// </attr>
			/// <attr>name android:vmSafeMode</attr>
			public const int AndroidManifestApplication_vmSafeMode = 20;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>category</code> tag, a child of the
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tag.
			/// See
			/// <see cref="android.content.IntentFilter.addCategory(string)">android.content.IntentFilter.addCategory(string)
			/// 	</see>
			/// for
			/// more information.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestCategory_name">android:name</see>
			/// </code></td><td> The name of category that is handled, using the Java-style
			/// naming convention.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestCategory_name">AndroidManifestCategory_name</seealso>
			public static readonly int[] AndroidManifestCategory = new int[] { unchecked((int
				)(0x01010003)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of category that is handled, using the Java-style
			/// naming convention.  For example, to support
			/// <see cref="android.content.Intent.CATEGORY_LAUNCHER">Intent.CATEGORY_LAUNCHER</see>
			/// you would put <code>android.intent.category.LAUNCHER</code> here.
			/// Custom actions should generally use a prefix matching the
			/// package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestCategory_name = 0;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>screen</code> tag, a child of <code>compatible-screens</code>,
			/// which is itseld a child of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestCompatibleScreensScreen_screenDensity">android:screenDensity
			/// 	</see>
			/// </code></td><td> Specifies a compatible screen density, as per the device
			/// configuration screen density bins.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestCompatibleScreensScreen_screenSize">android:screenSize</see>
			/// </code></td><td> Specifies a compatible screen size, as per the device
			/// configuration screen size bins.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestCompatibleScreensScreen_screenDensity">AndroidManifestCompatibleScreensScreen_screenDensity
			/// 	</seealso>
			/// <seealso cref="AndroidManifestCompatibleScreensScreen_screenSize">AndroidManifestCompatibleScreensScreen_screenSize
			/// 	</seealso>
			public static readonly int[] AndroidManifestCompatibleScreensScreen = new int[] { 
				unchecked((int)(0x010102ca)), unchecked((int)(0x010102cb)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a compatible screen density, as per the device
			/// configuration screen density bins.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>ldpi</code></td><td>120</td><td> A low density screen, approximately 120dpi. </td></tr>
			/// <tr><td><code>mdpi</code></td><td>160</td><td> A medium density screen, approximately 160dpi. </td></tr>
			/// <tr><td><code>hdpi</code></td><td>240</td><td> A high density screen, approximately 240dpi. </td></tr>
			/// <tr><td><code>xhdpi</code></td><td>320</td><td> An extra high density screen, approximately 320dpi. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.screenDensity">android.R.attr.screenDensity</see>
			/// .
			/// </attr>
			/// <attr>name android:screenDensity</attr>
			public const int AndroidManifestCompatibleScreensScreen_screenDensity = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a compatible screen size, as per the device
			/// configuration screen size bins.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>small</code></td><td>200</td><td> A small screen configuration, at least 240x320db. </td></tr>
			/// <tr><td><code>normal</code></td><td>300</td><td> A normal screen configuration, at least 320x480db. </td></tr>
			/// <tr><td><code>large</code></td><td>400</td><td> A large screen configuration, at least 400x530db. </td></tr>
			/// <tr><td><code>xlarge</code></td><td>500</td><td> An extra large screen configuration, at least 600x800db. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.screenSize">android.R.attr.screenSize</see>
			/// .
			/// </attr>
			/// <attr>name android:screenSize</attr>
			public const int AndroidManifestCompatibleScreensScreen_screenSize = 0;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>data</code> tag, a child of the
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tag, describing
			/// the types of data that match.  This tag can be specified multiple
			/// times to supply multiple data options, as described in the
			/// <see cref="android.content.IntentFilter">android.content.IntentFilter</see>
			/// class.  Note that all such
			/// tags are adding options to the same IntentFilter so that, for example,
			/// <code>&lt;data android:scheme="myscheme" android:host="me.com" /&gt;</code>
			/// is equivalent to <code>&lt;data android:scheme="myscheme" /&gt;
			/// &lt;data android:host="me.com" /&gt;</code>.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_host">android:host</see>
			/// </code></td><td> Specify a URI authority host that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataAuthority(string, string)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_mimeType">android:mimeType</see>
			/// </code></td><td> Specify a MIME type that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataType(string)">IntentFilter.addDataType()
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_path">android:path</see>
			/// </code></td><td> Specify a URI path that must exactly match, as per
			/// <see cref="android.content.IntentFilter.addDataPath(string, int)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_pathPattern">android:pathPattern</see>
			/// </code></td><td> Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.content.IntentFilter.addDataPath(string, int)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_pathPrefix">android:pathPrefix</see>
			/// </code></td><td> Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.content.IntentFilter.addDataPath(string, int)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_port">android:port</see>
			/// </code></td><td> Specify a URI authority port that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataAuthority(string, string)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestData_scheme">android:scheme</see>
			/// </code></td><td> Specify a URI scheme that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataScheme(string)">IntentFilter.addDataScheme()
			/// 	</see>
			/// .</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestData_host">AndroidManifestData_host</seealso>
			/// <seealso cref="AndroidManifestData_mimeType">AndroidManifestData_mimeType</seealso>
			/// <seealso cref="AndroidManifestData_path">AndroidManifestData_path</seealso>
			/// <seealso cref="AndroidManifestData_pathPattern">AndroidManifestData_pathPattern</seealso>
			/// <seealso cref="AndroidManifestData_pathPrefix">AndroidManifestData_pathPrefix</seealso>
			/// <seealso cref="AndroidManifestData_port">AndroidManifestData_port</seealso>
			/// <seealso cref="AndroidManifestData_scheme">AndroidManifestData_scheme</seealso>
			public static readonly int[] AndroidManifestData = new int[] { unchecked((int)(0x01010026
				)), unchecked((int)(0x01010027)), unchecked((int)(0x01010028)), unchecked((int)(
				0x01010029)), unchecked((int)(0x0101002a)), unchecked((int)(0x0101002b)), unchecked(
				(int)(0x0101002c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI authority host that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataAuthority(string, string)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// .
			/// <p><em>Note: host name matching in the Android framework is
			/// case-sensitive, unlike the formal RFC.  As a result,
			/// host names here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.host">android.R.attr.host</see>
			/// .
			/// </attr>
			/// <attr>name android:host</attr>
			public const int AndroidManifestData_host = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a MIME type that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataType(string)">IntentFilter.addDataType()
			/// 	</see>
			/// .
			/// <p><em>Note: MIME type matching in the Android framework is
			/// case-sensitive, unlike formal RFC MIME types.  As a result,
			/// MIME types here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.mimeType">android.R.attr.mimeType</see>
			/// .
			/// </attr>
			/// <attr>name android:mimeType</attr>
			public const int AndroidManifestData_mimeType = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that must exactly match, as per
			/// <see cref="android.content.IntentFilter.addDataPath(string, int)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.path">android.R.attr.path</see>
			/// .
			/// </attr>
			/// <attr>name android:path</attr>
			public const int AndroidManifestData_path = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.content.IntentFilter.addDataPath(string, int)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .
			/// Note that because '\' is used as an escape character when
			/// reading the string from XML (before it is parsed as a pattern),
			/// you will need to double-escape: for example a literal "*" would
			/// be written as "\\*" and a literal "\" would be written as
			/// "\\\\".  This is basically the same as what you would need to
			/// write if constructing the string in Java code.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.pathPattern">android.R.attr.pathPattern</see>
			/// .
			/// </attr>
			/// <attr>name android:pathPattern</attr>
			public const int AndroidManifestData_pathPattern = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.content.IntentFilter.addDataPath(string, int)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.pathPrefix">android.R.attr.pathPrefix</see>
			/// .
			/// </attr>
			/// <attr>name android:pathPrefix</attr>
			public const int AndroidManifestData_pathPrefix = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI authority port that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataAuthority(string, string)">IntentFilter.addDataAuthority()
			/// 	</see>
			/// .  If a host is supplied
			/// but not a port, any port is matched.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.port">android.R.attr.port</see>
			/// .
			/// </attr>
			/// <attr>name android:port</attr>
			public const int AndroidManifestData_port = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI scheme that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataScheme(string)">IntentFilter.addDataScheme()
			/// 	</see>
			/// .
			/// <p><em>Note: scheme matching in the Android framework is
			/// case-sensitive, unlike the formal RFC.  As a result,
			/// schemes here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scheme">android.R.attr.scheme</see>
			/// .
			/// </attr>
			/// <attr>name android:scheme</attr>
			public const int AndroidManifestData_scheme = 1;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>grant-uri-permission</code> tag, a child of the
			/// <see cref="AndroidManifestProvider">provider</see>
			/// tag, describing a specific
			/// URI path that can be granted as a permission.  This tag can be
			/// specified multiple time to supply multiple paths.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestGrantUriPermission_path">android:path</see>
			/// </code></td><td> Specify a URI path that must exactly match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestGrantUriPermission_pathPattern">android:pathPattern</see>
			/// </code></td><td> Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestGrantUriPermission_pathPrefix">android:pathPrefix</see>
			/// </code></td><td> Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestGrantUriPermission_path">AndroidManifestGrantUriPermission_path
			/// 	</seealso>
			/// <seealso cref="AndroidManifestGrantUriPermission_pathPattern">AndroidManifestGrantUriPermission_pathPattern
			/// 	</seealso>
			/// <seealso cref="AndroidManifestGrantUriPermission_pathPrefix">AndroidManifestGrantUriPermission_pathPrefix
			/// 	</seealso>
			public static readonly int[] AndroidManifestGrantUriPermission = new int[] { unchecked(
				(int)(0x0101002a)), unchecked((int)(0x0101002b)), unchecked((int)(0x0101002c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that must exactly match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.path">android.R.attr.path</see>
			/// .
			/// </attr>
			/// <attr>name android:path</attr>
			public const int AndroidManifestGrantUriPermission_path = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .
			/// Note that because '\' is used as an escape character when
			/// reading the string from XML (before it is parsed as a pattern),
			/// you will need to double-escape: for example a literal "*" would
			/// be written as "\\*" and a literal "\" would be written as
			/// "\\\\".  This is basically the same as what you would need to
			/// write if constructing the string in Java code.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.pathPattern">android.R.attr.pathPattern</see>
			/// .
			/// </attr>
			/// <attr>name android:pathPattern</attr>
			public const int AndroidManifestGrantUriPermission_pathPattern = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.pathPrefix">android.R.attr.pathPrefix</see>
			/// .
			/// </attr>
			/// <attr>name android:pathPrefix</attr>
			public const int AndroidManifestGrantUriPermission_pathPrefix = 1;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>instrumentation</code> tag, a child of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_functionalTest">android:functionalTest</see>
			/// </code></td><td> Flag indicating that an Instrumentation class should be run as a
			/// functional test.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_handleProfiling">android:handleProfiling
			/// 	</see>
			/// </code></td><td> Flag indicating that an Instrumentation class wants to take care
			/// of starting/stopping profiling itself, rather than relying on
			/// the default behavior of profiling the complete time it is running.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_name">android:name</see>
			/// </code></td><td> Required name of the class implementing the instrumentation, deriving from
			/// <see cref="android.app.Instrumentation">android.app.Instrumentation</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestInstrumentation_targetPackage">android:targetPackage</see>
			/// </code></td><td> The name of the application package that an Instrumentation object
			/// will run against.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestInstrumentation_functionalTest">AndroidManifestInstrumentation_functionalTest
			/// 	</seealso>
			/// <seealso cref="AndroidManifestInstrumentation_handleProfiling">AndroidManifestInstrumentation_handleProfiling
			/// 	</seealso>
			/// <seealso cref="AndroidManifestInstrumentation_icon">AndroidManifestInstrumentation_icon
			/// 	</seealso>
			/// <seealso cref="AndroidManifestInstrumentation_label">AndroidManifestInstrumentation_label
			/// 	</seealso>
			/// <seealso cref="AndroidManifestInstrumentation_logo">AndroidManifestInstrumentation_logo
			/// 	</seealso>
			/// <seealso cref="AndroidManifestInstrumentation_name">AndroidManifestInstrumentation_name
			/// 	</seealso>
			/// <seealso cref="AndroidManifestInstrumentation_targetPackage">AndroidManifestInstrumentation_targetPackage
			/// 	</seealso>
			public static readonly int[] AndroidManifestInstrumentation = new int[] { unchecked(
				(int)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), 
				unchecked((int)(0x01010021)), unchecked((int)(0x01010022)), unchecked((int)(0x01010023
				)), unchecked((int)(0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that an Instrumentation class should be run as a
			/// functional test.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.functionalTest">android.R.attr.functionalTest</see>
			/// .
			/// </attr>
			/// <attr>name android:functionalTest</attr>
			public const int AndroidManifestInstrumentation_functionalTest = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that an Instrumentation class wants to take care
			/// of starting/stopping profiling itself, rather than relying on
			/// the default behavior of profiling the complete time it is running.
			/// This allows it to target profiling data at a specific set of
			/// operations.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.handleProfiling">android.R.attr.handleProfiling</see>
			/// .
			/// </attr>
			/// <attr>name android:handleProfiling</attr>
			public const int AndroidManifestInstrumentation_handleProfiling = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestInstrumentation_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestInstrumentation_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestInstrumentation_logo = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the class implementing the instrumentation, deriving from
			/// <see cref="android.app.Instrumentation">android.app.Instrumentation</see>
			/// .  This is a fully
			/// qualified class name (for example, com.mycompany.myapp.MyActivity); as a
			/// short-hand if the first character of the class
			/// is a period then it is appended to your package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestInstrumentation_name = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the application package that an Instrumentation object
			/// will run against.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.targetPackage">android.R.attr.targetPackage</see>
			/// .
			/// </attr>
			/// <attr>name android:targetPackage</attr>
			public const int AndroidManifestInstrumentation_targetPackage = 3;

			/// <summary>
			/// The <code>intent-filter</code> tag is used to construct an
			/// <see cref="android.content.IntentFilter">android.content.IntentFilter</see>
			/// object that will be used
			/// to determine which component can handle a particular
			/// <see cref="android.content.Intent">android.content.Intent</see>
			/// that has been given to the system.
			/// It can be used as a child of the
			/// <see cref="AndroidManifestActivity">activity</see>
			/// ,
			/// <see cref="AndroidManifestReceiver">receiver</see>
			/// and
			/// <see cref="AndroidManifestService">service</see>
			/// tags.
			/// <p> Zero or more
			/// <see cref="AndroidManifestAction">action</see>
			/// ,
			/// <see cref="AndroidManifestCategory">category</see>
			/// , and/or
			/// <see cref="AndroidManifestData">data</see>
			/// tags should be
			/// included inside to describe the contents of the filter.
			/// <p> The optional label and icon attributes here are used with
			/// an activity to supply an alternative description of that activity
			/// when it is being started through an Intent matching this filter.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestIntentFilter_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestIntentFilter_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestIntentFilter_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestIntentFilter_priority">android:priority</see>
			/// </code></td><td> Specify the relative importance or ability in handling a particular
			/// Intent.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestIntentFilter_icon">AndroidManifestIntentFilter_icon
			/// 	</seealso>
			/// <seealso cref="AndroidManifestIntentFilter_label">AndroidManifestIntentFilter_label
			/// 	</seealso>
			/// <seealso cref="AndroidManifestIntentFilter_logo">AndroidManifestIntentFilter_logo
			/// 	</seealso>
			/// <seealso cref="AndroidManifestIntentFilter_priority">AndroidManifestIntentFilter_priority
			/// 	</seealso>
			public static readonly int[] AndroidManifestIntentFilter = new int[] { unchecked(
				(int)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x0101001c)), 
				unchecked((int)(0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestIntentFilter_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestIntentFilter_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestIntentFilter_logo = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify the relative importance or ability in handling a particular
			/// Intent.  For receivers, this controls the order in which they are
			/// executed to receive a broadcast (note that for
			/// asynchronous broadcasts, this order is ignored).  For activities,
			/// this provides information about how good an activity is handling an
			/// Intent; when multiple activities match an intent and have different
			/// priorities, only those with the higher priority value will be
			/// considered a match.
			/// <p>Only use if you really need to impose some specific
			/// order in which the broadcasts are received, or want to forcibly
			/// place an activity to always be preferred over others.  The value is a
			/// single integer, with higher numbers considered to be better.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.priority">android.R.attr.priority</see>
			/// .
			/// </attr>
			/// <attr>name android:priority</attr>
			public const int AndroidManifestIntentFilter_priority = 2;

			/// <summary>
			/// The <code>meta-data</code> tag is used to attach additional
			/// arbitrary data to an application component.
			/// </summary>
			/// <remarks>
			/// The <code>meta-data</code> tag is used to attach additional
			/// arbitrary data to an application component.  The data can later
			/// be retrieved programmatically from the
			/// <see cref="android.content.pm.PackageItemInfo.metaData">ComponentInfo.metaData</see>
			/// field.  There is no meaning given to this
			/// data by the system.  You may supply the data through either the
			/// <code>value</code> or <code>resource</code> attribute; if both
			/// are given, then <code>resource</code> will be used.
			/// <p>It is highly recommended that you avoid supplying related data as
			/// multiple separate meta-data entries.  Instead, if you have complex
			/// data to associate with a component, then use the <code>resource</code>
			/// attribute to assign an XML resource that the client can parse to
			/// retrieve the complete data.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestMetaData_name">android:name</see>
			/// </code></td><td> A unique name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestMetaData_resource">android:resource</see>
			/// </code></td><td> Resource identifier to assign to this piece of named meta-data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestMetaData_value">android:value</see>
			/// </code></td><td> Concrete value to assign to this piece of named meta-data.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestMetaData_name">AndroidManifestMetaData_name</seealso>
			/// <seealso cref="AndroidManifestMetaData_resource">AndroidManifestMetaData_resource
			/// 	</seealso>
			/// <seealso cref="AndroidManifestMetaData_value">AndroidManifestMetaData_value</seealso>
			public static readonly int[] AndroidManifestMetaData = new int[] { unchecked((int
				)(0x01010003)), unchecked((int)(0x01010024)), unchecked((int)(0x01010025)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A unique name for the given item.  This must use a Java-style naming
			/// convention to ensure the name is unique, for example
			/// "com.mycompany.MyName".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestMetaData_name = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Resource identifier to assign to this piece of named meta-data.
			/// The resource identifier can later be retrieved from the meta data
			/// Bundle through
			/// <see cref="android.os.Bundle.getInt(string)">Bundle.getInt</see>
			/// .
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.resource">android.R.attr.resource</see>
			/// .
			/// </attr>
			/// <attr>name android:resource</attr>
			public const int AndroidManifestMetaData_resource = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Concrete value to assign to this piece of named meta-data.
			/// The data can later be retrieved from the meta data Bundle
			/// through
			/// <see cref="android.os.Bundle.getString(string)">Bundle.getString</see>
			/// ,
			/// <see cref="android.os.Bundle.getInt(string)">Bundle.getInt</see>
			/// ,
			/// <see cref="android.os.Bundle.getBoolean(string)">Bundle.getBoolean</see>
			/// ,
			/// or
			/// <see cref="android.os.Bundle.getFloat(string)">Bundle.getFloat</see>
			/// depending
			/// on the type used here.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.value">android.R.attr.value</see>
			/// .
			/// </attr>
			/// <attr>name android:value</attr>
			public const int AndroidManifestMetaData_value = 1;

			/// <summary>
			/// Private tag to declare the original package name that this package is
			/// based on.
			/// </summary>
			/// <remarks>
			/// Private tag to declare the original package name that this package is
			/// based on.  Only used for packages installed in the system image.  If
			/// given, and different than the actual package name, and the given
			/// original package was previously installed on the device but the new
			/// one was not, then the data for the old one will be renamed to be
			/// for the new package.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestOriginalPackage_name">android:name</see>
			/// </code></td><td> A unique name for the given item.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestOriginalPackage_name">AndroidManifestOriginalPackage_name
			/// 	</seealso>
			public static readonly int[] AndroidManifestOriginalPackage = new int[] { unchecked(
				(int)(0x01010003)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A unique name for the given item.  This must use a Java-style naming
			/// convention to ensure the name is unique, for example
			/// "com.mycompany.MyName".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestOriginalPackage_name = 0;

			/// <summary>Attributes relating to a package verifier.</summary>
			/// <remarks>
			/// Attributes relating to a package verifier.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPackageVerifier_name">android:name</see>
			/// </code></td><td> Specifies the Java-style package name that defines this
			/// package verifier.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPackageVerifier_publicKey">android:publicKey</see>
			/// </code></td><td> The Base64 encoded public key of the package verifier's
			/// signature.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestPackageVerifier_name">AndroidManifestPackageVerifier_name
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPackageVerifier_publicKey">AndroidManifestPackageVerifier_publicKey
			/// 	</seealso>
			public static readonly int[] AndroidManifestPackageVerifier = new int[] { unchecked(
				(int)(0x01010003)), unchecked((int)(0x010103a6)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the Java-style package name that defines this
			/// package verifier.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestPackageVerifier_name = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The Base64 encoded public key of the package verifier's
			/// signature.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.publicKey">android.R.attr.publicKey</see>
			/// .
			/// </attr>
			/// <attr>name android:publicKey</attr>
			public const int AndroidManifestPackageVerifier_publicKey = 1;

			/// <summary>
			/// Attributes that can be supplied in an AndroidManifest.xml
			/// <code>path-permission</code> tag, a child of the
			/// <see cref="AndroidManifestProvider">provider</see>
			/// tag, describing a permission
			/// that allows access to a specific path in the provider.  This tag can be
			/// specified multiple time to supply multiple paths.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPathPermission_path">android:path</see>
			/// </code></td><td> Specify a URI path that must exactly match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPathPermission_pathPattern">android:pathPattern</see>
			/// </code></td><td> Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPathPermission_pathPrefix">android:pathPrefix</see>
			/// </code></td><td> Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPathPermission_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPathPermission_readPermission">android:readPermission</see>
			/// </code></td><td> A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for read-only
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPathPermission_writePermission">android:writePermission
			/// 	</see>
			/// </code></td><td> A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for write
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestPathPermission_path">AndroidManifestPathPermission_path
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPathPermission_pathPattern">AndroidManifestPathPermission_pathPattern
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPathPermission_pathPrefix">AndroidManifestPathPermission_pathPrefix
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPathPermission_permission">AndroidManifestPathPermission_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPathPermission_readPermission">AndroidManifestPathPermission_readPermission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPathPermission_writePermission">AndroidManifestPathPermission_writePermission
			/// 	</seealso>
			public static readonly int[] AndroidManifestPathPermission = new int[] { unchecked(
				(int)(0x01010006)), unchecked((int)(0x01010007)), unchecked((int)(0x01010008)), 
				unchecked((int)(0x0101002a)), unchecked((int)(0x0101002b)), unchecked((int)(0x0101002c
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that must exactly match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_LITERAL">android.os.PatternMatcher.PATTERN_LITERAL
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.path">android.R.attr.path</see>
			/// .
			/// </attr>
			/// <attr>name android:path</attr>
			public const int AndroidManifestPathPermission_path = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that matches a simple pattern, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_SIMPLE_GLOB">android.os.PatternMatcher.PATTERN_SIMPLE_GLOB
			/// 	</see>
			/// .
			/// Note that because '\' is used as an escape character when
			/// reading the string from XML (before it is parsed as a pattern),
			/// you will need to double-escape: for example a literal "*" would
			/// be written as "\\*" and a literal "\" would be written as
			/// "\\\\".  This is basically the same as what you would need to
			/// write if constructing the string in Java code.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.pathPattern">android.R.attr.pathPattern</see>
			/// .
			/// </attr>
			/// <attr>name android:pathPattern</attr>
			public const int AndroidManifestPathPermission_pathPattern = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a URI path that must be a prefix to match, as per
			/// <see cref="android.os.PatternMatcher">android.os.PatternMatcher</see>
			/// with
			/// <see cref="android.os.PatternMatcher.PATTERN_PREFIX">android.os.PatternMatcher.PATTERN_PREFIX
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.pathPrefix">android.R.attr.pathPrefix</see>
			/// .
			/// </attr>
			/// <attr>name android:pathPrefix</attr>
			public const int AndroidManifestPathPermission_pathPrefix = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestPathPermission_permission = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for read-only
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.readPermission">android.R.attr.readPermission</see>
			/// .
			/// </attr>
			/// <attr>name android:readPermission</attr>
			public const int AndroidManifestPathPermission_readPermission = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for write
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.writePermission">android.R.attr.writePermission</see>
			/// .
			/// </attr>
			/// <attr>name android:writePermission</attr>
			public const int AndroidManifestPathPermission_writePermission = 2;

			/// <summary>
			/// The <code>permission</code> tag declares a security permission that can be
			/// used to control access from other packages to specific components or
			/// features in your package (or other packages).
			/// </summary>
			/// <remarks>
			/// The <code>permission</code> tag declares a security permission that can be
			/// used to control access from other packages to specific components or
			/// features in your package (or other packages).  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_name">android:name</see>
			/// </code></td><td> Required public name of the permission, which other components and
			/// packages will use when referring to this permission.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_permissionGroup">android:permissionGroup</see>
			/// </code></td><td> Specified the name of a group that this permission is associated
			/// with.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermission_protectionLevel">android:protectionLevel</see>
			/// </code></td><td> Characterizes the potential risk implied in a permission and
			/// indicates the procedure the system should follow when determining
			/// whether to grant the permission to an application requesting it.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestPermission_description">AndroidManifestPermission_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermission_icon">AndroidManifestPermission_icon</seealso>
			/// <seealso cref="AndroidManifestPermission_label">AndroidManifestPermission_label</seealso>
			/// <seealso cref="AndroidManifestPermission_logo">AndroidManifestPermission_logo</seealso>
			/// <seealso cref="AndroidManifestPermission_name">AndroidManifestPermission_name</seealso>
			/// <seealso cref="AndroidManifestPermission_permissionGroup">AndroidManifestPermission_permissionGroup
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermission_protectionLevel">AndroidManifestPermission_protectionLevel
			/// 	</seealso>
			public static readonly int[] AndroidManifestPermission = new int[] { unchecked((int
				)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), unchecked(
				(int)(0x01010009)), unchecked((int)(0x0101000a)), unchecked((int)(0x01010020)), 
				unchecked((int)(0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestPermission_description = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestPermission_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestPermission_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestPermission_logo = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required public name of the permission, which other components and
			/// packages will use when referring to this permission.  This is a string using
			/// Java-style scoping to ensure it is unique.  The prefix will often
			/// be the same as our overall package name, for example
			/// "com.mycompany.android.myapp.SomePermission".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestPermission_name = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specified the name of a group that this permission is associated
			/// with.  The group must have been defined with the
			/// <see cref="android.R.styleable.AndroidManifestPermissionGroup">permission-group</see>
			/// tag.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permissionGroup">android.R.attr.permissionGroup</see>
			/// .
			/// </attr>
			/// <attr>name android:permissionGroup</attr>
			public const int AndroidManifestPermission_permissionGroup = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Characterizes the potential risk implied in a permission and
			/// indicates the procedure the system should follow when determining
			/// whether to grant the permission to an application requesting it.
			/// <see cref="android.Manifest.permission">Standard permissions</see>
			/// have a predefined and
			/// permanent protectionLevel. If you are creating a custom permission in an
			/// application, you can define a protectionLevel attribute with one of the
			/// values listed below. If no protectionLevel is defined for a custom
			/// permission, the system assigns the default ("normal").
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> A lower-risk permission that gives an application access to isolated
			/// application-level features, with minimal risk to other applications,
			/// the system, or the user. The system automatically grants this type
			/// of permission to a requesting application at installation, without
			/// asking for the user's explicit approval (though the user always
			/// has the option to review these permissions before installing). </td></tr>
			/// <tr><td><code>dangerous</code></td><td>1</td><td> A higher-risk permission that would give a requesting application
			/// access to private user data or control over the device that can
			/// negatively impact the user.  Because this type of permission
			/// introduces potential risk, the system may not automatically
			/// grant it to the requesting application.  For example, any dangerous
			/// permissions requested by an application may be displayed to the
			/// user and require confirmation before proceeding, or some other
			/// approach may be taken to avoid the user automatically allowing
			/// the use of such facilities.  </td></tr>
			/// <tr><td><code>signature</code></td><td>2</td><td> A permission that the system is to grant only if the requesting
			/// application is signed with the same certificate as the application
			/// that declared the permission. If the certificates match, the system
			/// automatically grants the permission without notifying the user or
			/// asking for the user's explicit approval. </td></tr>
			/// <tr><td><code>signatureOrSystem</code></td><td>3</td><td> A permission that the system is to grant only to packages in the
			/// Android system image <em>or</em> that are signed with the same
			/// certificates. Please avoid using this option, as the
			/// signature protection level should be sufficient for most needs and
			/// works regardless of exactly where applications are installed.  This
			/// permission is used for certain special situations where multiple
			/// vendors have applications built in to a system image which need
			/// to share specific features explicitly because they are being built
			/// together. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.protectionLevel">android.R.attr.protectionLevel</see>
			/// .
			/// </attr>
			/// <attr>name android:protectionLevel</attr>
			public const int AndroidManifestPermission_protectionLevel = 3;

			/// <summary>
			/// The <code>permission-group</code> tag declares a logical grouping of
			/// related permissions.
			/// </summary>
			/// <remarks>
			/// The <code>permission-group</code> tag declares a logical grouping of
			/// related permissions.
			/// <p>Note that this tag does not declare a permission itself, only
			/// a namespace in which further permissions can be placed.  See
			/// the
			/// <see cref="AndroidManifestPermission">&lt;permission&gt;</see>
			/// tag for
			/// more information.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionGroup_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionGroup_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionGroup_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionGroup_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionGroup_name">android:name</see>
			/// </code></td><td> Required public name of the permission group, permissions will use
			/// to specify the group they are in.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestPermissionGroup_description">AndroidManifestPermissionGroup_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionGroup_icon">AndroidManifestPermissionGroup_icon
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionGroup_label">AndroidManifestPermissionGroup_label
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionGroup_logo">AndroidManifestPermissionGroup_logo
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionGroup_name">AndroidManifestPermissionGroup_name
			/// 	</seealso>
			public static readonly int[] AndroidManifestPermissionGroup = new int[] { unchecked(
				(int)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), 
				unchecked((int)(0x01010020)), unchecked((int)(0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestPermissionGroup_description = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestPermissionGroup_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestPermissionGroup_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestPermissionGroup_logo = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required public name of the permission group, permissions will use
			/// to specify the group they are in.  This is a string using
			/// Java-style scoping to ensure it is unique.  The prefix will often
			/// be the same as our overall package name, for example
			/// "com.mycompany.android.myapp.SomePermission".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestPermissionGroup_name = 2;

			/// <summary>
			/// The <code>permission-tree</code> tag declares the base of a tree of
			/// permission values: it declares that this package has ownership of
			/// the given permission name, as well as all names underneath it
			/// (separated by '.').
			/// </summary>
			/// <remarks>
			/// The <code>permission-tree</code> tag declares the base of a tree of
			/// permission values: it declares that this package has ownership of
			/// the given permission name, as well as all names underneath it
			/// (separated by '.').  This allows you to use the
			/// <see cref="android.content.pm.PackageManager.addPermission(android.content.pm.PermissionInfo)
			/// 	">PackageManager.addPermission()</see>
			/// method to dynamically add new
			/// permissions under this tree.
			/// <p>Note that this tag does not declare a permission itself, only
			/// a namespace in which further permissions can be placed.  See
			/// the
			/// <see cref="AndroidManifestPermission">&lt;permission&gt;</see>
			/// tag for
			/// more information.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionTree_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionTree_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionTree_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestPermissionTree_name">android:name</see>
			/// </code></td><td> Required public name of the permission tree, which is the base name
			/// of all permissions under it.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestPermissionTree_icon">AndroidManifestPermissionTree_icon
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionTree_label">AndroidManifestPermissionTree_label
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionTree_logo">AndroidManifestPermissionTree_logo
			/// 	</seealso>
			/// <seealso cref="AndroidManifestPermissionTree_name">AndroidManifestPermissionTree_name
			/// 	</seealso>
			public static readonly int[] AndroidManifestPermissionTree = new int[] { unchecked(
				(int)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), 
				unchecked((int)(0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestPermissionTree_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestPermissionTree_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestPermissionTree_logo = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required public name of the permission tree, which is the base name
			/// of all permissions under it.  This is a string using
			/// Java-style scoping to ensure it is unique.  The prefix will often
			/// be the same as our overall package name, for example
			/// "com.mycompany.android.myapp.SomePermission".  A permission tree name
			/// must have more than two segments in its path; that is,
			/// "com.me.foo" is okay, but not "com.me" or "com".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestPermissionTree_name = 2;

			/// <summary>Private tag to declare system protected broadcast actions.</summary>
			/// <remarks>
			/// Private tag to declare system protected broadcast actions.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProtectedBroadcast_name">android:name</see>
			/// </code></td><td> A unique name for the given item.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestProtectedBroadcast_name">AndroidManifestProtectedBroadcast_name
			/// 	</seealso>
			public static readonly int[] AndroidManifestProtectedBroadcast = new int[] { unchecked(
				(int)(0x01010003)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A unique name for the given item.  This must use a Java-style naming
			/// convention to ensure the name is unique, for example
			/// "com.mycompany.MyName".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestProtectedBroadcast_name = 0;

			/// <summary>
			/// The <code>provider</code> tag declares a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// class that is available
			/// as part of the package's application components, supplying structured
			/// access to data managed by the application.
			/// <p>This appears as a child tag of the
			/// <see cref="AndroidManifestApplication">application</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_authorities">android:authorities</see>
			/// </code></td><td> Specify the authorities under which this content provider can be
			/// found.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_enabled">android:enabled</see>
			/// </code></td><td> Specify whether this provider is enabled or not (that is, can be instantiated by the system).</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_exported">android:exported</see>
			/// </code></td><td> Flag indicating whether the given application component is available
			/// to other applications.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_grantUriPermissions">android:grantUriPermissions
			/// 	</see>
			/// </code></td><td> If true, the
			/// <see cref="android.content.Context.grantUriPermission(string, System.Uri, int)">Context.grantUriPermission
			/// 	</see>
			/// or corresponding Intent flags can
			/// be used to allow others to access specific URIs in the content
			/// provider, even if they do not have an explicit read or write
			/// permission.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_initOrder">android:initOrder</see>
			/// </code></td><td> Specify the order in which content providers hosted by a process
			/// are instantiated when that process is created.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_multiprocess">android:multiprocess</see>
			/// </code></td><td> Specify whether a component is allowed to have multiple instances
			/// of itself running in different processes.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_name">android:name</see>
			/// </code></td><td> Required name of the class implementing the provider, deriving from
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_process">android:process</see>
			/// </code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_readPermission">android:readPermission</see>
			/// </code></td><td> A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for read-only
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_syncable">android:syncable</see>
			/// </code></td><td> Flag indicating whether this content provider would like to
			/// participate in data synchronization.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestProvider_writePermission">android:writePermission</see>
			/// </code></td><td> A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for write
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestProvider_authorities">AndroidManifestProvider_authorities
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_description">AndroidManifestProvider_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_enabled">AndroidManifestProvider_enabled</seealso>
			/// <seealso cref="AndroidManifestProvider_exported">AndroidManifestProvider_exported
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_grantUriPermissions">AndroidManifestProvider_grantUriPermissions
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_icon">AndroidManifestProvider_icon</seealso>
			/// <seealso cref="AndroidManifestProvider_initOrder">AndroidManifestProvider_initOrder
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_label">AndroidManifestProvider_label</seealso>
			/// <seealso cref="AndroidManifestProvider_logo">AndroidManifestProvider_logo</seealso>
			/// <seealso cref="AndroidManifestProvider_multiprocess">AndroidManifestProvider_multiprocess
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_name">AndroidManifestProvider_name</seealso>
			/// <seealso cref="AndroidManifestProvider_permission">AndroidManifestProvider_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_process">AndroidManifestProvider_process</seealso>
			/// <seealso cref="AndroidManifestProvider_readPermission">AndroidManifestProvider_readPermission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_syncable">AndroidManifestProvider_syncable
			/// 	</seealso>
			/// <seealso cref="AndroidManifestProvider_writePermission">AndroidManifestProvider_writePermission
			/// 	</seealso>
			public static readonly int[] AndroidManifestProvider = new int[] { unchecked((int
				)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), unchecked(
				(int)(0x01010006)), unchecked((int)(0x01010007)), unchecked((int)(0x01010008)), 
				unchecked((int)(0x0101000e)), unchecked((int)(0x01010010)), unchecked((int)(0x01010011
				)), unchecked((int)(0x01010013)), unchecked((int)(0x01010018)), unchecked((int)(
				0x01010019)), unchecked((int)(0x0101001a)), unchecked((int)(0x0101001b)), unchecked(
				(int)(0x01010020)), unchecked((int)(0x010102be)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify the authorities under which this content provider can be
			/// found.  Multiple authorities may be supplied by separating them
			/// with a semicolon.  Authority names should use a Java-style naming
			/// convention (such as <code>com.google.provider.MyProvider</code>)
			/// in order to avoid conflicts.  Typically this name is the same
			/// as the class implementation describing the provider's data structure.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.authorities">android.R.attr.authorities</see>
			/// .
			/// </attr>
			/// <attr>name android:authorities</attr>
			public const int AndroidManifestProvider_authorities = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestProvider_description = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether this provider is enabled or not (that is, can be instantiated by the system).
			/// It can also be specified for an application as a whole, in which case a value of "false"
			/// will override any component specific values (a value of "true" will not override the
			/// component specific values).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int AndroidManifestProvider_enabled = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the given application component is available
			/// to other applications.  If false, it can only be accessed by
			/// applications with its same user id (which usually means only by
			/// code in its own package).  If true, it can be invoked by external
			/// entities, though which ones can do so may be controlled through
			/// permissions.  The default value is false for activity, receiver,
			/// and service components that do not specify any intent filters; it
			/// is true for activity, receiver, and service components that do
			/// have intent filters (implying they expect to be invoked by others
			/// who do not know their particular component name) and for all
			/// content providers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.exported">android.R.attr.exported</see>
			/// .
			/// </attr>
			/// <attr>name android:exported</attr>
			public const int AndroidManifestProvider_exported = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, the
			/// <see cref="android.content.Context.grantUriPermission(string, System.Uri, int)">Context.grantUriPermission
			/// 	</see>
			/// or corresponding Intent flags can
			/// be used to allow others to access specific URIs in the content
			/// provider, even if they do not have an explicit read or write
			/// permission.  If you are supporting this feature, you must be
			/// sure to call
			/// <see cref="android.content.Context.revokeUriPermission(System.Uri, int)">Context.revokeUriPermission
			/// 	</see>
			/// when URIs are deleted from your
			/// provider.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.grantUriPermissions">android.R.attr.grantUriPermissions
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:grantUriPermissions</attr>
			public const int AndroidManifestProvider_grantUriPermissions = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestProvider_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify the order in which content providers hosted by a process
			/// are instantiated when that process is created.  Not needed unless
			/// you have providers with dependencies between each other, to make
			/// sure that they are created in the order needed by those dependencies.
			/// The value is a simple integer, with higher numbers being
			/// initialized first.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.initOrder">android.R.attr.initOrder</see>
			/// .
			/// </attr>
			/// <attr>name android:initOrder</attr>
			public const int AndroidManifestProvider_initOrder = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestProvider_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestProvider_logo = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether a component is allowed to have multiple instances
			/// of itself running in different processes.  Use with the activity
			/// and provider tags.
			/// <p>Normally the system will ensure that all instances of a particular
			/// component are only running in a single process.  You can use this
			/// attribute to disable that behavior, allowing the system to create
			/// instances wherever they are used (provided permissions allow it).
			/// This is most often used with content providers, so that instances
			/// of a provider can be created in each client process, allowing them
			/// to be used without performing IPC.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.multiprocess">android.R.attr.multiprocess</see>
			/// .
			/// </attr>
			/// <attr>name android:multiprocess</attr>
			public const int AndroidManifestProvider_multiprocess = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the class implementing the provider, deriving from
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  This is a fully
			/// qualified class name (for example, com.mycompany.myapp.MyProvider); as a
			/// short-hand if the first character of the class
			/// is a period then it is appended to your package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestProvider_name = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestProvider_permission = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a specific process that the associated code is to run in.
			/// Use with the application tag (to supply a default process for all
			/// application components), or with the activity, receiver, service,
			/// or provider tag (to supply a specific icon for that component).
			/// <p>Application components are normally run in a single process that
			/// is created for the entire application.  You can use this tag to modify
			/// where they run.  If the process name begins with a ':' character,
			/// a new process private to that application will be created when needed
			/// to run that component (allowing you to spread your application across
			/// multiple processes).  If the process name begins with a lower-case
			/// character, the component will be run in a global process of that name,
			/// provided that you have permission to do so, allowing multiple
			/// applications to share one process to reduce resource usage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.process">android.R.attr.process</see>
			/// .
			/// </attr>
			/// <attr>name android:process</attr>
			public const int AndroidManifestProvider_process = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for read-only
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.readPermission">android.R.attr.readPermission</see>
			/// .
			/// </attr>
			/// <attr>name android:readPermission</attr>
			public const int AndroidManifestProvider_readPermission = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this content provider would like to
			/// participate in data synchronization.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.syncable">android.R.attr.syncable</see>
			/// .
			/// </attr>
			/// <attr>name android:syncable</attr>
			public const int AndroidManifestProvider_syncable = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A specific
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// name for write
			/// access to a
			/// <see cref="android.content.ContentProvider">android.content.ContentProvider</see>
			/// .  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.writePermission">android.R.attr.writePermission</see>
			/// .
			/// </attr>
			/// <attr>name android:writePermission</attr>
			public const int AndroidManifestProvider_writePermission = 5;

			/// <summary>
			/// The <code>receiver</code> tag declares an
			/// <see cref="android.content.BroadcastReceiver">android.content.BroadcastReceiver</see>
			/// class that is available
			/// as part of the package's application components, allowing the
			/// application to receive actions or data broadcast by other
			/// applications even if it is not currently running.
			/// <p>Zero or more
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tags can be included inside of a receiver, to specify the Intents
			/// it will receive.  If none are specified, the receiver will only
			/// be run when an Intent is broadcast that is directed at its specific
			/// class name.  The receiver tag appears as a child tag of the
			/// <see cref="AndroidManifestApplication">application</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_enabled">android:enabled</see>
			/// </code></td><td> Specify whether the receiver is enabled or not (that is, can be instantiated by the system).</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_exported">android:exported</see>
			/// </code></td><td> Flag indicating whether the given application component is available
			/// to other applications.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_name">android:name</see>
			/// </code></td><td> Required name of the class implementing the receiver, deriving from
			/// <see cref="android.content.BroadcastReceiver">android.content.BroadcastReceiver</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestReceiver_process">android:process</see>
			/// </code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestReceiver_description">AndroidManifestReceiver_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestReceiver_enabled">AndroidManifestReceiver_enabled</seealso>
			/// <seealso cref="AndroidManifestReceiver_exported">AndroidManifestReceiver_exported
			/// 	</seealso>
			/// <seealso cref="AndroidManifestReceiver_icon">AndroidManifestReceiver_icon</seealso>
			/// <seealso cref="AndroidManifestReceiver_label">AndroidManifestReceiver_label</seealso>
			/// <seealso cref="AndroidManifestReceiver_logo">AndroidManifestReceiver_logo</seealso>
			/// <seealso cref="AndroidManifestReceiver_name">AndroidManifestReceiver_name</seealso>
			/// <seealso cref="AndroidManifestReceiver_permission">AndroidManifestReceiver_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestReceiver_process">AndroidManifestReceiver_process</seealso>
			public static readonly int[] AndroidManifestReceiver = new int[] { unchecked((int
				)(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), unchecked(
				(int)(0x01010006)), unchecked((int)(0x0101000e)), unchecked((int)(0x01010010)), 
				unchecked((int)(0x01010011)), unchecked((int)(0x01010020)), unchecked((int)(0x010102be
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestReceiver_description = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether the receiver is enabled or not (that is, can be instantiated by the system).
			/// It can also be specified for an application as a whole, in which case a value of "false"
			/// will override any component specific values (a value of "true" will not override the
			/// component specific values).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int AndroidManifestReceiver_enabled = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the given application component is available
			/// to other applications.  If false, it can only be accessed by
			/// applications with its same user id (which usually means only by
			/// code in its own package).  If true, it can be invoked by external
			/// entities, though which ones can do so may be controlled through
			/// permissions.  The default value is false for activity, receiver,
			/// and service components that do not specify any intent filters; it
			/// is true for activity, receiver, and service components that do
			/// have intent filters (implying they expect to be invoked by others
			/// who do not know their particular component name) and for all
			/// content providers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.exported">android.R.attr.exported</see>
			/// .
			/// </attr>
			/// <attr>name android:exported</attr>
			public const int AndroidManifestReceiver_exported = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestReceiver_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestReceiver_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestReceiver_logo = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the class implementing the receiver, deriving from
			/// <see cref="android.content.BroadcastReceiver">android.content.BroadcastReceiver</see>
			/// .  This is a fully
			/// qualified class name (for example, com.mycompany.myapp.MyReceiver); as a
			/// short-hand if the first character of the class
			/// is a period then it is appended to your package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestReceiver_name = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestReceiver_permission = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a specific process that the associated code is to run in.
			/// Use with the application tag (to supply a default process for all
			/// application components), or with the activity, receiver, service,
			/// or provider tag (to supply a specific icon for that component).
			/// <p>Application components are normally run in a single process that
			/// is created for the entire application.  You can use this tag to modify
			/// where they run.  If the process name begins with a ':' character,
			/// a new process private to that application will be created when needed
			/// to run that component (allowing you to spread your application across
			/// multiple processes).  If the process name begins with a lower-case
			/// character, the component will be run in a global process of that name,
			/// provided that you have permission to do so, allowing multiple
			/// applications to share one process to reduce resource usage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.process">android.R.attr.process</see>
			/// .
			/// </attr>
			/// <attr>name android:process</attr>
			public const int AndroidManifestReceiver_process = 6;

			/// <summary>
			/// The <code>service</code> tag declares a
			/// <see cref="android.app.Service">android.app.Service</see>
			/// class that is available
			/// as part of the package's application components, implementing
			/// long-running background operations or a rich communication API
			/// that can be called by other packages.
			/// <p>Zero or more
			/// <see cref="AndroidManifestIntentFilter">intent-filter</see>
			/// tags can be included inside of a service, to specify the Intents
			/// that can connect with it.  If none are specified, the service can
			/// only be accessed by direct specification of its class name.
			/// The service tag appears as a child tag of the
			/// <see cref="AndroidManifestApplication">application</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_description">android:description</see>
			/// </code></td><td> Descriptive text for the associated data.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_enabled">android:enabled</see>
			/// </code></td><td> Specify whether the service is enabled or not (that is, can be instantiated by the system).</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_exported">android:exported</see>
			/// </code></td><td> Flag indicating whether the given application component is available
			/// to other applications.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_label">android:label</see>
			/// </code></td><td> A user-legible name for the given item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_logo">android:logo</see>
			/// </code></td><td> A Drawable resource providing an extended graphical logo for its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_name">android:name</see>
			/// </code></td><td> Required name of the class implementing the service, deriving from
			/// <see cref="android.app.Service">android.app.Service</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_permission">android:permission</see>
			/// </code></td><td> Specify a permission that a client is required to have in order to
			/// use the associated object.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_process">android:process</see>
			/// </code></td><td> Specify a specific process that the associated code is to run in.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestService_stopWithTask">android:stopWithTask</see>
			/// </code></td><td> If set to true, this service with be automatically stopped
			/// when the user remove a task rooted in an activity owned by
			/// the application.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestService_description">AndroidManifestService_description
			/// 	</seealso>
			/// <seealso cref="AndroidManifestService_enabled">AndroidManifestService_enabled</seealso>
			/// <seealso cref="AndroidManifestService_exported">AndroidManifestService_exported</seealso>
			/// <seealso cref="AndroidManifestService_icon">AndroidManifestService_icon</seealso>
			/// <seealso cref="AndroidManifestService_label">AndroidManifestService_label</seealso>
			/// <seealso cref="AndroidManifestService_logo">AndroidManifestService_logo</seealso>
			/// <seealso cref="AndroidManifestService_name">AndroidManifestService_name</seealso>
			/// <seealso cref="AndroidManifestService_permission">AndroidManifestService_permission
			/// 	</seealso>
			/// <seealso cref="AndroidManifestService_process">AndroidManifestService_process</seealso>
			/// <seealso cref="AndroidManifestService_stopWithTask">AndroidManifestService_stopWithTask
			/// 	</seealso>
			public static readonly int[] AndroidManifestService = new int[] { unchecked((int)
				(0x01010001)), unchecked((int)(0x01010002)), unchecked((int)(0x01010003)), unchecked(
				(int)(0x01010006)), unchecked((int)(0x0101000e)), unchecked((int)(0x01010010)), 
				unchecked((int)(0x01010011)), unchecked((int)(0x01010020)), unchecked((int)(0x010102be
				)), unchecked((int)(0x0101036a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Descriptive text for the associated data.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int AndroidManifestService_description = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether the service is enabled or not (that is, can be instantiated by the system).
			/// It can also be specified for an application as a whole, in which case a value of "false"
			/// will override any component specific values (a value of "true" will not override the
			/// component specific values).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int AndroidManifestService_enabled = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether the given application component is available
			/// to other applications.  If false, it can only be accessed by
			/// applications with its same user id (which usually means only by
			/// code in its own package).  If true, it can be invoked by external
			/// entities, though which ones can do so may be controlled through
			/// permissions.  The default value is false for activity, receiver,
			/// and service components that do not specify any intent filters; it
			/// is true for activity, receiver, and service components that do
			/// have intent filters (implying they expect to be invoked by others
			/// who do not know their particular component name) and for all
			/// content providers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.exported">android.R.attr.exported</see>
			/// .
			/// </attr>
			/// <attr>name android:exported</attr>
			public const int AndroidManifestService_exported = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int AndroidManifestService_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A user-legible name for the given item.  Use with the
			/// application tag (to supply a default label for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific label for that component).  It may also be
			/// used with the intent-filter tag to supply a label to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given label will be used wherever the user sees information
			/// about its associated component; for example, as the name of a
			/// main activity that is displayed in the launcher.  You should
			/// generally set this to a reference to a string resource, so that
			/// it can be localized, however it is also allowed to supply a plain
			/// string for quick and dirty programming.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int AndroidManifestService_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing an extended graphical logo for its
			/// associated item. Use with the application tag (to supply a default
			/// logo for all application components), or with the activity, receiver,
			/// service, or instrumentation tag (to supply a specific logo for that
			/// component). It may also be used with the intent-filter tag to supply
			/// a logo to show to the user when an activity is being selected based
			/// on a particular Intent.
			/// <p>The given logo will be used to display to the user a graphical
			/// representation of its associated component; for example as the
			/// header in the Action Bar. The primary differences between an icon
			/// and a logo are that logos are often wider and more detailed, and are
			/// used without an accompanying text caption. This must be a reference
			/// to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.logo">android.R.attr.logo</see>
			/// .
			/// </attr>
			/// <attr>name android:logo</attr>
			public const int AndroidManifestService_logo = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the class implementing the service, deriving from
			/// <see cref="android.app.Service">android.app.Service</see>
			/// .  This is a fully
			/// qualified class name (for example, com.mycompany.myapp.MyService); as a
			/// short-hand if the first character of the class
			/// is a period then it is appended to your package name.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestService_name = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a permission that a client is required to have in order to
			/// use the associated object.  If the client does not hold the named
			/// permission, its request will fail.  See the
			/// &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.permission">android.R.attr.permission</see>
			/// .
			/// </attr>
			/// <attr>name android:permission</attr>
			public const int AndroidManifestService_permission = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a specific process that the associated code is to run in.
			/// Use with the application tag (to supply a default process for all
			/// application components), or with the activity, receiver, service,
			/// or provider tag (to supply a specific icon for that component).
			/// <p>Application components are normally run in a single process that
			/// is created for the entire application.  You can use this tag to modify
			/// where they run.  If the process name begins with a ':' character,
			/// a new process private to that application will be created when needed
			/// to run that component (allowing you to spread your application across
			/// multiple processes).  If the process name begins with a lower-case
			/// character, the component will be run in a global process of that name,
			/// provided that you have permission to do so, allowing multiple
			/// applications to share one process to reduce resource usage.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.process">android.R.attr.process</see>
			/// .
			/// </attr>
			/// <attr>name android:process</attr>
			public const int AndroidManifestService_process = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set to true, this service with be automatically stopped
			/// when the user remove a task rooted in an activity owned by
			/// the application.  The default is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.stopWithTask">android.R.attr.stopWithTask</see>
			/// .
			/// </attr>
			/// <attr>name android:stopWithTask</attr>
			public const int AndroidManifestService_stopWithTask = 9;

			/// <summary>
			/// The <code>supports-screens</code> specifies the screen dimensions an
			/// application supports.
			/// </summary>
			/// <remarks>
			/// The <code>supports-screens</code> specifies the screen dimensions an
			/// application supports.  By default a modern application supports all
			/// screen sizes and must explicitly disable certain screen sizes here;
			/// older applications are assumed to only support the traditional normal
			/// (HVGA) screen size.  Note that screen size is a separate axis from
			/// density, and is determined as the available pixels to an application
			/// after density scaling has been applied.
			/// <p>This appears as a child tag of the
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_anyDensity">android:anyDensity</see>
			/// </code></td><td> Indicates whether the application can accommodate any screen
			/// density.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_compatibleWidthLimitDp">android:compatibleWidthLimitDp
			/// 	</see>
			/// </code></td><td> Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the largest screens an application is
			/// compatible with.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_largeScreens">android:largeScreens</see>
			/// </code></td><td> Indicates whether the application supports larger screen form-factors.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_largestWidthLimitDp">android:largestWidthLimitDp
			/// 	</see>
			/// </code></td><td> Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the screens an application is
			/// compatible with.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_normalScreens">android:normalScreens</see>
			/// </code></td><td> Indicates whether an application supports the normal screen
			/// form-factors.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_requiresSmallestWidthDp">android:requiresSmallestWidthDp
			/// 	</see>
			/// </code></td><td> Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the minimum screen size an application is
			/// compatible with.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_resizeable">android:resizeable</see>
			/// </code></td><td> Indicates whether the application can resize itself to newer
			/// screen sizes.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_smallScreens">android:smallScreens</see>
			/// </code></td><td> Indicates whether the application supports smaller screen form-factors.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestSupportsScreens_xlargeScreens">android:xlargeScreens</see>
			/// </code></td><td> Indicates whether the application supports extra large screen form-factors.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestSupportsScreens_anyDensity">AndroidManifestSupportsScreens_anyDensity
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_compatibleWidthLimitDp">AndroidManifestSupportsScreens_compatibleWidthLimitDp
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_largeScreens">AndroidManifestSupportsScreens_largeScreens
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_largestWidthLimitDp">AndroidManifestSupportsScreens_largestWidthLimitDp
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_normalScreens">AndroidManifestSupportsScreens_normalScreens
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_requiresSmallestWidthDp">AndroidManifestSupportsScreens_requiresSmallestWidthDp
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_resizeable">AndroidManifestSupportsScreens_resizeable
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_smallScreens">AndroidManifestSupportsScreens_smallScreens
			/// 	</seealso>
			/// <seealso cref="AndroidManifestSupportsScreens_xlargeScreens">AndroidManifestSupportsScreens_xlargeScreens
			/// 	</seealso>
			public static readonly int[] AndroidManifestSupportsScreens = new int[] { unchecked(
				(int)(0x0101026c)), unchecked((int)(0x01010284)), unchecked((int)(0x01010285)), 
				unchecked((int)(0x01010286)), unchecked((int)(0x0101028d)), unchecked((int)(0x010102bf
				)), unchecked((int)(0x01010364)), unchecked((int)(0x01010365)), unchecked((int)(
				0x01010366)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the application can accommodate any screen
			/// density.  Older applications are assumed to not be able to,
			/// new ones able to.  You can explicitly supply your abilities
			/// here.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.anyDensity">android.R.attr.anyDensity</see>
			/// .
			/// </attr>
			/// <attr>name android:anyDensity</attr>
			public const int AndroidManifestSupportsScreens_anyDensity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the largest screens an application is
			/// compatible with.  This attribute provides the maximum
			/// "smallest screen width" (as per the -swNNNdp resource configuration)
			/// that the application is designed for.  If this value is smaller than
			/// the "smallest screen width" of the device it is running on, the user
			/// is offered to run it in a compatibility mode that emulates a
			/// smaller screen and zooms it to fit the screen. Currently the compatibility mode only
			/// emulates phone screens with a 320dp width, so compatibility mode is not applied if the
			/// value for compatibleWidthLimitDp is larger than 320.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.compatibleWidthLimitDp">android.R.attr.compatibleWidthLimitDp
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:compatibleWidthLimitDp</attr>
			public const int AndroidManifestSupportsScreens_compatibleWidthLimitDp = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the application supports larger screen form-factors.
			/// A large screen is defined as a screen that is significantly larger
			/// than a normal phone screen, and thus may require some special care
			/// on the application's part to make good use of it.  An example would
			/// be a VGA <em>normal density</em> screen, though even larger screens
			/// are certainly possible.  An application that does not support
			/// large screens will be placed as a postage stamp on such a
			/// screen, so that it retains the dimensions it was originally
			/// designed for.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.largeScreens">android.R.attr.largeScreens</see>
			/// .
			/// </attr>
			/// <attr>name android:largeScreens</attr>
			public const int AndroidManifestSupportsScreens_largeScreens = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the screens an application is
			/// compatible with.  This attribute provides the maximum
			/// "smallest screen width" (as per the -swNNNdp resource configuration)
			/// that the application can work well on.  If this value is smaller than
			/// the "smallest screen width" of the device it is running on, the
			/// application will be forced in to screen compatibility mode with
			/// no way for the user to turn it off. Currently the compatibility mode only
			/// emulates phone screens with a 320dp width, so compatibility mode is not applied if the
			/// value for largestWidthLimitDp is larger than 320.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.largestWidthLimitDp">android.R.attr.largestWidthLimitDp
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:largestWidthLimitDp</attr>
			public const int AndroidManifestSupportsScreens_largestWidthLimitDp = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether an application supports the normal screen
			/// form-factors.  Traditionally this is an HVGA normal density
			/// screen, but WQVGA low density and WVGA high density are also
			/// considered to be normal.  This attribute is true by default,
			/// and applications currently should leave it that way.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.normalScreens">android.R.attr.normalScreens</see>
			/// .
			/// </attr>
			/// <attr>name android:normalScreens</attr>
			public const int AndroidManifestSupportsScreens_normalScreens = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Starting with
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB_MR2">android.os.Build.VERSION_CODES.HONEYCOMB_MR2
			/// 	</see>
			/// ,
			/// this is the new way to specify the minimum screen size an application is
			/// compatible with.  This attribute provides the required minimum
			/// "smallest screen width" (as per the -swNNNdp resource configuration)
			/// that the application can run on.  For example, a typical phone
			/// screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
			/// smallest screen width of the device is below the value supplied here,
			/// then the application is considered incompatible with that device.
			/// If not supplied, then any old smallScreens, normalScreens, largeScreens,
			/// or xlargeScreens attributes will be used instead.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.requiresSmallestWidthDp">android.R.attr.requiresSmallestWidthDp
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:requiresSmallestWidthDp</attr>
			public const int AndroidManifestSupportsScreens_requiresSmallestWidthDp = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the application can resize itself to newer
			/// screen sizes.  This is mostly used to distinguish between old
			/// applications that may not be compatible with newly introduced
			/// screen sizes and newer applications that should be; it will be
			/// set for you automatically based on whether you are targeting
			/// a newer platform that supports more screens.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.resizeable">android.R.attr.resizeable</see>
			/// .
			/// </attr>
			/// <attr>name android:resizeable</attr>
			public const int AndroidManifestSupportsScreens_resizeable = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the application supports smaller screen form-factors.
			/// A small screen is defined as one with a smaller aspect ratio than
			/// the traditional HVGA screen; that is, for a portrait screen, less
			/// tall than an HVGA screen.  In practice, this means a QVGA low
			/// density or VGA high density screen.  An application that does
			/// not support small screens <em>will not be available</em> for
			/// small screen devices, since there is little the platform can do
			/// to make such an application work on a smaller screen.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.smallScreens">android.R.attr.smallScreens</see>
			/// .
			/// </attr>
			/// <attr>name android:smallScreens</attr>
			public const int AndroidManifestSupportsScreens_smallScreens = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the application supports extra large screen form-factors.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.xlargeScreens">android.R.attr.xlargeScreens</see>
			/// .
			/// </attr>
			/// <attr>name android:xlargeScreens</attr>
			public const int AndroidManifestSupportsScreens_xlargeScreens = 5;

			/// <summary>
			/// The <code>uses-configuration</code> tag specifies
			/// a specific hardware configuration value used by the application.
			/// </summary>
			/// <remarks>
			/// The <code>uses-configuration</code> tag specifies
			/// a specific hardware configuration value used by the application.
			/// For example an application might specify that it requires
			/// a physical keyboard or a particular navigation method like
			/// trackball. Multiple such attribute values can be specified by the
			/// application.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesConfiguration_reqFiveWayNav">android:reqFiveWayNav</see>
			/// </code></td><td> Application's requirement for five way navigation </td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesConfiguration_reqHardKeyboard">android:reqHardKeyboard
			/// 	</see>
			/// </code></td><td> Application's requirement for a hard keyboard </td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesConfiguration_reqKeyboardType">android:reqKeyboardType
			/// 	</see>
			/// </code></td><td> The input method preferred by an application.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesConfiguration_reqNavigation">android:reqNavigation</see>
			/// </code></td><td> The navigation device preferred by an application.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesConfiguration_reqTouchScreen">android:reqTouchScreen
			/// 	</see>
			/// </code></td><td> The type of touch screen used by an application.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestUsesConfiguration_reqFiveWayNav">AndroidManifestUsesConfiguration_reqFiveWayNav
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesConfiguration_reqHardKeyboard">AndroidManifestUsesConfiguration_reqHardKeyboard
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesConfiguration_reqKeyboardType">AndroidManifestUsesConfiguration_reqKeyboardType
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesConfiguration_reqNavigation">AndroidManifestUsesConfiguration_reqNavigation
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesConfiguration_reqTouchScreen">AndroidManifestUsesConfiguration_reqTouchScreen
			/// 	</seealso>
			public static readonly int[] AndroidManifestUsesConfiguration = new int[] { unchecked(
				(int)(0x01010227)), unchecked((int)(0x01010228)), unchecked((int)(0x01010229)), 
				unchecked((int)(0x0101022a)), unchecked((int)(0x01010232)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Application's requirement for five way navigation
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.reqFiveWayNav">android.R.attr.reqFiveWayNav</see>
			/// .
			/// </attr>
			/// <attr>name android:reqFiveWayNav</attr>
			public const int AndroidManifestUsesConfiguration_reqFiveWayNav = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Application's requirement for a hard keyboard
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.reqHardKeyboard">android.R.attr.reqHardKeyboard</see>
			/// .
			/// </attr>
			/// <attr>name android:reqHardKeyboard</attr>
			public const int AndroidManifestUsesConfiguration_reqHardKeyboard = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The input method preferred by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>undefined</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>nokeys</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>qwerty</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>twelvekey</code></td><td>3</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.reqKeyboardType">android.R.attr.reqKeyboardType</see>
			/// .
			/// </attr>
			/// <attr>name android:reqKeyboardType</attr>
			public const int AndroidManifestUsesConfiguration_reqKeyboardType = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The navigation device preferred by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>undefined</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>nonav</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>dpad</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>trackball</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>wheel</code></td><td>4</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.reqNavigation">android.R.attr.reqNavigation</see>
			/// .
			/// </attr>
			/// <attr>name android:reqNavigation</attr>
			public const int AndroidManifestUsesConfiguration_reqNavigation = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The type of touch screen used by an application.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>undefined</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>notouch</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>stylus</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>finger</code></td><td>3</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.reqTouchScreen">android.R.attr.reqTouchScreen</see>
			/// .
			/// </attr>
			/// <attr>name android:reqTouchScreen</attr>
			public const int AndroidManifestUsesConfiguration_reqTouchScreen = 0;

			/// <summary>
			/// The <code>uses-feature</code> tag specifies
			/// a specific feature used by the application.
			/// </summary>
			/// <remarks>
			/// The <code>uses-feature</code> tag specifies
			/// a specific feature used by the application.
			/// For example an application might specify that it requires
			/// specific version of OpenGL. Multiple such attribute
			/// values can be specified by the application.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesFeature_glEsVersion">android:glEsVersion</see>
			/// </code></td><td> The GLES driver version number needed by an application.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesFeature_name">android:name</see>
			/// </code></td><td>  The name of the feature that is being used.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesFeature_required">android:required</see>
			/// </code></td><td>  Specify whether this feature is required for the application.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestUsesFeature_glEsVersion">AndroidManifestUsesFeature_glEsVersion
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesFeature_name">AndroidManifestUsesFeature_name</seealso>
			/// <seealso cref="AndroidManifestUsesFeature_required">AndroidManifestUsesFeature_required
			/// 	</seealso>
			public static readonly int[] AndroidManifestUsesFeature = new int[] { unchecked((
				int)(0x01010003)), unchecked((int)(0x01010281)), unchecked((int)(0x0101028e)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The GLES driver version number needed by an application.
			/// The higher 16 bits represent the major number and the lower 16 bits
			/// represent the minor number. For example for GL 1.2 referring to
			/// 0x00000102, the actual value should be set as 0x00010002.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.glEsVersion">android.R.attr.glEsVersion</see>
			/// .
			/// </attr>
			/// <attr>name android:glEsVersion</attr>
			public const int AndroidManifestUsesFeature_glEsVersion = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the feature that is being used.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestUsesFeature_name = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether this feature is required for the application.
			/// The default is true, meaning the application requires the
			/// feature, and does not want to be installed on devices that
			/// don't support it.  If you set this to false, then this will
			/// not impose a restriction on where the application can be
			/// installed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.required">android.R.attr.required</see>
			/// .
			/// </attr>
			/// <attr>name android:required</attr>
			public const int AndroidManifestUsesFeature_required = 2;

			/// <summary>
			/// The <code>uses-libraries</code> specifies a shared library that this
			/// package requires to be linked against.
			/// </summary>
			/// <remarks>
			/// The <code>uses-libraries</code> specifies a shared library that this
			/// package requires to be linked against.  Specifying this flag tells the
			/// system to include this library's code in your class loader.
			/// <p>This appears as a child tag of the
			/// <see cref="AndroidManifestApplication">application</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesLibrary_name">android:name</see>
			/// </code></td><td> Required name of the library you use.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesLibrary_required">android:required</see>
			/// </code></td><td>  Specify whether this library is required for the application.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestUsesLibrary_name">AndroidManifestUsesLibrary_name</seealso>
			/// <seealso cref="AndroidManifestUsesLibrary_required">AndroidManifestUsesLibrary_required
			/// 	</seealso>
			public static readonly int[] AndroidManifestUsesLibrary = new int[] { unchecked((
				int)(0x01010003)), unchecked((int)(0x0101028e)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the library you use.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestUsesLibrary_name = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify whether this library is required for the application.
			/// The default is true, meaning the application requires the
			/// library, and does not want to be installed on devices that
			/// don't support it.  If you set this to false, then this will
			/// allow the application to be installed even if the library
			/// doesn't exist, and you will need to check for its presence
			/// dynamically at runtime.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.required">android.R.attr.required</see>
			/// .
			/// </attr>
			/// <attr>name android:required</attr>
			public const int AndroidManifestUsesLibrary_required = 1;

			/// <summary>
			/// The <code>uses-permission</code> tag requests a
			/// <see cref="AndroidManifestPermission">&lt;permission&gt;</see>
			/// that the containing
			/// package must be granted in order for it to operate correctly.
			/// See the &lt;a href="
			/// <docRoot></docRoot>
			/// guide/topics/security/security.html"&gt;Security and Permissions</a>
			/// document for more information on permissions.  Also available is a
			/// <see cref="android.Manifest.permission">list of permissions</see>
			/// included
			/// with the base platform.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesPermission_name">android:name</see>
			/// </code></td><td> Required name of the permission you use, as published with the
			/// corresponding name attribute of a
			/// <see cref="android.R.styleable.AndroidManifestPermission">&lt;permission&gt;</see>
			/// tag; often this is one of the
			/// <see cref="android.Manifest.permission">
			/// standard
			/// system permissions
			/// </see>
			/// .</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="AndroidManifestUsesPermission_name">AndroidManifestUsesPermission_name
			/// 	</seealso>
			public static readonly int[] AndroidManifestUsesPermission = new int[] { unchecked(
				(int)(0x01010003)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the permission you use, as published with the
			/// corresponding name attribute of a
			/// <see cref="android.R.styleable.AndroidManifestPermission">&lt;permission&gt;</see>
			/// tag; often this is one of the
			/// <see cref="android.Manifest.permission">
			/// standard
			/// system permissions
			/// </see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int AndroidManifestUsesPermission_name = 0;

			/// <summary>
			/// The <code>uses-sdk</code> tag describes the SDK features that the
			/// containing package must be running on to operate correctly.
			/// </summary>
			/// <remarks>
			/// The <code>uses-sdk</code> tag describes the SDK features that the
			/// containing package must be running on to operate correctly.
			/// <p>This appears as a child tag of the root
			/// <see cref="AndroidManifest">manifest</see>
			/// tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesSdk_maxSdkVersion">android:maxSdkVersion</see>
			/// </code></td><td> This is the maximum SDK version number that an application works
			/// on.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesSdk_minSdkVersion">android:minSdkVersion</see>
			/// </code></td><td> This is the minimum SDK version number that the application
			/// requires.</td></tr>
			/// <tr><td><code>
			/// <see cref="AndroidManifestUsesSdk_targetSdkVersion">android:targetSdkVersion</see>
			/// </code></td><td> This is the SDK version number that the application is targeting.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AndroidManifestUsesSdk_maxSdkVersion">AndroidManifestUsesSdk_maxSdkVersion
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesSdk_minSdkVersion">AndroidManifestUsesSdk_minSdkVersion
			/// 	</seealso>
			/// <seealso cref="AndroidManifestUsesSdk_targetSdkVersion">AndroidManifestUsesSdk_targetSdkVersion
			/// 	</seealso>
			public static readonly int[] AndroidManifestUsesSdk = new int[] { unchecked((int)
				(0x0101020c)), unchecked((int)(0x01010270)), unchecked((int)(0x01010271)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the maximum SDK version number that an application works
			/// on.  You can use this to ensure your application is filtered out
			/// of later versions of the platform when you know you have
			/// incompatibility with them.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxSdkVersion">android.R.attr.maxSdkVersion</see>
			/// .
			/// </attr>
			/// <attr>name android:maxSdkVersion</attr>
			public const int AndroidManifestUsesSdk_maxSdkVersion = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the minimum SDK version number that the application
			/// requires.  This number is an abstract integer, from the list
			/// in
			/// <see cref="android.os.Build.VERSION_CODES">android.os.Build.VERSION_CODES</see>
			/// If
			/// not supplied, the application will work on any SDK.  This
			/// may also be string (such as "Donut") if the application was built
			/// against a development branch, in which case it will only work against
			/// the development builds.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minSdkVersion">android.R.attr.minSdkVersion</see>
			/// .
			/// </attr>
			/// <attr>name android:minSdkVersion</attr>
			public const int AndroidManifestUsesSdk_minSdkVersion = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the SDK version number that the application is targeting.
			/// It is able to run on older versions (down to minSdkVersion), but
			/// was explicitly tested to work with the version specified here.
			/// Specifying this version allows the platform to disable compatibility
			/// code that are not required or enable newer features that are not
			/// available to older applications.  This may also be a string
			/// (such as "Donut") if this is built against a development
			/// branch, in which case minSdkVersion is also forced to be that
			/// string.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.targetSdkVersion">android.R.attr.targetSdkVersion</see>
			/// .
			/// </attr>
			/// <attr>name android:targetSdkVersion</attr>
			public const int AndroidManifestUsesSdk_targetSdkVersion = 1;

			/// <summary>Attributes that can be used with a AnimatedRotateDrawable.</summary>
			/// <remarks>
			/// Attributes that can be used with a AnimatedRotateDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnimatedRotateDrawable_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimatedRotateDrawable_frameDuration">android:frameDuration</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnimatedRotateDrawable_framesCount">android:framesCount</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnimatedRotateDrawable_pivotX">android:pivotX</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnimatedRotateDrawable_pivotY">android:pivotY</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnimatedRotateDrawable_visible">android:visible</see>
			/// </code></td><td> Provides initial visibility state of the drawable; the default
			/// value is false.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnimatedRotateDrawable_drawable">AnimatedRotateDrawable_drawable</seealso>
			/// <seealso cref="AnimatedRotateDrawable_frameDuration">AnimatedRotateDrawable_frameDuration
			/// 	</seealso>
			/// <seealso cref="AnimatedRotateDrawable_framesCount">AnimatedRotateDrawable_framesCount
			/// 	</seealso>
			/// <seealso cref="AnimatedRotateDrawable_pivotX">AnimatedRotateDrawable_pivotX</seealso>
			/// <seealso cref="AnimatedRotateDrawable_pivotY">AnimatedRotateDrawable_pivotY</seealso>
			/// <seealso cref="AnimatedRotateDrawable_visible">AnimatedRotateDrawable_visible</seealso>
			public static readonly int[] AnimatedRotateDrawable = new int[] { unchecked((int)
				(0x01010194)), unchecked((int)(0x01010199)), unchecked((int)(0x010101b5)), unchecked(
				(int)(0x010101b6)), unchecked((int)(0x010103f8)), unchecked((int)(0x010103f9)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int AnimatedRotateDrawable_drawable = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.frameDuration">attr.frameDuration</see>
			/// attribute's value can be found in the
			/// <see cref="AnimatedRotateDrawable">AnimatedRotateDrawable</see>
			/// array.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:frameDuration</attr>
			public const int AnimatedRotateDrawable_frameDuration = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.framesCount">attr.framesCount</see>
			/// attribute's value can be found in the
			/// <see cref="AnimatedRotateDrawable">AnimatedRotateDrawable</see>
			/// array.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:framesCount</attr>
			public const int AnimatedRotateDrawable_framesCount = 5;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotX">android.R.attr.pivotX</see>
			/// attribute's value can be found in the
			/// <see cref="AnimatedRotateDrawable">AnimatedRotateDrawable</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotX</attr>
			public const int AnimatedRotateDrawable_pivotX = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotY">android.R.attr.pivotY</see>
			/// attribute's value can be found in the
			/// <see cref="AnimatedRotateDrawable">AnimatedRotateDrawable</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotY</attr>
			public const int AnimatedRotateDrawable_pivotY = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Provides initial visibility state of the drawable; the default
			/// value is false.  See
			/// <see cref="android.graphics.drawable.Drawable.setVisible(bool, bool)">android.graphics.drawable.Drawable.setVisible(bool, bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int AnimatedRotateDrawable_visible = 0;

			/// <summary>Attributes that can be used with a Animation.</summary>
			/// <remarks>
			/// Attributes that can be used with a Animation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Animation_background">android:background</see>
			/// </code></td><td> Special background behind animation.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_detachWallpaper">android:detachWallpaper</see>
			/// </code></td><td> Special option for window animations: if this window is on top
			/// of a wallpaper, don't animate the wallpaper with it.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_duration">android:duration</see>
			/// </code></td><td> Amount of time (in milliseconds) for the animation to run.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_fillAfter">android:fillAfter</see>
			/// </code></td><td> When set to true, the animation transformation is applied after the animation is
			/// over.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_fillBefore">android:fillBefore</see>
			/// </code></td><td> When set to true or when fillEnabled is not set to true, the animation transformation
			/// is applied before the animation has started.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_fillEnabled">android:fillEnabled</see>
			/// </code></td><td> When set to true, the value of fillBefore is taken into account.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_interpolator">android:interpolator</see>
			/// </code></td><td> Defines the interpolator used to smooth the animation movement in time.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_repeatCount">android:repeatCount</see>
			/// </code></td><td> Defines how many times the animation should repeat.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_repeatMode">android:repeatMode</see>
			/// </code></td><td> Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_startOffset">android:startOffset</see>
			/// </code></td><td> Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animation_zAdjustment">android:zAdjustment</see>
			/// </code></td><td> Allows for an adjustment of the Z ordering of the content being
			/// animated for the duration of the animation.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Animation_background">Animation_background</seealso>
			/// <seealso cref="Animation_detachWallpaper">Animation_detachWallpaper</seealso>
			/// <seealso cref="Animation_duration">Animation_duration</seealso>
			/// <seealso cref="Animation_fillAfter">Animation_fillAfter</seealso>
			/// <seealso cref="Animation_fillBefore">Animation_fillBefore</seealso>
			/// <seealso cref="Animation_fillEnabled">Animation_fillEnabled</seealso>
			/// <seealso cref="Animation_interpolator">Animation_interpolator</seealso>
			/// <seealso cref="Animation_repeatCount">Animation_repeatCount</seealso>
			/// <seealso cref="Animation_repeatMode">Animation_repeatMode</seealso>
			/// <seealso cref="Animation_startOffset">Animation_startOffset</seealso>
			/// <seealso cref="Animation_zAdjustment">Animation_zAdjustment</seealso>
			public static readonly int[] Animation = new int[] { unchecked((int)(0x010100d4))
				, unchecked((int)(0x01010141)), unchecked((int)(0x01010198)), unchecked((int)(0x010101bc
				)), unchecked((int)(0x010101bd)), unchecked((int)(0x010101be)), unchecked((int)(
				0x010101bf)), unchecked((int)(0x010101c0)), unchecked((int)(0x010101c1)), unchecked(
				(int)(0x0101024f)), unchecked((int)(0x010102a6)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Special background behind animation.  Only for use with window
			/// animations.  Can only be a color, and only black.  If 0, the
			/// default, there is no background.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// .
			/// </attr>
			/// <attr>name android:background</attr>
			public const int Animation_background = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Special option for window animations: if this window is on top
			/// of a wallpaper, don't animate the wallpaper with it.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.detachWallpaper">android.R.attr.detachWallpaper</see>
			/// .
			/// </attr>
			/// <attr>name android:detachWallpaper</attr>
			public const int Animation_detachWallpaper = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of time (in milliseconds) for the animation to run.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.duration">android.R.attr.duration</see>
			/// .
			/// </attr>
			/// <attr>name android:duration</attr>
			public const int Animation_duration = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the animation transformation is applied after the animation is
			/// over. The default value is false. If fillEnabled is not set to true and the
			/// animation is not set on a View, fillAfter is assumed to be true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillAfter">android.R.attr.fillAfter</see>
			/// .
			/// </attr>
			/// <attr>name android:fillAfter</attr>
			public const int Animation_fillAfter = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true or when fillEnabled is not set to true, the animation transformation
			/// is applied before the animation has started. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillBefore">android.R.attr.fillBefore</see>
			/// .
			/// </attr>
			/// <attr>name android:fillBefore</attr>
			public const int Animation_fillBefore = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the value of fillBefore is taken into account.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillEnabled">android.R.attr.fillEnabled</see>
			/// .
			/// </attr>
			/// <attr>name android:fillEnabled</attr>
			public const int Animation_fillEnabled = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the interpolator used to smooth the animation movement in time.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.interpolator">android.R.attr.interpolator</see>
			/// .
			/// </attr>
			/// <attr>name android:interpolator</attr>
			public const int Animation_interpolator = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines how many times the animation should repeat. The default value is 0.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>infinite</code></td><td>-1</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.repeatCount">android.R.attr.repeatCount</see>
			/// .
			/// </attr>
			/// <attr>name android:repeatCount</attr>
			public const int Animation_repeatCount = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite. The default value is restart.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
			/// <tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.repeatMode">android.R.attr.repeatMode</see>
			/// .
			/// </attr>
			/// <attr>name android:repeatMode</attr>
			public const int Animation_repeatMode = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Delay in milliseconds before the animation runs, once start time is reached.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.startOffset">android.R.attr.startOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:startOffset</attr>
			public const int Animation_startOffset = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Allows for an adjustment of the Z ordering of the content being
			/// animated for the duration of the animation.  The default value is normal.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> The content being animated be kept in its current Z order. </td></tr>
			/// <tr><td><code>top</code></td><td>1</td><td> The content being animated is forced on top of all other
			/// content for the duration of the animation. </td></tr>
			/// <tr><td><code>bottom</code></td><td>-1</td><td> The content being animated is forced under all other
			/// content for the duration of the animation. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.zAdjustment">android.R.attr.zAdjustment</see>
			/// .
			/// </attr>
			/// <attr>name android:zAdjustment</attr>
			public const int Animation_zAdjustment = 8;

			/// <summary>Drawable used to render several animated frames.</summary>
			/// <remarks>
			/// Drawable used to render several animated frames.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnimationDrawable_oneshot">android:oneshot</see>
			/// </code></td><td> If true, the animation will only run a single time and then
			/// stop.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationDrawable_variablePadding">android:variablePadding</see>
			/// </code></td><td> If true, allows the drawable's padding to change based on the
			/// current state that is selected.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationDrawable_visible">android:visible</see>
			/// </code></td><td> Provides initial visibility state of the drawable; the default
			/// value is false.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnimationDrawable_oneshot">AnimationDrawable_oneshot</seealso>
			/// <seealso cref="AnimationDrawable_variablePadding">AnimationDrawable_variablePadding
			/// 	</seealso>
			/// <seealso cref="AnimationDrawable_visible">AnimationDrawable_visible</seealso>
			public static readonly int[] AnimationDrawable = new int[] { unchecked((int)(0x01010194
				)), unchecked((int)(0x01010195)), unchecked((int)(0x01010197)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, the animation will only run a single time and then
			/// stop.  If false (the default), it will continually run,
			/// restarting at the first frame after the last has finished.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.oneshot">android.R.attr.oneshot</see>
			/// .
			/// </attr>
			/// <attr>name android:oneshot</attr>
			public const int AnimationDrawable_oneshot = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, allows the drawable's padding to change based on the
			/// current state that is selected.  If false, the padding will
			/// stay the same (based on the maximum padding of all the states).
			/// Enabling this feature requires that the owner of the drawable
			/// deal with performing layout when the state changes, which is
			/// often not supported.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.variablePadding">android.R.attr.variablePadding</see>
			/// .
			/// </attr>
			/// <attr>name android:variablePadding</attr>
			public const int AnimationDrawable_variablePadding = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Provides initial visibility state of the drawable; the default
			/// value is false.  See
			/// <see cref="android.graphics.drawable.Drawable.setVisible(bool, bool)">android.graphics.drawable.Drawable.setVisible(bool, bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int AnimationDrawable_visible = 0;

			/// <summary>Represents a single frame inside an AnimationDrawable.</summary>
			/// <remarks>
			/// Represents a single frame inside an AnimationDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnimationDrawableItem_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationDrawableItem_duration">android:duration</see>
			/// </code></td><td> Amount of time (in milliseconds) to display this frame.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnimationDrawableItem_drawable">AnimationDrawableItem_drawable</seealso>
			/// <seealso cref="AnimationDrawableItem_duration">AnimationDrawableItem_duration</seealso>
			public static readonly int[] AnimationDrawableItem = new int[] { unchecked((int)(
				0x01010198)), unchecked((int)(0x01010199)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int AnimationDrawableItem_drawable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of time (in milliseconds) to display this frame.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.duration">android.R.attr.duration</see>
			/// .
			/// </attr>
			/// <attr>name android:duration</attr>
			public const int AnimationDrawableItem_duration = 0;

			/// <summary>Attributes that can be used with a AnimationSet.</summary>
			/// <remarks>
			/// Attributes that can be used with a AnimationSet.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnimationSet_duration">android:duration</see>
			/// </code></td><td> Amount of time (in milliseconds) to display this frame.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationSet_fillAfter">android:fillAfter</see>
			/// </code></td><td> When set to true, the animation transformation is applied after the animation is
			/// over.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationSet_fillBefore">android:fillBefore</see>
			/// </code></td><td> When set to true or when fillEnabled is not set to true, the animation transformation
			/// is applied before the animation has started.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationSet_repeatMode">android:repeatMode</see>
			/// </code></td><td> Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationSet_shareInterpolator">android:shareInterpolator</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="AnimationSet_startOffset">android:startOffset</see>
			/// </code></td><td> Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnimationSet_duration">AnimationSet_duration</seealso>
			/// <seealso cref="AnimationSet_fillAfter">AnimationSet_fillAfter</seealso>
			/// <seealso cref="AnimationSet_fillBefore">AnimationSet_fillBefore</seealso>
			/// <seealso cref="AnimationSet_repeatMode">AnimationSet_repeatMode</seealso>
			/// <seealso cref="AnimationSet_shareInterpolator">AnimationSet_shareInterpolator</seealso>
			/// <seealso cref="AnimationSet_startOffset">AnimationSet_startOffset</seealso>
			public static readonly int[] AnimationSet = new int[] { unchecked((int)(0x01010198
				)), unchecked((int)(0x010101bb)), unchecked((int)(0x010101bc)), unchecked((int)(
				0x010101bd)), unchecked((int)(0x010101be)), unchecked((int)(0x010101c0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of time (in milliseconds) to display this frame.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.duration">android.R.attr.duration</see>
			/// .
			/// </attr>
			/// <attr>name android:duration</attr>
			public const int AnimationSet_duration = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, the animation transformation is applied after the animation is
			/// over. The default value is false. If fillEnabled is not set to true and the
			/// animation is not set on a View, fillAfter is assumed to be true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillAfter">android.R.attr.fillAfter</see>
			/// .
			/// </attr>
			/// <attr>name android:fillAfter</attr>
			public const int AnimationSet_fillAfter = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true or when fillEnabled is not set to true, the animation transformation
			/// is applied before the animation has started. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillBefore">android.R.attr.fillBefore</see>
			/// .
			/// </attr>
			/// <attr>name android:fillBefore</attr>
			public const int AnimationSet_fillBefore = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite. The default value is restart.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
			/// <tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.repeatMode">android.R.attr.repeatMode</see>
			/// .
			/// </attr>
			/// <attr>name android:repeatMode</attr>
			public const int AnimationSet_repeatMode = 5;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.shareInterpolator">android.R.attr.shareInterpolator</see>
			/// attribute's value can be found in the
			/// <see cref="AnimationSet">AnimationSet</see>
			/// array.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:shareInterpolator</attr>
			public const int AnimationSet_shareInterpolator = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Delay in milliseconds before the animation runs, once start time is reached.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.startOffset">android.R.attr.startOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:startOffset</attr>
			public const int AnimationSet_startOffset = 4;

			/// <summary>Attributes that can be used with a Animator.</summary>
			/// <remarks>
			/// Attributes that can be used with a Animator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Animator_duration">android:duration</see>
			/// </code></td><td> Amount of time (in milliseconds) for the animation to run.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_interpolator">android:interpolator</see>
			/// </code></td><td> Defines the interpolator used to smooth the animation movement in time.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_repeatCount">android:repeatCount</see>
			/// </code></td><td> Defines how many times the animation should repeat.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_repeatMode">android:repeatMode</see>
			/// </code></td><td> Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_startOffset">android:startOffset</see>
			/// </code></td><td> Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_valueFrom">android:valueFrom</see>
			/// </code></td><td> Value the animation starts from.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_valueTo">android:valueTo</see>
			/// </code></td><td> Value the animation animates to.</td></tr>
			/// <tr><td><code>
			/// <see cref="Animator_valueType">android:valueType</see>
			/// </code></td><td> The type of valueFrom and valueTo.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Animator_duration">Animator_duration</seealso>
			/// <seealso cref="Animator_interpolator">Animator_interpolator</seealso>
			/// <seealso cref="Animator_repeatCount">Animator_repeatCount</seealso>
			/// <seealso cref="Animator_repeatMode">Animator_repeatMode</seealso>
			/// <seealso cref="Animator_startOffset">Animator_startOffset</seealso>
			/// <seealso cref="Animator_valueFrom">Animator_valueFrom</seealso>
			/// <seealso cref="Animator_valueTo">Animator_valueTo</seealso>
			/// <seealso cref="Animator_valueType">Animator_valueType</seealso>
			public static readonly int[] Animator = new int[] { unchecked((int)(0x01010141)), 
				unchecked((int)(0x01010198)), unchecked((int)(0x010101be)), unchecked((int)(0x010101bf
				)), unchecked((int)(0x010101c0)), unchecked((int)(0x010102de)), unchecked((int)(
				0x010102df)), unchecked((int)(0x010102e0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of time (in milliseconds) for the animation to run.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.duration">android.R.attr.duration</see>
			/// .
			/// </attr>
			/// <attr>name android:duration</attr>
			public const int Animator_duration = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the interpolator used to smooth the animation movement in time.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.interpolator">android.R.attr.interpolator</see>
			/// .
			/// </attr>
			/// <attr>name android:interpolator</attr>
			public const int Animator_interpolator = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines how many times the animation should repeat. The default value is 0.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>infinite</code></td><td>-1</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.repeatCount">android.R.attr.repeatCount</see>
			/// .
			/// </attr>
			/// <attr>name android:repeatCount</attr>
			public const int Animator_repeatCount = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the animation behavior when it reaches the end and the repeat count is
			/// greater than 0 or infinite. The default value is restart.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>restart</code></td><td>1</td><td> The animation starts again from the beginning. </td></tr>
			/// <tr><td><code>reverse</code></td><td>2</td><td> The animation plays backward. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.repeatMode">android.R.attr.repeatMode</see>
			/// .
			/// </attr>
			/// <attr>name android:repeatMode</attr>
			public const int Animator_repeatMode = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Delay in milliseconds before the animation runs, once start time is reached.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.startOffset">android.R.attr.startOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:startOffset</attr>
			public const int Animator_startOffset = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Value the animation starts from.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.valueFrom">android.R.attr.valueFrom</see>
			/// .
			/// </attr>
			/// <attr>name android:valueFrom</attr>
			public const int Animator_valueFrom = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Value the animation animates to.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.valueTo">android.R.attr.valueTo</see>
			/// .
			/// </attr>
			/// <attr>name android:valueTo</attr>
			public const int Animator_valueTo = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The type of valueFrom and valueTo.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>floatType</code></td><td>0</td><td> valueFrom and valueTo are floats. This is the default value is valueType is
			/// unspecified. Note that if either valueFrom or valueTo represent colors
			/// (beginning with "#"), then this attribute is ignored and the color values are
			/// interpreted as integers. </td></tr>
			/// <tr><td><code>intType</code></td><td>1</td><td> valueFrom and valueTo are integers. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.valueType">android.R.attr.valueType</see>
			/// .
			/// </attr>
			/// <attr>name android:valueType</attr>
			public const int Animator_valueType = 7;

			/// <summary>Attributes that can be used with a AnimatorSet.</summary>
			/// <remarks>
			/// Attributes that can be used with a AnimatorSet.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnimatorSet_ordering">android:ordering</see>
			/// </code></td><td> Name of the property being animated.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnimatorSet_ordering">AnimatorSet_ordering</seealso>
			public static readonly int[] AnimatorSet = new int[] { unchecked((int)(0x010102e2
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Name of the property being animated.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>together</code></td><td>0</td><td> child animations should be played together. </td></tr>
			/// <tr><td><code>sequentially</code></td><td>1</td><td> child animations should be played sequentially, in the same order as the xml. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ordering">android.R.attr.ordering</see>
			/// .
			/// </attr>
			/// <attr>name android:ordering</attr>
			public const int AnimatorSet_ordering = 0;

			/// <summary>Attributes that can be used with a AnticipateInterpolator.</summary>
			/// <remarks>
			/// Attributes that can be used with a AnticipateInterpolator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnticipateInterpolator_tension">android:tension</see>
			/// </code></td><td> This is the amount of tension.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnticipateInterpolator_tension">AnticipateInterpolator_tension</seealso>
			public static readonly int[] AnticipateInterpolator = new int[] { unchecked((int)
				(0x0101026a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the amount of tension.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tension">android.R.attr.tension</see>
			/// .
			/// </attr>
			/// <attr>name android:tension</attr>
			public const int AnticipateInterpolator_tension = 0;

			/// <summary>Attributes that can be used with a AnticipateOvershootInterpolator.</summary>
			/// <remarks>
			/// Attributes that can be used with a AnticipateOvershootInterpolator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AnticipateOvershootInterpolator_extraTension">android:extraTension</see>
			/// </code></td><td> This is the amount by which to multiply the tension.</td></tr>
			/// <tr><td><code>
			/// <see cref="AnticipateOvershootInterpolator_tension">android:tension</see>
			/// </code></td><td> This is the amount of tension.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AnticipateOvershootInterpolator_extraTension">AnticipateOvershootInterpolator_extraTension
			/// 	</seealso>
			/// <seealso cref="AnticipateOvershootInterpolator_tension">AnticipateOvershootInterpolator_tension
			/// 	</seealso>
			public static readonly int[] AnticipateOvershootInterpolator = new int[] { unchecked(
				(int)(0x0101026a)), unchecked((int)(0x0101026b)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the amount by which to multiply the tension.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.extraTension">android.R.attr.extraTension</see>
			/// .
			/// </attr>
			/// <attr>name android:extraTension</attr>
			public const int AnticipateOvershootInterpolator_extraTension = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the amount of tension.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tension">android.R.attr.tension</see>
			/// .
			/// </attr>
			/// <attr>name android:tension</attr>
			public const int AnticipateOvershootInterpolator_tension = 0;

			/// <summary>
			/// Use <code>appwidget-provider</code> as the root tag of the XML resource that
			/// describes an AppWidget provider.
			/// </summary>
			/// <remarks>
			/// Use <code>appwidget-provider</code> as the root tag of the XML resource that
			/// describes an AppWidget provider.  See
			/// <see cref="android.appwidget">appwidget</see>
			/// package for more info.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_autoAdvanceViewId">android:autoAdvanceViewId</see>
			/// </code></td><td> The view id of the AppWidget subview which should be auto-advanced.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_configure">android:configure</see>
			/// </code></td><td> A class name in the AppWidget's package to be launched to configure.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_initialLayout">android:initialLayout</see>
			/// </code></td><td> A resource id of a layout.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_minHeight">android:minHeight</see>
			/// </code></td><td> Minimum height of the AppWidget.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_minResizeHeight">android:minResizeHeight</see>
			/// </code></td><td> Minimum height that the AppWidget can be resized to.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_minResizeWidth">android:minResizeWidth</see>
			/// </code></td><td> Minimum width that the AppWidget can be resized to.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_minWidth">android:minWidth</see>
			/// </code></td><td> Minimum width of the AppWidget.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_previewImage">android:previewImage</see>
			/// </code></td><td> A preview of what the AppWidget will look like after it's configured.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_resizeMode">android:resizeMode</see>
			/// </code></td><td> Optional parameter which indicates if and how this widget can be
			/// resized.</td></tr>
			/// <tr><td><code>
			/// <see cref="AppWidgetProviderInfo_updatePeriodMillis">android:updatePeriodMillis</see>
			/// </code></td><td> Update period in milliseconds, or 0 if the AppWidget will update itself.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AppWidgetProviderInfo_autoAdvanceViewId">AppWidgetProviderInfo_autoAdvanceViewId
			/// 	</seealso>
			/// <seealso cref="AppWidgetProviderInfo_configure">AppWidgetProviderInfo_configure</seealso>
			/// <seealso cref="AppWidgetProviderInfo_initialLayout">AppWidgetProviderInfo_initialLayout
			/// 	</seealso>
			/// <seealso cref="AppWidgetProviderInfo_minHeight">AppWidgetProviderInfo_minHeight</seealso>
			/// <seealso cref="AppWidgetProviderInfo_minResizeHeight">AppWidgetProviderInfo_minResizeHeight
			/// 	</seealso>
			/// <seealso cref="AppWidgetProviderInfo_minResizeWidth">AppWidgetProviderInfo_minResizeWidth
			/// 	</seealso>
			/// <seealso cref="AppWidgetProviderInfo_minWidth">AppWidgetProviderInfo_minWidth</seealso>
			/// <seealso cref="AppWidgetProviderInfo_previewImage">AppWidgetProviderInfo_previewImage
			/// 	</seealso>
			/// <seealso cref="AppWidgetProviderInfo_resizeMode">AppWidgetProviderInfo_resizeMode
			/// 	</seealso>
			/// <seealso cref="AppWidgetProviderInfo_updatePeriodMillis">AppWidgetProviderInfo_updatePeriodMillis
			/// 	</seealso>
			public static readonly int[] AppWidgetProviderInfo = new int[] { unchecked((int)(
				0x0101013f)), unchecked((int)(0x01010140)), unchecked((int)(0x01010250)), unchecked(
				(int)(0x01010251)), unchecked((int)(0x0101025d)), unchecked((int)(0x010102da)), 
				unchecked((int)(0x0101030f)), unchecked((int)(0x01010363)), unchecked((int)(0x01010395
				)), unchecked((int)(0x01010396)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The view id of the AppWidget subview which should be auto-advanced.
			/// by the widget's host.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoAdvanceViewId">android.R.attr.autoAdvanceViewId</see>
			/// .
			/// </attr>
			/// <attr>name android:autoAdvanceViewId</attr>
			public const int AppWidgetProviderInfo_autoAdvanceViewId = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A class name in the AppWidget's package to be launched to configure.
			/// If not supplied, then no activity will be launched.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.configure">android.R.attr.configure</see>
			/// .
			/// </attr>
			/// <attr>name android:configure</attr>
			public const int AppWidgetProviderInfo_configure = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A resource id of a layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.initialLayout">android.R.attr.initialLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:initialLayout</attr>
			public const int AppWidgetProviderInfo_initialLayout = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum height of the AppWidget.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minHeight">android.R.attr.minHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:minHeight</attr>
			public const int AppWidgetProviderInfo_minHeight = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum height that the AppWidget can be resized to.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minResizeHeight">android.R.attr.minResizeHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:minResizeHeight</attr>
			public const int AppWidgetProviderInfo_minResizeHeight = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum width that the AppWidget can be resized to.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minResizeWidth">android.R.attr.minResizeWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:minResizeWidth</attr>
			public const int AppWidgetProviderInfo_minResizeWidth = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum width of the AppWidget.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minWidth">android.R.attr.minWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:minWidth</attr>
			public const int AppWidgetProviderInfo_minWidth = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A preview of what the AppWidget will look like after it's configured.
			/// If not supplied, the AppWidget's icon will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.previewImage">android.R.attr.previewImage</see>
			/// .
			/// </attr>
			/// <attr>name android:previewImage</attr>
			public const int AppWidgetProviderInfo_previewImage = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Optional parameter which indicates if and how this widget can be
			/// resized.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x0</td><td></td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x1</td><td></td></tr>
			/// <tr><td><code>vertical</code></td><td>0x2</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.resizeMode">android.R.attr.resizeMode</see>
			/// .
			/// </attr>
			/// <attr>name android:resizeMode</attr>
			public const int AppWidgetProviderInfo_resizeMode = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Update period in milliseconds, or 0 if the AppWidget will update itself.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.updatePeriodMillis">android.R.attr.updatePeriodMillis</see>
			/// .
			/// </attr>
			/// <attr>name android:updatePeriodMillis</attr>
			public const int AppWidgetProviderInfo_updatePeriodMillis = 2;

			/// <summary>Attributes that can be used with a AutoCompleteTextView.</summary>
			/// <remarks>
			/// Attributes that can be used with a AutoCompleteTextView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_completionHint">android:completionHint</see>
			/// </code></td><td> Defines the hint displayed in the drop down menu.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_completionHintView">android:completionHintView</see>
			/// </code></td><td> Defines the hint view displayed in the drop down menu.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_completionThreshold">android:completionThreshold</see>
			/// </code></td><td> Defines the number of characters that the user must type before
			/// completion suggestions are displayed in a drop down menu.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_dropDownAnchor">android:dropDownAnchor</see>
			/// </code></td><td> View to anchor the auto-complete dropdown to.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_dropDownHeight">android:dropDownHeight</see>
			/// </code></td><td> Specifies the basic height of the dropdown.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_dropDownHorizontalOffset">android:dropDownHorizontalOffset
			/// 	</see>
			/// </code></td><td> Amount of pixels by which the drop down should be offset horizontally.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_dropDownSelector">android:dropDownSelector</see>
			/// </code></td><td> Selector in a drop down list.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_dropDownVerticalOffset">android:dropDownVerticalOffset
			/// 	</see>
			/// </code></td><td> Amount of pixels by which the drop down should be offset vertically.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_dropDownWidth">android:dropDownWidth</see>
			/// </code></td><td> Specifies the basic width of the dropdown.</td></tr>
			/// <tr><td><code>
			/// <see cref="AutoCompleteTextView_inputType">android:inputType</see>
			/// </code></td><td> The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="AutoCompleteTextView_completionHint">AutoCompleteTextView_completionHint
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_completionHintView">AutoCompleteTextView_completionHintView
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_completionThreshold">AutoCompleteTextView_completionThreshold
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_dropDownAnchor">AutoCompleteTextView_dropDownAnchor
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_dropDownHeight">AutoCompleteTextView_dropDownHeight
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_dropDownHorizontalOffset">AutoCompleteTextView_dropDownHorizontalOffset
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_dropDownSelector">AutoCompleteTextView_dropDownSelector
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_dropDownVerticalOffset">AutoCompleteTextView_dropDownVerticalOffset
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_dropDownWidth">AutoCompleteTextView_dropDownWidth
			/// 	</seealso>
			/// <seealso cref="AutoCompleteTextView_inputType">AutoCompleteTextView_inputType</seealso>
			public static readonly int[] AutoCompleteTextView = new int[] { unchecked((int)(0x01010172
				)), unchecked((int)(0x01010173)), unchecked((int)(0x01010174)), unchecked((int)(
				0x01010175)), unchecked((int)(0x01010220)), unchecked((int)(0x01010262)), unchecked(
				(int)(0x01010263)), unchecked((int)(0x01010283)), unchecked((int)(0x010102ac)), 
				unchecked((int)(0x010102ad)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the hint displayed in the drop down menu.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.completionHint">android.R.attr.completionHint</see>
			/// .
			/// </attr>
			/// <attr>name android:completionHint</attr>
			public const int AutoCompleteTextView_completionHint = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the hint view displayed in the drop down menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.completionHintView">android.R.attr.completionHintView</see>
			/// .
			/// </attr>
			/// <attr>name android:completionHintView</attr>
			public const int AutoCompleteTextView_completionHintView = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the number of characters that the user must type before
			/// completion suggestions are displayed in a drop down menu.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.completionThreshold">android.R.attr.completionThreshold
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:completionThreshold</attr>
			public const int AutoCompleteTextView_completionThreshold = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// View to anchor the auto-complete dropdown to. If not specified, the text view itself
			/// is used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownAnchor">android.R.attr.dropDownAnchor</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownAnchor</attr>
			public const int AutoCompleteTextView_dropDownAnchor = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic height of the dropdown. Its value may
			/// be a dimension (such as "12dip") for a constant height,
			/// fill_parent or match_parent to fill the height of the
			/// screen, or wrap_content to match the height of
			/// the content of the drop down.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the height of the screen.
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the height of the content. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownHeight">android.R.attr.dropDownHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownHeight</attr>
			public const int AutoCompleteTextView_dropDownHeight = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of pixels by which the drop down should be offset horizontally.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownHorizontalOffset">android.R.attr.dropDownHorizontalOffset
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownHorizontalOffset</attr>
			public const int AutoCompleteTextView_dropDownHorizontalOffset = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Selector in a drop down list.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownSelector">android.R.attr.dropDownSelector</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownSelector</attr>
			public const int AutoCompleteTextView_dropDownSelector = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of pixels by which the drop down should be offset vertically.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownVerticalOffset">android.R.attr.dropDownVerticalOffset
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownVerticalOffset</attr>
			public const int AutoCompleteTextView_dropDownVerticalOffset = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic width of the dropdown. Its value may
			/// be a dimension (such as "12dip") for a constant width,
			/// fill_parent or match_parent to match the width of the
			/// screen, or wrap_content to match the width of
			/// the anchored view.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fill the width of the screen.
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the width of the screen.
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the width of its anchor. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownWidth">android.R.attr.dropDownWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownWidth</attr>
			public const int AutoCompleteTextView_dropDownWidth = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.  The constants
			/// here correspond to those defined by
			/// <see cref="android.text.InputType">android.text.InputType</see>
			/// .  Generally you can select
			/// a single value, though some can be combined together as
			/// indicated.  Setting this attribute to anything besides
			/// <var>none</var> also implies that the text is editable.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
			/// <tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of all characters.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every word.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every sentence.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
			/// request auto-correction of text being input.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
			/// specify that this field will be doing its own auto-completion and
			/// talking with the input method appropriately.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
			/// allow multiple lines of text in the field.  If this flag is not set,
			/// the text field will be constrained to a single line.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that though the regular text view should not be multiple
			/// lines, the IME should provide multiple lines if it can.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that the IME should not show any
			/// dictionary-based word suggestions.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS">android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI">android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER">android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
			/// field in a contact entry.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a signed number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED">android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a decimal (fractional) number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL">android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_PHONE">android.text.InputTypeClass.TYPE_CLASS_PHONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inputType">android.R.attr.inputType</see>
			/// .
			/// </attr>
			/// <attr>name android:inputType</attr>
			public const int AutoCompleteTextView_inputType = 4;

			/// <summary>Drawable used to draw bitmaps.</summary>
			/// <remarks>
			/// Drawable used to draw bitmaps.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="BitmapDrawable_antialias">android:antialias</see>
			/// </code></td><td> Enables or disables antialiasing.</td></tr>
			/// <tr><td><code>
			/// <see cref="BitmapDrawable_dither">android:dither</see>
			/// </code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="BitmapDrawable_filter">android:filter</see>
			/// </code></td><td> Enables or disables bitmap filtering.</td></tr>
			/// <tr><td><code>
			/// <see cref="BitmapDrawable_gravity">android:gravity</see>
			/// </code></td><td> Defines the gravity for the bitmap.</td></tr>
			/// <tr><td><code>
			/// <see cref="BitmapDrawable_src">android:src</see>
			/// </code></td><td> Identifier of the bitmap file.</td></tr>
			/// <tr><td><code>
			/// <see cref="BitmapDrawable_tileMode">android:tileMode</see>
			/// </code></td><td> Defines the tile mode.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="BitmapDrawable_antialias">BitmapDrawable_antialias</seealso>
			/// <seealso cref="BitmapDrawable_dither">BitmapDrawable_dither</seealso>
			/// <seealso cref="BitmapDrawable_filter">BitmapDrawable_filter</seealso>
			/// <seealso cref="BitmapDrawable_gravity">BitmapDrawable_gravity</seealso>
			/// <seealso cref="BitmapDrawable_src">BitmapDrawable_src</seealso>
			/// <seealso cref="BitmapDrawable_tileMode">BitmapDrawable_tileMode</seealso>
			public static readonly int[] BitmapDrawable = new int[] { unchecked((int)(0x010100af
				)), unchecked((int)(0x01010119)), unchecked((int)(0x0101011a)), unchecked((int)(
				0x0101011b)), unchecked((int)(0x0101011c)), unchecked((int)(0x01010201)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables antialiasing.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.antialias">android.R.attr.antialias</see>
			/// .
			/// </attr>
			/// <attr>name android:antialias</attr>
			public const int BitmapDrawable_antialias = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dither">android.R.attr.dither</see>
			/// .
			/// </attr>
			/// <attr>name android:dither</attr>
			public const int BitmapDrawable_dither = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables bitmap filtering. Filtering is used when the bitmap is
			/// shrunk or stretched to smooth its apperance.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.filter">android.R.attr.filter</see>
			/// .
			/// </attr>
			/// <attr>name android:filter</attr>
			public const int BitmapDrawable_filter = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the gravity for the bitmap. The gravity indicates where to position
			/// the drawable in its container if the bitmap is smaller than the container.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int BitmapDrawable_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier of the bitmap file. This attribute is mandatory.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.src">android.R.attr.src</see>
			/// .
			/// </attr>
			/// <attr>name android:src</attr>
			public const int BitmapDrawable_src = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
			/// Gravity is ignored when the tile mode is enabled.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>disabled</code></td><td>-1</td><td> Do not tile the bitmap. This is the default value. </td></tr>
			/// <tr><td><code>clamp</code></td><td>0</td><td> Replicates the edge color. </td></tr>
			/// <tr><td><code>repeat</code></td><td>1</td><td> Repeats the bitmap in both direction. </td></tr>
			/// <tr><td><code>mirror</code></td><td>2</td><td> Repeats the shader's image horizontally and vertically, alternating
			/// mirror images so that adjacent images always seam. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tileMode">android.R.attr.tileMode</see>
			/// .
			/// </attr>
			/// <attr>name android:tileMode</attr>
			public const int BitmapDrawable_tileMode = 5;

			/// <summary>Attributes that can be used with a Button.</summary>
			/// <remarks>Attributes that can be used with a Button.</remarks>
			public static readonly int[] Button = new int[] {  };

			/// <summary>Attributes that can be used with a CalendarView.</summary>
			/// <remarks>
			/// Attributes that can be used with a CalendarView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_dateTextAppearance">android:dateTextAppearance</see>
			/// </code></td><td> The text appearance for the calendar dates.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_firstDayOfWeek">android:firstDayOfWeek</see>
			/// </code></td><td> The first day of week according to
			/// <see cref="java.util.Calendar">java.util.Calendar</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_focusedMonthDateColor">android:focusedMonthDateColor</see>
			/// </code></td><td> The color for the dates of the selected month.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_maxDate">android:maxDate</see>
			/// </code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_minDate">android:minDate</see>
			/// </code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_selectedDateVerticalBar">android:selectedDateVerticalBar</see>
			/// </code></td><td> Drawable for the vertical bar shown at the beggining and at the end of a selected date.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_selectedWeekBackgroundColor">android:selectedWeekBackgroundColor
			/// 	</see>
			/// </code></td><td> The background color for the selected week.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_showWeekNumber">android:showWeekNumber</see>
			/// </code></td><td> Whether do show week numbers.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_shownWeekCount">android:shownWeekCount</see>
			/// </code></td><td> The number of weeks to be shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_unfocusedMonthDateColor">android:unfocusedMonthDateColor</see>
			/// </code></td><td> The color for the dates of an unfocused month.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_weekDayTextAppearance">android:weekDayTextAppearance</see>
			/// </code></td><td> The text appearance for the week day abbreviation of the calendar header.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_weekNumberColor">android:weekNumberColor</see>
			/// </code></td><td> The color for the week numbers.</td></tr>
			/// <tr><td><code>
			/// <see cref="CalendarView_weekSeparatorLineColor">android:weekSeparatorLineColor</see>
			/// </code></td><td> The color for the sepatator line between weeks.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="CalendarView_dateTextAppearance">CalendarView_dateTextAppearance</seealso>
			/// <seealso cref="CalendarView_firstDayOfWeek">CalendarView_firstDayOfWeek</seealso>
			/// <seealso cref="CalendarView_focusedMonthDateColor">CalendarView_focusedMonthDateColor
			/// 	</seealso>
			/// <seealso cref="CalendarView_maxDate">CalendarView_maxDate</seealso>
			/// <seealso cref="CalendarView_minDate">CalendarView_minDate</seealso>
			/// <seealso cref="CalendarView_selectedDateVerticalBar">CalendarView_selectedDateVerticalBar
			/// 	</seealso>
			/// <seealso cref="CalendarView_selectedWeekBackgroundColor">CalendarView_selectedWeekBackgroundColor
			/// 	</seealso>
			/// <seealso cref="CalendarView_showWeekNumber">CalendarView_showWeekNumber</seealso>
			/// <seealso cref="CalendarView_shownWeekCount">CalendarView_shownWeekCount</seealso>
			/// <seealso cref="CalendarView_unfocusedMonthDateColor">CalendarView_unfocusedMonthDateColor
			/// 	</seealso>
			/// <seealso cref="CalendarView_weekDayTextAppearance">CalendarView_weekDayTextAppearance
			/// 	</seealso>
			/// <seealso cref="CalendarView_weekNumberColor">CalendarView_weekNumberColor</seealso>
			/// <seealso cref="CalendarView_weekSeparatorLineColor">CalendarView_weekSeparatorLineColor
			/// 	</seealso>
			public static readonly int[] CalendarView = new int[] { unchecked((int)(0x0101033d
				)), unchecked((int)(0x0101033e)), unchecked((int)(0x0101033f)), unchecked((int)(
				0x01010340)), unchecked((int)(0x01010341)), unchecked((int)(0x01010342)), unchecked(
				(int)(0x01010343)), unchecked((int)(0x01010344)), unchecked((int)(0x01010345)), 
				unchecked((int)(0x01010346)), unchecked((int)(0x01010347)), unchecked((int)(0x01010348
				)), unchecked((int)(0x01010349)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text appearance for the calendar dates.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dateTextAppearance">android.R.attr.dateTextAppearance</see>
			/// .
			/// </attr>
			/// <attr>name android:dateTextAppearance</attr>
			public const int CalendarView_dateTextAppearance = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The first day of week according to
			/// <see cref="java.util.Calendar">java.util.Calendar</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.firstDayOfWeek">android.R.attr.firstDayOfWeek</see>
			/// .
			/// </attr>
			/// <attr>name android:firstDayOfWeek</attr>
			public const int CalendarView_firstDayOfWeek = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The color for the dates of the selected month.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.focusedMonthDateColor">android.R.attr.focusedMonthDateColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:focusedMonthDateColor</attr>
			public const int CalendarView_focusedMonthDateColor = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimal date shown by this calendar view in mm/dd/yyyy format.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxDate">android.R.attr.maxDate</see>
			/// .
			/// </attr>
			/// <attr>name android:maxDate</attr>
			public const int CalendarView_maxDate = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimal date shown by this calendar view in mm/dd/yyyy format.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minDate">android.R.attr.minDate</see>
			/// .
			/// </attr>
			/// <attr>name android:minDate</attr>
			public const int CalendarView_minDate = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable for the vertical bar shown at the beggining and at the end of a selected date.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.selectedDateVerticalBar">android.R.attr.selectedDateVerticalBar
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:selectedDateVerticalBar</attr>
			public const int CalendarView_selectedDateVerticalBar = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The background color for the selected week.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.selectedWeekBackgroundColor">android.R.attr.selectedWeekBackgroundColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:selectedWeekBackgroundColor</attr>
			public const int CalendarView_selectedWeekBackgroundColor = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether do show week numbers.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.showWeekNumber">android.R.attr.showWeekNumber</see>
			/// .
			/// </attr>
			/// <attr>name android:showWeekNumber</attr>
			public const int CalendarView_showWeekNumber = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The number of weeks to be shown.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shownWeekCount">android.R.attr.shownWeekCount</see>
			/// .
			/// </attr>
			/// <attr>name android:shownWeekCount</attr>
			public const int CalendarView_shownWeekCount = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The color for the dates of an unfocused month.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.unfocusedMonthDateColor">android.R.attr.unfocusedMonthDateColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:unfocusedMonthDateColor</attr>
			public const int CalendarView_unfocusedMonthDateColor = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text appearance for the week day abbreviation of the calendar header.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.weekDayTextAppearance">android.R.attr.weekDayTextAppearance
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:weekDayTextAppearance</attr>
			public const int CalendarView_weekDayTextAppearance = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The color for the week numbers.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.weekNumberColor">android.R.attr.weekNumberColor</see>
			/// .
			/// </attr>
			/// <attr>name android:weekNumberColor</attr>
			public const int CalendarView_weekNumberColor = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The color for the sepatator line between weeks.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.weekSeparatorLineColor">android.R.attr.weekSeparatorLineColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:weekSeparatorLineColor</attr>
			public const int CalendarView_weekSeparatorLineColor = 9;

			/// <summary>Base attributes available to CheckBoxPreference.</summary>
			/// <remarks>
			/// Base attributes available to CheckBoxPreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="CheckBoxPreference_disableDependentsState">android:disableDependentsState
			/// 	</see>
			/// </code></td><td> The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="CheckBoxPreference_summaryOff">android:summaryOff</see>
			/// </code></td><td> The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is unchecked.</td></tr>
			/// <tr><td><code>
			/// <see cref="CheckBoxPreference_summaryOn">android:summaryOn</see>
			/// </code></td><td> The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is checked.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="CheckBoxPreference_disableDependentsState">CheckBoxPreference_disableDependentsState
			/// 	</seealso>
			/// <seealso cref="CheckBoxPreference_summaryOff">CheckBoxPreference_summaryOff</seealso>
			/// <seealso cref="CheckBoxPreference_summaryOn">CheckBoxPreference_summaryOn</seealso>
			public static readonly int[] CheckBoxPreference = new int[] { unchecked((int)(0x010101ef
				)), unchecked((int)(0x010101f0)), unchecked((int)(0x010101f1)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The state (true for on, or false for off) that causes dependents to be disabled. By default,
			/// dependents will be disabled when this is unchecked, so the value of this preference is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.disableDependentsState">android.R.attr.disableDependentsState
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:disableDependentsState</attr>
			public const int CheckBoxPreference_disableDependentsState = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is unchecked. If separate on/off summaries are not
			/// needed, the summary attribute can be used instead.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summaryOff">android.R.attr.summaryOff</see>
			/// .
			/// </attr>
			/// <attr>name android:summaryOff</attr>
			public const int CheckBoxPreference_summaryOff = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// CheckBoxPreference is checked. If separate on/off summaries are not
			/// needed, the summary attribute can be used instead.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summaryOn">android.R.attr.summaryOn</see>
			/// .
			/// </attr>
			/// <attr>name android:summaryOn</attr>
			public const int CheckBoxPreference_summaryOn = 0;

			/// <summary>Attributes that can be used with a CheckedTextView.</summary>
			/// <remarks>
			/// Attributes that can be used with a CheckedTextView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="CheckedTextView_checkMark">android:checkMark</see>
			/// </code></td><td> Drawable used for the check mark graphic.</td></tr>
			/// <tr><td><code>
			/// <see cref="CheckedTextView_checked">android:checked</see>
			/// </code></td><td> Indicates the initial checked state of this text.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="CheckedTextView_checkMark">CheckedTextView_checkMark</seealso>
			/// <seealso cref="CheckedTextView_checked">CheckedTextView_checked</seealso>
			public static readonly int[] CheckedTextView = new int[] { unchecked((int)(0x01010106
				)), unchecked((int)(0x01010108)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used for the check mark graphic.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.checkMark">android.R.attr.checkMark</see>
			/// .
			/// </attr>
			/// <attr>name android:checkMark</attr>
			public const int CheckedTextView_checkMark = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates the initial checked state of this text.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.@checked">android.R.attr.@checked</see>
			/// .
			/// </attr>
			/// <attr>name android:checked</attr>
			public const int CheckedTextView_checked = 0;

			/// <summary>Attributes that can be used with a Chronometer.</summary>
			/// <remarks>
			/// Attributes that can be used with a Chronometer.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Chronometer_format">android:format</see>
			/// </code></td><td> Format string: if specified, the Chronometer will display this
			/// string, with the first "%s" replaced by the current timer value
			/// in "MM:SS" or "H:MM:SS" form.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Chronometer_format">Chronometer_format</seealso>
			public static readonly int[] Chronometer = new int[] { unchecked((int)(0x01010105
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Format string: if specified, the Chronometer will display this
			/// string, with the first "%s" replaced by the current timer value
			/// in "MM:SS" or "H:MM:SS" form.
			/// If no format string is specified, the Chronometer will simply display
			/// "MM:SS" or "H:MM:SS".
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.format">android.R.attr.format</see>
			/// .
			/// </attr>
			/// <attr>name android:format</attr>
			public const int Chronometer_format = 0;

			/// <summary>Attributes that can be used with a ClipDrawable.</summary>
			/// <remarks>
			/// Attributes that can be used with a ClipDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ClipDrawable_clipOrientation">android:clipOrientation</see>
			/// </code></td><td> The orientation for the clip.</td></tr>
			/// <tr><td><code>
			/// <see cref="ClipDrawable_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to draw with the specified scale.</td></tr>
			/// <tr><td><code>
			/// <see cref="ClipDrawable_gravity">android:gravity</see>
			/// </code></td><td> Specifies where to clip within the drawable.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ClipDrawable_clipOrientation">ClipDrawable_clipOrientation</seealso>
			/// <seealso cref="ClipDrawable_drawable">ClipDrawable_drawable</seealso>
			/// <seealso cref="ClipDrawable_gravity">ClipDrawable_gravity</seealso>
			public static readonly int[] ClipDrawable = new int[] { unchecked((int)(0x010100af
				)), unchecked((int)(0x01010199)), unchecked((int)(0x0101020a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The orientation for the clip.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>1</td><td> Clip the drawable horizontally. </td></tr>
			/// <tr><td><code>vertical</code></td><td>2</td><td> Clip the drawable vertically. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.clipOrientation">android.R.attr.clipOrientation</see>
			/// .
			/// </attr>
			/// <attr>name android:clipOrientation</attr>
			public const int ClipDrawable_clipOrientation = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to draw with the specified scale.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int ClipDrawable_drawable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies where to clip within the drawable. The default value is
			/// left.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int ClipDrawable_gravity = 0;

			/// <summary>Drawable used to draw a single color.</summary>
			/// <remarks>
			/// Drawable used to draw a single color.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ColorDrawable_color">android:color</see>
			/// </code></td><td> The color to use.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ColorDrawable_color">ColorDrawable_color</seealso>
			public static readonly int[] ColorDrawable = new int[] { unchecked((int)(0x010101a5
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The color to use.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.color">android.R.attr.color</see>
			/// .
			/// </attr>
			/// <attr>name android:color</attr>
			public const int ColorDrawable_color = 0;

			/// <summary>Attributes that can be used with a CompoundButton.</summary>
			/// <remarks>
			/// Attributes that can be used with a CompoundButton.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="CompoundButton_button">android:button</see>
			/// </code></td><td> Drawable used for the button graphic (e.</td></tr>
			/// <tr><td><code>
			/// <see cref="CompoundButton_checked">android:checked</see>
			/// </code></td><td> Indicates the initial checked state of this button.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="CompoundButton_button">CompoundButton_button</seealso>
			/// <seealso cref="CompoundButton_checked">CompoundButton_checked</seealso>
			public static readonly int[] CompoundButton = new int[] { unchecked((int)(0x01010106
				)), unchecked((int)(0x01010107)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used for the button graphic (e.g. checkbox, radio button, etc).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.button">android.R.attr.button</see>
			/// .
			/// </attr>
			/// <attr>name android:button</attr>
			public const int CompoundButton_button = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates the initial checked state of this button.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.@checked">android.R.attr.@checked</see>
			/// .
			/// </attr>
			/// <attr>name android:checked</attr>
			public const int CompoundButton_checked = 0;

			/// <summary>Maps a specific contact data MIME-type to styling information.</summary>
			/// <remarks>
			/// Maps a specific contact data MIME-type to styling information.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ContactsDataKind_allContactsName">android:allContactsName</see>
			/// </code></td><td> Resource representing the term "All Contacts" (e.</td></tr>
			/// <tr><td><code>
			/// <see cref="ContactsDataKind_detailColumn">android:detailColumn</see>
			/// </code></td><td> Column in data table that contains details for this data.</td></tr>
			/// <tr><td><code>
			/// <see cref="ContactsDataKind_detailSocialSummary">android:detailSocialSummary</see>
			/// </code></td><td> Flag indicating that detail should be built from SocialProvider.</td></tr>
			/// <tr><td><code>
			/// <see cref="ContactsDataKind_icon">android:icon</see>
			/// </code></td><td> Icon used to represent data of this kind.</td></tr>
			/// <tr><td><code>
			/// <see cref="ContactsDataKind_mimeType">android:mimeType</see>
			/// </code></td><td> Mime-type handled by this mapping.</td></tr>
			/// <tr><td><code>
			/// <see cref="ContactsDataKind_summaryColumn">android:summaryColumn</see>
			/// </code></td><td> Column in data table that summarizes this data.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ContactsDataKind_allContactsName">ContactsDataKind_allContactsName
			/// 	</seealso>
			/// <seealso cref="ContactsDataKind_detailColumn">ContactsDataKind_detailColumn</seealso>
			/// <seealso cref="ContactsDataKind_detailSocialSummary">ContactsDataKind_detailSocialSummary
			/// 	</seealso>
			/// <seealso cref="ContactsDataKind_icon">ContactsDataKind_icon</seealso>
			/// <seealso cref="ContactsDataKind_mimeType">ContactsDataKind_mimeType</seealso>
			/// <seealso cref="ContactsDataKind_summaryColumn">ContactsDataKind_summaryColumn</seealso>
			public static readonly int[] ContactsDataKind = new int[] { unchecked((int)(0x01010002
				)), unchecked((int)(0x01010026)), unchecked((int)(0x010102a2)), unchecked((int)(
				0x010102a3)), unchecked((int)(0x010102a4)), unchecked((int)(0x010102cc)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Resource representing the term "All Contacts" (e.g. "All Friends" or
			/// "All connections"). Optional (Default is "All Contacts").
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allContactsName">android.R.attr.allContactsName</see>
			/// .
			/// </attr>
			/// <attr>name android:allContactsName</attr>
			public const int ContactsDataKind_allContactsName = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Column in data table that contains details for this data.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.detailColumn">android.R.attr.detailColumn</see>
			/// .
			/// </attr>
			/// <attr>name android:detailColumn</attr>
			public const int ContactsDataKind_detailColumn = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that detail should be built from SocialProvider.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.detailSocialSummary">android.R.attr.detailSocialSummary
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:detailSocialSummary</attr>
			public const int ContactsDataKind_detailSocialSummary = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Icon used to represent data of this kind.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int ContactsDataKind_icon = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Mime-type handled by this mapping.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.mimeType">android.R.attr.mimeType</see>
			/// .
			/// </attr>
			/// <attr>name android:mimeType</attr>
			public const int ContactsDataKind_mimeType = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Column in data table that summarizes this data.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summaryColumn">android.R.attr.summaryColumn</see>
			/// .
			/// </attr>
			/// <attr>name android:summaryColumn</attr>
			public const int ContactsDataKind_summaryColumn = 2;

			/// <summary>Attributes that can be used with a CycleInterpolator.</summary>
			/// <remarks>
			/// Attributes that can be used with a CycleInterpolator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="CycleInterpolator_cycles">android:cycles</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="CycleInterpolator_cycles">CycleInterpolator_cycles</seealso>
			public static readonly int[] CycleInterpolator = new int[] { unchecked((int)(0x010101d4
				)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.cycles">android.R.attr.cycles</see>
			/// attribute's value can be found in the
			/// <see cref="CycleInterpolator">CycleInterpolator</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:cycles</attr>
			public const int CycleInterpolator_cycles = 0;

			/// <summary>Attributes that can be used with a DatePicker.</summary>
			/// <remarks>
			/// Attributes that can be used with a DatePicker.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_calendarViewShown">android:calendarViewShown</see>
			/// </code></td><td> Whether the calendar view is shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_endYear">android:endYear</see>
			/// </code></td><td> The last year (inclusive), for example "2010".</td></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_layout">android:layout</see>
			/// </code></td><td> @hide The layout of the time picker.</td></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_maxDate">android:maxDate</see>
			/// </code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_minDate">android:minDate</see>
			/// </code></td><td> The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_spinnersShown">android:spinnersShown</see>
			/// </code></td><td> Whether the spinners are shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="DatePicker_startYear">android:startYear</see>
			/// </code></td><td> The first year (inclusive), for example "1940".</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="DatePicker_calendarViewShown">DatePicker_calendarViewShown</seealso>
			/// <seealso cref="DatePicker_endYear">DatePicker_endYear</seealso>
			/// <seealso cref="DatePicker_layout">DatePicker_layout</seealso>
			/// <seealso cref="DatePicker_maxDate">DatePicker_maxDate</seealso>
			/// <seealso cref="DatePicker_minDate">DatePicker_minDate</seealso>
			/// <seealso cref="DatePicker_spinnersShown">DatePicker_spinnersShown</seealso>
			/// <seealso cref="DatePicker_startYear">DatePicker_startYear</seealso>
			public static readonly int[] DatePicker = new int[] { unchecked((int)(0x010100f2)
				), unchecked((int)(0x0101017c)), unchecked((int)(0x0101017d)), unchecked((int)(0x0101033f
				)), unchecked((int)(0x01010340)), unchecked((int)(0x0101034b)), unchecked((int)(
				0x0101034c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the calendar view is shown.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.calendarViewShown">android.R.attr.calendarViewShown</see>
			/// .
			/// </attr>
			/// <attr>name android:calendarViewShown</attr>
			public const int DatePicker_calendarViewShown = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The last year (inclusive), for example "2010".
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.endYear">android.R.attr.endYear</see>
			/// .
			/// </attr>
			/// <attr>name android:endYear</attr>
			public const int DatePicker_endYear = 2;

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// The layout of the time picker.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout">android.R.attr.layout</see>
			/// .
			/// </hide>
			/// <attr>name android:layout</attr>
			public const int DatePicker_layout = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimal date shown by this calendar view in mm/dd/yyyy format.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxDate">android.R.attr.maxDate</see>
			/// .
			/// </attr>
			/// <attr>name android:maxDate</attr>
			public const int DatePicker_maxDate = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimal date shown by this calendar view in mm/dd/yyyy format.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minDate">android.R.attr.minDate</see>
			/// .
			/// </attr>
			/// <attr>name android:minDate</attr>
			public const int DatePicker_minDate = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the spinners are shown.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.spinnersShown">android.R.attr.spinnersShown</see>
			/// .
			/// </attr>
			/// <attr>name android:spinnersShown</attr>
			public const int DatePicker_spinnersShown = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The first year (inclusive), for example "1940".
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.startYear">android.R.attr.startYear</see>
			/// .
			/// </attr>
			/// <attr>name android:startYear</attr>
			public const int DatePicker_startYear = 1;

			/// <summary>Attributes that can be used with a DecelerateInterpolator.</summary>
			/// <remarks>
			/// Attributes that can be used with a DecelerateInterpolator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="DecelerateInterpolator_factor">android:factor</see>
			/// </code></td><td> This is the amount of acceleration to add when easing out.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="DecelerateInterpolator_factor">DecelerateInterpolator_factor</seealso>
			public static readonly int[] DecelerateInterpolator = new int[] { unchecked((int)
				(0x010101d3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the amount of acceleration to add when easing out.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.factor">android.R.attr.factor</see>
			/// .
			/// </attr>
			/// <attr>name android:factor</attr>
			public const int DecelerateInterpolator_factor = 0;

			/// <summary>
			/// Use <code>device-admin</code> as the root tag of the XML resource that
			/// describes a
			/// <see cref="android.app.admin.DeviceAdminReceiver">android.app.admin.DeviceAdminReceiver
			/// 	</see>
			/// , which is
			/// referenced from its
			/// <see cref="android.app.admin.DeviceAdminReceiver.DEVICE_ADMIN_META_DATA">android.app.admin.DeviceAdminReceiver.DEVICE_ADMIN_META_DATA
			/// 	</see>
			/// meta-data entry.  Described here are the attributes that can be
			/// included in that tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="DeviceAdmin_visible">android:visible</see>
			/// </code></td><td> Control whether the admin is visible to the user, even when it
			/// is not enabled.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="DeviceAdmin_visible">DeviceAdmin_visible</seealso>
			public static readonly int[] DeviceAdmin = new int[] { unchecked((int)(0x01010194
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Control whether the admin is visible to the user, even when it
			/// is not enabled.  This is true by default.  You may want to make
			/// it false if your admin does not make sense to be turned on
			/// unless some explicit action happens in your app.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int DeviceAdmin_visible = 0;

			/// <summary>Base attributes available to DialogPreference.</summary>
			/// <remarks>
			/// Base attributes available to DialogPreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="DialogPreference_dialogIcon">android:dialogIcon</see>
			/// </code></td><td> The icon for the dialog.</td></tr>
			/// <tr><td><code>
			/// <see cref="DialogPreference_dialogLayout">android:dialogLayout</see>
			/// </code></td><td> A layout to be used as the content View for the dialog.</td></tr>
			/// <tr><td><code>
			/// <see cref="DialogPreference_dialogMessage">android:dialogMessage</see>
			/// </code></td><td> The message in the dialog.</td></tr>
			/// <tr><td><code>
			/// <see cref="DialogPreference_dialogTitle">android:dialogTitle</see>
			/// </code></td><td> The title in the dialog.</td></tr>
			/// <tr><td><code>
			/// <see cref="DialogPreference_negativeButtonText">android:negativeButtonText</see>
			/// </code></td><td> The negative button text for the dialog.</td></tr>
			/// <tr><td><code>
			/// <see cref="DialogPreference_positiveButtonText">android:positiveButtonText</see>
			/// </code></td><td> The positive button text for the dialog.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="DialogPreference_dialogIcon">DialogPreference_dialogIcon</seealso>
			/// <seealso cref="DialogPreference_dialogLayout">DialogPreference_dialogLayout</seealso>
			/// <seealso cref="DialogPreference_dialogMessage">DialogPreference_dialogMessage</seealso>
			/// <seealso cref="DialogPreference_dialogTitle">DialogPreference_dialogTitle</seealso>
			/// <seealso cref="DialogPreference_negativeButtonText">DialogPreference_negativeButtonText
			/// 	</seealso>
			/// <seealso cref="DialogPreference_positiveButtonText">DialogPreference_positiveButtonText
			/// 	</seealso>
			public static readonly int[] DialogPreference = new int[] { unchecked((int)(0x010101f2
				)), unchecked((int)(0x010101f3)), unchecked((int)(0x010101f4)), unchecked((int)(
				0x010101f5)), unchecked((int)(0x010101f6)), unchecked((int)(0x010101f7)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The icon for the dialog.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dialogIcon">android.R.attr.dialogIcon</see>
			/// .
			/// </attr>
			/// <attr>name android:dialogIcon</attr>
			public const int DialogPreference_dialogIcon = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A layout to be used as the content View for the dialog. By default, this shouldn't
			/// be needed. If a custom DialogPreference is required, this should be set. For example,
			/// the EditTextPreference uses a layout with an EditText as this attribute.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dialogLayout">android.R.attr.dialogLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:dialogLayout</attr>
			public const int DialogPreference_dialogLayout = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The message in the dialog. If a dialogLayout is provided and contains
			/// a TextView with ID android:id/message, this message will be placed in there.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dialogMessage">android.R.attr.dialogMessage</see>
			/// .
			/// </attr>
			/// <attr>name android:dialogMessage</attr>
			public const int DialogPreference_dialogMessage = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The title in the dialog.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dialogTitle">android.R.attr.dialogTitle</see>
			/// .
			/// </attr>
			/// <attr>name android:dialogTitle</attr>
			public const int DialogPreference_dialogTitle = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The negative button text for the dialog. Set to @null to hide the negative button.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.negativeButtonText">android.R.attr.negativeButtonText</see>
			/// .
			/// </attr>
			/// <attr>name android:negativeButtonText</attr>
			public const int DialogPreference_negativeButtonText = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The positive button text for the dialog. Set to @null to hide the positive button.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.positiveButtonText">android.R.attr.positiveButtonText</see>
			/// .
			/// </attr>
			/// <attr>name android:positiveButtonText</attr>
			public const int DialogPreference_positiveButtonText = 3;

			/// <summary>Base attributes that are available to all Drawable objects.</summary>
			/// <remarks>
			/// Base attributes that are available to all Drawable objects.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Drawable_visible">android:visible</see>
			/// </code></td><td> Provides initial visibility state of the drawable; the default
			/// value is false.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Drawable_visible">Drawable_visible</seealso>
			public static readonly int[] Drawable = new int[] { unchecked((int)(0x01010194)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Provides initial visibility state of the drawable; the default
			/// value is false.  See
			/// <see cref="android.graphics.drawable.Drawable.setVisible(bool, bool)">android.graphics.drawable.Drawable.setVisible(bool, bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int Drawable_visible = 0;

			/// <summary>Describes the corners for the rectangle shape of a GradientDrawable.</summary>
			/// <remarks>
			/// Describes the corners for the rectangle shape of a GradientDrawable.
			/// This can be used to render rounded corners.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="DrawableCorners_bottomLeftRadius">android:bottomLeftRadius</see>
			/// </code></td><td> Radius of the bottom left corner.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableCorners_bottomRightRadius">android:bottomRightRadius</see>
			/// </code></td><td> Radius of the bottom right corner.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableCorners_radius">android:radius</see>
			/// </code></td><td> Defines the radius of the four corners.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableCorners_topLeftRadius">android:topLeftRadius</see>
			/// </code></td><td> Radius of the top left corner.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableCorners_topRightRadius">android:topRightRadius</see>
			/// </code></td><td> Radius of the top right corner.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="DrawableCorners_bottomLeftRadius">DrawableCorners_bottomLeftRadius
			/// 	</seealso>
			/// <seealso cref="DrawableCorners_bottomRightRadius">DrawableCorners_bottomRightRadius
			/// 	</seealso>
			/// <seealso cref="DrawableCorners_radius">DrawableCorners_radius</seealso>
			/// <seealso cref="DrawableCorners_topLeftRadius">DrawableCorners_topLeftRadius</seealso>
			/// <seealso cref="DrawableCorners_topRightRadius">DrawableCorners_topRightRadius</seealso>
			public static readonly int[] DrawableCorners = new int[] { unchecked((int)(0x010101a8
				)), unchecked((int)(0x010101a9)), unchecked((int)(0x010101aa)), unchecked((int)(
				0x010101ab)), unchecked((int)(0x010101ac)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the bottom left corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bottomLeftRadius">android.R.attr.bottomLeftRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:bottomLeftRadius</attr>
			public const int DrawableCorners_bottomLeftRadius = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the bottom right corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bottomRightRadius">android.R.attr.bottomRightRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:bottomRightRadius</attr>
			public const int DrawableCorners_bottomRightRadius = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the radius of the four corners.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.radius">android.R.attr.radius</see>
			/// .
			/// </attr>
			/// <attr>name android:radius</attr>
			public const int DrawableCorners_radius = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the top left corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.topLeftRadius">android.R.attr.topLeftRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:topLeftRadius</attr>
			public const int DrawableCorners_topLeftRadius = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the top right corner.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.topRightRadius">android.R.attr.topRightRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:topRightRadius</attr>
			public const int DrawableCorners_topRightRadius = 2;

			/// <summary>Drawable states.</summary>
			/// <remarks>
			/// Drawable states.
			/// The mapping of Drawable states to a particular drawables is specified
			/// in the "state" elements of a Widget's "selector" element.
			/// Possible values:
			/// <ul>
			/// <li>"state_focused"
			/// <li>"state_window_focused"
			/// <li>"state_enabled"
			/// <li>"state_checked"
			/// <li>"state_selected"
			/// <li>"state_active"
			/// <li>"state_single"
			/// <li>"state_first"
			/// <li>"state_mid"
			/// <li>"state_last"
			/// <li>"state_only"
			/// <li>"state_pressed"
			/// <li>"state_activated"
			/// <li>"state_error"
			/// <li>"state_circle"
			/// <li>"state_rect"
			/// <li>"state_grow"
			/// <li>"state_move"
			/// <li>"state_hovered"
			/// <li>"state_drag_can_accept"
			/// <li>"state_drag_hovered"
			/// </ul>
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_accelerated">android:state_accelerated</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_activated">android:state_activated</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view or its parent has been "activated" meaning the user has currently
			/// marked it as being of interest.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_active">android:state_active</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_checkable">android:state_checkable</see>
			/// </code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_checked">android:state_checked</see>
			/// </code></td><td> State identifier indicating that the object is currently checked.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_drag_can_accept">android:state_drag_can_accept</see>
			/// </code></td><td> State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that the Drawable is in a view that is capable of accepting a drop of
			/// the content currently being manipulated in a drag-and-drop operation.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_drag_hovered">android:state_drag_hovered</see>
			/// </code></td><td> State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that a drag operation (for which the Drawable's view is a valid recipient)
			/// is currently positioned over the Drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_enabled">android:state_enabled</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_first">android:state_first</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_focused">android:state_focused</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_hovered">android:state_hovered</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a pointer is hovering over the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_last">android:state_last</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_middle">android:state_middle</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_pressed">android:state_pressed</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when the user is pressing down in a view.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_selected">android:state_selected</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view (or one of its parents) is currently selected.</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_single">android:state_single</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="DrawableStates_state_window_focused">android:state_window_focused</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view's window has input focus.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="DrawableStates_state_accelerated">DrawableStates_state_accelerated
			/// 	</seealso>
			/// <seealso cref="DrawableStates_state_activated">DrawableStates_state_activated</seealso>
			/// <seealso cref="DrawableStates_state_active">DrawableStates_state_active</seealso>
			/// <seealso cref="DrawableStates_state_checkable">DrawableStates_state_checkable</seealso>
			/// <seealso cref="DrawableStates_state_checked">DrawableStates_state_checked</seealso>
			/// <seealso cref="DrawableStates_state_drag_can_accept">DrawableStates_state_drag_can_accept
			/// 	</seealso>
			/// <seealso cref="DrawableStates_state_drag_hovered">DrawableStates_state_drag_hovered
			/// 	</seealso>
			/// <seealso cref="DrawableStates_state_enabled">DrawableStates_state_enabled</seealso>
			/// <seealso cref="DrawableStates_state_first">DrawableStates_state_first</seealso>
			/// <seealso cref="DrawableStates_state_focused">DrawableStates_state_focused</seealso>
			/// <seealso cref="DrawableStates_state_hovered">DrawableStates_state_hovered</seealso>
			/// <seealso cref="DrawableStates_state_last">DrawableStates_state_last</seealso>
			/// <seealso cref="DrawableStates_state_middle">DrawableStates_state_middle</seealso>
			/// <seealso cref="DrawableStates_state_pressed">DrawableStates_state_pressed</seealso>
			/// <seealso cref="DrawableStates_state_selected">DrawableStates_state_selected</seealso>
			/// <seealso cref="DrawableStates_state_single">DrawableStates_state_single</seealso>
			/// <seealso cref="DrawableStates_state_window_focused">DrawableStates_state_window_focused
			/// 	</seealso>
			public static readonly int[] DrawableStates = new int[] { unchecked((int)(0x0101009c
				)), unchecked((int)(0x0101009d)), unchecked((int)(0x0101009e)), unchecked((int)(
				0x0101009f)), unchecked((int)(0x010100a0)), unchecked((int)(0x010100a1)), unchecked(
				(int)(0x010100a2)), unchecked((int)(0x010100a3)), unchecked((int)(0x010100a4)), 
				unchecked((int)(0x010100a5)), unchecked((int)(0x010100a6)), unchecked((int)(0x010100a7
				)), unchecked((int)(0x010102fe)), unchecked((int)(0x0101031b)), unchecked((int)(
				0x01010367)), unchecked((int)(0x01010368)), unchecked((int)(0x01010369)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// indicating that the Drawable is in a view that is hardware accelerated.
			/// This means that the device can at least render a full-screen scaled
			/// bitmap with one layer of text and bitmaps composited on top of it
			/// at 60fps.  When this is set, the colorBackgroundCacheHint will be
			/// ignored even if it specifies a solid color, since that optimization
			/// is not needed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_accelerated">android.R.attr.state_accelerated</see>
			/// .
			/// </attr>
			/// <attr>name android:state_accelerated</attr>
			public const int DrawableStates_state_accelerated = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view or its parent has been "activated" meaning the user has currently
			/// marked it as being of interest.  This is an alternative representation of
			/// state_checked for when the state should be propagated down the view hierarchy.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_activated">android.R.attr.state_activated</see>
			/// .
			/// </attr>
			/// <attr>name android:state_activated</attr>
			public const int DrawableStates_state_activated = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_active">android.R.attr.state_active</see>
			/// .
			/// </attr>
			/// <attr>name android:state_active</attr>
			public const int DrawableStates_state_active = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object <var>may</var> display a check mark.
			/// See
			/// <see cref="attr.state_checked">attr.state_checked</see>
			/// for the identifier that indicates whether it is
			/// actually checked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checkable">android.R.attr.state_checkable</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checkable</attr>
			public const int DrawableStates_state_checkable = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object is currently checked.  See
			/// <see cref="attr.state_checkable">attr.state_checkable</see>
			/// for an additional identifier that can indicate if
			/// any object may ever display a check, regardless of whether state_checked is
			/// currently set.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checked">android.R.attr.state_checked</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checked</attr>
			public const int DrawableStates_state_checked = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that the Drawable is in a view that is capable of accepting a drop of
			/// the content currently being manipulated in a drag-and-drop operation.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_drag_can_accept">android.R.attr.state_drag_can_accept
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:state_drag_can_accept</attr>
			public const int DrawableStates_state_drag_can_accept = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that a drag operation (for which the Drawable's view is a valid recipient)
			/// is currently positioned over the Drawable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_drag_hovered">android.R.attr.state_drag_hovered</see>
			/// .
			/// </attr>
			/// <attr>name android:state_drag_hovered</attr>
			public const int DrawableStates_state_drag_hovered = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_enabled">android.R.attr.state_enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:state_enabled</attr>
			public const int DrawableStates_state_enabled = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_first">android.R.attr.state_first</see>
			/// .
			/// </attr>
			/// <attr>name android:state_first</attr>
			public const int DrawableStates_state_first = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_focused">android.R.attr.state_focused</see>
			/// .
			/// </attr>
			/// <attr>name android:state_focused</attr>
			public const int DrawableStates_state_focused = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a pointer is hovering over the view.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_hovered">android.R.attr.state_hovered</see>
			/// .
			/// </attr>
			/// <attr>name android:state_hovered</attr>
			public const int DrawableStates_state_hovered = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_last">android.R.attr.state_last</see>
			/// .
			/// </attr>
			/// <attr>name android:state_last</attr>
			public const int DrawableStates_state_last = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_middle">android.R.attr.state_middle</see>
			/// .
			/// </attr>
			/// <attr>name android:state_middle</attr>
			public const int DrawableStates_state_middle = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when the user is pressing down in a view.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_pressed">android.R.attr.state_pressed</see>
			/// .
			/// </attr>
			/// <attr>name android:state_pressed</attr>
			public const int DrawableStates_state_pressed = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view (or one of its parents) is currently selected.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_selected">android.R.attr.state_selected</see>
			/// .
			/// </attr>
			/// <attr>name android:state_selected</attr>
			public const int DrawableStates_state_selected = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_single">android.R.attr.state_single</see>
			/// .
			/// </attr>
			/// <attr>name android:state_single</attr>
			public const int DrawableStates_state_single = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view's window has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_window_focused">android.R.attr.state_window_focused
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:state_window_focused</attr>
			public const int DrawableStates_state_window_focused = 1;

			/// <summary>Attributes that can be used with a EditText.</summary>
			/// <remarks>Attributes that can be used with a EditText.</remarks>
			public static readonly int[] EditText = new int[] {  };

			/// <summary>State array representing an expandable list child's indicator.</summary>
			/// <remarks>
			/// State array representing an expandable list child's indicator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListChildIndicatorState_state_last">android:state_last</see>
			/// </code></td><td> State identifier indicating the child is the last child within its group.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ExpandableListChildIndicatorState_state_last">ExpandableListChildIndicatorState_state_last
			/// 	</seealso>
			public static readonly int[] ExpandableListChildIndicatorState = new int[] { unchecked(
				(int)(0x010100a6)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating the child is the last child within its group.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_last">android.R.attr.state_last</see>
			/// .
			/// </attr>
			/// <attr>name android:state_last</attr>
			public const int ExpandableListChildIndicatorState_state_last = 0;

			/// <summary>State array representing an expandable list group's indicator.</summary>
			/// <remarks>
			/// State array representing an expandable list group's indicator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListGroupIndicatorState_state_empty">android:state_empty</see>
			/// </code></td><td> State identifier indicating the group is empty (has no children).</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListGroupIndicatorState_state_expanded">android:state_expanded
			/// 	</see>
			/// </code></td><td> State identifier indicating the group is expanded.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ExpandableListGroupIndicatorState_state_empty">ExpandableListGroupIndicatorState_state_empty
			/// 	</seealso>
			/// <seealso cref="ExpandableListGroupIndicatorState_state_expanded">ExpandableListGroupIndicatorState_state_expanded
			/// 	</seealso>
			public static readonly int[] ExpandableListGroupIndicatorState = new int[] { unchecked(
				(int)(0x010100a8)), unchecked((int)(0x010100a9)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating the group is empty (has no children).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_empty">android.R.attr.state_empty</see>
			/// .
			/// </attr>
			/// <attr>name android:state_empty</attr>
			public const int ExpandableListGroupIndicatorState_state_empty = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating the group is expanded.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_expanded">android.R.attr.state_expanded</see>
			/// .
			/// </attr>
			/// <attr>name android:state_expanded</attr>
			public const int ExpandableListGroupIndicatorState_state_expanded = 0;

			/// <summary>Attributes that can be used with a ExpandableListView.</summary>
			/// <remarks>
			/// Attributes that can be used with a ExpandableListView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_childDivider">android:childDivider</see>
			/// </code></td><td> Drawable or color that is used as a divider for children.</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_childIndicator">android:childIndicator</see>
			/// </code></td><td> Indicator shown beside the child View.</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_childIndicatorLeft">android:childIndicatorLeft</see>
			/// </code></td><td> The left bound for a child's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_childIndicatorRight">android:childIndicatorRight</see>
			/// </code></td><td> The right bound for a child's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_groupIndicator">android:groupIndicator</see>
			/// </code></td><td> Indicator shown beside the group View.</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_indicatorLeft">android:indicatorLeft</see>
			/// </code></td><td> The left bound for an item's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="ExpandableListView_indicatorRight">android:indicatorRight</see>
			/// </code></td><td> The right bound for an item's indicator.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ExpandableListView_childDivider">ExpandableListView_childDivider</seealso>
			/// <seealso cref="ExpandableListView_childIndicator">ExpandableListView_childIndicator
			/// 	</seealso>
			/// <seealso cref="ExpandableListView_childIndicatorLeft">ExpandableListView_childIndicatorLeft
			/// 	</seealso>
			/// <seealso cref="ExpandableListView_childIndicatorRight">ExpandableListView_childIndicatorRight
			/// 	</seealso>
			/// <seealso cref="ExpandableListView_groupIndicator">ExpandableListView_groupIndicator
			/// 	</seealso>
			/// <seealso cref="ExpandableListView_indicatorLeft">ExpandableListView_indicatorLeft
			/// 	</seealso>
			/// <seealso cref="ExpandableListView_indicatorRight">ExpandableListView_indicatorRight
			/// 	</seealso>
			public static readonly int[] ExpandableListView = new int[] { unchecked((int)(0x0101010b
				)), unchecked((int)(0x0101010c)), unchecked((int)(0x0101010d)), unchecked((int)(
				0x0101010e)), unchecked((int)(0x0101010f)), unchecked((int)(0x01010110)), unchecked(
				(int)(0x01010111)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable or color that is used as a divider for children. (It will drawn
			/// below and above child items.) The height of this will be the same as
			/// the height of the normal list item divider.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.childDivider">android.R.attr.childDivider</see>
			/// .
			/// </attr>
			/// <attr>name android:childDivider</attr>
			public const int ExpandableListView_childDivider = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicator shown beside the child View. This can be a stateful Drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.childIndicator">android.R.attr.childIndicator</see>
			/// .
			/// </attr>
			/// <attr>name android:childIndicator</attr>
			public const int ExpandableListView_childIndicator = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The left bound for a child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.childIndicatorLeft">android.R.attr.childIndicatorLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:childIndicatorLeft</attr>
			public const int ExpandableListView_childIndicatorLeft = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The right bound for a child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.childIndicatorRight">android.R.attr.childIndicatorRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:childIndicatorRight</attr>
			public const int ExpandableListView_childIndicatorRight = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicator shown beside the group View. This can be a stateful Drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.groupIndicator">android.R.attr.groupIndicator</see>
			/// .
			/// </attr>
			/// <attr>name android:groupIndicator</attr>
			public const int ExpandableListView_groupIndicator = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The left bound for an item's indicator. To specify a left bound specific to children,
			/// use childIndicatorLeft.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indicatorLeft">android.R.attr.indicatorLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:indicatorLeft</attr>
			public const int ExpandableListView_indicatorLeft = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The right bound for an item's indicator. To specify a right bound specific to children,
			/// use childIndicatorRight.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indicatorRight">android.R.attr.indicatorRight</see>
			/// .
			/// </attr>
			/// <attr>name android:indicatorRight</attr>
			public const int ExpandableListView_indicatorRight = 3;

			/// <summary>
			/// An extra data value to place into a an extra/name value pair held
			/// in a Bundle, as per
			/// <see cref="android.os.Bundle">android.os.Bundle</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Extra_name">android:name</see>
			/// </code></td><td> Required name of the extra data.</td></tr>
			/// <tr><td><code>
			/// <see cref="Extra_value">android:value</see>
			/// </code></td><td> Concrete value to put for this named extra data.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="Extra_name">Extra_name</seealso>
			/// <seealso cref="Extra_value">Extra_value</seealso>
			public static readonly int[] Extra = new int[] { unchecked((int)(0x01010003)), unchecked(
				(int)(0x01010024)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the extra data.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int Extra_name = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Concrete value to put for this named extra data.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.value">android.R.attr.value</see>
			/// .
			/// </attr>
			/// <attr>name android:value</attr>
			public const int Extra_value = 1;

			/// <summary>
			/// Attributes that can be used with <code>&lt;fragment&gt;</code>
			/// tags inside of the layout of an Activity.
			/// </summary>
			/// <remarks>
			/// Attributes that can be used with <code>&lt;fragment&gt;</code>
			/// tags inside of the layout of an Activity.  This instantiates
			/// the given
			/// <see cref="android.app.Fragment">android.app.Fragment</see>
			/// and inserts its content
			/// view into the current location in the layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Fragment_id">android:id</see>
			/// </code></td><td> Supply an identifier name for the top-level view, to later retrieve it
			/// with
			/// <see cref="android.view.View.findViewById(int)">View.findViewById()</see>
			/// or
			/// <see cref="android.app.Activity.findViewById(int)">Activity.findViewById()</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Fragment_name">android:name</see>
			/// </code></td><td> Supply the name of the fragment class to instantiate.</td></tr>
			/// <tr><td><code>
			/// <see cref="Fragment_tag">android:tag</see>
			/// </code></td><td> Supply a tag for the top-level view containing a String, to be retrieved
			/// later with
			/// <see cref="android.view.View.getTag()">View.getTag()</see>
			/// or
			/// searched for with
			/// <see cref="android.view.View.findViewWithTag(object)">View.findViewWithTag()</see>
			/// .</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Fragment_id">Fragment_id</seealso>
			/// <seealso cref="Fragment_name">Fragment_name</seealso>
			/// <seealso cref="Fragment_tag">Fragment_tag</seealso>
			public static readonly int[] Fragment = new int[] { unchecked((int)(0x01010003)), 
				unchecked((int)(0x010100d0)), unchecked((int)(0x010100d1)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply an identifier name for the top-level view, to later retrieve it
			/// with
			/// <see cref="android.view.View.findViewById(int)">View.findViewById()</see>
			/// or
			/// <see cref="android.app.Activity.findViewById(int)">Activity.findViewById()</see>
			/// .
			/// This must be a
			/// resource reference; typically you set this using the
			/// <code>@+</code> syntax to create a new ID resources.
			/// For example: <code>android:id="@+id/my_id"</code> which
			/// allows you to later retrieve the view
			/// with <code>findViewById(R.id.my_id)</code>.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.id">android.R.attr.id</see>
			/// .
			/// </attr>
			/// <attr>name android:id</attr>
			public const int Fragment_id = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply the name of the fragment class to instantiate.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int Fragment_name = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply a tag for the top-level view containing a String, to be retrieved
			/// later with
			/// <see cref="android.view.View.getTag()">View.getTag()</see>
			/// or
			/// searched for with
			/// <see cref="android.view.View.findViewWithTag(object)">View.findViewWithTag()</see>
			/// .  It is generally preferable to use
			/// IDs (through the android:id attribute) instead of tags because
			/// they are faster and allow for compile-time type checking.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tag">android.R.attr.tag</see>
			/// .
			/// </attr>
			/// <attr>name android:tag</attr>
			public const int Fragment_tag = 2;

			/// <summary>Fragment animation class attributes.</summary>
			/// <remarks>
			/// Fragment animation class attributes.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="FragmentAnimation_fragmentCloseEnterAnimation">android:fragmentCloseEnterAnimation
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="FragmentAnimation_fragmentCloseExitAnimation">android:fragmentCloseExitAnimation
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="FragmentAnimation_fragmentFadeEnterAnimation">android:fragmentFadeEnterAnimation
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="FragmentAnimation_fragmentFadeExitAnimation">android:fragmentFadeExitAnimation
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="FragmentAnimation_fragmentOpenEnterAnimation">android:fragmentOpenEnterAnimation
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="FragmentAnimation_fragmentOpenExitAnimation">android:fragmentOpenExitAnimation
			/// 	</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="FragmentAnimation_fragmentCloseEnterAnimation">FragmentAnimation_fragmentCloseEnterAnimation
			/// 	</seealso>
			/// <seealso cref="FragmentAnimation_fragmentCloseExitAnimation">FragmentAnimation_fragmentCloseExitAnimation
			/// 	</seealso>
			/// <seealso cref="FragmentAnimation_fragmentFadeEnterAnimation">FragmentAnimation_fragmentFadeEnterAnimation
			/// 	</seealso>
			/// <seealso cref="FragmentAnimation_fragmentFadeExitAnimation">FragmentAnimation_fragmentFadeExitAnimation
			/// 	</seealso>
			/// <seealso cref="FragmentAnimation_fragmentOpenEnterAnimation">FragmentAnimation_fragmentOpenEnterAnimation
			/// 	</seealso>
			/// <seealso cref="FragmentAnimation_fragmentOpenExitAnimation">FragmentAnimation_fragmentOpenExitAnimation
			/// 	</seealso>
			public static readonly int[] FragmentAnimation = new int[] { unchecked((int)(0x010102e5
				)), unchecked((int)(0x010102e6)), unchecked((int)(0x010102e7)), unchecked((int)(
				0x010102e8)), unchecked((int)(0x010102e9)), unchecked((int)(0x010102ea)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fragmentCloseEnterAnimation">android.R.attr.fragmentCloseEnterAnimation
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="FragmentAnimation">FragmentAnimation</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:fragmentCloseEnterAnimation</attr>
			public const int FragmentAnimation_fragmentCloseEnterAnimation = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fragmentCloseExitAnimation">android.R.attr.fragmentCloseExitAnimation
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="FragmentAnimation">FragmentAnimation</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:fragmentCloseExitAnimation</attr>
			public const int FragmentAnimation_fragmentCloseExitAnimation = 3;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fragmentFadeEnterAnimation">android.R.attr.fragmentFadeEnterAnimation
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="FragmentAnimation">FragmentAnimation</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:fragmentFadeEnterAnimation</attr>
			public const int FragmentAnimation_fragmentFadeEnterAnimation = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fragmentFadeExitAnimation">android.R.attr.fragmentFadeExitAnimation
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="FragmentAnimation">FragmentAnimation</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:fragmentFadeExitAnimation</attr>
			public const int FragmentAnimation_fragmentFadeExitAnimation = 5;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fragmentOpenEnterAnimation">android.R.attr.fragmentOpenEnterAnimation
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="FragmentAnimation">FragmentAnimation</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:fragmentOpenEnterAnimation</attr>
			public const int FragmentAnimation_fragmentOpenEnterAnimation = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fragmentOpenExitAnimation">android.R.attr.fragmentOpenExitAnimation
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="FragmentAnimation">FragmentAnimation</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:fragmentOpenExitAnimation</attr>
			public const int FragmentAnimation_fragmentOpenExitAnimation = 1;

			/// <summary>Attributes that can be used with a FrameLayout.</summary>
			/// <remarks>
			/// Attributes that can be used with a FrameLayout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="FrameLayout_foreground">android:foreground</see>
			/// </code></td><td> Defines the drawable to draw over the content.</td></tr>
			/// <tr><td><code>
			/// <see cref="FrameLayout_foregroundGravity">android:foregroundGravity</see>
			/// </code></td><td> Defines the gravity to apply to the foreground drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="FrameLayout_foregroundInsidePadding">android:foregroundInsidePadding</see>
			/// </code></td><td> Defines whether the foreground drawable should be drawn inside the padding.</td></tr>
			/// <tr><td><code>
			/// <see cref="FrameLayout_measureAllChildren">android:measureAllChildren</see>
			/// </code></td><td> Determines whether to measure all children or just those in
			/// the VISIBLE or INVISIBLE state when measuring.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="FrameLayout_foreground">FrameLayout_foreground</seealso>
			/// <seealso cref="FrameLayout_foregroundGravity">FrameLayout_foregroundGravity</seealso>
			/// <seealso cref="FrameLayout_foregroundInsidePadding">FrameLayout_foregroundInsidePadding
			/// 	</seealso>
			/// <seealso cref="FrameLayout_measureAllChildren">FrameLayout_measureAllChildren</seealso>
			public static readonly int[] FrameLayout = new int[] { unchecked((int)(0x01010109
				)), unchecked((int)(0x0101010a)), unchecked((int)(0x01010200)), unchecked((int)(
				0x010103e3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the drawable to draw over the content. This can be used as an overlay.
			/// The foreground drawable participates in the padding of the content if the gravity
			/// is set to fill.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.foreground">android.R.attr.foreground</see>
			/// .
			/// </attr>
			/// <attr>name android:foreground</attr>
			public const int FrameLayout_foreground = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the gravity to apply to the foreground drawable. The gravity defaults
			/// to fill.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.foregroundGravity">android.R.attr.foregroundGravity</see>
			/// .
			/// </attr>
			/// <attr>name android:foregroundGravity</attr>
			public const int FrameLayout_foregroundGravity = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the foreground drawable should be drawn inside the padding.
			/// This property is turned on by default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:foregroundInsidePadding</attr>
			public const int FrameLayout_foregroundInsidePadding = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Determines whether to measure all children or just those in
			/// the VISIBLE or INVISIBLE state when measuring. Defaults to false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.measureAllChildren">android.R.attr.measureAllChildren</see>
			/// .
			/// </attr>
			/// <attr>name android:measureAllChildren</attr>
			public const int FrameLayout_measureAllChildren = 1;

			/// <summary>Attributes that can be used with a FrameLayout_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a FrameLayout_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="FrameLayout_Layout_layout_gravity">android:layout_gravity</see>
			/// </code></td><td> Standard gravity constant that a child can supply to its parent.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="FrameLayout_Layout_layout_gravity">FrameLayout_Layout_layout_gravity
			/// 	</seealso>
			public static readonly int[] FrameLayout_Layout = new int[] { unchecked((int)(0x010100b3
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Standard gravity constant that a child can supply to its parent.
			/// Defines how to place the view, both its x- and y-axis, within its parent view group.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_gravity">android.R.attr.layout_gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_gravity</attr>
			public const int FrameLayout_Layout_layout_gravity = 0;

			/// <summary>Attributes that can be used with a Gallery.</summary>
			/// <remarks>
			/// Attributes that can be used with a Gallery.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Gallery_animationDuration">android:animationDuration</see>
			/// </code></td><td> Sets how long a transition animation should run (in milliseconds)
			/// when layout has changed.</td></tr>
			/// <tr><td><code>
			/// <see cref="Gallery_gravity">android:gravity</see>
			/// </code></td><td> Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.</td></tr>
			/// <tr><td><code>
			/// <see cref="Gallery_spacing">android:spacing</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Gallery_unselectedAlpha">android:unselectedAlpha</see>
			/// </code></td><td> Sets the alpha on the items that are not selected.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Gallery_animationDuration">Gallery_animationDuration</seealso>
			/// <seealso cref="Gallery_gravity">Gallery_gravity</seealso>
			/// <seealso cref="Gallery_spacing">Gallery_spacing</seealso>
			/// <seealso cref="Gallery_unselectedAlpha">Gallery_unselectedAlpha</seealso>
			public static readonly int[] Gallery = new int[] { unchecked((int)(0x010100af)), 
				unchecked((int)(0x01010112)), unchecked((int)(0x01010113)), unchecked((int)(0x0101020e
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets how long a transition animation should run (in milliseconds)
			/// when layout has changed.  Only relevant if animation is turned on.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animationDuration">android.R.attr.animationDuration</see>
			/// .
			/// </attr>
			/// <attr>name android:animationDuration</attr>
			public const int Gallery_animationDuration = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int Gallery_gravity = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.spacing">android.R.attr.spacing</see>
			/// attribute's value can be found in the
			/// <see cref="Gallery">Gallery</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:spacing</attr>
			public const int Gallery_spacing = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the alpha on the items that are not selected.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.unselectedAlpha">android.R.attr.unselectedAlpha</see>
			/// .
			/// </attr>
			/// <attr>name android:unselectedAlpha</attr>
			public const int Gallery_unselectedAlpha = 3;

			/// <summary>GestureOverlayView specific attributes.</summary>
			/// <remarks>
			/// GestureOverlayView specific attributes. These attributes are used to configure
			/// a GestureOverlayView from XML.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_eventsInterceptionEnabled">android:eventsInterceptionEnabled
			/// 	</see>
			/// </code></td><td> Defines whether the overlay should intercept the motion events when a gesture
			/// is recognized.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_fadeDuration">android:fadeDuration</see>
			/// </code></td><td> Duration, in milliseconds, of the fade out effect after the user is done
			/// drawing a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_fadeEnabled">android:fadeEnabled</see>
			/// </code></td><td> Defines whether the gesture will automatically fade out after being recognized.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_fadeOffset">android:fadeOffset</see>
			/// </code></td><td> Time, in milliseconds, to wait before the gesture fades out after the user
			/// is done drawing it.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_gestureColor">android:gestureColor</see>
			/// </code></td><td> Color used to draw a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_gestureStrokeAngleThreshold">android:gestureStrokeAngleThreshold
			/// 	</see>
			/// </code></td><td> Minimum curve angle a stroke must contain before it is recognized as a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_gestureStrokeLengthThreshold">android:gestureStrokeLengthThreshold
			/// 	</see>
			/// </code></td><td> Minimum length of a stroke before it is recognized as a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_gestureStrokeSquarenessThreshold">android:gestureStrokeSquarenessThreshold
			/// 	</see>
			/// </code></td><td> Squareness threshold of a stroke before it is recognized as a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_gestureStrokeType">android:gestureStrokeType</see>
			/// </code></td><td> Defines the type of strokes that define a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_gestureStrokeWidth">android:gestureStrokeWidth</see>
			/// </code></td><td> Width of the stroke used to draw the gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_orientation">android:orientation</see>
			/// </code></td><td> Indicates whether horizontal (when the orientation is vertical) or vertical
			/// (when orientation is horizontal) strokes automatically define a gesture.</td></tr>
			/// <tr><td><code>
			/// <see cref="GestureOverlayView_uncertainGestureColor">android:uncertainGestureColor
			/// 	</see>
			/// </code></td><td> Color used to draw the user's strokes until we are sure it's a gesture.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GestureOverlayView_eventsInterceptionEnabled">GestureOverlayView_eventsInterceptionEnabled
			/// 	</seealso>
			/// <seealso cref="GestureOverlayView_fadeDuration">GestureOverlayView_fadeDuration</seealso>
			/// <seealso cref="GestureOverlayView_fadeEnabled">GestureOverlayView_fadeEnabled</seealso>
			/// <seealso cref="GestureOverlayView_fadeOffset">GestureOverlayView_fadeOffset</seealso>
			/// <seealso cref="GestureOverlayView_gestureColor">GestureOverlayView_gestureColor</seealso>
			/// <seealso cref="GestureOverlayView_gestureStrokeAngleThreshold">GestureOverlayView_gestureStrokeAngleThreshold
			/// 	</seealso>
			/// <seealso cref="GestureOverlayView_gestureStrokeLengthThreshold">GestureOverlayView_gestureStrokeLengthThreshold
			/// 	</seealso>
			/// <seealso cref="GestureOverlayView_gestureStrokeSquarenessThreshold">GestureOverlayView_gestureStrokeSquarenessThreshold
			/// 	</seealso>
			/// <seealso cref="GestureOverlayView_gestureStrokeType">GestureOverlayView_gestureStrokeType
			/// 	</seealso>
			/// <seealso cref="GestureOverlayView_gestureStrokeWidth">GestureOverlayView_gestureStrokeWidth
			/// 	</seealso>
			/// <seealso cref="GestureOverlayView_orientation">GestureOverlayView_orientation</seealso>
			/// <seealso cref="GestureOverlayView_uncertainGestureColor">GestureOverlayView_uncertainGestureColor
			/// 	</seealso>
			public static readonly int[] GestureOverlayView = new int[] { unchecked((int)(0x010100c4
				)), unchecked((int)(0x01010274)), unchecked((int)(0x01010275)), unchecked((int)(
				0x01010276)), unchecked((int)(0x01010277)), unchecked((int)(0x01010278)), unchecked(
				(int)(0x01010279)), unchecked((int)(0x0101027a)), unchecked((int)(0x0101027b)), 
				unchecked((int)(0x0101027c)), unchecked((int)(0x0101027d)), unchecked((int)(0x0101027e
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the overlay should intercept the motion events when a gesture
			/// is recognized.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.eventsInterceptionEnabled">android.R.attr.eventsInterceptionEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:eventsInterceptionEnabled</attr>
			public const int GestureOverlayView_eventsInterceptionEnabled = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Duration, in milliseconds, of the fade out effect after the user is done
			/// drawing a gesture.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fadeDuration">android.R.attr.fadeDuration</see>
			/// .
			/// </attr>
			/// <attr>name android:fadeDuration</attr>
			public const int GestureOverlayView_fadeDuration = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the gesture will automatically fade out after being recognized.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fadeEnabled">android.R.attr.fadeEnabled</see>
			/// .
			/// </attr>
			/// <attr>name android:fadeEnabled</attr>
			public const int GestureOverlayView_fadeEnabled = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Time, in milliseconds, to wait before the gesture fades out after the user
			/// is done drawing it.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fadeOffset">android.R.attr.fadeOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:fadeOffset</attr>
			public const int GestureOverlayView_fadeOffset = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color used to draw a gesture.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gestureColor">android.R.attr.gestureColor</see>
			/// .
			/// </attr>
			/// <attr>name android:gestureColor</attr>
			public const int GestureOverlayView_gestureColor = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum curve angle a stroke must contain before it is recognized as a gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gestureStrokeAngleThreshold">android.R.attr.gestureStrokeAngleThreshold
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:gestureStrokeAngleThreshold</attr>
			public const int GestureOverlayView_gestureStrokeAngleThreshold = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum length of a stroke before it is recognized as a gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gestureStrokeLengthThreshold">android.R.attr.gestureStrokeLengthThreshold
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:gestureStrokeLengthThreshold</attr>
			public const int GestureOverlayView_gestureStrokeLengthThreshold = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Squareness threshold of a stroke before it is recognized as a gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gestureStrokeSquarenessThreshold">android.R.attr.gestureStrokeSquarenessThreshold
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:gestureStrokeSquarenessThreshold</attr>
			public const int GestureOverlayView_gestureStrokeSquarenessThreshold = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the type of strokes that define a gesture.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>single</code></td><td>0</td><td> A gesture is made of only one stroke. </td></tr>
			/// <tr><td><code>multiple</code></td><td>1</td><td> A gesture is made of multiple strokes. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gestureStrokeType">android.R.attr.gestureStrokeType</see>
			/// .
			/// </attr>
			/// <attr>name android:gestureStrokeType</attr>
			public const int GestureOverlayView_gestureStrokeType = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Width of the stroke used to draw the gesture.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gestureStrokeWidth">android.R.attr.gestureStrokeWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:gestureStrokeWidth</attr>
			public const int GestureOverlayView_gestureStrokeWidth = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether horizontal (when the orientation is vertical) or vertical
			/// (when orientation is horizontal) strokes automatically define a gesture.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int GestureOverlayView_orientation = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color used to draw the user's strokes until we are sure it's a gesture.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.uncertainGestureColor">android.R.attr.uncertainGestureColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:uncertainGestureColor</attr>
			public const int GestureOverlayView_uncertainGestureColor = 3;

			/// <summary>Drawable used to render a geometric shape, with a gradient or a solid color.
			/// 	</summary>
			/// <remarks>
			/// Drawable used to render a geometric shape, with a gradient or a solid color.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_dither">android:dither</see>
			/// </code></td><td> Enables or disables dithering.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_innerRadius">android:innerRadius</see>
			/// </code></td><td> Inner radius of the ring.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_innerRadiusRatio">android:innerRadiusRatio</see>
			/// </code></td><td> Inner radius of the ring expressed as a ratio of the ring's width.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_shape">android:shape</see>
			/// </code></td><td> Indicates what shape to fill with a gradient.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_thickness">android:thickness</see>
			/// </code></td><td> Thickness of the ring.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_thicknessRatio">android:thicknessRatio</see>
			/// </code></td><td> Thickness of the ring expressed as a ratio of the ring's width.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_useLevel">android:useLevel</see>
			/// </code></td><td> Indicates whether the drawable's level affects the way the gradient is drawn.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawable_visible">android:visible</see>
			/// </code></td><td> Indicates whether the drawable should intially be visible.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GradientDrawable_dither">GradientDrawable_dither</seealso>
			/// <seealso cref="GradientDrawable_innerRadius">GradientDrawable_innerRadius</seealso>
			/// <seealso cref="GradientDrawable_innerRadiusRatio">GradientDrawable_innerRadiusRatio
			/// 	</seealso>
			/// <seealso cref="GradientDrawable_shape">GradientDrawable_shape</seealso>
			/// <seealso cref="GradientDrawable_thickness">GradientDrawable_thickness</seealso>
			/// <seealso cref="GradientDrawable_thicknessRatio">GradientDrawable_thicknessRatio</seealso>
			/// <seealso cref="GradientDrawable_useLevel">GradientDrawable_useLevel</seealso>
			/// <seealso cref="GradientDrawable_visible">GradientDrawable_visible</seealso>
			public static readonly int[] GradientDrawable = new int[] { unchecked((int)(0x0101011c
				)), unchecked((int)(0x01010194)), unchecked((int)(0x0101019a)), unchecked((int)(
				0x0101019b)), unchecked((int)(0x0101019c)), unchecked((int)(0x0101019f)), unchecked(
				(int)(0x0101025f)), unchecked((int)(0x01010260)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables dithering.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dither">android.R.attr.dither</see>
			/// .
			/// </attr>
			/// <attr>name android:dither</attr>
			public const int GradientDrawable_dither = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Inner radius of the ring. When defined, innerRadiusRatio is ignored.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.innerRadius">android.R.attr.innerRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:innerRadius</attr>
			public const int GradientDrawable_innerRadius = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Inner radius of the ring expressed as a ratio of the ring's width. For instance,
			/// if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
			/// This value is ignored if innerRadius is defined. Default value is 9.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.innerRadiusRatio">android.R.attr.innerRadiusRatio</see>
			/// .
			/// </attr>
			/// <attr>name android:innerRadiusRatio</attr>
			public const int GradientDrawable_innerRadiusRatio = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates what shape to fill with a gradient.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>rectangle</code></td><td>0</td><td> Rectangle shape, with optional rounder corners. </td></tr>
			/// <tr><td><code>oval</code></td><td>1</td><td> Oval shape. </td></tr>
			/// <tr><td><code>line</code></td><td>2</td><td> Line shape. </td></tr>
			/// <tr><td><code>ring</code></td><td>3</td><td> Ring shape. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shape">android.R.attr.shape</see>
			/// .
			/// </attr>
			/// <attr>name android:shape</attr>
			public const int GradientDrawable_shape = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Thickness of the ring. When defined, thicknessRatio is ignored.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thickness">android.R.attr.thickness</see>
			/// .
			/// </attr>
			/// <attr>name android:thickness</attr>
			public const int GradientDrawable_thickness = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Thickness of the ring expressed as a ratio of the ring's width. For instance,
			/// if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
			/// This value is ignored if innerRadius is defined. Default value is 3.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thicknessRatio">android.R.attr.thicknessRatio</see>
			/// .
			/// </attr>
			/// <attr>name android:thicknessRatio</attr>
			public const int GradientDrawable_thicknessRatio = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the drawable's level affects the way the gradient is drawn.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.useLevel">android.R.attr.useLevel</see>
			/// .
			/// </attr>
			/// <attr>name android:useLevel</attr>
			public const int GradientDrawable_useLevel = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the drawable should intially be visible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int GradientDrawable_visible = 1;

			/// <summary>Used to describe the gradient used to fill the shape of a GradientDrawable.
			/// 	</summary>
			/// <remarks>
			/// Used to describe the gradient used to fill the shape of a GradientDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_angle">android:angle</see>
			/// </code></td><td> Angle of the gradient.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_centerColor">android:centerColor</see>
			/// </code></td><td> Optional center color.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_centerX">android:centerX</see>
			/// </code></td><td> X coordinate of the origin of the gradient within the shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_centerY">android:centerY</see>
			/// </code></td><td> Y coordinate of the origin of the gradient within the shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_endColor">android:endColor</see>
			/// </code></td><td> End color of the gradient.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_gradientRadius">android:gradientRadius</see>
			/// </code></td><td> Radius of the gradient, used only with radial gradient.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_startColor">android:startColor</see>
			/// </code></td><td> Start color of the gradient.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_type">android:type</see>
			/// </code></td><td> Type of gradient.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableGradient_useLevel">android:useLevel</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GradientDrawableGradient_angle">GradientDrawableGradient_angle</seealso>
			/// <seealso cref="GradientDrawableGradient_centerColor">GradientDrawableGradient_centerColor
			/// 	</seealso>
			/// <seealso cref="GradientDrawableGradient_centerX">GradientDrawableGradient_centerX
			/// 	</seealso>
			/// <seealso cref="GradientDrawableGradient_centerY">GradientDrawableGradient_centerY
			/// 	</seealso>
			/// <seealso cref="GradientDrawableGradient_endColor">GradientDrawableGradient_endColor
			/// 	</seealso>
			/// <seealso cref="GradientDrawableGradient_gradientRadius">GradientDrawableGradient_gradientRadius
			/// 	</seealso>
			/// <seealso cref="GradientDrawableGradient_startColor">GradientDrawableGradient_startColor
			/// 	</seealso>
			/// <seealso cref="GradientDrawableGradient_type">GradientDrawableGradient_type</seealso>
			/// <seealso cref="GradientDrawableGradient_useLevel">GradientDrawableGradient_useLevel
			/// 	</seealso>
			public static readonly int[] GradientDrawableGradient = new int[] { unchecked((int
				)(0x0101019d)), unchecked((int)(0x0101019e)), unchecked((int)(0x0101019f)), unchecked(
				(int)(0x010101a0)), unchecked((int)(0x010101a1)), unchecked((int)(0x010101a2)), 
				unchecked((int)(0x010101a3)), unchecked((int)(0x010101a4)), unchecked((int)(0x0101020b
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Angle of the gradient.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.angle">android.R.attr.angle</see>
			/// .
			/// </attr>
			/// <attr>name android:angle</attr>
			public const int GradientDrawableGradient_angle = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Optional center color. For linear gradients, use centerX or centerY
			/// to place the center color.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.centerColor">android.R.attr.centerColor</see>
			/// .
			/// </attr>
			/// <attr>name android:centerColor</attr>
			public const int GradientDrawableGradient_centerColor = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// X coordinate of the origin of the gradient within the shape.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.centerX">android.R.attr.centerX</see>
			/// .
			/// </attr>
			/// <attr>name android:centerX</attr>
			public const int GradientDrawableGradient_centerX = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Y coordinate of the origin of the gradient within the shape.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.centerY">android.R.attr.centerY</see>
			/// .
			/// </attr>
			/// <attr>name android:centerY</attr>
			public const int GradientDrawableGradient_centerY = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// End color of the gradient.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.endColor">android.R.attr.endColor</see>
			/// .
			/// </attr>
			/// <attr>name android:endColor</attr>
			public const int GradientDrawableGradient_endColor = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the gradient, used only with radial gradient.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gradientRadius">android.R.attr.gradientRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:gradientRadius</attr>
			public const int GradientDrawableGradient_gradientRadius = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Start color of the gradient.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.startColor">android.R.attr.startColor</see>
			/// .
			/// </attr>
			/// <attr>name android:startColor</attr>
			public const int GradientDrawableGradient_startColor = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Type of gradient. The default type is linear.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>linear</code></td><td>0</td><td> Linear gradient. </td></tr>
			/// <tr><td><code>radial</code></td><td>1</td><td> Radial, or circular, gradient. </td></tr>
			/// <tr><td><code>sweep</code></td><td>2</td><td> Sweep, or angled or diamond, gradient. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.type">android.R.attr.type</see>
			/// .
			/// </attr>
			/// <attr>name android:type</attr>
			public const int GradientDrawableGradient_type = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.useLevel">android.R.attr.useLevel</see>
			/// attribute's value can be found in the
			/// <see cref="GradientDrawableGradient">GradientDrawableGradient</see>
			/// array.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:useLevel</attr>
			public const int GradientDrawableGradient_useLevel = 2;

			/// <summary>Used to specify the optional padding of a GradientDrawable.</summary>
			/// <remarks>
			/// Used to specify the optional padding of a GradientDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawablePadding_bottom">android:bottom</see>
			/// </code></td><td> Amount of bottom padding inside the gradient shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawablePadding_left">android:left</see>
			/// </code></td><td> Amount of left padding inside the gradient shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawablePadding_right">android:right</see>
			/// </code></td><td> Amount of right padding inside the gradient shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawablePadding_top">android:top</see>
			/// </code></td><td> Amount of top padding inside the gradient shape.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GradientDrawablePadding_bottom">GradientDrawablePadding_bottom</seealso>
			/// <seealso cref="GradientDrawablePadding_left">GradientDrawablePadding_left</seealso>
			/// <seealso cref="GradientDrawablePadding_right">GradientDrawablePadding_right</seealso>
			/// <seealso cref="GradientDrawablePadding_top">GradientDrawablePadding_top</seealso>
			public static readonly int[] GradientDrawablePadding = new int[] { unchecked((int
				)(0x010101ad)), unchecked((int)(0x010101ae)), unchecked((int)(0x010101af)), unchecked(
				(int)(0x010101b0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of bottom padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bottom">android.R.attr.bottom</see>
			/// .
			/// </attr>
			/// <attr>name android:bottom</attr>
			public const int GradientDrawablePadding_bottom = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of left padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.left">android.R.attr.left</see>
			/// .
			/// </attr>
			/// <attr>name android:left</attr>
			public const int GradientDrawablePadding_left = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of right padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.right">android.R.attr.right</see>
			/// .
			/// </attr>
			/// <attr>name android:right</attr>
			public const int GradientDrawablePadding_right = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of top padding inside the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.top">android.R.attr.top</see>
			/// .
			/// </attr>
			/// <attr>name android:top</attr>
			public const int GradientDrawablePadding_top = 1;

			/// <summary>Used to specify the size of the shape for GradientDrawable.</summary>
			/// <remarks>
			/// Used to specify the size of the shape for GradientDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableSize_height">android:height</see>
			/// </code></td><td> Height of the gradient shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableSize_width">android:width</see>
			/// </code></td><td> Width of the gradient shape.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GradientDrawableSize_height">GradientDrawableSize_height</seealso>
			/// <seealso cref="GradientDrawableSize_width">GradientDrawableSize_width</seealso>
			public static readonly int[] GradientDrawableSize = new int[] { unchecked((int)(0x01010155
				)), unchecked((int)(0x01010159)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Height of the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.height">android.R.attr.height</see>
			/// .
			/// </attr>
			/// <attr>name android:height</attr>
			public const int GradientDrawableSize_height = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Width of the gradient shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.width">android.R.attr.width</see>
			/// .
			/// </attr>
			/// <attr>name android:width</attr>
			public const int GradientDrawableSize_width = 1;

			/// <summary>Used to fill the shape of GradientDrawable with a solid color.</summary>
			/// <remarks>
			/// Used to fill the shape of GradientDrawable with a solid color.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableSolid_color">android:color</see>
			/// </code></td><td> Solid color for the gradient shape.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GradientDrawableSolid_color">GradientDrawableSolid_color</seealso>
			public static readonly int[] GradientDrawableSolid = new int[] { unchecked((int)(
				0x010101a5)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Solid color for the gradient shape.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.color">android.R.attr.color</see>
			/// .
			/// </attr>
			/// <attr>name android:color</attr>
			public const int GradientDrawableSolid_color = 0;

			/// <summary>Used to describe the optional stroke of a GradientDrawable.</summary>
			/// <remarks>
			/// Used to describe the optional stroke of a GradientDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableStroke_color">android:color</see>
			/// </code></td><td> Color of the gradient shape's stroke.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableStroke_dashGap">android:dashGap</see>
			/// </code></td><td> Gap between dashes in the stroke.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableStroke_dashWidth">android:dashWidth</see>
			/// </code></td><td> Length of a dash in the stroke.</td></tr>
			/// <tr><td><code>
			/// <see cref="GradientDrawableStroke_width">android:width</see>
			/// </code></td><td> Width of the gradient shape's stroke.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GradientDrawableStroke_color">GradientDrawableStroke_color</seealso>
			/// <seealso cref="GradientDrawableStroke_dashGap">GradientDrawableStroke_dashGap</seealso>
			/// <seealso cref="GradientDrawableStroke_dashWidth">GradientDrawableStroke_dashWidth
			/// 	</seealso>
			/// <seealso cref="GradientDrawableStroke_width">GradientDrawableStroke_width</seealso>
			public static readonly int[] GradientDrawableStroke = new int[] { unchecked((int)
				(0x01010159)), unchecked((int)(0x010101a5)), unchecked((int)(0x010101a6)), unchecked(
				(int)(0x010101a7)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the gradient shape's stroke.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.color">android.R.attr.color</see>
			/// .
			/// </attr>
			/// <attr>name android:color</attr>
			public const int GradientDrawableStroke_color = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Gap between dashes in the stroke.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dashGap">android.R.attr.dashGap</see>
			/// .
			/// </attr>
			/// <attr>name android:dashGap</attr>
			public const int GradientDrawableStroke_dashGap = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Length of a dash in the stroke.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dashWidth">android.R.attr.dashWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:dashWidth</attr>
			public const int GradientDrawableStroke_dashWidth = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Width of the gradient shape's stroke.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.width">android.R.attr.width</see>
			/// .
			/// </attr>
			/// <attr>name android:width</attr>
			public const int GradientDrawableStroke_width = 0;

			/// <summary>Attributes that can be used with a GridLayout.</summary>
			/// <remarks>
			/// Attributes that can be used with a GridLayout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_alignmentMode">android:alignmentMode</see>
			/// </code></td><td> When set to alignMargins, causes alignment to take place between the outer
			/// boundary of a view, as defined by its margins.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_columnCount">android:columnCount</see>
			/// </code></td><td> The maxmimum number of columns to create when automatically positioning children.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_columnOrderPreserved">android:columnOrderPreserved</see>
			/// </code></td><td> When set to true, forces column boundaries to appear in the same order
			/// as column indices.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_orientation">android:orientation</see>
			/// </code></td><td> The orientation property is not used during layout.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_rowCount">android:rowCount</see>
			/// </code></td><td> The maxmimum number of rows to create when automatically positioning children.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_rowOrderPreserved">android:rowOrderPreserved</see>
			/// </code></td><td> When set to true, forces row boundaries to appear in the same order
			/// as row indices.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_useDefaultMargins">android:useDefaultMargins</see>
			/// </code></td><td> When set to true, tells GridLayout to use default margins when none are specified
			/// in a view's layout parameters.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GridLayout_alignmentMode">GridLayout_alignmentMode</seealso>
			/// <seealso cref="GridLayout_columnCount">GridLayout_columnCount</seealso>
			/// <seealso cref="GridLayout_columnOrderPreserved">GridLayout_columnOrderPreserved</seealso>
			/// <seealso cref="GridLayout_orientation">GridLayout_orientation</seealso>
			/// <seealso cref="GridLayout_rowCount">GridLayout_rowCount</seealso>
			/// <seealso cref="GridLayout_rowOrderPreserved">GridLayout_rowOrderPreserved</seealso>
			/// <seealso cref="GridLayout_useDefaultMargins">GridLayout_useDefaultMargins</seealso>
			public static readonly int[] GridLayout = new int[] { unchecked((int)(0x010100c4)
				), unchecked((int)(0x01010375)), unchecked((int)(0x01010376)), unchecked((int)(0x01010377
				)), unchecked((int)(0x01010378)), unchecked((int)(0x01010379)), unchecked((int)(
				0x0101037a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to alignMargins, causes alignment to take place between the outer
			/// boundary of a view, as defined by its margins. When set to alignBounds,
			/// causes alignment to take place between the edges of the view.
			/// The default is alignMargins.
			/// See
			/// <see cref="android.widget.GridLayout.setAlignmentMode(int)">android.widget.GridLayout.setAlignmentMode(int)
			/// 	</see>
			/// .
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>alignBounds</code></td><td>0</td><td> Align the bounds of the children.
			/// See
			/// <see cref="android.widget.GridLayout.ALIGN_BOUNDS">android.widget.GridLayout.ALIGN_BOUNDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>alignMargins</code></td><td>1</td><td> Align the margins of the children.
			/// See
			/// <see cref="android.widget.GridLayout.ALIGN_MARGINS">android.widget.GridLayout.ALIGN_MARGINS
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alignmentMode">android.R.attr.alignmentMode</see>
			/// .
			/// </attr>
			/// <attr>name android:alignmentMode</attr>
			public const int GridLayout_alignmentMode = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The maxmimum number of columns to create when automatically positioning children.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.columnCount">android.R.attr.columnCount</see>
			/// .
			/// </attr>
			/// <attr>name android:columnCount</attr>
			public const int GridLayout_columnCount = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, forces column boundaries to appear in the same order
			/// as column indices.
			/// The default is true.
			/// See
			/// <see cref="android.widget.GridLayout.setColumnOrderPreserved(bool)">android.widget.GridLayout.setColumnOrderPreserved(bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.columnOrderPreserved">android.R.attr.columnOrderPreserved
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:columnOrderPreserved</attr>
			public const int GridLayout_columnOrderPreserved = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The orientation property is not used during layout. It is only used to
			/// allocate row and column parameters when they are not specified by its children's
			/// layout paramters. GridLayout works like LinearLayout in this case;
			/// putting all the components either in a single row or in a single column -
			/// depending on the value of this flag. In the horizontal case, a columnCount
			/// property may be additionally supplied to force new rows to be created when a
			/// row is full. The rowCount attribute may be used similarly in the vertical case.
			/// The default is horizontal.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int GridLayout_orientation = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The maxmimum number of rows to create when automatically positioning children.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rowCount">android.R.attr.rowCount</see>
			/// .
			/// </attr>
			/// <attr>name android:rowCount</attr>
			public const int GridLayout_rowCount = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, forces row boundaries to appear in the same order
			/// as row indices.
			/// The default is true.
			/// See
			/// <see cref="android.widget.GridLayout.setRowOrderPreserved(bool)">android.widget.GridLayout.setRowOrderPreserved(bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rowOrderPreserved">android.R.attr.rowOrderPreserved</see>
			/// .
			/// </attr>
			/// <attr>name android:rowOrderPreserved</attr>
			public const int GridLayout_rowOrderPreserved = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, tells GridLayout to use default margins when none are specified
			/// in a view's layout parameters.
			/// The default value is false.
			/// See
			/// <see cref="android.widget.GridLayout.setUseDefaultMargins(bool)">android.widget.GridLayout.setUseDefaultMargins(bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.useDefaultMargins">android.R.attr.useDefaultMargins</see>
			/// .
			/// </attr>
			/// <attr>name android:useDefaultMargins</attr>
			public const int GridLayout_useDefaultMargins = 5;

			/// <summary>Attributes that can be used with a GridLayoutAnimation.</summary>
			/// <remarks>
			/// Attributes that can be used with a GridLayoutAnimation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GridLayoutAnimation_columnDelay">android:columnDelay</see>
			/// </code></td><td> Fraction of the animation duration used to delay the beginning of
			/// the animation of each column.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayoutAnimation_direction">android:direction</see>
			/// </code></td><td> Direction of the animation in the grid.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayoutAnimation_directionPriority">android:directionPriority</see>
			/// </code></td><td> Priority of the rows and columns.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayoutAnimation_rowDelay">android:rowDelay</see>
			/// </code></td><td> Fraction of the animation duration used to delay the beginning of
			/// the animation of each row.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GridLayoutAnimation_columnDelay">GridLayoutAnimation_columnDelay</seealso>
			/// <seealso cref="GridLayoutAnimation_direction">GridLayoutAnimation_direction</seealso>
			/// <seealso cref="GridLayoutAnimation_directionPriority">GridLayoutAnimation_directionPriority
			/// 	</seealso>
			/// <seealso cref="GridLayoutAnimation_rowDelay">GridLayoutAnimation_rowDelay</seealso>
			public static readonly int[] GridLayoutAnimation = new int[] { unchecked((int)(0x010101cf
				)), unchecked((int)(0x010101d0)), unchecked((int)(0x010101d1)), unchecked((int)(
				0x010101d2)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each column.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.columnDelay">android.R.attr.columnDelay</see>
			/// .
			/// </attr>
			/// <attr>name android:columnDelay</attr>
			public const int GridLayoutAnimation_columnDelay = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Direction of the animation in the grid.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>left_to_right</code></td><td>0x0</td><td> Animates columns from left to right. </td></tr>
			/// <tr><td><code>right_to_left</code></td><td>0x1</td><td> Animates columns from right to left. </td></tr>
			/// <tr><td><code>top_to_bottom</code></td><td>0x0</td><td> Animates rows from top to bottom. </td></tr>
			/// <tr><td><code>bottom_to_top</code></td><td>0x2</td><td> Animates rows from bottom to top. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.direction">android.R.attr.direction</see>
			/// .
			/// </attr>
			/// <attr>name android:direction</attr>
			public const int GridLayoutAnimation_direction = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Priority of the rows and columns. When the priority is none,
			/// both rows and columns have the same priority. When the priority is
			/// column, the animations will be applied on the columns first. The same
			/// goes for rows.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Rows and columns are animated at the same time. </td></tr>
			/// <tr><td><code>column</code></td><td>1</td><td> Columns are animated first. </td></tr>
			/// <tr><td><code>row</code></td><td>2</td><td> Rows are animated first. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.directionPriority">android.R.attr.directionPriority</see>
			/// .
			/// </attr>
			/// <attr>name android:directionPriority</attr>
			public const int GridLayoutAnimation_directionPriority = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each row.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rowDelay">android.R.attr.rowDelay</see>
			/// .
			/// </attr>
			/// <attr>name android:rowDelay</attr>
			public const int GridLayoutAnimation_rowDelay = 1;

			/// <summary>Attributes that can be used with a GridLayout_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a GridLayout_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_Layout_layout_column">android:layout_column</see>
			/// </code></td><td> The column boundary delimiting the left of the group of cells
			/// occupied by this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_Layout_layout_columnSpan">android:layout_columnSpan</see>
			/// </code></td><td> The column span: the difference between the right and left
			/// boundaries delimiting the group of cells occupied by this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_Layout_layout_gravity">android:layout_gravity</see>
			/// </code></td><td> Gravity specifies how a component should be placed in its group of cells.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_Layout_layout_row">android:layout_row</see>
			/// </code></td><td> The row boundary delimiting the top of the group of cells
			/// occupied by this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridLayout_Layout_layout_rowSpan">android:layout_rowSpan</see>
			/// </code></td><td> The row span: the difference between the bottom and top
			/// boundaries delimiting the group of cells occupied by this view.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GridLayout_Layout_layout_column">GridLayout_Layout_layout_column</seealso>
			/// <seealso cref="GridLayout_Layout_layout_columnSpan">GridLayout_Layout_layout_columnSpan
			/// 	</seealso>
			/// <seealso cref="GridLayout_Layout_layout_gravity">GridLayout_Layout_layout_gravity
			/// 	</seealso>
			/// <seealso cref="GridLayout_Layout_layout_row">GridLayout_Layout_layout_row</seealso>
			/// <seealso cref="GridLayout_Layout_layout_rowSpan">GridLayout_Layout_layout_rowSpan
			/// 	</seealso>
			public static readonly int[] GridLayout_Layout = new int[] { unchecked((int)(0x010100b3
				)), unchecked((int)(0x0101014c)), unchecked((int)(0x0101037b)), unchecked((int)(
				0x0101037c)), unchecked((int)(0x0101037d)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The column boundary delimiting the left of the group of cells
			/// occupied by this view.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_column">android.R.attr.layout_column</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_column</attr>
			public const int GridLayout_Layout_layout_column = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The column span: the difference between the right and left
			/// boundaries delimiting the group of cells occupied by this view.
			/// The default is one.
			/// See
			/// <see cref="android.widget.GridLayout.Spec">android.widget.GridLayout.Spec</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_columnSpan">android.R.attr.layout_columnSpan</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_columnSpan</attr>
			public const int GridLayout_Layout_layout_columnSpan = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Gravity specifies how a component should be placed in its group of cells.
			/// The default is LEFT | BASELINE.
			/// See
			/// <see cref="android.widget.GridLayout.LayoutParams.setGravity(int)">android.widget.GridLayout.LayoutParams.setGravity(int)
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_gravity">android.R.attr.layout_gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_gravity</attr>
			public const int GridLayout_Layout_layout_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The row boundary delimiting the top of the group of cells
			/// occupied by this view.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_row">android.R.attr.layout_row</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_row</attr>
			public const int GridLayout_Layout_layout_row = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The row span: the difference between the bottom and top
			/// boundaries delimiting the group of cells occupied by this view.
			/// The default is one.
			/// See
			/// <see cref="android.widget.GridLayout.Spec">android.widget.GridLayout.Spec</see>
			/// .
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_rowSpan">android.R.attr.layout_rowSpan</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_rowSpan</attr>
			public const int GridLayout_Layout_layout_rowSpan = 3;

			/// <summary>Attributes that can be used with a GridView.</summary>
			/// <remarks>
			/// Attributes that can be used with a GridView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="GridView_columnWidth">android:columnWidth</see>
			/// </code></td><td> Specifies the fixed width for each column.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridView_gravity">android:gravity</see>
			/// </code></td><td> Specifies the gravity within each cell.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridView_horizontalSpacing">android:horizontalSpacing</see>
			/// </code></td><td> Defines the default horizontal spacing between columns.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridView_numColumns">android:numColumns</see>
			/// </code></td><td> Defines how many columns to show.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridView_stretchMode">android:stretchMode</see>
			/// </code></td><td> Defines how columns should stretch to fill the available empty space, if any.</td></tr>
			/// <tr><td><code>
			/// <see cref="GridView_verticalSpacing">android:verticalSpacing</see>
			/// </code></td><td> Defines the default vertical spacing between rows.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="GridView_columnWidth">GridView_columnWidth</seealso>
			/// <seealso cref="GridView_gravity">GridView_gravity</seealso>
			/// <seealso cref="GridView_horizontalSpacing">GridView_horizontalSpacing</seealso>
			/// <seealso cref="GridView_numColumns">GridView_numColumns</seealso>
			/// <seealso cref="GridView_stretchMode">GridView_stretchMode</seealso>
			/// <seealso cref="GridView_verticalSpacing">GridView_verticalSpacing</seealso>
			public static readonly int[] GridView = new int[] { unchecked((int)(0x010100af)), 
				unchecked((int)(0x01010114)), unchecked((int)(0x01010115)), unchecked((int)(0x01010116
				)), unchecked((int)(0x01010117)), unchecked((int)(0x01010118)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the fixed width for each column.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.columnWidth">android.R.attr.columnWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:columnWidth</attr>
			public const int GridView_columnWidth = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the gravity within each cell.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int GridView_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the default horizontal spacing between columns.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.horizontalSpacing">android.R.attr.horizontalSpacing</see>
			/// .
			/// </attr>
			/// <attr>name android:horizontalSpacing</attr>
			public const int GridView_horizontalSpacing = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines how many columns to show.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>auto_fit</code></td><td>-1</td><td> Display as many columns as possible to fill the available space. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.numColumns">android.R.attr.numColumns</see>
			/// .
			/// </attr>
			/// <attr>name android:numColumns</attr>
			public const int GridView_numColumns = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines how columns should stretch to fill the available empty space, if any.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Stretching is disabled. </td></tr>
			/// <tr><td><code>spacingWidth</code></td><td>1</td><td> The spacing between each column is stretched. </td></tr>
			/// <tr><td><code>columnWidth</code></td><td>2</td><td> Each column is stretched equally. </td></tr>
			/// <tr><td><code>spacingWidthUniform</code></td><td>3</td><td> The spacing between each column is uniformly stretched.. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.stretchMode">android.R.attr.stretchMode</see>
			/// .
			/// </attr>
			/// <attr>name android:stretchMode</attr>
			public const int GridView_stretchMode = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the default vertical spacing between rows.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.verticalSpacing">android.R.attr.verticalSpacing</see>
			/// .
			/// </attr>
			/// <attr>name android:verticalSpacing</attr>
			public const int GridView_verticalSpacing = 2;

			/// <summary>Attributes that can be used with a HorizontalScrollView.</summary>
			/// <remarks>
			/// Attributes that can be used with a HorizontalScrollView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="HorizontalScrollView_fillViewport">android:fillViewport</see>
			/// </code></td><td> Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="HorizontalScrollView_fillViewport">HorizontalScrollView_fillViewport
			/// 	</seealso>
			public static readonly int[] HorizontalScrollView = new int[] { unchecked((int)(0x0101017a
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the scrollview should stretch its content to fill the viewport.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillViewport">android.R.attr.fillViewport</see>
			/// .
			/// </attr>
			/// <attr>name android:fillViewport</attr>
			public const int HorizontalScrollView_fillViewport = 0;

			/// <summary>Attributes that can be used with a Icon.</summary>
			/// <remarks>
			/// Attributes that can be used with a Icon.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Icon_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// <tr><td><code>
			/// <see cref="Icon_mimeType">android:mimeType</see>
			/// </code></td><td> Specify a MIME type that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataType(string)">IntentFilter.addDataType()
			/// 	</see>
			/// .</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Icon_icon">Icon_icon</seealso>
			/// <seealso cref="Icon_mimeType">Icon_mimeType</seealso>
			public static readonly int[] Icon = new int[] { unchecked((int)(0x01010002)), unchecked(
				(int)(0x01010026)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int Icon_icon = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specify a MIME type that is handled, as per
			/// <see cref="android.content.IntentFilter.addDataType(string)">IntentFilter.addDataType()
			/// 	</see>
			/// .
			/// <p><em>Note: MIME type matching in the Android framework is
			/// case-sensitive, unlike formal RFC MIME types.  As a result,
			/// MIME types here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.mimeType">android.R.attr.mimeType</see>
			/// .
			/// </attr>
			/// <attr>name android:mimeType</attr>
			public const int Icon_mimeType = 1;

			/// <summary>Attributes that can be used with a IconDefault.</summary>
			/// <remarks>
			/// Attributes that can be used with a IconDefault.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="IconDefault_icon">android:icon</see>
			/// </code></td><td> A Drawable resource providing a graphical representation of its
			/// associated item.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="IconDefault_icon">IconDefault_icon</seealso>
			public static readonly int[] IconDefault = new int[] { unchecked((int)(0x01010002
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A Drawable resource providing a graphical representation of its
			/// associated item.  Use with the
			/// application tag (to supply a default icon for all application
			/// components), or with the activity, receiver, service, or instrumentation
			/// tag (to supply a specific icon for that component).  It may also be
			/// used with the intent-filter tag to supply an icon to show to the
			/// user when an activity is being selected based on a particular Intent.
			/// <p>The given icon will be used to display to the user a graphical
			/// representation of its associated component; for example, as the icon
			/// for main activity that is displayed in the launcher.  This must be
			/// a reference to a Drawable resource containing the image definition.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int IconDefault_icon = 0;

			/// <summary>Attributes that can be used with a IconMenuView.</summary>
			/// <remarks>
			/// Attributes that can be used with a IconMenuView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="IconMenuView_maxItems">android:maxItems</see>
			/// </code></td><td> Defines the maximum number of items to show.</td></tr>
			/// <tr><td><code>
			/// <see cref="IconMenuView_maxItemsPerRow">android:maxItemsPerRow</see>
			/// </code></td><td> Defines the maximum number of items per row.</td></tr>
			/// <tr><td><code>
			/// <see cref="IconMenuView_maxRows">android:maxRows</see>
			/// </code></td><td> Defines the maximum number of rows displayed.</td></tr>
			/// <tr><td><code>
			/// <see cref="IconMenuView_moreIcon">android:moreIcon</see>
			/// </code></td><td> 'More' icon.</td></tr>
			/// <tr><td><code>
			/// <see cref="IconMenuView_rowHeight">android:rowHeight</see>
			/// </code></td><td> Defines the height of each row.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="IconMenuView_maxItems">IconMenuView_maxItems</seealso>
			/// <seealso cref="IconMenuView_maxItemsPerRow">IconMenuView_maxItemsPerRow</seealso>
			/// <seealso cref="IconMenuView_maxRows">IconMenuView_maxRows</seealso>
			/// <seealso cref="IconMenuView_moreIcon">IconMenuView_moreIcon</seealso>
			/// <seealso cref="IconMenuView_rowHeight">IconMenuView_rowHeight</seealso>
			public static readonly int[] IconMenuView = new int[] { unchecked((int)(0x01010132
				)), unchecked((int)(0x01010133)), unchecked((int)(0x01010134)), unchecked((int)(
				0x01010135)), unchecked((int)(0x010103eb)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the maximum number of items to show.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:maxItems</attr>
			public const int IconMenuView_maxItems = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the maximum number of items per row.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxItemsPerRow">android.R.attr.maxItemsPerRow</see>
			/// .
			/// </attr>
			/// <attr>name android:maxItemsPerRow</attr>
			public const int IconMenuView_maxItemsPerRow = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the maximum number of rows displayed.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxRows">android.R.attr.maxRows</see>
			/// .
			/// </attr>
			/// <attr>name android:maxRows</attr>
			public const int IconMenuView_maxRows = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// 'More' icon.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.moreIcon">android.R.attr.moreIcon</see>
			/// .
			/// </attr>
			/// <attr>name android:moreIcon</attr>
			public const int IconMenuView_moreIcon = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the height of each row.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rowHeight">android.R.attr.rowHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:rowHeight</attr>
			public const int IconMenuView_rowHeight = 0;

			/// <summary>Attributes that can be used with a ImageSwitcher.</summary>
			/// <remarks>Attributes that can be used with a ImageSwitcher.</remarks>
			public static readonly int[] ImageSwitcher = new int[] {  };

			/// <summary>Attributes that can be used with a ImageView.</summary>
			/// <remarks>
			/// Attributes that can be used with a ImageView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_adjustViewBounds">android:adjustViewBounds</see>
			/// </code></td><td> Set this to true if you want the ImageView to adjust its bounds
			/// to preserve the aspect ratio of its drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_baseline">android:baseline</see>
			/// </code></td><td> The offset of the baseline within this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_baselineAlignBottom">android:baselineAlignBottom</see>
			/// </code></td><td> If true, the image view will be baseline aligned with based on its
			/// bottom edge.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_cropToPadding">android:cropToPadding</see>
			/// </code></td><td> If true, the image will be cropped to fit within its padding.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_drawableAlpha">android:drawableAlpha</see>
			/// </code></td><td> @hide The alpha value (0-255) set on the ImageView's drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_maxHeight">android:maxHeight</see>
			/// </code></td><td> An optional argument to supply a maximum height for this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_maxWidth">android:maxWidth</see>
			/// </code></td><td> An optional argument to supply a maximum width for this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_scaleType">android:scaleType</see>
			/// </code></td><td> Controls how the image should be resized or moved to match the size
			/// of this ImageView.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_src">android:src</see>
			/// </code></td><td> Sets a drawable as the content of this ImageView.</td></tr>
			/// <tr><td><code>
			/// <see cref="ImageView_tint">android:tint</see>
			/// </code></td><td> Set a tinting color for the image.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ImageView_adjustViewBounds">ImageView_adjustViewBounds</seealso>
			/// <seealso cref="ImageView_baseline">ImageView_baseline</seealso>
			/// <seealso cref="ImageView_baselineAlignBottom">ImageView_baselineAlignBottom</seealso>
			/// <seealso cref="ImageView_cropToPadding">ImageView_cropToPadding</seealso>
			/// <seealso cref="ImageView_drawableAlpha">ImageView_drawableAlpha</seealso>
			/// <seealso cref="ImageView_maxHeight">ImageView_maxHeight</seealso>
			/// <seealso cref="ImageView_maxWidth">ImageView_maxWidth</seealso>
			/// <seealso cref="ImageView_scaleType">ImageView_scaleType</seealso>
			/// <seealso cref="ImageView_src">ImageView_src</seealso>
			/// <seealso cref="ImageView_tint">ImageView_tint</seealso>
			public static readonly int[] ImageView = new int[] { unchecked((int)(0x01010119))
				, unchecked((int)(0x0101011d)), unchecked((int)(0x0101011e)), unchecked((int)(0x0101011f
				)), unchecked((int)(0x01010120)), unchecked((int)(0x01010121)), unchecked((int)(
				0x01010122)), unchecked((int)(0x01010123)), unchecked((int)(0x0101031c)), unchecked(
				(int)(0x010103e4)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set this to true if you want the ImageView to adjust its bounds
			/// to preserve the aspect ratio of its drawable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.adjustViewBounds">android.R.attr.adjustViewBounds</see>
			/// .
			/// </attr>
			/// <attr>name android:adjustViewBounds</attr>
			public const int ImageView_adjustViewBounds = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The offset of the baseline within this view. See {see android.view.View#getBaseline}
			/// for details
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.baseline">android.R.attr.baseline</see>
			/// .
			/// </attr>
			/// <attr>name android:baseline</attr>
			public const int ImageView_baseline = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, the image view will be baseline aligned with based on its
			/// bottom edge.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.baselineAlignBottom">android.R.attr.baselineAlignBottom
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:baselineAlignBottom</attr>
			public const int ImageView_baselineAlignBottom = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, the image will be cropped to fit within its padding.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.cropToPadding">android.R.attr.cropToPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:cropToPadding</attr>
			public const int ImageView_cropToPadding = 7;

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// The alpha value (0-255) set on the ImageView's drawable. Equivalent
			/// to calling ImageView.setAlpha(int), not the same as View.setAlpha(float).
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </hide>
			/// <attr>name android:drawableAlpha</attr>
			public const int ImageView_drawableAlpha = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional argument to supply a maximum height for this view.
			/// See {see android.widget.ImageView#setMaxHeight} for details.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxHeight">android.R.attr.maxHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:maxHeight</attr>
			public const int ImageView_maxHeight = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional argument to supply a maximum width for this view.
			/// See {see android.widget.ImageView#setMaxWidth} for details.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxWidth">android.R.attr.maxWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:maxWidth</attr>
			public const int ImageView_maxWidth = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Controls how the image should be resized or moved to match the size
			/// of this ImageView.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>matrix</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>fitXY</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>fitStart</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>fitCenter</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>fitEnd</code></td><td>4</td><td></td></tr>
			/// <tr><td><code>center</code></td><td>5</td><td></td></tr>
			/// <tr><td><code>centerCrop</code></td><td>6</td><td></td></tr>
			/// <tr><td><code>centerInside</code></td><td>7</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scaleType">android.R.attr.scaleType</see>
			/// .
			/// </attr>
			/// <attr>name android:scaleType</attr>
			public const int ImageView_scaleType = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets a drawable as the content of this ImageView.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.src">android.R.attr.src</see>
			/// .
			/// </attr>
			/// <attr>name android:src</attr>
			public const int ImageView_src = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set a tinting color for the image.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tint">android.R.attr.tint</see>
			/// .
			/// </attr>
			/// <attr>name android:tint</attr>
			public const int ImageView_tint = 5;

			/// <summary>
			/// An <code>input-extras</code> is a container for extra data to supply to
			/// an input method.
			/// </summary>
			/// <remarks>
			/// An <code>input-extras</code> is a container for extra data to supply to
			/// an input method.  Contains
			/// one more more
			/// <see cref="Extra"><extra></see>
			/// tags.
			/// </remarks>
			public static readonly int[] InputExtras = new int[] {  };

			/// <summary>
			/// Use <code>input-method</code> as the root tag of the XML resource that
			/// describes an
			/// <see cref="android.view.inputmethod.InputMethod">android.view.inputmethod.InputMethod
			/// 	</see>
			/// service, which is
			/// referenced from its
			/// <see cref="android.view.inputmethod.InputMethodClass.SERVICE_META_DATA">android.view.inputmethod.InputMethodClass.SERVICE_META_DATA
			/// 	</see>
			/// meta-data entry.  Described here are the attributes that can be
			/// included in that tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_isDefault">android:isDefault</see>
			/// </code></td><td> Set to true in all of the configurations for which this input
			/// method should be considered an option as the default.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> Component name of an activity that allows the user to modify
			/// the settings for this service.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="InputMethod_isDefault">InputMethod_isDefault</seealso>
			/// <seealso cref="InputMethod_settingsActivity">InputMethod_settingsActivity</seealso>
			public static readonly int[] InputMethod = new int[] { unchecked((int)(0x01010221
				)), unchecked((int)(0x01010225)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set to true in all of the configurations for which this input
			/// method should be considered an option as the default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isDefault">android.R.attr.isDefault</see>
			/// .
			/// </attr>
			/// <attr>name android:isDefault</attr>
			public const int InputMethod_isDefault = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int InputMethod_settingsActivity = 1;

			/// <summary>Attributes that can be used with a InputMethodService.</summary>
			/// <remarks>
			/// Attributes that can be used with a InputMethodService.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="InputMethodService_imeExtractEnterAnimation">android:imeExtractEnterAnimation
			/// 	</see>
			/// </code></td><td> Animation to use when showing the fullscreen extract UI after
			/// it had previously been hidden.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethodService_imeExtractExitAnimation">android:imeExtractExitAnimation
			/// 	</see>
			/// </code></td><td> Animation to use when hiding the fullscreen extract UI after
			/// it had previously been shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethodService_imeFullscreenBackground">android:imeFullscreenBackground
			/// 	</see>
			/// </code></td><td> Background to use for entire input method when it is being
			/// shown in fullscreen mode with the extract view, to ensure
			/// that it completely covers the application.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="InputMethodService_imeExtractEnterAnimation">InputMethodService_imeExtractEnterAnimation
			/// 	</seealso>
			/// <seealso cref="InputMethodService_imeExtractExitAnimation">InputMethodService_imeExtractExitAnimation
			/// 	</seealso>
			/// <seealso cref="InputMethodService_imeFullscreenBackground">InputMethodService_imeFullscreenBackground
			/// 	</seealso>
			public static readonly int[] InputMethodService = new int[] { unchecked((int)(0x0101022c
				)), unchecked((int)(0x01010268)), unchecked((int)(0x01010269)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Animation to use when showing the fullscreen extract UI after
			/// it had previously been hidden.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeExtractEnterAnimation">android.R.attr.imeExtractEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:imeExtractEnterAnimation</attr>
			public const int InputMethodService_imeExtractEnterAnimation = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Animation to use when hiding the fullscreen extract UI after
			/// it had previously been shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeExtractExitAnimation">android.R.attr.imeExtractExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:imeExtractExitAnimation</attr>
			public const int InputMethodService_imeExtractExitAnimation = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background to use for entire input method when it is being
			/// shown in fullscreen mode with the extract view, to ensure
			/// that it completely covers the application.  This allows,
			/// for example, the candidate view to be hidden
			/// while in fullscreen mode without having the application show through
			/// behind it.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeFullscreenBackground">android.R.attr.imeFullscreenBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:imeFullscreenBackground</attr>
			public const int InputMethodService_imeFullscreenBackground = 0;

			/// <summary>This is the subtype of InputMethod.</summary>
			/// <remarks>
			/// This is the subtype of InputMethod. Subtype can describe locales (e.g. en_US, fr_FR...)
			/// and modes (e.g. voice, keyboard...), and is used for IME switch. This subtype allows
			/// the system to call the specified subtype of the IME directly.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_icon">android:icon</see>
			/// </code></td><td> The icon of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_imeSubtypeExtraValue">android:imeSubtypeExtraValue
			/// 	</see>
			/// </code></td><td> The extra value of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_imeSubtypeLocale">android:imeSubtypeLocale</see>
			/// </code></td><td> The locale of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_imeSubtypeMode">android:imeSubtypeMode</see>
			/// </code></td><td> The mode of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_isAuxiliary">android:isAuxiliary</see>
			/// </code></td><td> Set true if the subtype is auxiliary.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_label">android:label</see>
			/// </code></td><td> The name of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="InputMethod_Subtype_overridesImplicitlyEnabledSubtype">android:overridesImplicitlyEnabledSubtype
			/// 	</see>
			/// </code></td><td> Set true when this subtype should be selected by default if no other subtypes are
			/// selected explicitly.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="InputMethod_Subtype_icon">InputMethod_Subtype_icon</seealso>
			/// <seealso cref="InputMethod_Subtype_imeSubtypeExtraValue">InputMethod_Subtype_imeSubtypeExtraValue
			/// 	</seealso>
			/// <seealso cref="InputMethod_Subtype_imeSubtypeLocale">InputMethod_Subtype_imeSubtypeLocale
			/// 	</seealso>
			/// <seealso cref="InputMethod_Subtype_imeSubtypeMode">InputMethod_Subtype_imeSubtypeMode
			/// 	</seealso>
			/// <seealso cref="InputMethod_Subtype_isAuxiliary">InputMethod_Subtype_isAuxiliary</seealso>
			/// <seealso cref="InputMethod_Subtype_label">InputMethod_Subtype_label</seealso>
			/// <seealso cref="InputMethod_Subtype_overridesImplicitlyEnabledSubtype">InputMethod_Subtype_overridesImplicitlyEnabledSubtype
			/// 	</seealso>
			public static readonly int[] InputMethod_Subtype = new int[] { unchecked((int)(0x01010001
				)), unchecked((int)(0x01010002)), unchecked((int)(0x010102ec)), unchecked((int)(
				0x010102ed)), unchecked((int)(0x010102ee)), unchecked((int)(0x0101037f)), unchecked(
				(int)(0x010103a2)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The icon of the subtype.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int InputMethod_Subtype_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The extra value of the subtype. This string can be any string and will be passed to
			/// the IME when the framework calls the IME with the subtype.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeSubtypeExtraValue">android.R.attr.imeSubtypeExtraValue
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:imeSubtypeExtraValue</attr>
			public const int InputMethod_Subtype_imeSubtypeExtraValue = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
			/// and will be passed to the IME when the framework calls the IME
			/// with the subtype. This is also used by the framework to know the supported locales
			/// of the IME.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeSubtypeLocale">android.R.attr.imeSubtypeLocale</see>
			/// .
			/// </attr>
			/// <attr>name android:imeSubtypeLocale</attr>
			public const int InputMethod_Subtype_imeSubtypeLocale = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The mode of the subtype. This string can be a mode (e.g. voice, keyboard...) and this
			/// string will be passed to the IME when the framework calls the IME with the
			/// subtype.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeSubtypeMode">android.R.attr.imeSubtypeMode</see>
			/// .
			/// </attr>
			/// <attr>name android:imeSubtypeMode</attr>
			public const int InputMethod_Subtype_imeSubtypeMode = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
			/// input method selection list in the settings app.
			/// InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
			/// chooses a target subtype.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isAuxiliary">android.R.attr.isAuxiliary</see>
			/// .
			/// </attr>
			/// <attr>name android:isAuxiliary</attr>
			public const int InputMethod_Subtype_isAuxiliary = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the subtype.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int InputMethod_Subtype_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set true when this subtype should be selected by default if no other subtypes are
			/// selected explicitly. Note that a subtype with this parameter being true will
			/// not be shown in the subtypes list.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.overridesImplicitlyEnabledSubtype">android.R.attr.overridesImplicitlyEnabledSubtype
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:overridesImplicitlyEnabledSubtype</attr>
			public const int InputMethod_Subtype_overridesImplicitlyEnabledSubtype = 6;

			/// <summary>Attributes that can be used with a InsetDrawable.</summary>
			/// <remarks>
			/// Attributes that can be used with a InsetDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="InsetDrawable_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
			/// <tr><td><code>
			/// <see cref="InsetDrawable_insetBottom">android:insetBottom</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="InsetDrawable_insetLeft">android:insetLeft</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="InsetDrawable_insetRight">android:insetRight</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="InsetDrawable_insetTop">android:insetTop</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="InsetDrawable_visible">android:visible</see>
			/// </code></td><td> Provides initial visibility state of the drawable; the default
			/// value is false.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="InsetDrawable_drawable">InsetDrawable_drawable</seealso>
			/// <seealso cref="InsetDrawable_insetBottom">InsetDrawable_insetBottom</seealso>
			/// <seealso cref="InsetDrawable_insetLeft">InsetDrawable_insetLeft</seealso>
			/// <seealso cref="InsetDrawable_insetRight">InsetDrawable_insetRight</seealso>
			/// <seealso cref="InsetDrawable_insetTop">InsetDrawable_insetTop</seealso>
			/// <seealso cref="InsetDrawable_visible">InsetDrawable_visible</seealso>
			public static readonly int[] InsetDrawable = new int[] { unchecked((int)(0x01010194
				)), unchecked((int)(0x01010199)), unchecked((int)(0x010101b7)), unchecked((int)(
				0x010101b8)), unchecked((int)(0x010101b9)), unchecked((int)(0x010101ba)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int InsetDrawable_drawable = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.insetBottom">android.R.attr.insetBottom</see>
			/// attribute's value can be found in the
			/// <see cref="InsetDrawable">InsetDrawable</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:insetBottom</attr>
			public const int InsetDrawable_insetBottom = 5;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.insetLeft">android.R.attr.insetLeft</see>
			/// attribute's value can be found in the
			/// <see cref="InsetDrawable">InsetDrawable</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:insetLeft</attr>
			public const int InsetDrawable_insetLeft = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.insetRight">android.R.attr.insetRight</see>
			/// attribute's value can be found in the
			/// <see cref="InsetDrawable">InsetDrawable</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:insetRight</attr>
			public const int InsetDrawable_insetRight = 3;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.insetTop">android.R.attr.insetTop</see>
			/// attribute's value can be found in the
			/// <see cref="InsetDrawable">InsetDrawable</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:insetTop</attr>
			public const int InsetDrawable_insetTop = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Provides initial visibility state of the drawable; the default
			/// value is false.  See
			/// <see cref="android.graphics.drawable.Drawable.setVisible(bool, bool)">android.graphics.drawable.Drawable.setVisible(bool, bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int InsetDrawable_visible = 0;

			/// <summary>
			/// Declaration of an
			/// <see cref="android.content.Intent">android.content.Intent</see>
			/// object in XML.  May
			/// also include zero or more
			/// <see cref="IntentCategory"><category> and</see>
			/// {
			/// <see cref="Extra"><extra></see>
			/// tags.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Intent_action">android:action</see>
			/// </code></td><td> The action name to assign to the Intent, as per
			/// <see cref="android.content.Intent.setAction(string)">Intent.setAction()</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Intent_data">android:data</see>
			/// </code></td><td> The data URI to assign to the Intent, as per
			/// <see cref="android.content.Intent.setData(System.Uri)">Intent.setData()</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Intent_mimeType">android:mimeType</see>
			/// </code></td><td> The MIME type name to assign to the Intent, as per
			/// <see cref="android.content.Intent.setType(string)">Intent.setType()</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Intent_targetClass">android:targetClass</see>
			/// </code></td><td> The class part of the ComponentName to assign to the Intent, as per
			/// <see cref="android.content.Intent.setComponent(android.content.ComponentName)">Intent.setComponent()
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Intent_targetPackage">android:targetPackage</see>
			/// </code></td><td> The package part of the ComponentName to assign to the Intent, as per
			/// <see cref="android.content.Intent.setComponent(android.content.ComponentName)">Intent.setComponent()
			/// 	</see>
			/// .</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="Intent_action">Intent_action</seealso>
			/// <seealso cref="Intent_data">Intent_data</seealso>
			/// <seealso cref="Intent_mimeType">Intent_mimeType</seealso>
			/// <seealso cref="Intent_targetClass">Intent_targetClass</seealso>
			/// <seealso cref="Intent_targetPackage">Intent_targetPackage</seealso>
			public static readonly int[] Intent = new int[] { unchecked((int)(0x01010021)), unchecked(
				(int)(0x01010026)), unchecked((int)(0x0101002d)), unchecked((int)(0x0101002e)), 
				unchecked((int)(0x0101002f)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The action name to assign to the Intent, as per
			/// <see cref="android.content.Intent.setAction(string)">Intent.setAction()</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.action">android.R.attr.action</see>
			/// .
			/// </attr>
			/// <attr>name android:action</attr>
			public const int Intent_action = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The data URI to assign to the Intent, as per
			/// <see cref="android.content.Intent.setData(System.Uri)">Intent.setData()</see>
			/// .
			/// <p><em>Note: scheme and host name matching in the Android framework is
			/// case-sensitive, unlike the formal RFC.  As a result,
			/// URIs here should always be normalized to use lower case letters
			/// for these elements (as well as other proper Uri normalization).</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.data">android.R.attr.data</see>
			/// .
			/// </attr>
			/// <attr>name android:data</attr>
			public const int Intent_data = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The MIME type name to assign to the Intent, as per
			/// <see cref="android.content.Intent.setType(string)">Intent.setType()</see>
			/// .
			/// <p><em>Note: MIME type matching in the Android framework is
			/// case-sensitive, unlike formal RFC MIME types.  As a result,
			/// MIME types here should always use lower case letters.</em></p>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.mimeType">android.R.attr.mimeType</see>
			/// .
			/// </attr>
			/// <attr>name android:mimeType</attr>
			public const int Intent_mimeType = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The class part of the ComponentName to assign to the Intent, as per
			/// <see cref="android.content.Intent.setComponent(android.content.ComponentName)">Intent.setComponent()
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.targetClass">android.R.attr.targetClass</see>
			/// .
			/// </attr>
			/// <attr>name android:targetClass</attr>
			public const int Intent_targetClass = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The package part of the ComponentName to assign to the Intent, as per
			/// <see cref="android.content.Intent.setComponent(android.content.ComponentName)">Intent.setComponent()
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.targetPackage">android.R.attr.targetPackage</see>
			/// .
			/// </attr>
			/// <attr>name android:targetPackage</attr>
			public const int Intent_targetPackage = 0;

			/// <summary>
			/// A category to add to an Intent, as per
			/// <see cref="android.content.Intent.addCategory(string)">Intent.addCategory()</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="IntentCategory_name">android:name</see>
			/// </code></td><td> Required name of the category.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="IntentCategory_name">IntentCategory_name</seealso>
			public static readonly int[] IntentCategory = new int[] { unchecked((int)(0x01010003
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Required name of the category.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.name">android.R.attr.name</see>
			/// .
			/// </attr>
			/// <attr>name android:name</attr>
			public const int IntentCategory_name = 0;

			/// <summary>Attributes that can be used with a Keyboard.</summary>
			/// <remarks>
			/// Attributes that can be used with a Keyboard.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_horizontalGap">android:horizontalGap</see>
			/// </code></td><td> Default horizontal gap between keys.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_keyHeight">android:keyHeight</see>
			/// </code></td><td> Default height of a key, in pixels or percentage of display width.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_keyWidth">android:keyWidth</see>
			/// </code></td><td> Default width of a key, in pixels or percentage of display width.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_verticalGap">android:verticalGap</see>
			/// </code></td><td> Default vertical gap between rows of keys.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Keyboard_horizontalGap">Keyboard_horizontalGap</seealso>
			/// <seealso cref="Keyboard_keyHeight">Keyboard_keyHeight</seealso>
			/// <seealso cref="Keyboard_keyWidth">Keyboard_keyWidth</seealso>
			/// <seealso cref="Keyboard_verticalGap">Keyboard_verticalGap</seealso>
			public static readonly int[] Keyboard = new int[] { unchecked((int)(0x0101023d)), 
				unchecked((int)(0x0101023e)), unchecked((int)(0x0101023f)), unchecked((int)(0x01010240
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default horizontal gap between keys.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.horizontalGap">android.R.attr.horizontalGap</see>
			/// .
			/// </attr>
			/// <attr>name android:horizontalGap</attr>
			public const int Keyboard_horizontalGap = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default height of a key, in pixels or percentage of display width.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyHeight">android.R.attr.keyHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:keyHeight</attr>
			public const int Keyboard_keyHeight = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default width of a key, in pixels or percentage of display width.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyWidth">android.R.attr.keyWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:keyWidth</attr>
			public const int Keyboard_keyWidth = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default vertical gap between rows of keys.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.verticalGap">android.R.attr.verticalGap</see>
			/// .
			/// </attr>
			/// <attr>name android:verticalGap</attr>
			public const int Keyboard_verticalGap = 3;

			/// <summary>Attributes that can be used with a KeyboardView.</summary>
			/// <remarks>
			/// Attributes that can be used with a KeyboardView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyBackground">android:keyBackground</see>
			/// </code></td><td> Image for the key.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyPreviewHeight">android:keyPreviewHeight</see>
			/// </code></td><td> Height of the key press feedback popup.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyPreviewLayout">android:keyPreviewLayout</see>
			/// </code></td><td> Layout resource for key press feedback.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyPreviewOffset">android:keyPreviewOffset</see>
			/// </code></td><td> Vertical offset of the key press feedback from the key.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyTextColor">android:keyTextColor</see>
			/// </code></td><td> Color to use for the label in a key.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyTextSize">android:keyTextSize</see>
			/// </code></td><td> Size of the text for character keys.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_keyboardViewStyle">android:keyboardViewStyle</see>
			/// </code></td><td> Default KeyboardView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_labelTextSize">android:labelTextSize</see>
			/// </code></td><td> Size of the text for custom keys with some text and no icon.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_popupLayout">android:popupLayout</see>
			/// </code></td><td> Layout resource for popup keyboards.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_shadowColor">android:shadowColor</see>
			/// </code></td><td> Place a shadow of the specified color behind the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_shadowRadius">android:shadowRadius</see>
			/// </code></td><td> Radius of the shadow.</td></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardView_verticalCorrection">android:verticalCorrection</see>
			/// </code></td><td> Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="KeyboardView_keyBackground">KeyboardView_keyBackground</seealso>
			/// <seealso cref="KeyboardView_keyPreviewHeight">KeyboardView_keyPreviewHeight</seealso>
			/// <seealso cref="KeyboardView_keyPreviewLayout">KeyboardView_keyPreviewLayout</seealso>
			/// <seealso cref="KeyboardView_keyPreviewOffset">KeyboardView_keyPreviewOffset</seealso>
			/// <seealso cref="KeyboardView_keyTextColor">KeyboardView_keyTextColor</seealso>
			/// <seealso cref="KeyboardView_keyTextSize">KeyboardView_keyTextSize</seealso>
			/// <seealso cref="KeyboardView_keyboardViewStyle">KeyboardView_keyboardViewStyle</seealso>
			/// <seealso cref="KeyboardView_labelTextSize">KeyboardView_labelTextSize</seealso>
			/// <seealso cref="KeyboardView_popupLayout">KeyboardView_popupLayout</seealso>
			/// <seealso cref="KeyboardView_shadowColor">KeyboardView_shadowColor</seealso>
			/// <seealso cref="KeyboardView_shadowRadius">KeyboardView_shadowRadius</seealso>
			/// <seealso cref="KeyboardView_verticalCorrection">KeyboardView_verticalCorrection</seealso>
			public static readonly int[] KeyboardView = new int[] { unchecked((int)(0x01010161
				)), unchecked((int)(0x01010164)), unchecked((int)(0x01010233)), unchecked((int)(
				0x01010234)), unchecked((int)(0x01010235)), unchecked((int)(0x01010236)), unchecked(
				(int)(0x01010237)), unchecked((int)(0x01010238)), unchecked((int)(0x01010239)), 
				unchecked((int)(0x0101023a)), unchecked((int)(0x0101023b)), unchecked((int)(0x010103fc
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Image for the key. This image needs to be a StateListDrawable, with the following
			/// possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
			/// checkable+checked+pressed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyBackground">android.R.attr.keyBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:keyBackground</attr>
			public const int KeyboardView_keyBackground = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Height of the key press feedback popup.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyPreviewHeight">android.R.attr.keyPreviewHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:keyPreviewHeight</attr>
			public const int KeyboardView_keyPreviewHeight = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Layout resource for key press feedback.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyPreviewLayout">android.R.attr.keyPreviewLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:keyPreviewLayout</attr>
			public const int KeyboardView_keyPreviewLayout = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Vertical offset of the key press feedback from the key.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyPreviewOffset">android.R.attr.keyPreviewOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:keyPreviewOffset</attr>
			public const int KeyboardView_keyPreviewOffset = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color to use for the label in a key.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyTextColor">android.R.attr.keyTextColor</see>
			/// .
			/// </attr>
			/// <attr>name android:keyTextColor</attr>
			public const int KeyboardView_keyTextColor = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of the text for character keys.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyTextSize">android.R.attr.keyTextSize</see>
			/// .
			/// </attr>
			/// <attr>name android:keyTextSize</attr>
			public const int KeyboardView_keyTextSize = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default KeyboardView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:keyboardViewStyle</attr>
			public const int KeyboardView_keyboardViewStyle = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of the text for custom keys with some text and no icon.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.labelTextSize">android.R.attr.labelTextSize</see>
			/// .
			/// </attr>
			/// <attr>name android:labelTextSize</attr>
			public const int KeyboardView_labelTextSize = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Layout resource for popup keyboards.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.popupLayout">android.R.attr.popupLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:popupLayout</attr>
			public const int KeyboardView_popupLayout = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Place a shadow of the specified color behind the text.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shadowColor">android.R.attr.shadowColor</see>
			/// .
			/// </attr>
			/// <attr>name android:shadowColor</attr>
			public const int KeyboardView_shadowColor = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shadowRadius">android.R.attr.shadowRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:shadowRadius</attr>
			public const int KeyboardView_shadowRadius = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount to offset the touch Y coordinate by, for bias correction.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.verticalCorrection">android.R.attr.verticalCorrection</see>
			/// .
			/// </attr>
			/// <attr>name android:verticalCorrection</attr>
			public const int KeyboardView_verticalCorrection = 9;

			/// <summary>Attributes that can be used with a KeyboardViewPreviewState.</summary>
			/// <remarks>
			/// Attributes that can be used with a KeyboardViewPreviewState.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="KeyboardViewPreviewState_state_long_pressable">android:state_long_pressable
			/// 	</see>
			/// </code></td><td> State for
			/// <see cref="android.inputmethodservice.KeyboardView">KeyboardView</see>
			/// key preview background.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="KeyboardViewPreviewState_state_long_pressable">KeyboardViewPreviewState_state_long_pressable
			/// 	</seealso>
			public static readonly int[] KeyboardViewPreviewState = new int[] { unchecked((int
				)(0x0101023c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State for
			/// <see cref="android.inputmethodservice.KeyboardView">KeyboardView</see>
			/// key preview background.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_long_pressable">android.R.attr.state_long_pressable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:state_long_pressable</attr>
			public const int KeyboardViewPreviewState_state_long_pressable = 0;

			/// <summary>Attributes that can be used with a Keyboard_Key.</summary>
			/// <remarks>
			/// Attributes that can be used with a Keyboard_Key.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_codes">android:codes</see>
			/// </code></td><td> The unicode value or comma-separated values that this key outputs.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_iconPreview">android:iconPreview</see>
			/// </code></td><td> The icon to show in the popup preview.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_isModifier">android:isModifier</see>
			/// </code></td><td> Whether this is a modifier key such as Alt or Shift.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_isRepeatable">android:isRepeatable</see>
			/// </code></td><td> Whether long-pressing on this key will make it repeat.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_isSticky">android:isSticky</see>
			/// </code></td><td> Whether this is a toggle key.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_keyEdgeFlags">android:keyEdgeFlags</see>
			/// </code></td><td> Key edge flags.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_keyIcon">android:keyIcon</see>
			/// </code></td><td> The icon to display on the key instead of the label.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_keyLabel">android:keyLabel</see>
			/// </code></td><td> The label to display on the key.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_keyOutputText">android:keyOutputText</see>
			/// </code></td><td> The string of characters to output when this key is pressed.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_keyboardMode">android:keyboardMode</see>
			/// </code></td><td> Mode of the keyboard.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_popupCharacters">android:popupCharacters</see>
			/// </code></td><td> The characters to display in the popup keyboard.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Key_popupKeyboard">android:popupKeyboard</see>
			/// </code></td><td> The XML keyboard layout of any popup keyboard.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Keyboard_Key_codes">Keyboard_Key_codes</seealso>
			/// <seealso cref="Keyboard_Key_iconPreview">Keyboard_Key_iconPreview</seealso>
			/// <seealso cref="Keyboard_Key_isModifier">Keyboard_Key_isModifier</seealso>
			/// <seealso cref="Keyboard_Key_isRepeatable">Keyboard_Key_isRepeatable</seealso>
			/// <seealso cref="Keyboard_Key_isSticky">Keyboard_Key_isSticky</seealso>
			/// <seealso cref="Keyboard_Key_keyEdgeFlags">Keyboard_Key_keyEdgeFlags</seealso>
			/// <seealso cref="Keyboard_Key_keyIcon">Keyboard_Key_keyIcon</seealso>
			/// <seealso cref="Keyboard_Key_keyLabel">Keyboard_Key_keyLabel</seealso>
			/// <seealso cref="Keyboard_Key_keyOutputText">Keyboard_Key_keyOutputText</seealso>
			/// <seealso cref="Keyboard_Key_keyboardMode">Keyboard_Key_keyboardMode</seealso>
			/// <seealso cref="Keyboard_Key_popupCharacters">Keyboard_Key_popupCharacters</seealso>
			/// <seealso cref="Keyboard_Key_popupKeyboard">Keyboard_Key_popupKeyboard</seealso>
			public static readonly int[] Keyboard_Key = new int[] { unchecked((int)(0x01010242
				)), unchecked((int)(0x01010243)), unchecked((int)(0x01010244)), unchecked((int)(
				0x01010245)), unchecked((int)(0x01010246)), unchecked((int)(0x01010247)), unchecked(
				(int)(0x01010248)), unchecked((int)(0x01010249)), unchecked((int)(0x0101024a)), 
				unchecked((int)(0x0101024b)), unchecked((int)(0x0101024c)), unchecked((int)(0x0101024d
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The unicode value or comma-separated values that this key outputs.
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.codes">android.R.attr.codes</see>
			/// .
			/// </attr>
			/// <attr>name android:codes</attr>
			public const int Keyboard_Key_codes = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The icon to show in the popup preview.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.iconPreview">android.R.attr.iconPreview</see>
			/// .
			/// </attr>
			/// <attr>name android:iconPreview</attr>
			public const int Keyboard_Key_iconPreview = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether this is a modifier key such as Alt or Shift.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isModifier">android.R.attr.isModifier</see>
			/// .
			/// </attr>
			/// <attr>name android:isModifier</attr>
			public const int Keyboard_Key_isModifier = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether long-pressing on this key will make it repeat.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isRepeatable">android.R.attr.isRepeatable</see>
			/// .
			/// </attr>
			/// <attr>name android:isRepeatable</attr>
			public const int Keyboard_Key_isRepeatable = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether this is a toggle key.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isSticky">android.R.attr.isSticky</see>
			/// .
			/// </attr>
			/// <attr>name android:isSticky</attr>
			public const int Keyboard_Key_isSticky = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Key edge flags.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>left</code></td><td>1</td><td> Key is anchored to the left of the keyboard. </td></tr>
			/// <tr><td><code>right</code></td><td>2</td><td> Key is anchored to the right of the keyboard. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyEdgeFlags">android.R.attr.keyEdgeFlags</see>
			/// .
			/// </attr>
			/// <attr>name android:keyEdgeFlags</attr>
			public const int Keyboard_Key_keyEdgeFlags = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The icon to display on the key instead of the label.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyIcon">android.R.attr.keyIcon</see>
			/// .
			/// </attr>
			/// <attr>name android:keyIcon</attr>
			public const int Keyboard_Key_keyIcon = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The label to display on the key.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyLabel">android.R.attr.keyLabel</see>
			/// .
			/// </attr>
			/// <attr>name android:keyLabel</attr>
			public const int Keyboard_Key_keyLabel = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The string of characters to output when this key is pressed.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyOutputText">android.R.attr.keyOutputText</see>
			/// .
			/// </attr>
			/// <attr>name android:keyOutputText</attr>
			public const int Keyboard_Key_keyOutputText = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Mode of the keyboard. If the mode doesn't match the
			/// requested keyboard mode, the key will be skipped.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyboardMode">android.R.attr.keyboardMode</see>
			/// .
			/// </attr>
			/// <attr>name android:keyboardMode</attr>
			public const int Keyboard_Key_keyboardMode = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The characters to display in the popup keyboard.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.popupCharacters">android.R.attr.popupCharacters</see>
			/// .
			/// </attr>
			/// <attr>name android:popupCharacters</attr>
			public const int Keyboard_Key_popupCharacters = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The XML keyboard layout of any popup keyboard.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.popupKeyboard">android.R.attr.popupKeyboard</see>
			/// .
			/// </attr>
			/// <attr>name android:popupKeyboard</attr>
			public const int Keyboard_Key_popupKeyboard = 1;

			/// <summary>Attributes that can be used with a Keyboard_Row.</summary>
			/// <remarks>
			/// Attributes that can be used with a Keyboard_Row.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Row_keyboardMode">android:keyboardMode</see>
			/// </code></td><td> Mode of the keyboard.</td></tr>
			/// <tr><td><code>
			/// <see cref="Keyboard_Row_rowEdgeFlags">android:rowEdgeFlags</see>
			/// </code></td><td> Row edge flags.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Keyboard_Row_keyboardMode">Keyboard_Row_keyboardMode</seealso>
			/// <seealso cref="Keyboard_Row_rowEdgeFlags">Keyboard_Row_rowEdgeFlags</seealso>
			public static readonly int[] Keyboard_Row = new int[] { unchecked((int)(0x01010241
				)), unchecked((int)(0x0101024d)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Mode of the keyboard. If the mode doesn't match the
			/// requested keyboard mode, the row will be skipped.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keyboardMode">android.R.attr.keyboardMode</see>
			/// .
			/// </attr>
			/// <attr>name android:keyboardMode</attr>
			public const int Keyboard_Row_keyboardMode = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Row edge flags.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>4</td><td> Row is anchored to the top of the keyboard. </td></tr>
			/// <tr><td><code>bottom</code></td><td>8</td><td> Row is anchored to the bottom of the keyboard. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rowEdgeFlags">android.R.attr.rowEdgeFlags</see>
			/// .
			/// </attr>
			/// <attr>name android:rowEdgeFlags</attr>
			public const int Keyboard_Row_rowEdgeFlags = 0;

			/// <summary>Drawable used to render several drawables stacked on top of each other.</summary>
			/// <remarks>
			/// Drawable used to render several drawables stacked on top of each other.
			/// Each child drawable can be controlled individually.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawable_opacity">android:opacity</see>
			/// </code></td><td> Indicates the opacity of the layer.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LayerDrawable_opacity">LayerDrawable_opacity</seealso>
			public static readonly int[] LayerDrawable = new int[] { unchecked((int)(0x0101031e
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates the opacity of the layer. This can be useful to allow the
			/// system to enable drawing optimizations. The default value is
			/// translucent.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>opaque</code></td><td>-1</td><td> Indicates that the layer is opaque and contains no transparent
			/// nor translucent pixels. </td></tr>
			/// <tr><td><code>transparent</code></td><td>-2</td><td> The layer is completely transparent (no pixel will be drawn.) </td></tr>
			/// <tr><td><code>translucent</code></td><td>-3</td><td> The layer has translucent pixels. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.opacity">android.R.attr.opacity</see>
			/// .
			/// </attr>
			/// <attr>name android:opacity</attr>
			public const int LayerDrawable_opacity = 0;

			/// <summary>Describes an item (or child) of a LayerDrawable.</summary>
			/// <remarks>
			/// Describes an item (or child) of a LayerDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawableItem_bottom">android:bottom</see>
			/// </code></td><td> Bottom coordinate of the layer.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawableItem_drawable">android:drawable</see>
			/// </code></td><td> Drawable used to render the layer.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawableItem_id">android:id</see>
			/// </code></td><td> Identifier of the layer.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawableItem_left">android:left</see>
			/// </code></td><td> Left coordinate of the layer.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawableItem_right">android:right</see>
			/// </code></td><td> Right coordinate of the layer.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayerDrawableItem_top">android:top</see>
			/// </code></td><td> Top coordinate of the layer.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LayerDrawableItem_bottom">LayerDrawableItem_bottom</seealso>
			/// <seealso cref="LayerDrawableItem_drawable">LayerDrawableItem_drawable</seealso>
			/// <seealso cref="LayerDrawableItem_id">LayerDrawableItem_id</seealso>
			/// <seealso cref="LayerDrawableItem_left">LayerDrawableItem_left</seealso>
			/// <seealso cref="LayerDrawableItem_right">LayerDrawableItem_right</seealso>
			/// <seealso cref="LayerDrawableItem_top">LayerDrawableItem_top</seealso>
			public static readonly int[] LayerDrawableItem = new int[] { unchecked((int)(0x010100d0
				)), unchecked((int)(0x01010199)), unchecked((int)(0x010101ad)), unchecked((int)(
				0x010101ae)), unchecked((int)(0x010101af)), unchecked((int)(0x010101b0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Bottom coordinate of the layer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bottom">android.R.attr.bottom</see>
			/// .
			/// </attr>
			/// <attr>name android:bottom</attr>
			public const int LayerDrawableItem_bottom = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used to render the layer.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int LayerDrawableItem_drawable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier of the layer. This can be used to retrieve the layer
			/// from a drawbable container.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.id">android.R.attr.id</see>
			/// .
			/// </attr>
			/// <attr>name android:id</attr>
			public const int LayerDrawableItem_id = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Left coordinate of the layer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.left">android.R.attr.left</see>
			/// .
			/// </attr>
			/// <attr>name android:left</attr>
			public const int LayerDrawableItem_left = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Right coordinate of the layer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.right">android.R.attr.right</see>
			/// .
			/// </attr>
			/// <attr>name android:right</attr>
			public const int LayerDrawableItem_right = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Top coordinate of the layer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.top">android.R.attr.top</see>
			/// .
			/// </attr>
			/// <attr>name android:top</attr>
			public const int LayerDrawableItem_top = 3;

			/// <summary>Attributes that can be used with a LayoutAnimation.</summary>
			/// <remarks>
			/// Attributes that can be used with a LayoutAnimation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LayoutAnimation_animation">android:animation</see>
			/// </code></td><td> Animation to use on each child.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayoutAnimation_animationOrder">android:animationOrder</see>
			/// </code></td><td> The order in which the animations will be started.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayoutAnimation_delay">android:delay</see>
			/// </code></td><td> Fraction of the animation duration used to delay the beginning of
			/// the animation of each child.</td></tr>
			/// <tr><td><code>
			/// <see cref="LayoutAnimation_interpolator">android:interpolator</see>
			/// </code></td><td> Interpolator used to interpolate the delay between the start of
			/// each animation.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LayoutAnimation_animation">LayoutAnimation_animation</seealso>
			/// <seealso cref="LayoutAnimation_animationOrder">LayoutAnimation_animationOrder</seealso>
			/// <seealso cref="LayoutAnimation_delay">LayoutAnimation_delay</seealso>
			/// <seealso cref="LayoutAnimation_interpolator">LayoutAnimation_interpolator</seealso>
			public static readonly int[] LayoutAnimation = new int[] { unchecked((int)(0x01010141
				)), unchecked((int)(0x010101cc)), unchecked((int)(0x010101cd)), unchecked((int)(
				0x010101ce)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Animation to use on each child.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animation">android.R.attr.animation</see>
			/// .
			/// </attr>
			/// <attr>name android:animation</attr>
			public const int LayoutAnimation_animation = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The order in which the animations will be started.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> Animations are started in the natural order. </td></tr>
			/// <tr><td><code>reverse</code></td><td>1</td><td> Animations are started in the reverse order. </td></tr>
			/// <tr><td><code>random</code></td><td>2</td><td> Animations are started randomly. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animationOrder">android.R.attr.animationOrder</see>
			/// .
			/// </attr>
			/// <attr>name android:animationOrder</attr>
			public const int LayoutAnimation_animationOrder = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Fraction of the animation duration used to delay the beginning of
			/// the animation of each child.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.delay">android.R.attr.delay</see>
			/// .
			/// </attr>
			/// <attr>name android:delay</attr>
			public const int LayoutAnimation_delay = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Interpolator used to interpolate the delay between the start of
			/// each animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.interpolator">android.R.attr.interpolator</see>
			/// .
			/// </attr>
			/// <attr>name android:interpolator</attr>
			public const int LayoutAnimation_interpolator = 0;

			/// <summary>Attributes that can be used with a LevelListDrawableItem.</summary>
			/// <remarks>
			/// Attributes that can be used with a LevelListDrawableItem.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LevelListDrawableItem_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
			/// <tr><td><code>
			/// <see cref="LevelListDrawableItem_maxLevel">android:maxLevel</see>
			/// </code></td><td> The maximum level allowed for this item.</td></tr>
			/// <tr><td><code>
			/// <see cref="LevelListDrawableItem_minLevel">android:minLevel</see>
			/// </code></td><td> The minimum level allowed for this item.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LevelListDrawableItem_drawable">LevelListDrawableItem_drawable</seealso>
			/// <seealso cref="LevelListDrawableItem_maxLevel">LevelListDrawableItem_maxLevel</seealso>
			/// <seealso cref="LevelListDrawableItem_minLevel">LevelListDrawableItem_minLevel</seealso>
			public static readonly int[] LevelListDrawableItem = new int[] { unchecked((int)(
				0x01010199)), unchecked((int)(0x010101b1)), unchecked((int)(0x010101b2)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int LevelListDrawableItem_drawable = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The maximum level allowed for this item.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxLevel">android.R.attr.maxLevel</see>
			/// .
			/// </attr>
			/// <attr>name android:maxLevel</attr>
			public const int LevelListDrawableItem_maxLevel = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimum level allowed for this item.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minLevel">android.R.attr.minLevel</see>
			/// .
			/// </attr>
			/// <attr>name android:minLevel</attr>
			public const int LevelListDrawableItem_minLevel = 1;

			/// <summary>Attributes that can be used with a LinearLayout.</summary>
			/// <remarks>
			/// Attributes that can be used with a LinearLayout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_baselineAligned">android:baselineAligned</see>
			/// </code></td><td> When set to false, prevents the layout from aligning its children's
			/// baselines.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_baselineAlignedChildIndex">android:baselineAlignedChildIndex
			/// 	</see>
			/// </code></td><td> When a linear layout is part of another layout that is baseline
			/// aligned, it can specify which of its children to baseline align to
			/// (that is, which child TextView).</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_divider">android:divider</see>
			/// </code></td><td> Drawable to use as a vertical divider between buttons.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_dividerPadding">android:dividerPadding</see>
			/// </code></td><td> Size of padding on either end of a divider.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_gravity">android:gravity</see>
			/// </code></td><td> Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_measureWithLargestChild">android:measureWithLargestChild</see>
			/// </code></td><td> When set to true, all children with a weight will be considered having
			/// the minimum size of the largest child.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_orientation">android:orientation</see>
			/// </code></td><td> Should the layout be a column or a row?  Use "horizontal"
			/// for a row, "vertical" for a column.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_showDividers">android:showDividers</see>
			/// </code></td><td> Setting for which dividers to show.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_weightSum">android:weightSum</see>
			/// </code></td><td> Defines the maximum weight sum.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LinearLayout_baselineAligned">LinearLayout_baselineAligned</seealso>
			/// <seealso cref="LinearLayout_baselineAlignedChildIndex">LinearLayout_baselineAlignedChildIndex
			/// 	</seealso>
			/// <seealso cref="LinearLayout_divider">LinearLayout_divider</seealso>
			/// <seealso cref="LinearLayout_dividerPadding">LinearLayout_dividerPadding</seealso>
			/// <seealso cref="LinearLayout_gravity">LinearLayout_gravity</seealso>
			/// <seealso cref="LinearLayout_measureWithLargestChild">LinearLayout_measureWithLargestChild
			/// 	</seealso>
			/// <seealso cref="LinearLayout_orientation">LinearLayout_orientation</seealso>
			/// <seealso cref="LinearLayout_showDividers">LinearLayout_showDividers</seealso>
			/// <seealso cref="LinearLayout_weightSum">LinearLayout_weightSum</seealso>
			public static readonly int[] LinearLayout = new int[] { unchecked((int)(0x010100af
				)), unchecked((int)(0x010100c4)), unchecked((int)(0x01010126)), unchecked((int)(
				0x01010127)), unchecked((int)(0x01010128)), unchecked((int)(0x01010129)), unchecked(
				(int)(0x010102d4)), unchecked((int)(0x01010329)), unchecked((int)(0x0101032a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to false, prevents the layout from aligning its children's
			/// baselines. This attribute is particularly useful when the children
			/// use different values for gravity. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.baselineAligned">android.R.attr.baselineAligned</see>
			/// .
			/// </attr>
			/// <attr>name android:baselineAligned</attr>
			public const int LinearLayout_baselineAligned = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When a linear layout is part of another layout that is baseline
			/// aligned, it can specify which of its children to baseline align to
			/// (that is, which child TextView).
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.baselineAlignedChildIndex">android.R.attr.baselineAlignedChildIndex
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:baselineAlignedChildIndex</attr>
			public const int LinearLayout_baselineAlignedChildIndex = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as a vertical divider between buttons.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.divider">android.R.attr.divider</see>
			/// .
			/// </attr>
			/// <attr>name android:divider</attr>
			public const int LinearLayout_divider = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of padding on either end of a divider.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dividerPadding">android.R.attr.dividerPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:dividerPadding</attr>
			public const int LinearLayout_dividerPadding = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int LinearLayout_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to true, all children with a weight will be considered having
			/// the minimum size of the largest child. If false, all children are
			/// measured normally.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.measureWithLargestChild">android.R.attr.measureWithLargestChild
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:measureWithLargestChild</attr>
			public const int LinearLayout_measureWithLargestChild = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Should the layout be a column or a row?  Use "horizontal"
			/// for a row, "vertical" for a column.  The default is
			/// horizontal.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int LinearLayout_orientation = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Setting for which dividers to show.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>beginning</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>middle</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>end</code></td><td>4</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.showDividers">android.R.attr.showDividers</see>
			/// .
			/// </attr>
			/// <attr>name android:showDividers</attr>
			public const int LinearLayout_showDividers = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the maximum weight sum. If unspecified, the sum is computed
			/// by adding the layout_weight of all of the children. This can be
			/// used for instance to give a single child 50% of the total available
			/// space by giving it a layout_weight of 0.5 and setting the weightSum
			/// to 1.0.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.weightSum">android.R.attr.weightSum</see>
			/// .
			/// </attr>
			/// <attr>name android:weightSum</attr>
			public const int LinearLayout_weightSum = 4;

			/// <summary>Attributes that can be used with a LinearLayout_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a LinearLayout_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_Layout_layout_gravity">android:layout_gravity</see>
			/// </code></td><td> Standard gravity constant that a child can supply to its parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_Layout_layout_height">android:layout_height</see>
			/// </code></td><td> Specifies the basic height of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_Layout_layout_weight">android:layout_weight</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="LinearLayout_Layout_layout_width">android:layout_width</see>
			/// </code></td><td> Specifies the basic width of the view.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LinearLayout_Layout_layout_gravity">LinearLayout_Layout_layout_gravity
			/// 	</seealso>
			/// <seealso cref="LinearLayout_Layout_layout_height">LinearLayout_Layout_layout_height
			/// 	</seealso>
			/// <seealso cref="LinearLayout_Layout_layout_weight">LinearLayout_Layout_layout_weight
			/// 	</seealso>
			/// <seealso cref="LinearLayout_Layout_layout_width">LinearLayout_Layout_layout_width
			/// 	</seealso>
			public static readonly int[] LinearLayout_Layout = new int[] { unchecked((int)(0x010100b3
				)), unchecked((int)(0x010100f4)), unchecked((int)(0x010100f5)), unchecked((int)(
				0x01010181)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Standard gravity constant that a child can supply to its parent.
			/// Defines how to place the view, both its x- and y-axis, within its parent view group.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_gravity">android.R.attr.layout_gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_gravity</attr>
			public const int LinearLayout_Layout_layout_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic height of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant height or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_height">android.R.attr.layout_height</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_height</attr>
			public const int LinearLayout_Layout_layout_height = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.layout_weight">android.R.attr.layout_weight</see>
			/// attribute's value can be found in the
			/// <see cref="LinearLayout_Layout">LinearLayout_Layout</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:layout_weight</attr>
			public const int LinearLayout_Layout_layout_weight = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic width of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant width or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_width">android.R.attr.layout_width</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_width</attr>
			public const int LinearLayout_Layout_layout_width = 1;

			/// <summary>Base attributes available to ListPreference.</summary>
			/// <remarks>
			/// Base attributes available to ListPreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ListPreference_entries">android:entries</see>
			/// </code></td><td> The human-readable array to present as a list.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListPreference_entryValues">android:entryValues</see>
			/// </code></td><td> The array to find the value to save for a preference when an entry from
			/// entries is selected.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ListPreference_entries">ListPreference_entries</seealso>
			/// <seealso cref="ListPreference_entryValues">ListPreference_entryValues</seealso>
			public static readonly int[] ListPreference = new int[] { unchecked((int)(0x010100b2
				)), unchecked((int)(0x010101f8)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The human-readable array to present as a list. Each entry must have a corresponding
			/// index in entryValues.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.entries">android.R.attr.entries</see>
			/// .
			/// </attr>
			/// <attr>name android:entries</attr>
			public const int ListPreference_entries = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The array to find the value to save for a preference when an entry from
			/// entries is selected. If a user clicks on the second item in entries, the
			/// second item in this array will be saved to the preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.entryValues">android.R.attr.entryValues</see>
			/// .
			/// </attr>
			/// <attr>name android:entryValues</attr>
			public const int ListPreference_entryValues = 1;

			/// <summary>Attributes that can be used with a ListView.</summary>
			/// <remarks>
			/// Attributes that can be used with a ListView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ListView_divider">android:divider</see>
			/// </code></td><td> Drawable or color to draw between list items.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListView_dividerHeight">android:dividerHeight</see>
			/// </code></td><td> Height of the divider.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListView_entries">android:entries</see>
			/// </code></td><td> Reference to an array resource that will populate the ListView.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListView_footerDividersEnabled">android:footerDividersEnabled</see>
			/// </code></td><td> When set to false, the ListView will not draw the divider before each footer view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListView_headerDividersEnabled">android:headerDividersEnabled</see>
			/// </code></td><td> When set to false, the ListView will not draw the divider after each header view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListView_overScrollFooter">android:overScrollFooter</see>
			/// </code></td><td> Drawable to draw below list content.</td></tr>
			/// <tr><td><code>
			/// <see cref="ListView_overScrollHeader">android:overScrollHeader</see>
			/// </code></td><td> Drawable to draw above list content.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ListView_divider">ListView_divider</seealso>
			/// <seealso cref="ListView_dividerHeight">ListView_dividerHeight</seealso>
			/// <seealso cref="ListView_entries">ListView_entries</seealso>
			/// <seealso cref="ListView_footerDividersEnabled">ListView_footerDividersEnabled</seealso>
			/// <seealso cref="ListView_headerDividersEnabled">ListView_headerDividersEnabled</seealso>
			/// <seealso cref="ListView_overScrollFooter">ListView_overScrollFooter</seealso>
			/// <seealso cref="ListView_overScrollHeader">ListView_overScrollHeader</seealso>
			public static readonly int[] ListView = new int[] { unchecked((int)(0x010100b2)), 
				unchecked((int)(0x01010129)), unchecked((int)(0x0101012a)), unchecked((int)(0x0101022e
				)), unchecked((int)(0x0101022f)), unchecked((int)(0x010102c2)), unchecked((int)(
				0x010102c3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable or color to draw between list items.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.divider">android.R.attr.divider</see>
			/// .
			/// </attr>
			/// <attr>name android:divider</attr>
			public const int ListView_divider = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Height of the divider. Will use the intrinsic height of the divider if this
			/// is not specified.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dividerHeight">android.R.attr.dividerHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:dividerHeight</attr>
			public const int ListView_dividerHeight = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to an array resource that will populate the ListView.  For static content,
			/// this is simpler than populating the ListView programmatically.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.entries">android.R.attr.entries</see>
			/// .
			/// </attr>
			/// <attr>name android:entries</attr>
			public const int ListView_entries = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to false, the ListView will not draw the divider before each footer view.
			/// The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.footerDividersEnabled">android.R.attr.footerDividersEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:footerDividersEnabled</attr>
			public const int ListView_footerDividersEnabled = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When set to false, the ListView will not draw the divider after each header view.
			/// The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.headerDividersEnabled">android.R.attr.headerDividersEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:headerDividersEnabled</attr>
			public const int ListView_headerDividersEnabled = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to draw below list content.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.overScrollFooter">android.R.attr.overScrollFooter</see>
			/// .
			/// </attr>
			/// <attr>name android:overScrollFooter</attr>
			public const int ListView_overScrollFooter = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to draw above list content.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.overScrollHeader">android.R.attr.overScrollHeader</see>
			/// .
			/// </attr>
			/// <attr>name android:overScrollHeader</attr>
			public const int ListView_overScrollHeader = 5;

			/// <summary>Attributes that can be used with a LockPatternView.</summary>
			/// <remarks>
			/// Attributes that can be used with a LockPatternView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="LockPatternView_aspect">android:aspect</see>
			/// </code></td><td> Aspect to use when drawing LockPatternView.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="LockPatternView_aspect">LockPatternView_aspect</seealso>
			public static readonly int[] LockPatternView = new int[] { unchecked((int)(0x0101040b
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Aspect to use when drawing LockPatternView. Choices are "square"(default), "lock_width"
			/// or "lock_height"
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:aspect</attr>
			public const int LockPatternView_aspect = 0;

			/// <summary>The set of attributes for a MapView.</summary>
			/// <remarks>
			/// The set of attributes for a MapView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MapView_apiKey">android:apiKey</see>
			/// </code></td><td> Value is a string that specifies the Maps API Key to use.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MapView_apiKey">MapView_apiKey</seealso>
			public static readonly int[] MapView = new int[] { unchecked((int)(0x01010211)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Value is a string that specifies the Maps API Key to use.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.apiKey">android.R.attr.apiKey</see>
			/// .
			/// </attr>
			/// <attr>name android:apiKey</attr>
			public const int MapView_apiKey = 0;

			/// <summary>Base attributes that are available to all Menu objects.</summary>
			/// <remarks>Base attributes that are available to all Menu objects.</remarks>
			public static readonly int[] Menu = new int[] {  };

			/// <summary>Base attributes that are available to all groups.</summary>
			/// <remarks>
			/// Base attributes that are available to all groups.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuGroup_checkableBehavior">android:checkableBehavior</see>
			/// </code></td><td> Whether the items are capable of displaying a check mark.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuGroup_enabled">android:enabled</see>
			/// </code></td><td> Whether the items are enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuGroup_id">android:id</see>
			/// </code></td><td> The ID of the group.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuGroup_menuCategory">android:menuCategory</see>
			/// </code></td><td> The category applied to all items within this group.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuGroup_orderInCategory">android:orderInCategory</see>
			/// </code></td><td> The order within the category applied to all items within this group.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuGroup_visible">android:visible</see>
			/// </code></td><td> Whether the items are shown/visible.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuGroup_checkableBehavior">MenuGroup_checkableBehavior</seealso>
			/// <seealso cref="MenuGroup_enabled">MenuGroup_enabled</seealso>
			/// <seealso cref="MenuGroup_id">MenuGroup_id</seealso>
			/// <seealso cref="MenuGroup_menuCategory">MenuGroup_menuCategory</seealso>
			/// <seealso cref="MenuGroup_orderInCategory">MenuGroup_orderInCategory</seealso>
			/// <seealso cref="MenuGroup_visible">MenuGroup_visible</seealso>
			public static readonly int[] MenuGroup = new int[] { unchecked((int)(0x0101000e))
				, unchecked((int)(0x010100d0)), unchecked((int)(0x01010194)), unchecked((int)(0x010101de
				)), unchecked((int)(0x010101df)), unchecked((int)(0x010101e0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the items are capable of displaying a check mark.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> The items are not checkable. </td></tr>
			/// <tr><td><code>all</code></td><td>1</td><td> The items are all checkable. </td></tr>
			/// <tr><td><code>single</code></td><td>2</td><td> The items are checkable and there will only be a single checked item in
			/// this group. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.checkableBehavior">android.R.attr.checkableBehavior</see>
			/// .
			/// </attr>
			/// <attr>name android:checkableBehavior</attr>
			public const int MenuGroup_checkableBehavior = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the items are enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int MenuGroup_enabled = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The ID of the group.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.id">android.R.attr.id</see>
			/// .
			/// </attr>
			/// <attr>name android:id</attr>
			public const int MenuGroup_id = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The category applied to all items within this group.
			/// (This will be or'ed with the orderInCategory attribute.)
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>container</code></td><td>0x00010000</td><td> Items are part of a container. </td></tr>
			/// <tr><td><code>system</code></td><td>0x00020000</td><td> Items are provided by the system. </td></tr>
			/// <tr><td><code>secondary</code></td><td>0x00030000</td><td> Items are user-supplied secondary (infrequently used). </td></tr>
			/// <tr><td><code>alternative</code></td><td>0x00040000</td><td> Items are alternative actions. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.menuCategory">android.R.attr.menuCategory</see>
			/// .
			/// </attr>
			/// <attr>name android:menuCategory</attr>
			public const int MenuGroup_menuCategory = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The order within the category applied to all items within this group.
			/// (This will be or'ed with the category attribute.)
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orderInCategory">android.R.attr.orderInCategory</see>
			/// .
			/// </attr>
			/// <attr>name android:orderInCategory</attr>
			public const int MenuGroup_orderInCategory = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the items are shown/visible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int MenuGroup_visible = 2;

			/// <summary>Base attributes that are available to all Item objects.</summary>
			/// <remarks>
			/// Base attributes that are available to all Item objects.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_actionLayout">android:actionLayout</see>
			/// </code></td><td> An optional layout to be used as an action view.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_actionProviderClass">android:actionProviderClass</see>
			/// </code></td><td> The name of an optional ActionProvider class to instantiate an action view
			/// and perform operations such as default action for that menu item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_actionViewClass">android:actionViewClass</see>
			/// </code></td><td> The name of an optional View class to instantiate and use as an
			/// action view.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_alphabeticShortcut">android:alphabeticShortcut</see>
			/// </code></td><td> The alphabetic shortcut key.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_checkable">android:checkable</see>
			/// </code></td><td> Whether the item is capable of displaying a check mark.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_checked">android:checked</see>
			/// </code></td><td> Whether the item is checked.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_enabled">android:enabled</see>
			/// </code></td><td> Whether the item is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_icon">android:icon</see>
			/// </code></td><td> The icon associated with this item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_id">android:id</see>
			/// </code></td><td> The ID of the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_menuCategory">android:menuCategory</see>
			/// </code></td><td> The category applied to the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_numericShortcut">android:numericShortcut</see>
			/// </code></td><td> The numeric shortcut key.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_onClick">android:onClick</see>
			/// </code></td><td> Name of a method on the Context used to inflate the menu that will be
			/// called when the item is clicked.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_orderInCategory">android:orderInCategory</see>
			/// </code></td><td> The order within the category applied to the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_showAsAction">android:showAsAction</see>
			/// </code></td><td> How this item should display in the Action Bar, if present.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_title">android:title</see>
			/// </code></td><td> The title associated with the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_titleCondensed">android:titleCondensed</see>
			/// </code></td><td> The condensed title associated with the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItem_visible">android:visible</see>
			/// </code></td><td> Whether the item is shown/visible.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuItem_actionLayout">MenuItem_actionLayout</seealso>
			/// <seealso cref="MenuItem_actionProviderClass">MenuItem_actionProviderClass</seealso>
			/// <seealso cref="MenuItem_actionViewClass">MenuItem_actionViewClass</seealso>
			/// <seealso cref="MenuItem_alphabeticShortcut">MenuItem_alphabeticShortcut</seealso>
			/// <seealso cref="MenuItem_checkable">MenuItem_checkable</seealso>
			/// <seealso cref="MenuItem_checked">MenuItem_checked</seealso>
			/// <seealso cref="MenuItem_enabled">MenuItem_enabled</seealso>
			/// <seealso cref="MenuItem_icon">MenuItem_icon</seealso>
			/// <seealso cref="MenuItem_id">MenuItem_id</seealso>
			/// <seealso cref="MenuItem_menuCategory">MenuItem_menuCategory</seealso>
			/// <seealso cref="MenuItem_numericShortcut">MenuItem_numericShortcut</seealso>
			/// <seealso cref="MenuItem_onClick">MenuItem_onClick</seealso>
			/// <seealso cref="MenuItem_orderInCategory">MenuItem_orderInCategory</seealso>
			/// <seealso cref="MenuItem_showAsAction">MenuItem_showAsAction</seealso>
			/// <seealso cref="MenuItem_title">MenuItem_title</seealso>
			/// <seealso cref="MenuItem_titleCondensed">MenuItem_titleCondensed</seealso>
			/// <seealso cref="MenuItem_visible">MenuItem_visible</seealso>
			public static readonly int[] MenuItem = new int[] { unchecked((int)(0x01010002)), 
				unchecked((int)(0x0101000e)), unchecked((int)(0x010100d0)), unchecked((int)(0x01010106
				)), unchecked((int)(0x01010194)), unchecked((int)(0x010101de)), unchecked((int)(
				0x010101df)), unchecked((int)(0x010101e1)), unchecked((int)(0x010101e2)), unchecked(
				(int)(0x010101e3)), unchecked((int)(0x010101e4)), unchecked((int)(0x010101e5)), 
				unchecked((int)(0x0101026f)), unchecked((int)(0x010102d9)), unchecked((int)(0x010102fb
				)), unchecked((int)(0x010102fc)), unchecked((int)(0x01010389)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional layout to be used as an action view.
			/// See
			/// <see cref="android.view.MenuItem.setActionView(android.view.View)">android.view.MenuItem.setActionView(android.view.View)
			/// 	</see>
			/// for more info.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionLayout">android.R.attr.actionLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:actionLayout</attr>
			public const int MenuItem_actionLayout = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of an optional ActionProvider class to instantiate an action view
			/// and perform operations such as default action for that menu item.
			/// See
			/// <see cref="android.view.MenuItem.setActionProvider(android.view.ActionProvider)">android.view.MenuItem.setActionProvider(android.view.ActionProvider)
			/// 	</see>
			/// for more info.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionProviderClass">android.R.attr.actionProviderClass
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionProviderClass</attr>
			public const int MenuItem_actionProviderClass = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of an optional View class to instantiate and use as an
			/// action view. See
			/// <see cref="android.view.MenuItem.setActionView(android.view.View)">android.view.MenuItem.setActionView(android.view.View)
			/// 	</see>
			/// for more info.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionViewClass">android.R.attr.actionViewClass</see>
			/// .
			/// </attr>
			/// <attr>name android:actionViewClass</attr>
			public const int MenuItem_actionViewClass = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The alphabetic shortcut key.  This is the shortcut when using a keyboard
			/// with alphabetic keys.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alphabeticShortcut">android.R.attr.alphabeticShortcut</see>
			/// .
			/// </attr>
			/// <attr>name android:alphabeticShortcut</attr>
			public const int MenuItem_alphabeticShortcut = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the item is capable of displaying a check mark.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.checkable">android.R.attr.checkable</see>
			/// .
			/// </attr>
			/// <attr>name android:checkable</attr>
			public const int MenuItem_checkable = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the item is checked.  Note that you must first have enabled checking with
			/// the checkable attribute or else the check mark will not appear.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.@checked">android.R.attr.@checked</see>
			/// .
			/// </attr>
			/// <attr>name android:checked</attr>
			public const int MenuItem_checked = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the item is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int MenuItem_enabled = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The icon associated with this item.  This icon will not always be shown, so
			/// the title should be sufficient in describing this item.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int MenuItem_icon = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The ID of the item.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.id">android.R.attr.id</see>
			/// .
			/// </attr>
			/// <attr>name android:id</attr>
			public const int MenuItem_id = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The category applied to the item.
			/// (This will be or'ed with the orderInCategory attribute.)
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>container</code></td><td>0x00010000</td><td> Items are part of a container. </td></tr>
			/// <tr><td><code>system</code></td><td>0x00020000</td><td> Items are provided by the system. </td></tr>
			/// <tr><td><code>secondary</code></td><td>0x00030000</td><td> Items are user-supplied secondary (infrequently used). </td></tr>
			/// <tr><td><code>alternative</code></td><td>0x00040000</td><td> Items are alternative actions. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.menuCategory">android.R.attr.menuCategory</see>
			/// .
			/// </attr>
			/// <attr>name android:menuCategory</attr>
			public const int MenuItem_menuCategory = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The numeric shortcut key.  This is the shortcut when using a numeric (e.g., 12-key)
			/// keyboard.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.numericShortcut">android.R.attr.numericShortcut</see>
			/// .
			/// </attr>
			/// <attr>name android:numericShortcut</attr>
			public const int MenuItem_numericShortcut = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Name of a method on the Context used to inflate the menu that will be
			/// called when the item is clicked.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.onClick">android.R.attr.onClick</see>
			/// .
			/// </attr>
			/// <attr>name android:onClick</attr>
			public const int MenuItem_onClick = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The order within the category applied to the item.
			/// (This will be or'ed with the category attribute.)
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orderInCategory">android.R.attr.orderInCategory</see>
			/// .
			/// </attr>
			/// <attr>name android:orderInCategory</attr>
			public const int MenuItem_orderInCategory = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// How this item should display in the Action Bar, if present.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>never</code></td><td>0</td><td> Never show this item in an action bar, show it in the overflow menu instead.
			/// Mutually exclusive with "ifRoom" and "always". </td></tr>
			/// <tr><td><code>ifRoom</code></td><td>1</td><td> Show this item in an action bar if there is room for it as determined
			/// by the system. Favor this option over "always" where possible.
			/// Mutually exclusive with "never" and "always". </td></tr>
			/// <tr><td><code>always</code></td><td>2</td><td> Always show this item in an actionbar, even if it would override
			/// the system's limits of how much stuff to put there. This may make
			/// your action bar look bad on some screens. In most cases you should
			/// use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never". </td></tr>
			/// <tr><td><code>withText</code></td><td>4</td><td> When this item is shown as an action in the action bar, show a text
			/// label with it even if it has an icon representation. </td></tr>
			/// <tr><td><code>collapseActionView</code></td><td>8</td><td> This item's action view collapses to a normal menu
			/// item. When expanded, the action view takes over a
			/// larger segment of its container. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.showAsAction">android.R.attr.showAsAction</see>
			/// .
			/// </attr>
			/// <attr>name android:showAsAction</attr>
			public const int MenuItem_showAsAction = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The title associated with the item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.title">android.R.attr.title</see>
			/// .
			/// </attr>
			/// <attr>name android:title</attr>
			public const int MenuItem_title = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The condensed title associated with the item.  This is used in situations where the
			/// normal title may be too long to be displayed.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.titleCondensed">android.R.attr.titleCondensed</see>
			/// .
			/// </attr>
			/// <attr>name android:titleCondensed</attr>
			public const int MenuItem_titleCondensed = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the item is shown/visible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int MenuItem_visible = 4;

			/// <summary>State array representing a menu item that is currently focused and checked.
			/// 	</summary>
			/// <remarks>
			/// State array representing a menu item that is currently focused and checked.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemCheckedFocusedState_state_checkable">android:state_checkable</see>
			/// </code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemCheckedFocusedState_state_checked">android:state_checked</see>
			/// </code></td><td> State identifier indicating that the object is currently checked.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemCheckedFocusedState_state_focused">android:state_focused</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuItemCheckedFocusedState_state_checkable">MenuItemCheckedFocusedState_state_checkable
			/// 	</seealso>
			/// <seealso cref="MenuItemCheckedFocusedState_state_checked">MenuItemCheckedFocusedState_state_checked
			/// 	</seealso>
			/// <seealso cref="MenuItemCheckedFocusedState_state_focused">MenuItemCheckedFocusedState_state_focused
			/// 	</seealso>
			public static readonly int[] MenuItemCheckedFocusedState = new int[] { unchecked(
				(int)(0x0101009c)), unchecked((int)(0x0101009f)), unchecked((int)(0x010100a0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object <var>may</var> display a check mark.
			/// See
			/// <see cref="attr.state_checked">attr.state_checked</see>
			/// for the identifier that indicates whether it is
			/// actually checked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checkable">android.R.attr.state_checkable</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checkable</attr>
			public const int MenuItemCheckedFocusedState_state_checkable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object is currently checked.  See
			/// <see cref="attr.state_checkable">attr.state_checkable</see>
			/// for an additional identifier that can indicate if
			/// any object may ever display a check, regardless of whether state_checked is
			/// currently set.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checked">android.R.attr.state_checked</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checked</attr>
			public const int MenuItemCheckedFocusedState_state_checked = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_focused">android.R.attr.state_focused</see>
			/// .
			/// </attr>
			/// <attr>name android:state_focused</attr>
			public const int MenuItemCheckedFocusedState_state_focused = 0;

			/// <summary>State array representing a menu item that is currently checked.</summary>
			/// <remarks>
			/// State array representing a menu item that is currently checked.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemCheckedState_state_checkable">android:state_checkable</see>
			/// </code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemCheckedState_state_checked">android:state_checked</see>
			/// </code></td><td> State identifier indicating that the object is currently checked.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuItemCheckedState_state_checkable">MenuItemCheckedState_state_checkable
			/// 	</seealso>
			/// <seealso cref="MenuItemCheckedState_state_checked">MenuItemCheckedState_state_checked
			/// 	</seealso>
			public static readonly int[] MenuItemCheckedState = new int[] { unchecked((int)(0x0101009f
				)), unchecked((int)(0x010100a0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object <var>may</var> display a check mark.
			/// See
			/// <see cref="attr.state_checked">attr.state_checked</see>
			/// for the identifier that indicates whether it is
			/// actually checked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checkable">android.R.attr.state_checkable</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checkable</attr>
			public const int MenuItemCheckedState_state_checkable = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object is currently checked.  See
			/// <see cref="attr.state_checkable">attr.state_checkable</see>
			/// for an additional identifier that can indicate if
			/// any object may ever display a check, regardless of whether state_checked is
			/// currently set.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checked">android.R.attr.state_checked</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checked</attr>
			public const int MenuItemCheckedState_state_checked = 1;

			/// <summary>State array representing a menu item that is focused and checkable but is not currently checked.
			/// 	</summary>
			/// <remarks>
			/// State array representing a menu item that is focused and checkable but is not currently checked.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemUncheckedFocusedState_state_checkable">android:state_checkable
			/// 	</see>
			/// </code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemUncheckedFocusedState_state_focused">android:state_focused</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuItemUncheckedFocusedState_state_checkable">MenuItemUncheckedFocusedState_state_checkable
			/// 	</seealso>
			/// <seealso cref="MenuItemUncheckedFocusedState_state_focused">MenuItemUncheckedFocusedState_state_focused
			/// 	</seealso>
			public static readonly int[] MenuItemUncheckedFocusedState = new int[] { unchecked(
				(int)(0x0101009c)), unchecked((int)(0x0101009f)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object <var>may</var> display a check mark.
			/// See
			/// <see cref="attr.state_checked">attr.state_checked</see>
			/// for the identifier that indicates whether it is
			/// actually checked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checkable">android.R.attr.state_checkable</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checkable</attr>
			public const int MenuItemUncheckedFocusedState_state_checkable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_focused">android.R.attr.state_focused</see>
			/// .
			/// </attr>
			/// <attr>name android:state_focused</attr>
			public const int MenuItemUncheckedFocusedState_state_focused = 0;

			/// <summary>State array representing a menu item that is checkable but is not currently checked.
			/// 	</summary>
			/// <remarks>
			/// State array representing a menu item that is checkable but is not currently checked.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuItemUncheckedState_state_checkable">android:state_checkable</see>
			/// </code></td><td> State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuItemUncheckedState_state_checkable">MenuItemUncheckedState_state_checkable
			/// 	</seealso>
			public static readonly int[] MenuItemUncheckedState = new int[] { unchecked((int)
				(0x0101009f)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating that the object <var>may</var> display a check mark.
			/// See
			/// <see cref="attr.state_checked">attr.state_checked</see>
			/// for the identifier that indicates whether it is
			/// actually checked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_checkable">android.R.attr.state_checkable</see>
			/// .
			/// </attr>
			/// <attr>name android:state_checkable</attr>
			public const int MenuItemUncheckedState_state_checkable = 0;

			/// <summary>Attributes that can be used with a MenuView.</summary>
			/// <remarks>
			/// Attributes that can be used with a MenuView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_headerBackground">android:headerBackground</see>
			/// </code></td><td> Default background for the menu header.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_horizontalDivider">android:horizontalDivider</see>
			/// </code></td><td> Default horizontal divider between rows of menu items.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_itemBackground">android:itemBackground</see>
			/// </code></td><td> Default background for each menu item.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_itemIconDisabledAlpha">android:itemIconDisabledAlpha</see>
			/// </code></td><td> Default disabled icon alpha for each menu item that shows an icon.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_itemTextAppearance">android:itemTextAppearance</see>
			/// </code></td><td> Default appearance of menu item text.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_preserveIconSpacing">android:preserveIconSpacing</see>
			/// </code></td><td> Whether space should be reserved in layout when an icon is missing.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_verticalDivider">android:verticalDivider</see>
			/// </code></td><td> Default vertical divider between menu items.</td></tr>
			/// <tr><td><code>
			/// <see cref="MenuView_windowAnimationStyle">android:windowAnimationStyle</see>
			/// </code></td><td> Default animations for the menu.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MenuView_headerBackground">MenuView_headerBackground</seealso>
			/// <seealso cref="MenuView_horizontalDivider">MenuView_horizontalDivider</seealso>
			/// <seealso cref="MenuView_itemBackground">MenuView_itemBackground</seealso>
			/// <seealso cref="MenuView_itemIconDisabledAlpha">MenuView_itemIconDisabledAlpha</seealso>
			/// <seealso cref="MenuView_itemTextAppearance">MenuView_itemTextAppearance</seealso>
			/// <seealso cref="MenuView_preserveIconSpacing">MenuView_preserveIconSpacing</seealso>
			/// <seealso cref="MenuView_verticalDivider">MenuView_verticalDivider</seealso>
			/// <seealso cref="MenuView_windowAnimationStyle">MenuView_windowAnimationStyle</seealso>
			public static readonly int[] MenuView = new int[] { unchecked((int)(0x010100ae)), 
				unchecked((int)(0x0101012c)), unchecked((int)(0x0101012d)), unchecked((int)(0x0101012e
				)), unchecked((int)(0x0101012f)), unchecked((int)(0x01010130)), unchecked((int)(
				0x01010131)), unchecked((int)(0x010103ea)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default background for the menu header.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.headerBackground">android.R.attr.headerBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:headerBackground</attr>
			public const int MenuView_headerBackground = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default horizontal divider between rows of menu items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.horizontalDivider">android.R.attr.horizontalDivider</see>
			/// .
			/// </attr>
			/// <attr>name android:horizontalDivider</attr>
			public const int MenuView_horizontalDivider = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default background for each menu item.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.itemBackground">android.R.attr.itemBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:itemBackground</attr>
			public const int MenuView_itemBackground = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default disabled icon alpha for each menu item that shows an icon.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.itemIconDisabledAlpha">android.R.attr.itemIconDisabledAlpha
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:itemIconDisabledAlpha</attr>
			public const int MenuView_itemIconDisabledAlpha = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default appearance of menu item text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.itemTextAppearance">android.R.attr.itemTextAppearance</see>
			/// .
			/// </attr>
			/// <attr>name android:itemTextAppearance</attr>
			public const int MenuView_itemTextAppearance = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether space should be reserved in layout when an icon is missing.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:preserveIconSpacing</attr>
			public const int MenuView_preserveIconSpacing = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default vertical divider between menu items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.verticalDivider">android.R.attr.verticalDivider</see>
			/// .
			/// </attr>
			/// <attr>name android:verticalDivider</attr>
			public const int MenuView_verticalDivider = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default animations for the menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowAnimationStyle">android.R.attr.windowAnimationStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowAnimationStyle</attr>
			public const int MenuView_windowAnimationStyle = 0;

			/// <summary>Attributes that can be used with a MipmapDrawableItem.</summary>
			/// <remarks>
			/// Attributes that can be used with a MipmapDrawableItem.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MipmapDrawableItem_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MipmapDrawableItem_drawable">MipmapDrawableItem_drawable</seealso>
			public static readonly int[] MipmapDrawableItem = new int[] { unchecked((int)(0x01010199
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int MipmapDrawableItem_drawable = 0;

			/// <summary>Attributes that can be used with a MultiSelectListPreference.</summary>
			/// <remarks>
			/// Attributes that can be used with a MultiSelectListPreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MultiSelectListPreference_entries">android:entries</see>
			/// </code></td><td> The human-readable array to present as a list.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiSelectListPreference_entryValues">android:entryValues</see>
			/// </code></td><td> The array to find the value to save for a preference when an entry from
			/// entries is selected.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MultiSelectListPreference_entries">MultiSelectListPreference_entries
			/// 	</seealso>
			/// <seealso cref="MultiSelectListPreference_entryValues">MultiSelectListPreference_entryValues
			/// 	</seealso>
			public static readonly int[] MultiSelectListPreference = new int[] { unchecked((int
				)(0x010100b2)), unchecked((int)(0x010101f8)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The human-readable array to present as a list. Each entry must have a corresponding
			/// index in entryValues.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.entries">android.R.attr.entries</see>
			/// .
			/// </attr>
			/// <attr>name android:entries</attr>
			public const int MultiSelectListPreference_entries = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The array to find the value to save for a preference when an entry from
			/// entries is selected. If a user clicks the second item in entries, the
			/// second item in this array will be saved to the preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.entryValues">android.R.attr.entryValues</see>
			/// .
			/// </attr>
			/// <attr>name android:entryValues</attr>
			public const int MultiSelectListPreference_entryValues = 1;

			/// <summary>Attributes that can be used with a MultiWaveView.</summary>
			/// <remarks>
			/// Attributes that can be used with a MultiWaveView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_bottomChevronDrawable">android:bottomChevronDrawable</see>
			/// </code></td><td> Drawable to use for chevron animation on the bottom.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_directionDescriptions">android:directionDescriptions</see>
			/// </code></td><td> Reference to an array resource that be used to announce the directions with targets around the circle.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_feedbackCount">android:feedbackCount</see>
			/// </code></td><td> Number of waves/chevrons to show in animation.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_handleDrawable">android:handleDrawable</see>
			/// </code></td><td> Sets a drawable as the drag center.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_hitRadius">android:hitRadius</see>
			/// </code></td><td> Size of target radius.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_horizontalOffset">android:horizontalOffset</see>
			/// </code></td><td> Used to shift center of pattern horizontally.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_leftChevronDrawable">android:leftChevronDrawable</see>
			/// </code></td><td> Drawable to use for chevron animation on the left.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_outerRadius">android:outerRadius</see>
			/// </code></td><td> Outer radius of target circle.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_rightChevronDrawable">android:rightChevronDrawable</see>
			/// </code></td><td> Drawable to use for chevron animation on the right.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_snapMargin">android:snapMargin</see>
			/// </code></td><td> How close we need to be before snapping to a target.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_targetDescriptions">android:targetDescriptions</see>
			/// </code></td><td> Reference to an array resource that be used as description for the targets around the circle.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_targetDrawables">android:targetDrawables</see>
			/// </code></td><td> Reference to an array resource that be shown as targets around a circle.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_topChevronDrawable">android:topChevronDrawable</see>
			/// </code></td><td> Drawable to use for chevron animation on the top.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_verticalOffset">android:verticalOffset</see>
			/// </code></td><td> Used to shift center of pattern vertically.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_vibrationDuration">android:vibrationDuration</see>
			/// </code></td><td> Tactile feedback duration for actions.</td></tr>
			/// <tr><td><code>
			/// <see cref="MultiWaveView_waveDrawable">android:waveDrawable</see>
			/// </code></td><td> Drawable to use for wave ripple animation.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="MultiWaveView_bottomChevronDrawable">MultiWaveView_bottomChevronDrawable
			/// 	</seealso>
			/// <seealso cref="MultiWaveView_directionDescriptions">MultiWaveView_directionDescriptions
			/// 	</seealso>
			/// <seealso cref="MultiWaveView_feedbackCount">MultiWaveView_feedbackCount</seealso>
			/// <seealso cref="MultiWaveView_handleDrawable">MultiWaveView_handleDrawable</seealso>
			/// <seealso cref="MultiWaveView_hitRadius">MultiWaveView_hitRadius</seealso>
			/// <seealso cref="MultiWaveView_horizontalOffset">MultiWaveView_horizontalOffset</seealso>
			/// <seealso cref="MultiWaveView_leftChevronDrawable">MultiWaveView_leftChevronDrawable
			/// 	</seealso>
			/// <seealso cref="MultiWaveView_outerRadius">MultiWaveView_outerRadius</seealso>
			/// <seealso cref="MultiWaveView_rightChevronDrawable">MultiWaveView_rightChevronDrawable
			/// 	</seealso>
			/// <seealso cref="MultiWaveView_snapMargin">MultiWaveView_snapMargin</seealso>
			/// <seealso cref="MultiWaveView_targetDescriptions">MultiWaveView_targetDescriptions
			/// 	</seealso>
			/// <seealso cref="MultiWaveView_targetDrawables">MultiWaveView_targetDrawables</seealso>
			/// <seealso cref="MultiWaveView_topChevronDrawable">MultiWaveView_topChevronDrawable
			/// 	</seealso>
			/// <seealso cref="MultiWaveView_verticalOffset">MultiWaveView_verticalOffset</seealso>
			/// <seealso cref="MultiWaveView_vibrationDuration">MultiWaveView_vibrationDuration</seealso>
			/// <seealso cref="MultiWaveView_waveDrawable">MultiWaveView_waveDrawable</seealso>
			public static readonly int[] MultiWaveView = new int[] { unchecked((int)(0x010103a0
				)), unchecked((int)(0x010103a1)), unchecked((int)(0x010103fd)), unchecked((int)(
				0x010103fe)), unchecked((int)(0x010103ff)), unchecked((int)(0x01010400)), unchecked(
				(int)(0x01010401)), unchecked((int)(0x01010402)), unchecked((int)(0x01010403)), 
				unchecked((int)(0x01010404)), unchecked((int)(0x01010405)), unchecked((int)(0x01010406
				)), unchecked((int)(0x01010407)), unchecked((int)(0x01010408)), unchecked((int)(
				0x01010409)), unchecked((int)(0x0101040a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for chevron animation on the bottom. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:bottomChevronDrawable</attr>
			public const int MultiWaveView_bottomChevronDrawable = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to an array resource that be used to announce the directions with targets around the circle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.directionDescriptions">android.R.attr.directionDescriptions
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:directionDescriptions</attr>
			public const int MultiWaveView_directionDescriptions = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Number of waves/chevrons to show in animation.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:feedbackCount</attr>
			public const int MultiWaveView_feedbackCount = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets a drawable as the drag center.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:handleDrawable</attr>
			public const int MultiWaveView_handleDrawable = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of target radius. Points within this distance of target center is a "hit".
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:hitRadius</attr>
			public const int MultiWaveView_hitRadius = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Used to shift center of pattern horizontally.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:horizontalOffset</attr>
			public const int MultiWaveView_horizontalOffset = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for chevron animation on the left. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:leftChevronDrawable</attr>
			public const int MultiWaveView_leftChevronDrawable = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Outer radius of target circle. Icons will be drawn on this circle.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:outerRadius</attr>
			public const int MultiWaveView_outerRadius = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for chevron animation on the right. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:rightChevronDrawable</attr>
			public const int MultiWaveView_rightChevronDrawable = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// How close we need to be before snapping to a target.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:snapMargin</attr>
			public const int MultiWaveView_snapMargin = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to an array resource that be used as description for the targets around the circle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.targetDescriptions">android.R.attr.targetDescriptions</see>
			/// .
			/// </attr>
			/// <attr>name android:targetDescriptions</attr>
			public const int MultiWaveView_targetDescriptions = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to an array resource that be shown as targets around a circle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:targetDrawables</attr>
			public const int MultiWaveView_targetDrawables = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for chevron animation on the top. May be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:topChevronDrawable</attr>
			public const int MultiWaveView_topChevronDrawable = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Used to shift center of pattern vertically.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:verticalOffset</attr>
			public const int MultiWaveView_verticalOffset = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Tactile feedback duration for actions. Set to '0' for no vibration.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:vibrationDuration</attr>
			public const int MultiWaveView_vibrationDuration = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for wave ripple animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:waveDrawable</attr>
			public const int MultiWaveView_waveDrawable = 8;

			/// <summary>Drawable used to draw 9-patches.</summary>
			/// <remarks>
			/// Drawable used to draw 9-patches.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="NinePatchDrawable_dither">android:dither</see>
			/// </code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="NinePatchDrawable_src">android:src</see>
			/// </code></td><td> Identifier of the bitmap file.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="NinePatchDrawable_dither">NinePatchDrawable_dither</seealso>
			/// <seealso cref="NinePatchDrawable_src">NinePatchDrawable_src</seealso>
			public static readonly int[] NinePatchDrawable = new int[] { unchecked((int)(0x01010119
				)), unchecked((int)(0x0101011c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dither">android.R.attr.dither</see>
			/// .
			/// </attr>
			/// <attr>name android:dither</attr>
			public const int NinePatchDrawable_dither = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier of the bitmap file. This attribute is mandatory.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.src">android.R.attr.src</see>
			/// .
			/// </attr>
			/// <attr>name android:src</attr>
			public const int NinePatchDrawable_src = 0;

			/// <summary>Attributes that can be used with a NumberPicker.</summary>
			/// <remarks>
			/// Attributes that can be used with a NumberPicker.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="NumberPicker_flingable">android:flingable</see>
			/// </code></td><td> @hide Whether the number picker supports fligning.</td></tr>
			/// <tr><td><code>
			/// <see cref="NumberPicker_selectionDivider">android:selectionDivider</see>
			/// </code></td><td> @hide The divider for making the selection area.</td></tr>
			/// <tr><td><code>
			/// <see cref="NumberPicker_selectionDividerHeight">android:selectionDividerHeight</see>
			/// </code></td><td> @hide The height of the selection divider.</td></tr>
			/// <tr><td><code>
			/// <see cref="NumberPicker_solidColor">android:solidColor</see>
			/// </code></td><td> @hide Color for the solid color background if such for optimized rendering.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="NumberPicker_flingable">NumberPicker_flingable</seealso>
			/// <seealso cref="NumberPicker_selectionDivider">NumberPicker_selectionDivider</seealso>
			/// <seealso cref="NumberPicker_selectionDividerHeight">NumberPicker_selectionDividerHeight
			/// 	</seealso>
			/// <seealso cref="NumberPicker_solidColor">NumberPicker_solidColor</seealso>
			public static readonly int[] NumberPicker = new int[] { unchecked((int)(0x0101034a
				)), unchecked((int)(0x010103f5)), unchecked((int)(0x010103f6)), unchecked((int)(
				0x010103f7)) };

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// Whether the number picker supports fligning.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </hide>
			/// <attr>name android:flingable</attr>
			public const int NumberPicker_flingable = 1;

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// The divider for making the selection area.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </hide>
			/// <attr>name android:selectionDivider</attr>
			public const int NumberPicker_selectionDivider = 2;

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// The height of the selection divider.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </hide>
			/// <attr>name android:selectionDividerHeight</attr>
			public const int NumberPicker_selectionDividerHeight = 3;

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// Color for the solid color background if such for optimized rendering.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.solidColor">android.R.attr.solidColor</see>
			/// .
			/// </hide>
			/// <attr>name android:solidColor</attr>
			public const int NumberPicker_solidColor = 0;

			/// <summary>Attributes that can be used with a OvershootInterpolator.</summary>
			/// <remarks>
			/// Attributes that can be used with a OvershootInterpolator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="OvershootInterpolator_tension">android:tension</see>
			/// </code></td><td> This is the amount of tension.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="OvershootInterpolator_tension">OvershootInterpolator_tension</seealso>
			public static readonly int[] OvershootInterpolator = new int[] { unchecked((int)(
				0x0101026a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the amount of tension.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tension">android.R.attr.tension</see>
			/// .
			/// </attr>
			/// <attr>name android:tension</attr>
			public const int OvershootInterpolator_tension = 0;

			/// <summary>Attributes that can be used with a Pointer.</summary>
			/// <remarks>
			/// Attributes that can be used with a Pointer.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Pointer_pointerIconArrow">android:pointerIconArrow</see>
			/// </code></td><td> Reference to a pointer icon drawable with STYLE_ARROW </td></tr>
			/// <tr><td><code>
			/// <see cref="Pointer_pointerIconSpotAnchor">android:pointerIconSpotAnchor</see>
			/// </code></td><td> Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR </td></tr>
			/// <tr><td><code>
			/// <see cref="Pointer_pointerIconSpotHover">android:pointerIconSpotHover</see>
			/// </code></td><td> Reference to a pointer icon drawable with STYLE_SPOT_HOVER </td></tr>
			/// <tr><td><code>
			/// <see cref="Pointer_pointerIconSpotTouch">android:pointerIconSpotTouch</see>
			/// </code></td><td> Reference to a pointer icon drawable with STYLE_SPOT_TOUCH </td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Pointer_pointerIconArrow">Pointer_pointerIconArrow</seealso>
			/// <seealso cref="Pointer_pointerIconSpotAnchor">Pointer_pointerIconSpotAnchor</seealso>
			/// <seealso cref="Pointer_pointerIconSpotHover">Pointer_pointerIconSpotHover</seealso>
			/// <seealso cref="Pointer_pointerIconSpotTouch">Pointer_pointerIconSpotTouch</seealso>
			public static readonly int[] Pointer = new int[] { unchecked((int)(0x0101040c)), 
				unchecked((int)(0x0101040d)), unchecked((int)(0x0101040e)), unchecked((int)(0x0101040f
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a pointer icon drawable with STYLE_ARROW
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:pointerIconArrow</attr>
			public const int Pointer_pointerIconArrow = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a pointer icon drawable with STYLE_SPOT_ANCHOR
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:pointerIconSpotAnchor</attr>
			public const int Pointer_pointerIconSpotAnchor = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a pointer icon drawable with STYLE_SPOT_HOVER
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:pointerIconSpotHover</attr>
			public const int Pointer_pointerIconSpotHover = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a pointer icon drawable with STYLE_SPOT_TOUCH
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:pointerIconSpotTouch</attr>
			public const int Pointer_pointerIconSpotTouch = 2;

			/// <summary>Attributes that can be used with a PointerIcon.</summary>
			/// <remarks>
			/// Attributes that can be used with a PointerIcon.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PointerIcon_bitmap">android:bitmap</see>
			/// </code></td><td> Drawable to use as the icon bitmap.</td></tr>
			/// <tr><td><code>
			/// <see cref="PointerIcon_hotSpotX">android:hotSpotX</see>
			/// </code></td><td> X coordinate of the icon hot spot.</td></tr>
			/// <tr><td><code>
			/// <see cref="PointerIcon_hotSpotY">android:hotSpotY</see>
			/// </code></td><td> Y coordinate of the icon hot spot.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PointerIcon_bitmap">PointerIcon_bitmap</seealso>
			/// <seealso cref="PointerIcon_hotSpotX">PointerIcon_hotSpotX</seealso>
			/// <seealso cref="PointerIcon_hotSpotY">PointerIcon_hotSpotY</seealso>
			public static readonly int[] PointerIcon = new int[] { unchecked((int)(0x01010410
				)), unchecked((int)(0x01010411)), unchecked((int)(0x01010412)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the icon bitmap.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:bitmap</attr>
			public const int PointerIcon_bitmap = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// X coordinate of the icon hot spot.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:hotSpotX</attr>
			public const int PointerIcon_hotSpotX = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Y coordinate of the icon hot spot.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:hotSpotY</attr>
			public const int PointerIcon_hotSpotY = 2;

			/// <summary>Attributes that can be used with a PopupWindow.</summary>
			/// <remarks>
			/// Attributes that can be used with a PopupWindow.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PopupWindow_popupAnimationStyle">android:popupAnimationStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="PopupWindow_popupBackground">android:popupBackground</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PopupWindow_popupAnimationStyle">PopupWindow_popupAnimationStyle</seealso>
			/// <seealso cref="PopupWindow_popupBackground">PopupWindow_popupBackground</seealso>
			public static readonly int[] PopupWindow = new int[] { unchecked((int)(0x01010176
				)), unchecked((int)(0x010102c9)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.popupAnimationStyle">android.R.attr.popupAnimationStyle
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="PopupWindow">PopupWindow</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:popupAnimationStyle</attr>
			public const int PopupWindow_popupAnimationStyle = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.popupBackground">android.R.attr.popupBackground</see>
			/// attribute's value can be found in the
			/// <see cref="PopupWindow">PopupWindow</see>
			/// array.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// </summary>
			/// <attr>name android:popupBackground</attr>
			public const int PopupWindow_popupBackground = 0;

			/// <summary>Attributes that can be used with a PopupWindowBackgroundState.</summary>
			/// <remarks>
			/// Attributes that can be used with a PopupWindowBackgroundState.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PopupWindowBackgroundState_state_above_anchor">android:state_above_anchor
			/// 	</see>
			/// </code></td><td> State identifier indicating the popup will be above the anchor.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PopupWindowBackgroundState_state_above_anchor">PopupWindowBackgroundState_state_above_anchor
			/// 	</seealso>
			public static readonly int[] PopupWindowBackgroundState = new int[] { unchecked((
				int)(0x010100aa)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating the popup will be above the anchor.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_above_anchor">android.R.attr.state_above_anchor</see>
			/// .
			/// </attr>
			/// <attr>name android:state_above_anchor</attr>
			public const int PopupWindowBackgroundState_state_above_anchor = 0;

			/// <summary>Base attributes available to Preference.</summary>
			/// <remarks>
			/// Base attributes available to Preference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Preference_defaultValue">android:defaultValue</see>
			/// </code></td><td> The default value for the preference, which will be set either if persistence
			/// is off or persistence is on and the preference is not found in the persistent
			/// storage.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_dependency">android:dependency</see>
			/// </code></td><td> The key of another Preference that this Preference will depend on.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_enabled">android:enabled</see>
			/// </code></td><td> Whether the Preference is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_fragment">android:fragment</see>
			/// </code></td><td> When used inside of a modern PreferenceActivity, this declares
			/// a new PreferenceFragment to be shown when the user selects this item.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_icon">android:icon</see>
			/// </code></td><td> The optional icon for the preference </td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_key">android:key</see>
			/// </code></td><td> The key to store the Preference value.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_layout">android:layout</see>
			/// </code></td><td> The layout for the Preference in a PreferenceActivity screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_order">android:order</see>
			/// </code></td><td> The order for the Preference (lower values are to be ordered first).</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_persistent">android:persistent</see>
			/// </code></td><td> Whether the Preference stores its value to the shared preferences.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_selectable">android:selectable</see>
			/// </code></td><td> Whether the Preference is selectable.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_shouldDisableView">android:shouldDisableView</see>
			/// </code></td><td> Whether the view of this Preference should be disabled when
			/// this Preference is disabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_summary">android:summary</see>
			/// </code></td><td> The summary for the Preference in a PreferenceActivity screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_title">android:title</see>
			/// </code></td><td> The title for the Preference in a PreferenceActivity screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Preference_widgetLayout">android:widgetLayout</see>
			/// </code></td><td> The layout for the controllable widget portion of a Preference.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Preference_defaultValue">Preference_defaultValue</seealso>
			/// <seealso cref="Preference_dependency">Preference_dependency</seealso>
			/// <seealso cref="Preference_enabled">Preference_enabled</seealso>
			/// <seealso cref="Preference_fragment">Preference_fragment</seealso>
			/// <seealso cref="Preference_icon">Preference_icon</seealso>
			/// <seealso cref="Preference_key">Preference_key</seealso>
			/// <seealso cref="Preference_layout">Preference_layout</seealso>
			/// <seealso cref="Preference_order">Preference_order</seealso>
			/// <seealso cref="Preference_persistent">Preference_persistent</seealso>
			/// <seealso cref="Preference_selectable">Preference_selectable</seealso>
			/// <seealso cref="Preference_shouldDisableView">Preference_shouldDisableView</seealso>
			/// <seealso cref="Preference_summary">Preference_summary</seealso>
			/// <seealso cref="Preference_title">Preference_title</seealso>
			/// <seealso cref="Preference_widgetLayout">Preference_widgetLayout</seealso>
			public static readonly int[] Preference = new int[] { unchecked((int)(0x01010002)
				), unchecked((int)(0x0101000d)), unchecked((int)(0x0101000e)), unchecked((int)(0x010100f2
				)), unchecked((int)(0x010101e1)), unchecked((int)(0x010101e6)), unchecked((int)(
				0x010101e8)), unchecked((int)(0x010101e9)), unchecked((int)(0x010101ea)), unchecked(
				(int)(0x010101eb)), unchecked((int)(0x010101ec)), unchecked((int)(0x010101ed)), 
				unchecked((int)(0x010101ee)), unchecked((int)(0x010102e3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The default value for the preference, which will be set either if persistence
			/// is off or persistence is on and the preference is not found in the persistent
			/// storage.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>May be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.defaultValue">android.R.attr.defaultValue</see>
			/// .
			/// </attr>
			/// <attr>name android:defaultValue</attr>
			public const int Preference_defaultValue = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The key of another Preference that this Preference will depend on.  If the other
			/// Preference is not set or is off, this Preference will be disabled.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dependency">android.R.attr.dependency</see>
			/// .
			/// </attr>
			/// <attr>name android:dependency</attr>
			public const int Preference_dependency = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the Preference is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			public const int Preference_enabled = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When used inside of a modern PreferenceActivity, this declares
			/// a new PreferenceFragment to be shown when the user selects this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fragment">android.R.attr.fragment</see>
			/// .
			/// </attr>
			/// <attr>name android:fragment</attr>
			public const int Preference_fragment = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The optional icon for the preference
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int Preference_icon = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The key to store the Preference value.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.key">android.R.attr.key</see>
			/// .
			/// </attr>
			/// <attr>name android:key</attr>
			public const int Preference_key = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The layout for the Preference in a PreferenceActivity screen. This should
			/// rarely need to be changed, look at widgetLayout instead.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout">android.R.attr.layout</see>
			/// .
			/// </attr>
			/// <attr>name android:layout</attr>
			public const int Preference_layout = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The order for the Preference (lower values are to be ordered first). If this is not
			/// specified, the default orderin will be alphabetic.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.order">android.R.attr.order</see>
			/// .
			/// </attr>
			/// <attr>name android:order</attr>
			public const int Preference_order = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the Preference stores its value to the shared preferences.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.persistent">android.R.attr.persistent</see>
			/// .
			/// </attr>
			/// <attr>name android:persistent</attr>
			public const int Preference_persistent = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the Preference is selectable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.selectable">android.R.attr.selectable</see>
			/// .
			/// </attr>
			/// <attr>name android:selectable</attr>
			public const int Preference_selectable = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the view of this Preference should be disabled when
			/// this Preference is disabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shouldDisableView">android.R.attr.shouldDisableView</see>
			/// .
			/// </attr>
			/// <attr>name android:shouldDisableView</attr>
			public const int Preference_shouldDisableView = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The summary for the Preference in a PreferenceActivity screen.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summary">android.R.attr.summary</see>
			/// .
			/// </attr>
			/// <attr>name android:summary</attr>
			public const int Preference_summary = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The title for the Preference in a PreferenceActivity screen.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.title">android.R.attr.title</see>
			/// .
			/// </attr>
			/// <attr>name android:title</attr>
			public const int Preference_title = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The layout for the controllable widget portion of a Preference. This is inflated
			/// into the layout for a Preference and should be used more frequently than
			/// the layout attribute. For example, a checkbox preference would specify
			/// a custom layout (consisting of just the CheckBox) here.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.widgetLayout">android.R.attr.widgetLayout</see>
			/// .
			/// </attr>
			/// <attr>name android:widgetLayout</attr>
			public const int Preference_widgetLayout = 9;

			/// <summary>Attributes that can be used with a PreferenceFrameLayout.</summary>
			/// <remarks>
			/// Attributes that can be used with a PreferenceFrameLayout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceFrameLayout_borderBottom">android:borderBottom</see>
			/// </code></td><td> Padding to use at the bottom of the prefs content.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceFrameLayout_borderLeft">android:borderLeft</see>
			/// </code></td><td> Padding to use at the left of the prefs content.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceFrameLayout_borderRight">android:borderRight</see>
			/// </code></td><td> Padding to use at the right of the prefs content.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceFrameLayout_borderTop">android:borderTop</see>
			/// </code></td><td> Padding to use at the top of the prefs content.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PreferenceFrameLayout_borderBottom">PreferenceFrameLayout_borderBottom
			/// 	</seealso>
			/// <seealso cref="PreferenceFrameLayout_borderLeft">PreferenceFrameLayout_borderLeft
			/// 	</seealso>
			/// <seealso cref="PreferenceFrameLayout_borderRight">PreferenceFrameLayout_borderRight
			/// 	</seealso>
			/// <seealso cref="PreferenceFrameLayout_borderTop">PreferenceFrameLayout_borderTop</seealso>
			public static readonly int[] PreferenceFrameLayout = new int[] { unchecked((int)(
				0x010103e5)), unchecked((int)(0x010103e6)), unchecked((int)(0x010103e7)), unchecked(
				(int)(0x010103e8)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Padding to use at the bottom of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:borderBottom</attr>
			public const int PreferenceFrameLayout_borderBottom = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Padding to use at the left of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:borderLeft</attr>
			public const int PreferenceFrameLayout_borderLeft = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Padding to use at the right of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:borderRight</attr>
			public const int PreferenceFrameLayout_borderRight = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Padding to use at the top of the prefs content.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:borderTop</attr>
			public const int PreferenceFrameLayout_borderTop = 0;

			/// <summary>Attributes that can be used with a PreferenceFrameLayout_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a PreferenceFrameLayout_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceFrameLayout_Layout_layout_removeBorders">android:layout_removeBorders
			/// 	</see>
			/// </code></td><td> Padding to use at the top of the prefs content.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PreferenceFrameLayout_Layout_layout_removeBorders">PreferenceFrameLayout_Layout_layout_removeBorders
			/// 	</seealso>
			public static readonly int[] PreferenceFrameLayout_Layout = new int[] { unchecked(
				(int)(0x010103e9)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Padding to use at the top of the prefs content.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:layout_removeBorders</attr>
			public const int PreferenceFrameLayout_Layout_layout_removeBorders = 0;

			/// <summary>Base attributes available to PreferenceGroup.</summary>
			/// <remarks>
			/// Base attributes available to PreferenceGroup.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceGroup_orderingFromXml">android:orderingFromXml</see>
			/// </code></td><td> Whether to order the Preference under this group as they appear in the XML file.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PreferenceGroup_orderingFromXml">PreferenceGroup_orderingFromXml</seealso>
			public static readonly int[] PreferenceGroup = new int[] { unchecked((int)(0x010101e7
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether to order the Preference under this group as they appear in the XML file.
			/// If this is false, the ordering will follow the Preference order attribute and
			/// default to alphabetic for those without the order attribute.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orderingFromXml">android.R.attr.orderingFromXml</see>
			/// .
			/// </attr>
			/// <attr>name android:orderingFromXml</attr>
			public const int PreferenceGroup_orderingFromXml = 0;

			/// <summary>
			/// Attribute for a header describing the item shown in the top-level list
			/// from which the selects the set of preference to dig in to.
			/// </summary>
			/// <remarks>
			/// Attribute for a header describing the item shown in the top-level list
			/// from which the selects the set of preference to dig in to.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_breadCrumbShortTitle">android:breadCrumbShortTitle</see>
			/// </code></td><td> The short title for the bread crumb of this item.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_breadCrumbTitle">android:breadCrumbTitle</see>
			/// </code></td><td> The title for the bread crumb of this item.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_fragment">android:fragment</see>
			/// </code></td><td> The fragment that is displayed when the user selects this item.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_icon">android:icon</see>
			/// </code></td><td> An icon for the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_id">android:id</see>
			/// </code></td><td> Identifier value for the header.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_summary">android:summary</see>
			/// </code></td><td> The summary for the item.</td></tr>
			/// <tr><td><code>
			/// <see cref="PreferenceHeader_title">android:title</see>
			/// </code></td><td> The title of the item that is shown to the user.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PreferenceHeader_breadCrumbShortTitle">PreferenceHeader_breadCrumbShortTitle
			/// 	</seealso>
			/// <seealso cref="PreferenceHeader_breadCrumbTitle">PreferenceHeader_breadCrumbTitle
			/// 	</seealso>
			/// <seealso cref="PreferenceHeader_fragment">PreferenceHeader_fragment</seealso>
			/// <seealso cref="PreferenceHeader_icon">PreferenceHeader_icon</seealso>
			/// <seealso cref="PreferenceHeader_id">PreferenceHeader_id</seealso>
			/// <seealso cref="PreferenceHeader_summary">PreferenceHeader_summary</seealso>
			/// <seealso cref="PreferenceHeader_title">PreferenceHeader_title</seealso>
			public static readonly int[] PreferenceHeader = new int[] { unchecked((int)(0x01010002
				)), unchecked((int)(0x010100d0)), unchecked((int)(0x010101e1)), unchecked((int)(
				0x010101e9)), unchecked((int)(0x010102e3)), unchecked((int)(0x01010303)), unchecked(
				(int)(0x01010304)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The short title for the bread crumb of this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.breadCrumbShortTitle">android.R.attr.breadCrumbShortTitle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:breadCrumbShortTitle</attr>
			public const int PreferenceHeader_breadCrumbShortTitle = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The title for the bread crumb of this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.breadCrumbTitle">android.R.attr.breadCrumbTitle</see>
			/// .
			/// </attr>
			/// <attr>name android:breadCrumbTitle</attr>
			public const int PreferenceHeader_breadCrumbTitle = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The fragment that is displayed when the user selects this item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fragment">android.R.attr.fragment</see>
			/// .
			/// </attr>
			/// <attr>name android:fragment</attr>
			public const int PreferenceHeader_fragment = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An icon for the item.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int PreferenceHeader_icon = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier value for the header.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.id">android.R.attr.id</see>
			/// .
			/// </attr>
			/// <attr>name android:id</attr>
			public const int PreferenceHeader_id = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The summary for the item.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summary">android.R.attr.summary</see>
			/// .
			/// </attr>
			/// <attr>name android:summary</attr>
			public const int PreferenceHeader_summary = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The title of the item that is shown to the user.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.title">android.R.attr.title</see>
			/// .
			/// </attr>
			/// <attr>name android:title</attr>
			public const int PreferenceHeader_title = 2;

			/// <summary>Attributes that can be used with a ProgressBar.</summary>
			/// <remarks>
			/// Attributes that can be used with a ProgressBar.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_animationResolution">android:animationResolution</see>
			/// </code></td><td> Timeout between frames of animation in milliseconds </td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_indeterminate">android:indeterminate</see>
			/// </code></td><td> Allows to enable the indeterminate mode.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_indeterminateBehavior">android:indeterminateBehavior</see>
			/// </code></td><td> Defines how the indeterminate mode should behave when the progress
			/// reaches max.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_indeterminateDrawable">android:indeterminateDrawable</see>
			/// </code></td><td> Drawable used for the indeterminate mode.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_indeterminateDuration">android:indeterminateDuration</see>
			/// </code></td><td> Duration of the indeterminate animation.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_indeterminateOnly">android:indeterminateOnly</see>
			/// </code></td><td> Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_interpolator">android:interpolator</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_max">android:max</see>
			/// </code></td><td> Defines the maximum value the progress can take.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_maxHeight">android:maxHeight</see>
			/// </code></td><td> An optional argument to supply a maximum height for this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_maxWidth">android:maxWidth</see>
			/// </code></td><td> An optional argument to supply a maximum width for this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_minHeight">android:minHeight</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_minWidth">android:minWidth</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_progress">android:progress</see>
			/// </code></td><td> Defines the default progress value, between 0 and max.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_progressDrawable">android:progressDrawable</see>
			/// </code></td><td> Drawable used for the progress mode.</td></tr>
			/// <tr><td><code>
			/// <see cref="ProgressBar_secondaryProgress">android:secondaryProgress</see>
			/// </code></td><td> Defines the secondary progress value, between 0 and max.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ProgressBar_animationResolution">ProgressBar_animationResolution</seealso>
			/// <seealso cref="ProgressBar_indeterminate">ProgressBar_indeterminate</seealso>
			/// <seealso cref="ProgressBar_indeterminateBehavior">ProgressBar_indeterminateBehavior
			/// 	</seealso>
			/// <seealso cref="ProgressBar_indeterminateDrawable">ProgressBar_indeterminateDrawable
			/// 	</seealso>
			/// <seealso cref="ProgressBar_indeterminateDuration">ProgressBar_indeterminateDuration
			/// 	</seealso>
			/// <seealso cref="ProgressBar_indeterminateOnly">ProgressBar_indeterminateOnly</seealso>
			/// <seealso cref="ProgressBar_interpolator">ProgressBar_interpolator</seealso>
			/// <seealso cref="ProgressBar_max">ProgressBar_max</seealso>
			/// <seealso cref="ProgressBar_maxHeight">ProgressBar_maxHeight</seealso>
			/// <seealso cref="ProgressBar_maxWidth">ProgressBar_maxWidth</seealso>
			/// <seealso cref="ProgressBar_minHeight">ProgressBar_minHeight</seealso>
			/// <seealso cref="ProgressBar_minWidth">ProgressBar_minWidth</seealso>
			/// <seealso cref="ProgressBar_progress">ProgressBar_progress</seealso>
			/// <seealso cref="ProgressBar_progressDrawable">ProgressBar_progressDrawable</seealso>
			/// <seealso cref="ProgressBar_secondaryProgress">ProgressBar_secondaryProgress</seealso>
			public static readonly int[] ProgressBar = new int[] { unchecked((int)(0x0101011f
				)), unchecked((int)(0x01010120)), unchecked((int)(0x01010136)), unchecked((int)(
				0x01010137)), unchecked((int)(0x01010138)), unchecked((int)(0x01010139)), unchecked(
				(int)(0x0101013a)), unchecked((int)(0x0101013b)), unchecked((int)(0x0101013c)), 
				unchecked((int)(0x0101013d)), unchecked((int)(0x0101013e)), unchecked((int)(0x0101013f
				)), unchecked((int)(0x01010140)), unchecked((int)(0x01010141)), unchecked((int)(
				0x0101031a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Timeout between frames of animation in milliseconds
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animationResolution">android.R.attr.animationResolution
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:animationResolution</attr>
			public const int ProgressBar_animationResolution = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Allows to enable the indeterminate mode. In this mode the progress
			/// bar plays an infinite looping animation.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indeterminate">android.R.attr.indeterminate</see>
			/// .
			/// </attr>
			/// <attr>name android:indeterminate</attr>
			public const int ProgressBar_indeterminate = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines how the indeterminate mode should behave when the progress
			/// reaches max.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>repeat</code></td><td>1</td><td> Progress starts over from 0. </td></tr>
			/// <tr><td><code>cycle</code></td><td>2</td><td> Progress keeps the current value and goes back to 0. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indeterminateBehavior">android.R.attr.indeterminateBehavior
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:indeterminateBehavior</attr>
			public const int ProgressBar_indeterminateBehavior = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used for the indeterminate mode.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indeterminateDrawable">android.R.attr.indeterminateDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:indeterminateDrawable</attr>
			public const int ProgressBar_indeterminateDrawable = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Duration of the indeterminate animation.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indeterminateDuration">android.R.attr.indeterminateDuration
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:indeterminateDuration</attr>
			public const int ProgressBar_indeterminateDuration = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.indeterminateOnly">android.R.attr.indeterminateOnly</see>
			/// .
			/// </attr>
			/// <attr>name android:indeterminateOnly</attr>
			public const int ProgressBar_indeterminateOnly = 6;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.interpolator">android.R.attr.interpolator</see>
			/// attribute's value can be found in the
			/// <see cref="ProgressBar">ProgressBar</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:interpolator</attr>
			public const int ProgressBar_interpolator = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the maximum value the progress can take.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.max">android.R.attr.max</see>
			/// .
			/// </attr>
			/// <attr>name android:max</attr>
			public const int ProgressBar_max = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional argument to supply a maximum height for this view.
			/// See {see android.widget.ImageView#setMaxHeight} for details.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxHeight">android.R.attr.maxHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:maxHeight</attr>
			public const int ProgressBar_maxHeight = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional argument to supply a maximum width for this view.
			/// See {see android.widget.ImageView#setMaxWidth} for details.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxWidth">android.R.attr.maxWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:maxWidth</attr>
			public const int ProgressBar_maxWidth = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.minHeight">android.R.attr.minHeight</see>
			/// attribute's value can be found in the
			/// <see cref="ProgressBar">ProgressBar</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:minHeight</attr>
			public const int ProgressBar_minHeight = 12;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.minWidth">android.R.attr.minWidth</see>
			/// attribute's value can be found in the
			/// <see cref="ProgressBar">ProgressBar</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:minWidth</attr>
			public const int ProgressBar_minWidth = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the default progress value, between 0 and max.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progress">android.R.attr.progress</see>
			/// .
			/// </attr>
			/// <attr>name android:progress</attr>
			public const int ProgressBar_progress = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used for the progress mode.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressDrawable">android.R.attr.progressDrawable</see>
			/// .
			/// </attr>
			/// <attr>name android:progressDrawable</attr>
			public const int ProgressBar_progressDrawable = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the secondary progress value, between 0 and max. This progress is drawn between
			/// the primary progress and the background.  It can be ideal for media scenarios such as
			/// showing the buffering progress while the default progress shows the play progress.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.secondaryProgress">android.R.attr.secondaryProgress</see>
			/// .
			/// </attr>
			/// <attr>name android:secondaryProgress</attr>
			public const int ProgressBar_secondaryProgress = 4;

			/// <summary>Attributes that can be used with a PropertyAnimator.</summary>
			/// <remarks>
			/// Attributes that can be used with a PropertyAnimator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="PropertyAnimator_propertyName">android:propertyName</see>
			/// </code></td><td> Name of the property being animated.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="PropertyAnimator_propertyName">PropertyAnimator_propertyName</seealso>
			public static readonly int[] PropertyAnimator = new int[] { unchecked((int)(0x010102e1
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Name of the property being animated.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.propertyName">android.R.attr.propertyName</see>
			/// .
			/// </attr>
			/// <attr>name android:propertyName</attr>
			public const int PropertyAnimator_propertyName = 0;

			/// <summary>Attributes that can be used with a QuickContactBadge.</summary>
			/// <remarks>
			/// Attributes that can be used with a QuickContactBadge.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="QuickContactBadge_quickContactWindowSize">android:quickContactWindowSize
			/// 	</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="QuickContactBadge_quickContactWindowSize">QuickContactBadge_quickContactWindowSize
			/// 	</seealso>
			public static readonly int[] QuickContactBadge = new int[] { unchecked((int)(0x010103f0
				)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.quickContactWindowSize">attr.quickContactWindowSize</see>
			/// attribute's value can be found in the
			/// <see cref="QuickContactBadge">QuickContactBadge</see>
			/// array.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>modeSmall</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>modeMedium</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>modeLarge</code></td><td>3</td><td></td></tr>
			/// </table>
			/// </summary>
			/// <attr>name android:quickContactWindowSize</attr>
			public const int QuickContactBadge_quickContactWindowSize = 0;

			/// <summary>Attributes that can be used with a RadioGroup.</summary>
			/// <remarks>
			/// Attributes that can be used with a RadioGroup.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RadioGroup_checkedButton">android:checkedButton</see>
			/// </code></td><td> The id of the child radio button that should be checked by default
			/// within this radio group.</td></tr>
			/// <tr><td><code>
			/// <see cref="RadioGroup_orientation">android:orientation</see>
			/// </code></td><td> Should the radio group be a column or a row?  Use "horizontal"
			/// for a row, "vertical" for a column.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RadioGroup_checkedButton">RadioGroup_checkedButton</seealso>
			/// <seealso cref="RadioGroup_orientation">RadioGroup_orientation</seealso>
			public static readonly int[] RadioGroup = new int[] { unchecked((int)(0x010100c4)
				), unchecked((int)(0x01010148)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The id of the child radio button that should be checked by default
			/// within this radio group.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.checkedButton">android.R.attr.checkedButton</see>
			/// .
			/// </attr>
			/// <attr>name android:checkedButton</attr>
			public const int RadioGroup_checkedButton = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Should the radio group be a column or a row?  Use "horizontal"
			/// for a row, "vertical" for a column.  The default is
			/// vertical.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int RadioGroup_orientation = 0;

			/// <summary>Attributes that can be used with a RatingBar.</summary>
			/// <remarks>
			/// Attributes that can be used with a RatingBar.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RatingBar_isIndicator">android:isIndicator</see>
			/// </code></td><td> Whether this rating bar is an indicator (and non-changeable by the user).</td></tr>
			/// <tr><td><code>
			/// <see cref="RatingBar_numStars">android:numStars</see>
			/// </code></td><td> The number of stars (or rating items) to show.</td></tr>
			/// <tr><td><code>
			/// <see cref="RatingBar_rating">android:rating</see>
			/// </code></td><td> The rating to set by default.</td></tr>
			/// <tr><td><code>
			/// <see cref="RatingBar_stepSize">android:stepSize</see>
			/// </code></td><td> The step size of the rating.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RatingBar_isIndicator">RatingBar_isIndicator</seealso>
			/// <seealso cref="RatingBar_numStars">RatingBar_numStars</seealso>
			/// <seealso cref="RatingBar_rating">RatingBar_rating</seealso>
			/// <seealso cref="RatingBar_stepSize">RatingBar_stepSize</seealso>
			public static readonly int[] RatingBar = new int[] { unchecked((int)(0x01010144))
				, unchecked((int)(0x01010145)), unchecked((int)(0x01010146)), unchecked((int)(0x01010147
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether this rating bar is an indicator (and non-changeable by the user).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isIndicator">android.R.attr.isIndicator</see>
			/// .
			/// </attr>
			/// <attr>name android:isIndicator</attr>
			public const int RatingBar_isIndicator = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The number of stars (or rating items) to show.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.numStars">android.R.attr.numStars</see>
			/// .
			/// </attr>
			/// <attr>name android:numStars</attr>
			public const int RatingBar_numStars = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The rating to set by default.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rating">android.R.attr.rating</see>
			/// .
			/// </attr>
			/// <attr>name android:rating</attr>
			public const int RatingBar_rating = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The step size of the rating.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.stepSize">android.R.attr.stepSize</see>
			/// .
			/// </attr>
			/// <attr>name android:stepSize</attr>
			public const int RatingBar_stepSize = 2;

			/// <summary>
			/// Use <code>recognition-service</code> as the root tag of the XML resource that
			/// describes a
			/// <see cref="android.speech.RecognitionService">android.speech.RecognitionService</see>
			/// , which is reference from
			/// its
			/// <see cref="android.speech.RecognitionService.SERVICE_META_DATA">android.speech.RecognitionService.SERVICE_META_DATA
			/// 	</see>
			/// meta-data entry.
			/// Described here are the attributes that can be included in that tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RecognitionService_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> Component name of an activity that allows the user to modify
			/// the settings for this service.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="RecognitionService_settingsActivity">RecognitionService_settingsActivity
			/// 	</seealso>
			public static readonly int[] RecognitionService = new int[] { unchecked((int)(0x01010225
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int RecognitionService_settingsActivity = 0;

			/// <summary>Attributes that can be used with a RelativeLayout.</summary>
			/// <remarks>
			/// Attributes that can be used with a RelativeLayout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_gravity">android:gravity</see>
			/// </code></td><td> Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_ignoreGravity">android:ignoreGravity</see>
			/// </code></td><td> Indicates what view should not be affected by gravity.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RelativeLayout_gravity">RelativeLayout_gravity</seealso>
			/// <seealso cref="RelativeLayout_ignoreGravity">RelativeLayout_ignoreGravity</seealso>
			public static readonly int[] RelativeLayout = new int[] { unchecked((int)(0x010100af
				)), unchecked((int)(0x010101ff)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies how to place the content of an object, both
			/// on the x- and y-axis, within the object itself.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int RelativeLayout_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates what view should not be affected by gravity.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ignoreGravity">android.R.attr.ignoreGravity</see>
			/// .
			/// </attr>
			/// <attr>name android:ignoreGravity</attr>
			public const int RelativeLayout_ignoreGravity = 1;

			/// <summary>Attributes that can be used with a RelativeLayout_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a RelativeLayout_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_above">android:layout_above</see>
			/// </code></td><td> Positions the bottom edge of this view above the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignBaseline">android:layout_alignBaseline
			/// 	</see>
			/// </code></td><td> Positions the baseline of this view on the baseline of the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignBottom">android:layout_alignBottom</see>
			/// </code></td><td> Makes the bottom edge of this view match the bottom edge of the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignLeft">android:layout_alignLeft</see>
			/// </code></td><td> Makes the left edge of this view match the left edge of the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignParentBottom">android:layout_alignParentBottom
			/// 	</see>
			/// </code></td><td> If true, makes the bottom edge of this view match the bottom edge of the parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignParentLeft">android:layout_alignParentLeft
			/// 	</see>
			/// </code></td><td> If true, makes the left edge of this view match the left edge of the parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignParentRight">android:layout_alignParentRight
			/// 	</see>
			/// </code></td><td> If true, makes the right edge of this view match the right edge of the parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignParentTop">android:layout_alignParentTop
			/// 	</see>
			/// </code></td><td> If true, makes the top edge of this view match the top edge of the parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignRight">android:layout_alignRight</see>
			/// </code></td><td> Makes the right edge of this view match the right edge of the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignTop">android:layout_alignTop</see>
			/// </code></td><td> Makes the top edge of this view match the top edge of the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_alignWithParentIfMissing">android:layout_alignWithParentIfMissing
			/// 	</see>
			/// </code></td><td> If set to true, the parent will be used as the anchor when the anchor cannot be
			/// be found for layout_toLeftOf, layout_toRightOf, etc.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_below">android:layout_below</see>
			/// </code></td><td> Positions the top edge of this view below the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_centerHorizontal">android:layout_centerHorizontal
			/// 	</see>
			/// </code></td><td> If true, centers this child horizontally within its parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_centerInParent">android:layout_centerInParent
			/// 	</see>
			/// </code></td><td> If true, centers this child horizontally and vertically within its parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_centerVertical">android:layout_centerVertical
			/// 	</see>
			/// </code></td><td> If true, centers this child vertically within its parent.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_toLeftOf">android:layout_toLeftOf</see>
			/// </code></td><td> Positions the right edge of this view to the left of the given anchor view ID.</td></tr>
			/// <tr><td><code>
			/// <see cref="RelativeLayout_Layout_layout_toRightOf">android:layout_toRightOf</see>
			/// </code></td><td> Positions the left edge of this view to the right of the given anchor view ID.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RelativeLayout_Layout_layout_above">RelativeLayout_Layout_layout_above
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignBaseline">RelativeLayout_Layout_layout_alignBaseline
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignBottom">RelativeLayout_Layout_layout_alignBottom
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignLeft">RelativeLayout_Layout_layout_alignLeft
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignParentBottom">RelativeLayout_Layout_layout_alignParentBottom
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignParentLeft">RelativeLayout_Layout_layout_alignParentLeft
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignParentRight">RelativeLayout_Layout_layout_alignParentRight
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignParentTop">RelativeLayout_Layout_layout_alignParentTop
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignRight">RelativeLayout_Layout_layout_alignRight
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignTop">RelativeLayout_Layout_layout_alignTop
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_alignWithParentIfMissing">RelativeLayout_Layout_layout_alignWithParentIfMissing
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_below">RelativeLayout_Layout_layout_below
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_centerHorizontal">RelativeLayout_Layout_layout_centerHorizontal
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_centerInParent">RelativeLayout_Layout_layout_centerInParent
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_centerVertical">RelativeLayout_Layout_layout_centerVertical
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_toLeftOf">RelativeLayout_Layout_layout_toLeftOf
			/// 	</seealso>
			/// <seealso cref="RelativeLayout_Layout_layout_toRightOf">RelativeLayout_Layout_layout_toRightOf
			/// 	</seealso>
			public static readonly int[] RelativeLayout_Layout = new int[] { unchecked((int)(
				0x01010182)), unchecked((int)(0x01010183)), unchecked((int)(0x01010184)), unchecked(
				(int)(0x01010185)), unchecked((int)(0x01010186)), unchecked((int)(0x01010187)), 
				unchecked((int)(0x01010188)), unchecked((int)(0x01010189)), unchecked((int)(0x0101018a
				)), unchecked((int)(0x0101018b)), unchecked((int)(0x0101018c)), unchecked((int)(
				0x0101018d)), unchecked((int)(0x0101018e)), unchecked((int)(0x0101018f)), unchecked(
				(int)(0x01010190)), unchecked((int)(0x01010191)), unchecked((int)(0x01010192)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Positions the bottom edge of this view above the given anchor view ID.
			/// Accommodates bottom margin of this view and top margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_above">android.R.attr.layout_above</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_above</attr>
			public const int RelativeLayout_Layout_layout_above = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Positions the baseline of this view on the baseline of the given anchor view ID.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignBaseline">android.R.attr.layout_alignBaseline
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignBaseline</attr>
			public const int RelativeLayout_Layout_layout_alignBaseline = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
			/// Accommodates bottom margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignBottom">android.R.attr.layout_alignBottom</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignBottom</attr>
			public const int RelativeLayout_Layout_layout_alignBottom = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the left edge of this view match the left edge of the given anchor view ID.
			/// Accommodates left margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignLeft">android.R.attr.layout_alignLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignLeft</attr>
			public const int RelativeLayout_Layout_layout_alignLeft = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, makes the bottom edge of this view match the bottom edge of the parent.
			/// Accommodates bottom margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignParentBottom">android.R.attr.layout_alignParentBottom
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignParentBottom</attr>
			public const int RelativeLayout_Layout_layout_alignParentBottom = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, makes the left edge of this view match the left edge of the parent.
			/// Accommodates left margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignParentLeft">android.R.attr.layout_alignParentLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignParentLeft</attr>
			public const int RelativeLayout_Layout_layout_alignParentLeft = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, makes the right edge of this view match the right edge of the parent.
			/// Accommodates right margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignParentRight">android.R.attr.layout_alignParentRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignParentRight</attr>
			public const int RelativeLayout_Layout_layout_alignParentRight = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, makes the top edge of this view match the top edge of the parent.
			/// Accommodates top margin.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignParentTop">android.R.attr.layout_alignParentTop
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignParentTop</attr>
			public const int RelativeLayout_Layout_layout_alignParentTop = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the right edge of this view match the right edge of the given anchor view ID.
			/// Accommodates right margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignRight">android.R.attr.layout_alignRight</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignRight</attr>
			public const int RelativeLayout_Layout_layout_alignRight = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the top edge of this view match the top edge of the given anchor view ID.
			/// Accommodates top margin.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignTop">android.R.attr.layout_alignTop</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignTop</attr>
			public const int RelativeLayout_Layout_layout_alignTop = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set to true, the parent will be used as the anchor when the anchor cannot be
			/// be found for layout_toLeftOf, layout_toRightOf, etc.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_alignWithParentIfMissing">android.R.attr.layout_alignWithParentIfMissing
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_alignWithParentIfMissing</attr>
			public const int RelativeLayout_Layout_layout_alignWithParentIfMissing = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Positions the top edge of this view below the given anchor view ID.
			/// Accommodates top margin of this view and bottom margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_below">android.R.attr.layout_below</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_below</attr>
			public const int RelativeLayout_Layout_layout_below = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, centers this child horizontally within its parent.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_centerHorizontal">android.R.attr.layout_centerHorizontal
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_centerHorizontal</attr>
			public const int RelativeLayout_Layout_layout_centerHorizontal = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, centers this child horizontally and vertically within its parent.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_centerInParent">android.R.attr.layout_centerInParent
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_centerInParent</attr>
			public const int RelativeLayout_Layout_layout_centerInParent = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, centers this child vertically within its parent.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_centerVertical">android.R.attr.layout_centerVertical
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_centerVertical</attr>
			public const int RelativeLayout_Layout_layout_centerVertical = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Positions the right edge of this view to the left of the given anchor view ID.
			/// Accommodates right margin of this view and left margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_toLeftOf">android.R.attr.layout_toLeftOf</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_toLeftOf</attr>
			public const int RelativeLayout_Layout_layout_toLeftOf = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Positions the left edge of this view to the right of the given anchor view ID.
			/// Accommodates left margin of this view and right margin of anchor view.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_toRightOf">android.R.attr.layout_toRightOf</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_toRightOf</attr>
			public const int RelativeLayout_Layout_layout_toRightOf = 1;

			/// <summary>Base attributes available to RingtonePreference.</summary>
			/// <remarks>
			/// Base attributes available to RingtonePreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RingtonePreference_ringtoneType">android:ringtoneType</see>
			/// </code></td><td> Which ringtone type(s) to show in the picker.</td></tr>
			/// <tr><td><code>
			/// <see cref="RingtonePreference_showDefault">android:showDefault</see>
			/// </code></td><td> Whether to show an item for a default sound.</td></tr>
			/// <tr><td><code>
			/// <see cref="RingtonePreference_showSilent">android:showSilent</see>
			/// </code></td><td> Whether to show an item for 'Silent'.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RingtonePreference_ringtoneType">RingtonePreference_ringtoneType</seealso>
			/// <seealso cref="RingtonePreference_showDefault">RingtonePreference_showDefault</seealso>
			/// <seealso cref="RingtonePreference_showSilent">RingtonePreference_showSilent</seealso>
			public static readonly int[] RingtonePreference = new int[] { unchecked((int)(0x010101f9
				)), unchecked((int)(0x010101fa)), unchecked((int)(0x010101fb)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Which ringtone type(s) to show in the picker.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>ringtone</code></td><td>1</td><td> Ringtones. </td></tr>
			/// <tr><td><code>notification</code></td><td>2</td><td> Notification sounds. </td></tr>
			/// <tr><td><code>alarm</code></td><td>4</td><td> Alarm sounds. </td></tr>
			/// <tr><td><code>all</code></td><td>7</td><td> All available ringtone sounds. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ringtoneType">android.R.attr.ringtoneType</see>
			/// .
			/// </attr>
			/// <attr>name android:ringtoneType</attr>
			public const int RingtonePreference_ringtoneType = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether to show an item for a default sound.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.showDefault">android.R.attr.showDefault</see>
			/// .
			/// </attr>
			/// <attr>name android:showDefault</attr>
			public const int RingtonePreference_showDefault = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether to show an item for 'Silent'.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.showSilent">android.R.attr.showSilent</see>
			/// .
			/// </attr>
			/// <attr>name android:showSilent</attr>
			public const int RingtonePreference_showSilent = 2;

			/// <summary>attributes for internal rotary widget used in lock screen and phone app</summary>
			/// <hide>
			/// 
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RotarySelector_orientation">android:orientation</see>
			/// </code></td><td> Use "horizontal" or "vertical".</td></tr>
			/// </table>
			/// </hide>
			/// <seealso cref="RotarySelector_orientation">RotarySelector_orientation</seealso>
			public static readonly int[] RotarySelector = new int[] { unchecked((int)(0x010100c4
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Use "horizontal" or "vertical".  The default is horizontal.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int RotarySelector_orientation = 0;

			/// <summary>Attributes that can be used with a RotateAnimation.</summary>
			/// <remarks>
			/// Attributes that can be used with a RotateAnimation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RotateAnimation_fromDegrees">android:fromDegrees</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateAnimation_pivotX">android:pivotX</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateAnimation_pivotY">android:pivotY</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateAnimation_toDegrees">android:toDegrees</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RotateAnimation_fromDegrees">RotateAnimation_fromDegrees</seealso>
			/// <seealso cref="RotateAnimation_pivotX">RotateAnimation_pivotX</seealso>
			/// <seealso cref="RotateAnimation_pivotY">RotateAnimation_pivotY</seealso>
			/// <seealso cref="RotateAnimation_toDegrees">RotateAnimation_toDegrees</seealso>
			public static readonly int[] RotateAnimation = new int[] { unchecked((int)(0x010101b3
				)), unchecked((int)(0x010101b4)), unchecked((int)(0x010101b5)), unchecked((int)(
				0x010101b6)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromDegrees">android.R.attr.fromDegrees</see>
			/// attribute's value can be found in the
			/// <see cref="RotateAnimation">RotateAnimation</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromDegrees</attr>
			public const int RotateAnimation_fromDegrees = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotX">android.R.attr.pivotX</see>
			/// attribute's value can be found in the
			/// <see cref="RotateAnimation">RotateAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotX</attr>
			public const int RotateAnimation_pivotX = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotY">android.R.attr.pivotY</see>
			/// attribute's value can be found in the
			/// <see cref="RotateAnimation">RotateAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotY</attr>
			public const int RotateAnimation_pivotY = 3;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toDegrees">android.R.attr.toDegrees</see>
			/// attribute's value can be found in the
			/// <see cref="RotateAnimation">RotateAnimation</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toDegrees</attr>
			public const int RotateAnimation_toDegrees = 1;

			/// <summary>Drawable used to rotate another drawable.</summary>
			/// <remarks>
			/// Drawable used to rotate another drawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="RotateDrawable_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to use for the frame.</td></tr>
			/// <tr><td><code>
			/// <see cref="RotateDrawable_fromDegrees">android:fromDegrees</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateDrawable_pivotX">android:pivotX</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateDrawable_pivotY">android:pivotY</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateDrawable_toDegrees">android:toDegrees</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="RotateDrawable_visible">android:visible</see>
			/// </code></td><td> Provides initial visibility state of the drawable; the default
			/// value is false.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="RotateDrawable_drawable">RotateDrawable_drawable</seealso>
			/// <seealso cref="RotateDrawable_fromDegrees">RotateDrawable_fromDegrees</seealso>
			/// <seealso cref="RotateDrawable_pivotX">RotateDrawable_pivotX</seealso>
			/// <seealso cref="RotateDrawable_pivotY">RotateDrawable_pivotY</seealso>
			/// <seealso cref="RotateDrawable_toDegrees">RotateDrawable_toDegrees</seealso>
			/// <seealso cref="RotateDrawable_visible">RotateDrawable_visible</seealso>
			public static readonly int[] RotateDrawable = new int[] { unchecked((int)(0x01010194
				)), unchecked((int)(0x01010199)), unchecked((int)(0x010101b3)), unchecked((int)(
				0x010101b4)), unchecked((int)(0x010101b5)), unchecked((int)(0x010101b6)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to use for the frame.  If not
			/// given, the drawable must be defined by the first child tag.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int RotateDrawable_drawable = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromDegrees">android.R.attr.fromDegrees</see>
			/// attribute's value can be found in the
			/// <see cref="RotateDrawable">RotateDrawable</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromDegrees</attr>
			public const int RotateDrawable_fromDegrees = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotX">android.R.attr.pivotX</see>
			/// attribute's value can be found in the
			/// <see cref="RotateDrawable">RotateDrawable</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotX</attr>
			public const int RotateDrawable_pivotX = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotY">android.R.attr.pivotY</see>
			/// attribute's value can be found in the
			/// <see cref="RotateDrawable">RotateDrawable</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotY</attr>
			public const int RotateDrawable_pivotY = 5;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toDegrees">android.R.attr.toDegrees</see>
			/// attribute's value can be found in the
			/// <see cref="RotateDrawable">RotateDrawable</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toDegrees</attr>
			public const int RotateDrawable_toDegrees = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Provides initial visibility state of the drawable; the default
			/// value is false.  See
			/// <see cref="android.graphics.drawable.Drawable.setVisible(bool, bool)">android.graphics.drawable.Drawable.setVisible(bool, bool)
			/// 	</see>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int RotateDrawable_visible = 0;

			/// <summary>Attributes that can be used with a ScaleAnimation.</summary>
			/// <remarks>
			/// Attributes that can be used with a ScaleAnimation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ScaleAnimation_fromXScale">android:fromXScale</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleAnimation_fromYScale">android:fromYScale</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleAnimation_pivotX">android:pivotX</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleAnimation_pivotY">android:pivotY</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleAnimation_toXScale">android:toXScale</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleAnimation_toYScale">android:toYScale</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ScaleAnimation_fromXScale">ScaleAnimation_fromXScale</seealso>
			/// <seealso cref="ScaleAnimation_fromYScale">ScaleAnimation_fromYScale</seealso>
			/// <seealso cref="ScaleAnimation_pivotX">ScaleAnimation_pivotX</seealso>
			/// <seealso cref="ScaleAnimation_pivotY">ScaleAnimation_pivotY</seealso>
			/// <seealso cref="ScaleAnimation_toXScale">ScaleAnimation_toXScale</seealso>
			/// <seealso cref="ScaleAnimation_toYScale">ScaleAnimation_toYScale</seealso>
			public static readonly int[] ScaleAnimation = new int[] { unchecked((int)(0x010101b5
				)), unchecked((int)(0x010101b6)), unchecked((int)(0x010101c2)), unchecked((int)(
				0x010101c3)), unchecked((int)(0x010101c4)), unchecked((int)(0x010101c5)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromXScale">android.R.attr.fromXScale</see>
			/// attribute's value can be found in the
			/// <see cref="ScaleAnimation">ScaleAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromXScale</attr>
			public const int ScaleAnimation_fromXScale = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromYScale">android.R.attr.fromYScale</see>
			/// attribute's value can be found in the
			/// <see cref="ScaleAnimation">ScaleAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromYScale</attr>
			public const int ScaleAnimation_fromYScale = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotX">android.R.attr.pivotX</see>
			/// attribute's value can be found in the
			/// <see cref="ScaleAnimation">ScaleAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotX</attr>
			public const int ScaleAnimation_pivotX = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.pivotY">android.R.attr.pivotY</see>
			/// attribute's value can be found in the
			/// <see cref="ScaleAnimation">ScaleAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:pivotY</attr>
			public const int ScaleAnimation_pivotY = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toXScale">android.R.attr.toXScale</see>
			/// attribute's value can be found in the
			/// <see cref="ScaleAnimation">ScaleAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toXScale</attr>
			public const int ScaleAnimation_toXScale = 3;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toYScale">android.R.attr.toYScale</see>
			/// attribute's value can be found in the
			/// <see cref="ScaleAnimation">ScaleAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toYScale</attr>
			public const int ScaleAnimation_toYScale = 5;

			/// <summary>Attributes that can be used with a ScaleDrawable.</summary>
			/// <remarks>
			/// Attributes that can be used with a ScaleDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ScaleDrawable_drawable">android:drawable</see>
			/// </code></td><td> Reference to a drawable resource to draw with the specified scale.</td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleDrawable_scaleGravity">android:scaleGravity</see>
			/// </code></td><td> Specifies where the drawable is positioned after scaling.</td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleDrawable_scaleHeight">android:scaleHeight</see>
			/// </code></td><td> Scale height, expressed as a percentage of the drawable's bound.</td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleDrawable_scaleWidth">android:scaleWidth</see>
			/// </code></td><td> Scale width, expressed as a percentage of the drawable's bound.</td></tr>
			/// <tr><td><code>
			/// <see cref="ScaleDrawable_useIntrinsicSizeAsMinimum">android:useIntrinsicSizeAsMinimum
			/// 	</see>
			/// </code></td><td> Use the drawable's intrinsic width and height as minimum size values.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ScaleDrawable_drawable">ScaleDrawable_drawable</seealso>
			/// <seealso cref="ScaleDrawable_scaleGravity">ScaleDrawable_scaleGravity</seealso>
			/// <seealso cref="ScaleDrawable_scaleHeight">ScaleDrawable_scaleHeight</seealso>
			/// <seealso cref="ScaleDrawable_scaleWidth">ScaleDrawable_scaleWidth</seealso>
			/// <seealso cref="ScaleDrawable_useIntrinsicSizeAsMinimum">ScaleDrawable_useIntrinsicSizeAsMinimum
			/// 	</seealso>
			public static readonly int[] ScaleDrawable = new int[] { unchecked((int)(0x01010199
				)), unchecked((int)(0x010101fc)), unchecked((int)(0x010101fd)), unchecked((int)(
				0x010101fe)), unchecked((int)(0x01010310)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable resource to draw with the specified scale.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawable">android.R.attr.drawable</see>
			/// .
			/// </attr>
			/// <attr>name android:drawable</attr>
			public const int ScaleDrawable_drawable = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies where the drawable is positioned after scaling. The default value is
			/// left.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scaleGravity">android.R.attr.scaleGravity</see>
			/// .
			/// </attr>
			/// <attr>name android:scaleGravity</attr>
			public const int ScaleDrawable_scaleGravity = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Scale height, expressed as a percentage of the drawable's bound. The value's
			/// format is XX%. For instance: 100%, 12.5%, etc.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scaleHeight">android.R.attr.scaleHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:scaleHeight</attr>
			public const int ScaleDrawable_scaleHeight = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Scale width, expressed as a percentage of the drawable's bound. The value's
			/// format is XX%. For instance: 100%, 12.5%, etc.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scaleWidth">android.R.attr.scaleWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:scaleWidth</attr>
			public const int ScaleDrawable_scaleWidth = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Use the drawable's intrinsic width and height as minimum size values.
			/// Useful if the target drawable is a 9-patch or otherwise should not be scaled
			/// down beyond a minimum size.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.useIntrinsicSizeAsMinimum">android.R.attr.useIntrinsicSizeAsMinimum
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:useIntrinsicSizeAsMinimum</attr>
			public const int ScaleDrawable_useIntrinsicSizeAsMinimum = 4;

			/// <summary>Attributes that can be used with a ScrollView.</summary>
			/// <remarks>
			/// Attributes that can be used with a ScrollView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ScrollView_fillViewport">android:fillViewport</see>
			/// </code></td><td> Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ScrollView_fillViewport">ScrollView_fillViewport</seealso>
			public static readonly int[] ScrollView = new int[] { unchecked((int)(0x0101017a)
				) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the scrollview should stretch its content to fill the viewport.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fillViewport">android.R.attr.fillViewport</see>
			/// .
			/// </attr>
			/// <attr>name android:fillViewport</attr>
			public const int ScrollView_fillViewport = 0;

			/// <summary>Attributes that can be used with a SearchView.</summary>
			/// <remarks>
			/// Attributes that can be used with a SearchView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SearchView_iconifiedByDefault">android:iconifiedByDefault</see>
			/// </code></td><td> The default state of the SearchView.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchView_imeOptions">android:imeOptions</see>
			/// </code></td><td> The IME options to set on the query text field.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchView_inputType">android:inputType</see>
			/// </code></td><td> The input type to set on the query text field.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchView_maxWidth">android:maxWidth</see>
			/// </code></td><td> An optional maximum width of the SearchView.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchView_queryHint">android:queryHint</see>
			/// </code></td><td> An optional query hint string to be displayed in the empty query field.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SearchView_iconifiedByDefault">SearchView_iconifiedByDefault</seealso>
			/// <seealso cref="SearchView_imeOptions">SearchView_imeOptions</seealso>
			/// <seealso cref="SearchView_inputType">SearchView_inputType</seealso>
			/// <seealso cref="SearchView_maxWidth">SearchView_maxWidth</seealso>
			/// <seealso cref="SearchView_queryHint">SearchView_queryHint</seealso>
			public static readonly int[] SearchView = new int[] { unchecked((int)(0x0101011f)
				), unchecked((int)(0x01010220)), unchecked((int)(0x01010264)), unchecked((int)(0x010102fa
				)), unchecked((int)(0x01010358)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The default state of the SearchView. If true, it will be iconified when not in
			/// use and expanded when clicked.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.iconifiedByDefault">android.R.attr.iconifiedByDefault</see>
			/// .
			/// </attr>
			/// <attr>name android:iconifiedByDefault</attr>
			public const int SearchView_iconifiedByDefault = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The IME options to set on the query text field.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
			/// <tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
			/// editor come up with its own if it can.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_NULL">android.view.inputmethod.EditorInfo.IME_NULL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NONE">android.view.inputmethod.EditorInfo.IME_ACTION_NONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
			/// operation to take the user to the target of the text they typed.
			/// Typically used, for example, when entering a URL.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_GO">android.view.inputmethod.EditorInfo.IME_ACTION_GO
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
			/// operation, taking the user to the results of searching for the text
			/// the have typed (in whatever context is appropriate).
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH">android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
			/// operation, delivering the text to its target.  This is typically used
			/// when composing a message.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEND">android.view.inputmethod.EditorInfo.IME_ACTION_SEND
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
			/// operation, taking the user to the next field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NEXT">android.view.inputmethod.EditorInfo.IME_ACTION_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
			/// operation, closing the soft input method.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_DONE">android.view.inputmethod.EditorInfo.IME_ACTION_DONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
			/// operation, taking the user to the previous field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS">android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
			/// into fullscreen mode.  Applications need to be aware that the flag is not
			/// a guarantee, and not all IMEs will respect it.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
			/// specifies there is something interesting that a backward navigation
			/// can focus on.  If the user selects the IME's facility to backward
			/// navigate, this will show up in the application as an actionPrevious
			/// at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
			/// interesting that a forward navigation can focus on. This is like using
			/// actionNext, except allows the IME to be multiline (with
			/// an enter key) as well as provide forward navigation.  Note that some
			/// IMEs may not be able to do this, especially when running on a small
			/// screen where there is little space.  In that case it does not need to
			/// present a UI for this option.  Like actionNext, if the
			/// user selects the IME's facility to forward navigate, this will show up
			/// in the application at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT">android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
			/// to show its extracted text UI.  For input methods that may be fullscreen,
			/// often when in landscape mode, this allows them to be smaller and let part
			/// of the application be shown behind.  Though there will likely be limited
			/// access to the application available from the user, it can make the
			/// experience of a (mostly) fullscreen IME less jarring.  Note that when
			/// this flag is specified the IME may <em>not</em> be set up to be able
			/// to display text, so it should only be used in situations where this is
			/// not needed.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI">android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
			/// action should not be available as an accessory button when the
			/// input method is full-screen.
			/// Note that by setting this flag, there can be cases where the action
			/// is simply never available to the user.  Setting this generally means
			/// that you think showing text being edited is more important than the
			/// action you have supplied.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
			/// this indicates that the action should not be available in-line as
			/// a replacement for the "enter" key.  Typically this is
			/// because the action has such a significant impact or is not recoverable
			/// enough that accidentally hitting it should be avoided, such as sending
			/// a message.    Note that
			/// <see cref="android.widget.TextView">android.widget.TextView</see>
			/// will
			/// automatically set this flag for you on multi-line text views.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeOptions">android.R.attr.imeOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:imeOptions</attr>
			public const int SearchView_imeOptions = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The input type to set on the query text field.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
			/// <tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of all characters.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every word.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every sentence.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
			/// request auto-correction of text being input.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
			/// specify that this field will be doing its own auto-completion and
			/// talking with the input method appropriately.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
			/// allow multiple lines of text in the field.  If this flag is not set,
			/// the text field will be constrained to a single line.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that though the regular text view should not be multiple
			/// lines, the IME should provide multiple lines if it can.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that the IME should not show any
			/// dictionary-based word suggestions.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS">android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI">android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER">android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
			/// field in a contact entry.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a signed number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED">android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a decimal (fractional) number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL">android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_PHONE">android.text.InputTypeClass.TYPE_CLASS_PHONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inputType">android.R.attr.inputType</see>
			/// .
			/// </attr>
			/// <attr>name android:inputType</attr>
			public const int SearchView_inputType = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional maximum width of the SearchView.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxWidth">android.R.attr.maxWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:maxWidth</attr>
			public const int SearchView_maxWidth = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An optional query hint string to be displayed in the empty query field.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.queryHint">android.R.attr.queryHint</see>
			/// .
			/// </attr>
			/// <attr>name android:queryHint</attr>
			public const int SearchView_queryHint = 4;

			/// <summary>
			/// Searchable activities and applications must provide search configuration information
			/// in an XML file, typically called searchable.xml.
			/// </summary>
			/// <remarks>
			/// Searchable activities and applications must provide search configuration information
			/// in an XML file, typically called searchable.xml.  This file is referenced in your manifest.
			/// For a more in-depth discussion of search configuration, please refer to
			/// <see cref="android.app.SearchManager">android.app.SearchManager</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_autoUrlDetect">android:autoUrlDetect</see>
			/// </code></td><td> If provided and <code>true</code>, URLs entered in the search dialog while searching
			/// within this activity would be detected and treated as URLs (show a 'go' button in the
			/// keyboard and invoke the browser directly when user launches the URL instead of passing
			/// the URL to the activity).</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_hint">android:hint</see>
			/// </code></td><td> If supplied, this string will be displayed as a hint to the user.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_icon">android:icon</see>
			/// </code></td><td><strong>This is deprecated.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_imeOptions">android:imeOptions</see>
			/// </code></td><td> Additional features you can enable in an IME associated with an editor
			/// to improve the integration with your application.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_includeInGlobalSearch">android:includeInGlobalSearch</see>
			/// </code></td><td> If provided and <code>true</code>, this searchable activity will be
			/// included in any global lists of search targets.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_inputType">android:inputType</see>
			/// </code></td><td> The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_label">android:label</see>
			/// </code></td><td> This is the user-displayed name of the searchable activity.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_queryAfterZeroResults">android:queryAfterZeroResults</see>
			/// </code></td><td> If provided and <code>true</code>, this searchable activity will be invoked for all
			/// queries in a particular session.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchButtonText">android:searchButtonText</see>
			/// </code></td><td> If supplied, this string will be displayed as the text of the "Search" button.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchMode">android:searchMode</see>
			/// </code></td><td> Additional features are controlled by mode bits in this field.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSettingsDescription">android:searchSettingsDescription
			/// 	</see>
			/// </code></td><td> If provided, this string will be used to describe the searchable item in the
			/// searchable items settings within system search settings.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSuggestAuthority">android:searchSuggestAuthority</see>
			/// </code></td><td> If provided, this is the trigger indicating that the searchable activity
			/// provides suggestions as well.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSuggestIntentAction">android:searchSuggestIntentAction
			/// 	</see>
			/// </code></td><td> If provided, and not overridden by an action in the selected suggestion, this
			/// string will be placed in the action field of the
			/// <see cref="android.content.Intent">Intent</see>
			/// when the user clicks a suggestion.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSuggestIntentData">android:searchSuggestIntentData</see>
			/// </code></td><td> If provided, and not overridden by an action in the selected suggestion, this
			/// string will be placed in the data field of the
			/// <see cref="android.content.Intent">Intent</see>
			/// when the user clicks a suggestion.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSuggestPath">android:searchSuggestPath</see>
			/// </code></td><td> If provided, this will be inserted in the suggestions query Uri, after the authority
			/// you have provide but before the standard suggestions path.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSuggestSelection">android:searchSuggestSelection</see>
			/// </code></td><td> If provided, suggestion queries will be passed into your query function
			/// as the <i>selection</i> parameter.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_searchSuggestThreshold">android:searchSuggestThreshold</see>
			/// </code></td><td> If provided, this is the minimum number of characters needed to trigger
			/// search suggestions.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_voiceLanguage">android:voiceLanguage</see>
			/// </code></td><td> If provided, this specifies the spoken language to be expected, and that it will be
			/// different than the one set in the
			/// <see cref="System.Globalization.CultureInfo.CurrentCulture()">System.Globalization.CultureInfo.CurrentCulture()
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_voiceLanguageModel">android:voiceLanguageModel</see>
			/// </code></td><td> If provided, this specifies the language model that should be used by the
			/// voice recognition system.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_voiceMaxResults">android:voiceMaxResults</see>
			/// </code></td><td> If provided, enforces the maximum number of results to return, including the "best"
			/// result which will always be provided as the SEARCH intent's primary query.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_voicePromptText">android:voicePromptText</see>
			/// </code></td><td> If provided, this specifies a prompt that will be displayed during voice input.</td></tr>
			/// <tr><td><code>
			/// <see cref="Searchable_voiceSearchMode">android:voiceSearchMode</see>
			/// </code></td><td> Voice search features are controlled by mode bits in this field.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Searchable_autoUrlDetect">Searchable_autoUrlDetect</seealso>
			/// <seealso cref="Searchable_hint">Searchable_hint</seealso>
			/// <seealso cref="Searchable_icon">Searchable_icon</seealso>
			/// <seealso cref="Searchable_imeOptions">Searchable_imeOptions</seealso>
			/// <seealso cref="Searchable_includeInGlobalSearch">Searchable_includeInGlobalSearch
			/// 	</seealso>
			/// <seealso cref="Searchable_inputType">Searchable_inputType</seealso>
			/// <seealso cref="Searchable_label">Searchable_label</seealso>
			/// <seealso cref="Searchable_queryAfterZeroResults">Searchable_queryAfterZeroResults
			/// 	</seealso>
			/// <seealso cref="Searchable_searchButtonText">Searchable_searchButtonText</seealso>
			/// <seealso cref="Searchable_searchMode">Searchable_searchMode</seealso>
			/// <seealso cref="Searchable_searchSettingsDescription">Searchable_searchSettingsDescription
			/// 	</seealso>
			/// <seealso cref="Searchable_searchSuggestAuthority">Searchable_searchSuggestAuthority
			/// 	</seealso>
			/// <seealso cref="Searchable_searchSuggestIntentAction">Searchable_searchSuggestIntentAction
			/// 	</seealso>
			/// <seealso cref="Searchable_searchSuggestIntentData">Searchable_searchSuggestIntentData
			/// 	</seealso>
			/// <seealso cref="Searchable_searchSuggestPath">Searchable_searchSuggestPath</seealso>
			/// <seealso cref="Searchable_searchSuggestSelection">Searchable_searchSuggestSelection
			/// 	</seealso>
			/// <seealso cref="Searchable_searchSuggestThreshold">Searchable_searchSuggestThreshold
			/// 	</seealso>
			/// <seealso cref="Searchable_voiceLanguage">Searchable_voiceLanguage</seealso>
			/// <seealso cref="Searchable_voiceLanguageModel">Searchable_voiceLanguageModel</seealso>
			/// <seealso cref="Searchable_voiceMaxResults">Searchable_voiceMaxResults</seealso>
			/// <seealso cref="Searchable_voicePromptText">Searchable_voicePromptText</seealso>
			/// <seealso cref="Searchable_voiceSearchMode">Searchable_voiceSearchMode</seealso>
			public static readonly int[] Searchable = new int[] { unchecked((int)(0x01010001)
				), unchecked((int)(0x01010002)), unchecked((int)(0x01010150)), unchecked((int)(0x010101d5
				)), unchecked((int)(0x010101d6)), unchecked((int)(0x010101d7)), unchecked((int)(
				0x010101d8)), unchecked((int)(0x010101d9)), unchecked((int)(0x010101da)), unchecked(
				(int)(0x01010205)), unchecked((int)(0x01010220)), unchecked((int)(0x01010252)), 
				unchecked((int)(0x01010253)), unchecked((int)(0x01010254)), unchecked((int)(0x01010255
				)), unchecked((int)(0x01010256)), unchecked((int)(0x01010264)), unchecked((int)(
				0x0101026d)), unchecked((int)(0x0101026e)), unchecked((int)(0x01010282)), unchecked(
				(int)(0x0101028a)), unchecked((int)(0x0101028c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided and <code>true</code>, URLs entered in the search dialog while searching
			/// within this activity would be detected and treated as URLs (show a 'go' button in the
			/// keyboard and invoke the browser directly when user launches the URL instead of passing
			/// the URL to the activity). If set to <code>false</code> any URLs entered are treated as
			/// normal query text.
			/// The default value is <code>false</code>. <i>Optional attribute.</i>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoUrlDetect">android.R.attr.autoUrlDetect</see>
			/// .
			/// </attr>
			/// <attr>name android:autoUrlDetect</attr>
			public const int Searchable_autoUrlDetect = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If supplied, this string will be displayed as a hint to the user.  <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.hint">android.R.attr.hint</see>
			/// .
			/// </attr>
			/// <attr>name android:hint</attr>
			public const int Searchable_hint = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// <strong>This is deprecated.</strong><br/>The default
			/// application icon is now always used, so this attribute is
			/// obsolete.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.icon">android.R.attr.icon</see>
			/// .
			/// </attr>
			/// <attr>name android:icon</attr>
			public const int Searchable_icon = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Additional features you can enable in an IME associated with an editor
			/// to improve the integration with your application.  The constants
			/// here correspond to those defined by
			/// <see cref="android.view.inputmethod.EditorInfo.imeOptions">android.view.inputmethod.EditorInfo.imeOptions
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
			/// <tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
			/// editor come up with its own if it can.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_NULL">android.view.inputmethod.EditorInfo.IME_NULL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NONE">android.view.inputmethod.EditorInfo.IME_ACTION_NONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
			/// operation to take the user to the target of the text they typed.
			/// Typically used, for example, when entering a URL.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_GO">android.view.inputmethod.EditorInfo.IME_ACTION_GO
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
			/// operation, taking the user to the results of searching for the text
			/// the have typed (in whatever context is appropriate).
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH">android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
			/// operation, delivering the text to its target.  This is typically used
			/// when composing a message.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEND">android.view.inputmethod.EditorInfo.IME_ACTION_SEND
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
			/// operation, taking the user to the next field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NEXT">android.view.inputmethod.EditorInfo.IME_ACTION_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
			/// operation, closing the soft input method.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_DONE">android.view.inputmethod.EditorInfo.IME_ACTION_DONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
			/// operation, taking the user to the previous field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS">android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
			/// into fullscreen mode.  Applications need to be aware that the flag is not
			/// a guarantee, and not all IMEs will respect it.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
			/// specifies there is something interesting that a backward navigation
			/// can focus on.  If the user selects the IME's facility to backward
			/// navigate, this will show up in the application as an actionPrevious
			/// at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
			/// interesting that a forward navigation can focus on. This is like using
			/// actionNext, except allows the IME to be multiline (with
			/// an enter key) as well as provide forward navigation.  Note that some
			/// IMEs may not be able to do this, especially when running on a small
			/// screen where there is little space.  In that case it does not need to
			/// present a UI for this option.  Like actionNext, if the
			/// user selects the IME's facility to forward navigate, this will show up
			/// in the application at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT">android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
			/// to show its extracted text UI.  For input methods that may be fullscreen,
			/// often when in landscape mode, this allows them to be smaller and let part
			/// of the application be shown behind.  Though there will likely be limited
			/// access to the application available from the user, it can make the
			/// experience of a (mostly) fullscreen IME less jarring.  Note that when
			/// this flag is specified the IME may <em>not</em> be set up to be able
			/// to display text, so it should only be used in situations where this is
			/// not needed.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI">android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
			/// action should not be available as an accessory button when the
			/// input method is full-screen.
			/// Note that by setting this flag, there can be cases where the action
			/// is simply never available to the user.  Setting this generally means
			/// that you think showing text being edited is more important than the
			/// action you have supplied.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
			/// this indicates that the action should not be available in-line as
			/// a replacement for the "enter" key.  Typically this is
			/// because the action has such a significant impact or is not recoverable
			/// enough that accidentally hitting it should be avoided, such as sending
			/// a message.    Note that
			/// <see cref="android.widget.TextView">android.widget.TextView</see>
			/// will
			/// automatically set this flag for you on multi-line text views.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeOptions">android.R.attr.imeOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:imeOptions</attr>
			public const int Searchable_imeOptions = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided and <code>true</code>, this searchable activity will be
			/// included in any global lists of search targets.
			/// The default value is <code>false</code>. <i>Optional attribute.</i>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.includeInGlobalSearch">android.R.attr.includeInGlobalSearch
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:includeInGlobalSearch</attr>
			public const int Searchable_includeInGlobalSearch = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.  The constants
			/// here correspond to those defined by
			/// <see cref="android.text.InputType">android.text.InputType</see>
			/// .  Generally you can select
			/// a single value, though some can be combined together as
			/// indicated.  Setting this attribute to anything besides
			/// <var>none</var> also implies that the text is editable.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
			/// <tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of all characters.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every word.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every sentence.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
			/// request auto-correction of text being input.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
			/// specify that this field will be doing its own auto-completion and
			/// talking with the input method appropriately.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
			/// allow multiple lines of text in the field.  If this flag is not set,
			/// the text field will be constrained to a single line.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that though the regular text view should not be multiple
			/// lines, the IME should provide multiple lines if it can.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that the IME should not show any
			/// dictionary-based word suggestions.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS">android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI">android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER">android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
			/// field in a contact entry.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a signed number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED">android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a decimal (fractional) number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL">android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_PHONE">android.text.InputTypeClass.TYPE_CLASS_PHONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inputType">android.R.attr.inputType</see>
			/// .
			/// </attr>
			/// <attr>name android:inputType</attr>
			public const int Searchable_inputType = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is the user-displayed name of the searchable activity.  <i>Required
			/// attribute.</i>
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int Searchable_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided and <code>true</code>, this searchable activity will be invoked for all
			/// queries in a particular session. If set to <code>false</code> and the activity
			/// returned zero results for a query, it will not be invoked again in that session for
			/// supersets of that zero-results query. For example, if the activity returned zero
			/// results for "bo", it would not be queried again for "bob".
			/// The default value is <code>false</code>. <i>Optional attribute.</i>.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.queryAfterZeroResults">android.R.attr.queryAfterZeroResults
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:queryAfterZeroResults</attr>
			public const int Searchable_queryAfterZeroResults = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If supplied, this string will be displayed as the text of the "Search" button.
			/// <i>Optional attribute.</i>
			/// <deprecated>
			/// This will create a non-standard UI appearance, because the search bar UI is
			/// changing to use only icons for its buttons.
			/// </deprecated>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchButtonText">android.R.attr.searchButtonText</see>
			/// .
			/// </attr>
			/// <attr>name android:searchButtonText</attr>
			[System.Obsolete]
			public const int Searchable_searchButtonText = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Additional features are controlled by mode bits in this field.  Omitting
			/// this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>showSearchLabelAsBadge</code></td><td>0x04</td><td> If set, this flag enables the display of the search target (label) within the
			/// search bar.  If neither bad mode is selected, no badge will be shown. </td></tr>
			/// <tr><td><code>showSearchIconAsBadge</code></td><td>0x08</td><td><strong>This is deprecated.</strong><br/>The default
			/// application icon is now always used, so this option is
			/// obsolete.</td></tr>
			/// <tr><td><code>queryRewriteFromData</code></td><td>0x10</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
			/// be considered as the text for suggestion query rewriting.  This should only
			/// be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
			/// inspection and editing - typically, HTTP/HTTPS Uri's. </td></tr>
			/// <tr><td><code>queryRewriteFromText</code></td><td>0x20</td><td> If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
			/// be considered as the text for suggestion query rewriting.  This should be used
			/// for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
			/// values are not suitable for user inspection and editing. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchMode">android.R.attr.searchMode</see>
			/// .
			/// </attr>
			/// <attr>name android:searchMode</attr>
			public const int Searchable_searchMode = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this string will be used to describe the searchable item in the
			/// searchable items settings within system search settings. <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSettingsDescription">android.R.attr.searchSettingsDescription
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSettingsDescription</attr>
			public const int Searchable_searchSettingsDescription = 20;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this is the trigger indicating that the searchable activity
			/// provides suggestions as well.  The value must be a fully-qualified content provider
			/// authority (e.g. "com.example.android.apis.SuggestionProvider") and should match the
			/// "android:authorities" tag in your content provider's manifest entry.  <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSuggestAuthority">android.R.attr.searchSuggestAuthority
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSuggestAuthority</attr>
			public const int Searchable_searchSuggestAuthority = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, and not overridden by an action in the selected suggestion, this
			/// string will be placed in the action field of the
			/// <see cref="android.content.Intent">Intent</see>
			/// when the user clicks a suggestion.  <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSuggestIntentAction">android.R.attr.searchSuggestIntentAction
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSuggestIntentAction</attr>
			public const int Searchable_searchSuggestIntentAction = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, and not overridden by an action in the selected suggestion, this
			/// string will be placed in the data field of the
			/// <see cref="android.content.Intent">Intent</see>
			/// when the user clicks a suggestion.  <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSuggestIntentData">android.R.attr.searchSuggestIntentData
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSuggestIntentData</attr>
			public const int Searchable_searchSuggestIntentData = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this will be inserted in the suggestions query Uri, after the authority
			/// you have provide but before the standard suggestions path. <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSuggestPath">android.R.attr.searchSuggestPath</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSuggestPath</attr>
			public const int Searchable_searchSuggestPath = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, suggestion queries will be passed into your query function
			/// as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
			/// database, and will contain a single question mark, which represents the actual query
			/// string that has been typed by the user.  If not provided, then the user query text
			/// will be appended to the query Uri (after an additional "/".)  <i>Optional
			/// attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSuggestSelection">android.R.attr.searchSuggestSelection
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSuggestSelection</attr>
			public const int Searchable_searchSuggestSelection = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this is the minimum number of characters needed to trigger
			/// search suggestions. The default value is 0. <i>Optional attribute.</i>
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.searchSuggestThreshold">android.R.attr.searchSuggestThreshold
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:searchSuggestThreshold</attr>
			public const int Searchable_searchSuggestThreshold = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this specifies the spoken language to be expected, and that it will be
			/// different than the one set in the
			/// <see cref="System.Globalization.CultureInfo.CurrentCulture()">System.Globalization.CultureInfo.CurrentCulture()
			/// 	</see>
			/// .
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.voiceLanguage">android.R.attr.voiceLanguage</see>
			/// .
			/// </attr>
			/// <attr>name android:voiceLanguage</attr>
			public const int Searchable_voiceLanguage = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this specifies the language model that should be used by the
			/// voice recognition system.  See
			/// <see cref="android.speech.RecognizerIntent.EXTRA_LANGUAGE_MODEL"></see>
			/// for more information.
			/// If not provided, the default value
			/// <see cref="android.speech.RecognizerIntent.LANGUAGE_MODEL_FREE_FORM"></see>
			/// will be used.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.voiceLanguageModel">android.R.attr.voiceLanguageModel</see>
			/// .
			/// </attr>
			/// <attr>name android:voiceLanguageModel</attr>
			public const int Searchable_voiceLanguageModel = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, enforces the maximum number of results to return, including the "best"
			/// result which will always be provided as the SEARCH intent's primary query.  Must be one
			/// or greater.  If not provided, the recognizer will choose how many results to return.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.voiceMaxResults">android.R.attr.voiceMaxResults</see>
			/// .
			/// </attr>
			/// <attr>name android:voiceMaxResults</attr>
			public const int Searchable_voiceMaxResults = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, this specifies a prompt that will be displayed during voice input.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.voicePromptText">android.R.attr.voicePromptText</see>
			/// .
			/// </attr>
			/// <attr>name android:voicePromptText</attr>
			public const int Searchable_voicePromptText = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Voice search features are controlled by mode bits in this field.  Omitting
			/// this field, or setting to zero, provides default behavior.
			/// If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
			/// also be set.  <i>Optional attribute.</i>
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>showVoiceSearchButton</code></td><td>0x01</td><td> If set, display a voice search button.  This only takes effect if voice search is
			/// available on the device. </td></tr>
			/// <tr><td><code>launchWebSearch</code></td><td>0x02</td><td> If set, the voice search button will take the user directly to a built-in
			/// voice web search activity.  Most applications will not use this flag, as it
			/// will take the user away from the activity in which search was invoked. </td></tr>
			/// <tr><td><code>launchRecognizer</code></td><td>0x04</td><td> If set, the voice search button will take the user directly to a built-in
			/// voice recording activity.  This activity will prompt the user to speak,
			/// transcribe the spoken text, and forward the resulting query
			/// text to the searchable activity, just as if the user had typed it into
			/// the search UI and clicked the search button. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.voiceSearchMode">android.R.attr.voiceSearchMode</see>
			/// .
			/// </attr>
			/// <attr>name android:voiceSearchMode</attr>
			public const int Searchable_voiceSearchMode = 11;

			/// <summary>
			/// In order to process special action keys during search, you must define them using
			/// one or more "ActionKey" elements in your Searchable metadata.
			/// </summary>
			/// <remarks>
			/// In order to process special action keys during search, you must define them using
			/// one or more "ActionKey" elements in your Searchable metadata.  For a more in-depth
			/// discussion of action code handling, please refer to
			/// <see cref="android.app.SearchManager">android.app.SearchManager</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SearchableActionKey_keycode">android:keycode</see>
			/// </code></td><td> This attribute denotes the action key you wish to respond to.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchableActionKey_queryActionMsg">android:queryActionMsg</see>
			/// </code></td><td> If you wish to handle an action key during normal search query entry, you
			/// must define an action string here.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchableActionKey_suggestActionMsg">android:suggestActionMsg</see>
			/// </code></td><td> If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, there are two ways to handle this.</td></tr>
			/// <tr><td><code>
			/// <see cref="SearchableActionKey_suggestActionMsgColumn">android:suggestActionMsgColumn
			/// 	</see>
			/// </code></td><td> If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, but you do not wish to enable this action key for every suggestion,
			/// then you can use this attribute to control it on a suggestion-by-suggestion basis.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SearchableActionKey_keycode">SearchableActionKey_keycode</seealso>
			/// <seealso cref="SearchableActionKey_queryActionMsg">SearchableActionKey_queryActionMsg
			/// 	</seealso>
			/// <seealso cref="SearchableActionKey_suggestActionMsg">SearchableActionKey_suggestActionMsg
			/// 	</seealso>
			/// <seealso cref="SearchableActionKey_suggestActionMsgColumn">SearchableActionKey_suggestActionMsgColumn
			/// 	</seealso>
			public static readonly int[] SearchableActionKey = new int[] { unchecked((int)(0x010100c5
				)), unchecked((int)(0x010101db)), unchecked((int)(0x010101dc)), unchecked((int)(
				0x010101dd)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This attribute denotes the action key you wish to respond to.  Note that not
			/// all action keys are actually supported using this mechanism, as many of them are
			/// used for typing, navigation, or system functions.  This will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to your
			/// searchable activity.  To examine the key code, use
			/// <see cref="android.content.Intent.getIntExtra(string, int)">getIntExtra(SearchManager.ACTION_KEY)
			/// 	</see>
			/// .
			/// <p>Note, in addition to the keycode, you must also provide one or more of the action
			/// specifier attributes.  <i>Required attribute.</i>
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>KEYCODE_UNKNOWN</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SOFT_LEFT</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SOFT_RIGHT</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>KEYCODE_HOME</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BACK</code></td><td>4</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CALL</code></td><td>5</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ENDCALL</code></td><td>6</td><td></td></tr>
			/// <tr><td><code>KEYCODE_0</code></td><td>7</td><td></td></tr>
			/// <tr><td><code>KEYCODE_1</code></td><td>8</td><td></td></tr>
			/// <tr><td><code>KEYCODE_2</code></td><td>9</td><td></td></tr>
			/// <tr><td><code>KEYCODE_3</code></td><td>10</td><td></td></tr>
			/// <tr><td><code>KEYCODE_4</code></td><td>11</td><td></td></tr>
			/// <tr><td><code>KEYCODE_5</code></td><td>12</td><td></td></tr>
			/// <tr><td><code>KEYCODE_6</code></td><td>13</td><td></td></tr>
			/// <tr><td><code>KEYCODE_7</code></td><td>14</td><td></td></tr>
			/// <tr><td><code>KEYCODE_8</code></td><td>15</td><td></td></tr>
			/// <tr><td><code>KEYCODE_9</code></td><td>16</td><td></td></tr>
			/// <tr><td><code>KEYCODE_STAR</code></td><td>17</td><td></td></tr>
			/// <tr><td><code>KEYCODE_POUND</code></td><td>18</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_UP</code></td><td>19</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_DOWN</code></td><td>20</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_LEFT</code></td><td>21</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_RIGHT</code></td><td>22</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DPAD_CENTER</code></td><td>23</td><td></td></tr>
			/// <tr><td><code>KEYCODE_VOLUME_UP</code></td><td>24</td><td></td></tr>
			/// <tr><td><code>KEYCODE_VOLUME_DOWN</code></td><td>25</td><td></td></tr>
			/// <tr><td><code>KEYCODE_POWER</code></td><td>26</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CAMERA</code></td><td>27</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CLEAR</code></td><td>28</td><td></td></tr>
			/// <tr><td><code>KEYCODE_A</code></td><td>29</td><td></td></tr>
			/// <tr><td><code>KEYCODE_B</code></td><td>30</td><td></td></tr>
			/// <tr><td><code>KEYCODE_C</code></td><td>31</td><td></td></tr>
			/// <tr><td><code>KEYCODE_D</code></td><td>32</td><td></td></tr>
			/// <tr><td><code>KEYCODE_E</code></td><td>33</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F</code></td><td>34</td><td></td></tr>
			/// <tr><td><code>KEYCODE_G</code></td><td>35</td><td></td></tr>
			/// <tr><td><code>KEYCODE_H</code></td><td>36</td><td></td></tr>
			/// <tr><td><code>KEYCODE_I</code></td><td>37</td><td></td></tr>
			/// <tr><td><code>KEYCODE_J</code></td><td>38</td><td></td></tr>
			/// <tr><td><code>KEYCODE_K</code></td><td>39</td><td></td></tr>
			/// <tr><td><code>KEYCODE_L</code></td><td>40</td><td></td></tr>
			/// <tr><td><code>KEYCODE_M</code></td><td>41</td><td></td></tr>
			/// <tr><td><code>KEYCODE_N</code></td><td>42</td><td></td></tr>
			/// <tr><td><code>KEYCODE_O</code></td><td>43</td><td></td></tr>
			/// <tr><td><code>KEYCODE_P</code></td><td>44</td><td></td></tr>
			/// <tr><td><code>KEYCODE_Q</code></td><td>45</td><td></td></tr>
			/// <tr><td><code>KEYCODE_R</code></td><td>46</td><td></td></tr>
			/// <tr><td><code>KEYCODE_S</code></td><td>47</td><td></td></tr>
			/// <tr><td><code>KEYCODE_T</code></td><td>48</td><td></td></tr>
			/// <tr><td><code>KEYCODE_U</code></td><td>49</td><td></td></tr>
			/// <tr><td><code>KEYCODE_V</code></td><td>50</td><td></td></tr>
			/// <tr><td><code>KEYCODE_W</code></td><td>51</td><td></td></tr>
			/// <tr><td><code>KEYCODE_X</code></td><td>52</td><td></td></tr>
			/// <tr><td><code>KEYCODE_Y</code></td><td>53</td><td></td></tr>
			/// <tr><td><code>KEYCODE_Z</code></td><td>54</td><td></td></tr>
			/// <tr><td><code>KEYCODE_COMMA</code></td><td>55</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PERIOD</code></td><td>56</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ALT_LEFT</code></td><td>57</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ALT_RIGHT</code></td><td>58</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SHIFT_LEFT</code></td><td>59</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SHIFT_RIGHT</code></td><td>60</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TAB</code></td><td>61</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SPACE</code></td><td>62</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SYM</code></td><td>63</td><td></td></tr>
			/// <tr><td><code>KEYCODE_EXPLORER</code></td><td>64</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ENVELOPE</code></td><td>65</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ENTER</code></td><td>66</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DEL</code></td><td>67</td><td></td></tr>
			/// <tr><td><code>KEYCODE_GRAVE</code></td><td>68</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MINUS</code></td><td>69</td><td></td></tr>
			/// <tr><td><code>KEYCODE_EQUALS</code></td><td>70</td><td></td></tr>
			/// <tr><td><code>KEYCODE_LEFT_BRACKET</code></td><td>71</td><td></td></tr>
			/// <tr><td><code>KEYCODE_RIGHT_BRACKET</code></td><td>72</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BACKSLASH</code></td><td>73</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SEMICOLON</code></td><td>74</td><td></td></tr>
			/// <tr><td><code>KEYCODE_APOSTROPHE</code></td><td>75</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SLASH</code></td><td>76</td><td></td></tr>
			/// <tr><td><code>KEYCODE_AT</code></td><td>77</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUM</code></td><td>78</td><td></td></tr>
			/// <tr><td><code>KEYCODE_HEADSETHOOK</code></td><td>79</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FOCUS</code></td><td>80</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PLUS</code></td><td>81</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MENU</code></td><td>82</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NOTIFICATION</code></td><td>83</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SEARCH</code></td><td>84</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PLAY_PAUSE</code></td><td>85</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_STOP</code></td><td>86</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_NEXT</code></td><td>87</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PREVIOUS</code></td><td>88</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_REWIND</code></td><td>89</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_FAST_FORWARD</code></td><td>90</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MUTE</code></td><td>91</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PAGE_UP</code></td><td>92</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PAGE_DOWN</code></td><td>93</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PICTSYMBOLS</code></td><td>94</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SWITCH_CHARSET</code></td><td>95</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_A</code></td><td>96</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_B</code></td><td>97</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_C</code></td><td>98</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_X</code></td><td>99</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_Y</code></td><td>100</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_Z</code></td><td>101</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_L1</code></td><td>102</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_R1</code></td><td>103</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_L2</code></td><td>104</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_R2</code></td><td>105</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_THUMBL</code></td><td>106</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_THUMBR</code></td><td>107</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_START</code></td><td>108</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_SELECT</code></td><td>109</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_MODE</code></td><td>110</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ESCAPE</code></td><td>111</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FORWARD_DEL</code></td><td>112</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CTRL_LEFT</code></td><td>113</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CTRL_RIGHT</code></td><td>114</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CAPS_LOCK</code></td><td>115</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SCROLL_LOCK</code></td><td>116</td><td></td></tr>
			/// <tr><td><code>KEYCODE_META_LEFT</code></td><td>117</td><td></td></tr>
			/// <tr><td><code>KEYCODE_META_RIGHT</code></td><td>118</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FUNCTION</code></td><td>119</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SYSRQ</code></td><td>120</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BREAK</code></td><td>121</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MOVE_HOME</code></td><td>122</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MOVE_END</code></td><td>123</td><td></td></tr>
			/// <tr><td><code>KEYCODE_INSERT</code></td><td>124</td><td></td></tr>
			/// <tr><td><code>KEYCODE_FORWARD</code></td><td>125</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PLAY</code></td><td>126</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_PAUSE</code></td><td>127</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_CLOSE</code></td><td>128</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_EJECT</code></td><td>129</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MEDIA_RECORD</code></td><td>130</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F1</code></td><td>131</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F2</code></td><td>132</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F3</code></td><td>133</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F4</code></td><td>134</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F5</code></td><td>135</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F6</code></td><td>136</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F7</code></td><td>137</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F8</code></td><td>138</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F9</code></td><td>139</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F10</code></td><td>140</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F11</code></td><td>141</td><td></td></tr>
			/// <tr><td><code>KEYCODE_F12</code></td><td>142</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUM_LOCK</code></td><td>143</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_0</code></td><td>144</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_1</code></td><td>145</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_2</code></td><td>146</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_3</code></td><td>147</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_4</code></td><td>148</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_5</code></td><td>149</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_6</code></td><td>150</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_7</code></td><td>151</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_8</code></td><td>152</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_9</code></td><td>153</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_DIVIDE</code></td><td>154</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_MULTIPLY</code></td><td>155</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_SUBTRACT</code></td><td>156</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_ADD</code></td><td>157</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_DOT</code></td><td>158</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_COMMA</code></td><td>159</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_ENTER</code></td><td>160</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_EQUALS</code></td><td>161</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_LEFT_PAREN</code></td><td>162</td><td></td></tr>
			/// <tr><td><code>KEYCODE_NUMPAD_RIGHT_PAREN</code></td><td>163</td><td></td></tr>
			/// <tr><td><code>KEYCODE_VOLUME_MUTE</code></td><td>164</td><td></td></tr>
			/// <tr><td><code>KEYCODE_INFO</code></td><td>165</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CHANNEL_UP</code></td><td>166</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CHANNEL_DOWN</code></td><td>167</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ZOOM_IN</code></td><td>168</td><td></td></tr>
			/// <tr><td><code>KEYCODE_ZOOM_OUT</code></td><td>169</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TV</code></td><td>170</td><td></td></tr>
			/// <tr><td><code>KEYCODE_WINDOW</code></td><td>171</td><td></td></tr>
			/// <tr><td><code>KEYCODE_GUIDE</code></td><td>172</td><td></td></tr>
			/// <tr><td><code>KEYCODE_DVR</code></td><td>173</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BOOKMARK</code></td><td>174</td><td></td></tr>
			/// <tr><td><code>KEYCODE_CAPTIONS</code></td><td>175</td><td></td></tr>
			/// <tr><td><code>KEYCODE_SETTINGS</code></td><td>176</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TV_POWER</code></td><td>177</td><td></td></tr>
			/// <tr><td><code>KEYCODE_TV_INPUT</code></td><td>178</td><td></td></tr>
			/// <tr><td><code>KEYCODE_STB_POWER</code></td><td>179</td><td></td></tr>
			/// <tr><td><code>KEYCODE_STB_INPUT</code></td><td>180</td><td></td></tr>
			/// <tr><td><code>KEYCODE_AVR_POWER</code></td><td>181</td><td></td></tr>
			/// <tr><td><code>KEYCODE_AVR_INPUT</code></td><td>182</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_GRED</code></td><td>183</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_GREEN</code></td><td>184</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_YELLOW</code></td><td>185</td><td></td></tr>
			/// <tr><td><code>KEYCODE_PROG_BLUE</code></td><td>186</td><td></td></tr>
			/// <tr><td><code>KEYCODE_APP_SWITCH</code></td><td>187</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_1</code></td><td>188</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_2</code></td><td>189</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_3</code></td><td>190</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_4</code></td><td>191</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_5</code></td><td>192</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_6</code></td><td>193</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_7</code></td><td>194</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_8</code></td><td>195</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_9</code></td><td>196</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_10</code></td><td>197</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_11</code></td><td>198</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_12</code></td><td>199</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_13</code></td><td>200</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_14</code></td><td>201</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_15</code></td><td>202</td><td></td></tr>
			/// <tr><td><code>KEYCODE_BUTTON_16</code></td><td>203</td><td></td></tr>
			/// <tr><td><code>KEYCODE_LANGUAGE_SWITCH</code></td><td>204</td><td></td></tr>
			/// <tr><td><code>KEYCODE_MANNER_MODE</code></td><td>205</td><td></td></tr>
			/// <tr><td><code>KEYCODE_3D_MODE</code></td><td>206</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keycode">android.R.attr.keycode</see>
			/// .
			/// </attr>
			/// <attr>name android:keycode</attr>
			public const int SearchableActionKey_keycode = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If you wish to handle an action key during normal search query entry, you
			/// must define an action string here.  This will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to your
			/// searchable activity.  To examine the string, use
			/// <see cref="android.content.Intent.getStringExtra(string)">getStringExtra(SearchManager.ACTION_MSG)
			/// 	</see>
			/// .
			/// <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.queryActionMsg">android.R.attr.queryActionMsg</see>
			/// .
			/// </attr>
			/// <attr>name android:queryActionMsg</attr>
			public const int SearchableActionKey_queryActionMsg = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
			/// can handle the action key, you can simply define the action message using this
			/// attribute.  This will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to your
			/// searchable activity.  To examine the string, use
			/// <see cref="android.content.Intent.getStringExtra(string)">getStringExtra(SearchManager.ACTION_MSG)
			/// 	</see>
			/// .
			/// <i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.suggestActionMsg">android.R.attr.suggestActionMsg</see>
			/// .
			/// </attr>
			/// <attr>name android:suggestActionMsg</attr>
			public const int SearchableActionKey_suggestActionMsg = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If you wish to handle an action key while a suggestion is being displayed <i>and
			/// selected</i>, but you do not wish to enable this action key for every suggestion,
			/// then you can use this attribute to control it on a suggestion-by-suggestion basis.
			/// First, you must define a column (and name it here) where your suggestions will include
			/// the action string.  Then, in your content provider, you must provide this column, and
			/// when desired, provide data in this column.
			/// The search manager will look at your suggestion cursor, using the string
			/// provided here in order to select a column, and will use that to select a string from
			/// the cursor.  That string will be added to the
			/// <see cref="android.content.Intent.ACTION_SEARCH">ACTION_SEARCH</see>
			/// intent that is passed to
			/// your searchable activity.  To examine the string, use
			/// <see cref="android.content.Intent.getStringExtra(string)">getStringExtra(SearchManager.ACTION_MSG)
			/// 	</see>
			/// .  <i>If the data does not exist for the
			/// selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.suggestActionMsgColumn">android.R.attr.suggestActionMsgColumn
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:suggestActionMsgColumn</attr>
			public const int SearchableActionKey_suggestActionMsgColumn = 3;

			/// <summary>Attributes that can be used with a SeekBar.</summary>
			/// <remarks>
			/// Attributes that can be used with a SeekBar.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SeekBar_thumb">android:thumb</see>
			/// </code></td><td> Draws the thumb on a seekbar.</td></tr>
			/// <tr><td><code>
			/// <see cref="SeekBar_thumbOffset">android:thumbOffset</see>
			/// </code></td><td> An offset for the thumb that allows it to extend out of the range of the track.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SeekBar_thumb">SeekBar_thumb</seealso>
			/// <seealso cref="SeekBar_thumbOffset">SeekBar_thumbOffset</seealso>
			public static readonly int[] SeekBar = new int[] { unchecked((int)(0x01010142)), 
				unchecked((int)(0x01010143)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Draws the thumb on a seekbar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thumb">android.R.attr.thumb</see>
			/// .
			/// </attr>
			/// <attr>name android:thumb</attr>
			public const int SeekBar_thumb = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An offset for the thumb that allows it to extend out of the range of the track.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thumbOffset">android.R.attr.thumbOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:thumbOffset</attr>
			public const int SeekBar_thumbOffset = 1;

			/// <summary>Attributes that can be used with a SelectionModeDrawables.</summary>
			/// <remarks>
			/// Attributes that can be used with a SelectionModeDrawables.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SelectionModeDrawables_actionModeCopyDrawable">android:actionModeCopyDrawable
			/// 	</see>
			/// </code></td><td> Drawable to use for the Copy action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="SelectionModeDrawables_actionModeCutDrawable">android:actionModeCutDrawable
			/// 	</see>
			/// </code></td><td> Drawable to use for the Cut action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="SelectionModeDrawables_actionModePasteDrawable">android:actionModePasteDrawable
			/// 	</see>
			/// </code></td><td> Drawable to use for the Paste action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="SelectionModeDrawables_actionModeSelectAllDrawable">android:actionModeSelectAllDrawable
			/// 	</see>
			/// </code></td><td> Drawable to use for the Select all action button in Contextual Action Bar </td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SelectionModeDrawables_actionModeCopyDrawable">SelectionModeDrawables_actionModeCopyDrawable
			/// 	</seealso>
			/// <seealso cref="SelectionModeDrawables_actionModeCutDrawable">SelectionModeDrawables_actionModeCutDrawable
			/// 	</seealso>
			/// <seealso cref="SelectionModeDrawables_actionModePasteDrawable">SelectionModeDrawables_actionModePasteDrawable
			/// 	</seealso>
			/// <seealso cref="SelectionModeDrawables_actionModeSelectAllDrawable">SelectionModeDrawables_actionModeSelectAllDrawable
			/// 	</seealso>
			public static readonly int[] SelectionModeDrawables = new int[] { unchecked((int)
				(0x01010311)), unchecked((int)(0x01010312)), unchecked((int)(0x01010313)), unchecked(
				(int)(0x0101037e)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Copy action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeCopyDrawable">android.R.attr.actionModeCopyDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeCopyDrawable</attr>
			public const int SelectionModeDrawables_actionModeCopyDrawable = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Cut action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeCutDrawable">android.R.attr.actionModeCutDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeCutDrawable</attr>
			public const int SelectionModeDrawables_actionModeCutDrawable = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Paste action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModePasteDrawable">android.R.attr.actionModePasteDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModePasteDrawable</attr>
			public const int SelectionModeDrawables_actionModePasteDrawable = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Select all action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeSelectAllDrawable">android.R.attr.actionModeSelectAllDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeSelectAllDrawable</attr>
			public const int SelectionModeDrawables_actionModeSelectAllDrawable = 3;

			/// <summary>Drawable used to draw shapes.</summary>
			/// <remarks>
			/// Drawable used to draw shapes.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawable_color">android:color</see>
			/// </code></td><td> Defines the color of the shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawable_dither">android:dither</see>
			/// </code></td><td> Enables or disables dithering.</td></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawable_height">android:height</see>
			/// </code></td><td> Defines the height of the shape.</td></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawable_width">android:width</see>
			/// </code></td><td> Defines the width of the shape.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ShapeDrawable_color">ShapeDrawable_color</seealso>
			/// <seealso cref="ShapeDrawable_dither">ShapeDrawable_dither</seealso>
			/// <seealso cref="ShapeDrawable_height">ShapeDrawable_height</seealso>
			/// <seealso cref="ShapeDrawable_width">ShapeDrawable_width</seealso>
			public static readonly int[] ShapeDrawable = new int[] { unchecked((int)(0x0101011c
				)), unchecked((int)(0x01010155)), unchecked((int)(0x01010159)), unchecked((int)(
				0x010101a5)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the color of the shape.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.color">android.R.attr.color</see>
			/// .
			/// </attr>
			/// <attr>name android:color</attr>
			public const int ShapeDrawable_color = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables dithering.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dither">android.R.attr.dither</see>
			/// .
			/// </attr>
			/// <attr>name android:dither</attr>
			public const int ShapeDrawable_dither = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the height of the shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.height">android.R.attr.height</see>
			/// .
			/// </attr>
			/// <attr>name android:height</attr>
			public const int ShapeDrawable_height = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the width of the shape.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.width">android.R.attr.width</see>
			/// .
			/// </attr>
			/// <attr>name android:width</attr>
			public const int ShapeDrawable_width = 2;

			/// <summary>Defines the padding of a ShapeDrawable.</summary>
			/// <remarks>
			/// Defines the padding of a ShapeDrawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawablePadding_bottom">android:bottom</see>
			/// </code></td><td> Bottom padding.</td></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawablePadding_left">android:left</see>
			/// </code></td><td> Left padding.</td></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawablePadding_right">android:right</see>
			/// </code></td><td> Right padding.</td></tr>
			/// <tr><td><code>
			/// <see cref="ShapeDrawablePadding_top">android:top</see>
			/// </code></td><td> Top padding.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ShapeDrawablePadding_bottom">ShapeDrawablePadding_bottom</seealso>
			/// <seealso cref="ShapeDrawablePadding_left">ShapeDrawablePadding_left</seealso>
			/// <seealso cref="ShapeDrawablePadding_right">ShapeDrawablePadding_right</seealso>
			/// <seealso cref="ShapeDrawablePadding_top">ShapeDrawablePadding_top</seealso>
			public static readonly int[] ShapeDrawablePadding = new int[] { unchecked((int)(0x010101ad
				)), unchecked((int)(0x010101ae)), unchecked((int)(0x010101af)), unchecked((int)(
				0x010101b0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Bottom padding.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bottom">android.R.attr.bottom</see>
			/// .
			/// </attr>
			/// <attr>name android:bottom</attr>
			public const int ShapeDrawablePadding_bottom = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Left padding.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.left">android.R.attr.left</see>
			/// .
			/// </attr>
			/// <attr>name android:left</attr>
			public const int ShapeDrawablePadding_left = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Right padding.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.right">android.R.attr.right</see>
			/// .
			/// </attr>
			/// <attr>name android:right</attr>
			public const int ShapeDrawablePadding_right = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Top padding.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.top">android.R.attr.top</see>
			/// .
			/// </attr>
			/// <attr>name android:top</attr>
			public const int ShapeDrawablePadding_top = 1;

			/// <summary>SlidingDrawer specific attributes.</summary>
			/// <remarks>
			/// SlidingDrawer specific attributes. These attributes are used to configure
			/// a SlidingDrawer from XML.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_allowSingleTap">android:allowSingleTap</see>
			/// </code></td><td> Indicates whether the drawer can be opened/closed by a single tap
			/// on the handle.</td></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_animateOnClick">android:animateOnClick</see>
			/// </code></td><td> Indicates whether the drawer should be opened/closed with an animation
			/// when the user clicks the handle.</td></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_bottomOffset">android:bottomOffset</see>
			/// </code></td><td> Extra offset for the handle at the bottom of the SlidingDrawer.</td></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_content">android:content</see>
			/// </code></td><td> Identifier for the child that represents the drawer's content.</td></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_handle">android:handle</see>
			/// </code></td><td> Identifier for the child that represents the drawer's handle.</td></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_orientation">android:orientation</see>
			/// </code></td><td> Orientation of the SlidingDrawer.</td></tr>
			/// <tr><td><code>
			/// <see cref="SlidingDrawer_topOffset">android:topOffset</see>
			/// </code></td><td> Extra offset for the handle at the top of the SlidingDrawer.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SlidingDrawer_allowSingleTap">SlidingDrawer_allowSingleTap</seealso>
			/// <seealso cref="SlidingDrawer_animateOnClick">SlidingDrawer_animateOnClick</seealso>
			/// <seealso cref="SlidingDrawer_bottomOffset">SlidingDrawer_bottomOffset</seealso>
			/// <seealso cref="SlidingDrawer_content">SlidingDrawer_content</seealso>
			/// <seealso cref="SlidingDrawer_handle">SlidingDrawer_handle</seealso>
			/// <seealso cref="SlidingDrawer_orientation">SlidingDrawer_orientation</seealso>
			/// <seealso cref="SlidingDrawer_topOffset">SlidingDrawer_topOffset</seealso>
			public static readonly int[] SlidingDrawer = new int[] { unchecked((int)(0x010100c4
				)), unchecked((int)(0x01010257)), unchecked((int)(0x01010258)), unchecked((int)(
				0x01010259)), unchecked((int)(0x0101025a)), unchecked((int)(0x0101025b)), unchecked(
				(int)(0x0101025c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the drawer can be opened/closed by a single tap
			/// on the handle.  (If false, the user must drag or fling, or click
			/// using the trackball, to open/close the drawer.)  Default is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allowSingleTap">android.R.attr.allowSingleTap</see>
			/// .
			/// </attr>
			/// <attr>name android:allowSingleTap</attr>
			public const int SlidingDrawer_allowSingleTap = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the drawer should be opened/closed with an animation
			/// when the user clicks the handle. Default is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animateOnClick">android.R.attr.animateOnClick</see>
			/// .
			/// </attr>
			/// <attr>name android:animateOnClick</attr>
			public const int SlidingDrawer_animateOnClick = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Extra offset for the handle at the bottom of the SlidingDrawer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bottomOffset">android.R.attr.bottomOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:bottomOffset</attr>
			public const int SlidingDrawer_bottomOffset = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier for the child that represents the drawer's content.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.content">android.R.attr.content</see>
			/// .
			/// </attr>
			/// <attr>name android:content</attr>
			public const int SlidingDrawer_content = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier for the child that represents the drawer's handle.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.handle">android.R.attr.handle</see>
			/// .
			/// </attr>
			/// <attr>name android:handle</attr>
			public const int SlidingDrawer_handle = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Orientation of the SlidingDrawer.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int SlidingDrawer_orientation = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Extra offset for the handle at the top of the SlidingDrawer.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.topOffset">android.R.attr.topOffset</see>
			/// .
			/// </attr>
			/// <attr>name android:topOffset</attr>
			public const int SlidingDrawer_topOffset = 2;

			/// <summary>Attributes that can be used with a SlidingTab.</summary>
			/// <remarks>
			/// Attributes that can be used with a SlidingTab.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SlidingTab_orientation">android:orientation</see>
			/// </code></td><td> Use "horizontal" for a row, "vertical" for a column.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SlidingTab_orientation">SlidingTab_orientation</seealso>
			public static readonly int[] SlidingTab = new int[] { unchecked((int)(0x010100c4)
				) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Use "horizontal" for a row, "vertical" for a column.  The default is horizontal.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>horizontal</code></td><td>0</td><td> Defines an horizontal widget. </td></tr>
			/// <tr><td><code>vertical</code></td><td>1</td><td> Defines a vertical widget. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.orientation">android.R.attr.orientation</see>
			/// .
			/// </attr>
			/// <attr>name android:orientation</attr>
			public const int SlidingTab_orientation = 0;

			/// <summary>
			/// Use <code>spell-checker</code> as the root tag of the XML resource that
			/// describes an
			/// <see cref="android.service.textservice.SpellCheckerService">android.service.textservice.SpellCheckerService
			/// 	</see>
			/// service, which is
			/// referenced from its
			/// <see cref="android.view.textservice.SpellCheckerSession.SERVICE_META_DATA">android.view.textservice.SpellCheckerSession.SERVICE_META_DATA
			/// 	</see>
			/// meta-data entry.  Described here are the attributes that can be
			/// included in that tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SpellChecker_label">android:label</see>
			/// </code></td><td> The name of the spell checker.</td></tr>
			/// <tr><td><code>
			/// <see cref="SpellChecker_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> Component name of an activity that allows the user to modify
			/// the settings for this service.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="SpellChecker_label">SpellChecker_label</seealso>
			/// <seealso cref="SpellChecker_settingsActivity">SpellChecker_settingsActivity</seealso>
			public static readonly int[] SpellChecker = new int[] { unchecked((int)(0x01010001
				)), unchecked((int)(0x01010225)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the spell checker.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int SpellChecker_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int SpellChecker_settingsActivity = 1;

			/// <summary>This is the subtype of the spell checker.</summary>
			/// <remarks>
			/// This is the subtype of the spell checker. Subtype can describe locales (e.g. en_US, fr_FR...)
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SpellChecker_Subtype_label">android:label</see>
			/// </code></td><td> The name of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="SpellChecker_Subtype_subtypeExtraValue">android:subtypeExtraValue</see>
			/// </code></td><td> The extra value of the subtype.</td></tr>
			/// <tr><td><code>
			/// <see cref="SpellChecker_Subtype_subtypeLocale">android:subtypeLocale</see>
			/// </code></td><td> The locale of the subtype.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SpellChecker_Subtype_label">SpellChecker_Subtype_label</seealso>
			/// <seealso cref="SpellChecker_Subtype_subtypeExtraValue">SpellChecker_Subtype_subtypeExtraValue
			/// 	</seealso>
			/// <seealso cref="SpellChecker_Subtype_subtypeLocale">SpellChecker_Subtype_subtypeLocale
			/// 	</seealso>
			public static readonly int[] SpellChecker_Subtype = new int[] { unchecked((int)(0x01010001
				)), unchecked((int)(0x01010399)), unchecked((int)(0x0101039a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The name of the subtype.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.label">android.R.attr.label</see>
			/// .
			/// </attr>
			/// <attr>name android:label</attr>
			public const int SpellChecker_Subtype_label = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The extra value of the subtype. This string can be any string and will be passed to
			/// the SpellChecker.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.subtypeExtraValue">android.R.attr.subtypeExtraValue</see>
			/// .
			/// </attr>
			/// <attr>name android:subtypeExtraValue</attr>
			public const int SpellChecker_Subtype_subtypeExtraValue = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The locale of the subtype. This string should be a locale (e.g. en_US, fr_FR...)
			/// This is also used by the framework to know the supported locales
			/// of the spell checker.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.subtypeLocale">android.R.attr.subtypeLocale</see>
			/// .
			/// </attr>
			/// <attr>name android:subtypeLocale</attr>
			public const int SpellChecker_Subtype_subtypeLocale = 1;

			/// <summary>Attributes that can be used with a Spinner.</summary>
			/// <remarks>
			/// Attributes that can be used with a Spinner.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_dropDownHorizontalOffset">android:dropDownHorizontalOffset</see>
			/// </code></td><td> Horizontal offset from the spinner widget for positioning the dropdown
			/// in spinnerMode="dropdown".</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_dropDownSelector">android:dropDownSelector</see>
			/// </code></td><td> List selector to use for spinnerMode="dropdown" display.</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_dropDownVerticalOffset">android:dropDownVerticalOffset</see>
			/// </code></td><td> Vertical offset from the spinner widget for positioning the dropdown in
			/// spinnerMode="dropdown".</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_dropDownWidth">android:dropDownWidth</see>
			/// </code></td><td> Width of the dropdown in spinnerMode="dropdown".</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_gravity">android:gravity</see>
			/// </code></td><td> Gravity setting for positioning the currently selected item.</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_popupBackground">android:popupBackground</see>
			/// </code></td><td> Background drawable to use for the dropdown in spinnerMode="dropdown".</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_popupPromptView">android:popupPromptView</see>
			/// </code></td><td> Reference to a layout to use for displaying a prompt in the dropdown for
			/// spinnerMode="dropdown".</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_prompt">android:prompt</see>
			/// </code></td><td> The prompt to display when the spinner's dialog is shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="Spinner_spinnerMode">android:spinnerMode</see>
			/// </code></td><td> Display mode for spinner options.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Spinner_dropDownHorizontalOffset">Spinner_dropDownHorizontalOffset
			/// 	</seealso>
			/// <seealso cref="Spinner_dropDownSelector">Spinner_dropDownSelector</seealso>
			/// <seealso cref="Spinner_dropDownVerticalOffset">Spinner_dropDownVerticalOffset</seealso>
			/// <seealso cref="Spinner_dropDownWidth">Spinner_dropDownWidth</seealso>
			/// <seealso cref="Spinner_gravity">Spinner_gravity</seealso>
			/// <seealso cref="Spinner_popupBackground">Spinner_popupBackground</seealso>
			/// <seealso cref="Spinner_popupPromptView">Spinner_popupPromptView</seealso>
			/// <seealso cref="Spinner_prompt">Spinner_prompt</seealso>
			/// <seealso cref="Spinner_spinnerMode">Spinner_spinnerMode</seealso>
			public static readonly int[] Spinner = new int[] { unchecked((int)(0x010100af)), 
				unchecked((int)(0x01010175)), unchecked((int)(0x01010176)), unchecked((int)(0x0101017b
				)), unchecked((int)(0x01010262)), unchecked((int)(0x010102ac)), unchecked((int)(
				0x010102ad)), unchecked((int)(0x010102f1)), unchecked((int)(0x010103ef)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Horizontal offset from the spinner widget for positioning the dropdown
			/// in spinnerMode="dropdown".
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownHorizontalOffset">android.R.attr.dropDownHorizontalOffset
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownHorizontalOffset</attr>
			public const int Spinner_dropDownHorizontalOffset = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// List selector to use for spinnerMode="dropdown" display.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownSelector">android.R.attr.dropDownSelector</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownSelector</attr>
			public const int Spinner_dropDownSelector = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Vertical offset from the spinner widget for positioning the dropdown in
			/// spinnerMode="dropdown".
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownVerticalOffset">android.R.attr.dropDownVerticalOffset
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownVerticalOffset</attr>
			public const int Spinner_dropDownVerticalOffset = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Width of the dropdown in spinnerMode="dropdown".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The dropdown should fill the width of the screen.
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The dropdown should fit the width of the screen.
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The dropdown should fit the width of its anchor. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownWidth">android.R.attr.dropDownWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownWidth</attr>
			public const int Spinner_dropDownWidth = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Gravity setting for positioning the currently selected item.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int Spinner_gravity = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background drawable to use for the dropdown in spinnerMode="dropdown".
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.popupBackground">android.R.attr.popupBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:popupBackground</attr>
			public const int Spinner_popupBackground = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a layout to use for displaying a prompt in the dropdown for
			/// spinnerMode="dropdown". This layout must contain a TextView with the id
			/// </attr>
			/// <android>
			/// :id/text1 to be populated with the prompt text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </android>
			/// <attr>name android:popupPromptView</attr>
			public const int Spinner_popupPromptView = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The prompt to display when the spinner's dialog is shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.prompt">android.R.attr.prompt</see>
			/// .
			/// </attr>
			/// <attr>name android:prompt</attr>
			public const int Spinner_prompt = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Display mode for spinner options.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>dialog</code></td><td>0</td><td> Spinner options will be presented to the user as a dialog window. </td></tr>
			/// <tr><td><code>dropdown</code></td><td>1</td><td> Spinner options will be presented to the user as an inline dropdown
			/// anchored to the spinner widget itself. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.spinnerMode">android.R.attr.spinnerMode</see>
			/// .
			/// </attr>
			/// <attr>name android:spinnerMode</attr>
			public const int Spinner_spinnerMode = 7;

			/// <summary>Attributes that can be used with a StackView.</summary>
			/// <remarks>
			/// Attributes that can be used with a StackView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="StackView_clickColor">android:clickColor</see>
			/// </code></td><td> Color of the outline of click feedback.</td></tr>
			/// <tr><td><code>
			/// <see cref="StackView_resOutColor">android:resOutColor</see>
			/// </code></td><td> Color of the res-out outline.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="StackView_clickColor">StackView_clickColor</seealso>
			/// <seealso cref="StackView_resOutColor">StackView_resOutColor</seealso>
			public static readonly int[] StackView = new int[] { unchecked((int)(0x010103ec))
				, unchecked((int)(0x010103ed)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the outline of click feedback.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:clickColor</attr>
			public const int StackView_clickColor = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the res-out outline.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:resOutColor</attr>
			public const int StackView_resOutColor = 0;

			/// <summary>Drawable used to render several states.</summary>
			/// <remarks>
			/// Drawable used to render several states. Each state is represented by
			/// a child drawable.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="StateListDrawable_constantSize">android:constantSize</see>
			/// </code></td><td> If true, the drawable's reported internal size will remain
			/// constant as the state changes; the size is the maximum of all
			/// of the states.</td></tr>
			/// <tr><td><code>
			/// <see cref="StateListDrawable_dither">android:dither</see>
			/// </code></td><td> Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="StateListDrawable_enterFadeDuration">android:enterFadeDuration</see>
			/// </code></td><td> Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="StateListDrawable_exitFadeDuration">android:exitFadeDuration</see>
			/// </code></td><td> Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="StateListDrawable_variablePadding">android:variablePadding</see>
			/// </code></td><td> If true, allows the drawable's padding to change based on the
			/// current state that is selected.</td></tr>
			/// <tr><td><code>
			/// <see cref="StateListDrawable_visible">android:visible</see>
			/// </code></td><td> Indicates whether the drawable should be initially visible.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="StateListDrawable_constantSize">StateListDrawable_constantSize</seealso>
			/// <seealso cref="StateListDrawable_dither">StateListDrawable_dither</seealso>
			/// <seealso cref="StateListDrawable_enterFadeDuration">StateListDrawable_enterFadeDuration
			/// 	</seealso>
			/// <seealso cref="StateListDrawable_exitFadeDuration">StateListDrawable_exitFadeDuration
			/// 	</seealso>
			/// <seealso cref="StateListDrawable_variablePadding">StateListDrawable_variablePadding
			/// 	</seealso>
			/// <seealso cref="StateListDrawable_visible">StateListDrawable_visible</seealso>
			public static readonly int[] StateListDrawable = new int[] { unchecked((int)(0x0101011c
				)), unchecked((int)(0x01010194)), unchecked((int)(0x01010195)), unchecked((int)(
				0x01010196)), unchecked((int)(0x0101030c)), unchecked((int)(0x0101030d)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, the drawable's reported internal size will remain
			/// constant as the state changes; the size is the maximum of all
			/// of the states.  If false, the size will vary based on the
			/// current state.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.constantSize">android.R.attr.constantSize</see>
			/// .
			/// </attr>
			/// <attr>name android:constantSize</attr>
			public const int StateListDrawable_constantSize = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Enables or disables dithering of the bitmap if the bitmap does not have the
			/// same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
			/// an RGB 565 screen).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dither">android.R.attr.dither</see>
			/// .
			/// </attr>
			/// <attr>name android:dither</attr>
			public const int StateListDrawable_dither = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of time (in milliseconds) to fade in a new state drawable.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enterFadeDuration">android.R.attr.enterFadeDuration</see>
			/// .
			/// </attr>
			/// <attr>name android:enterFadeDuration</attr>
			public const int StateListDrawable_enterFadeDuration = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of time (in milliseconds) to fade out an old state drawable.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.exitFadeDuration">android.R.attr.exitFadeDuration</see>
			/// .
			/// </attr>
			/// <attr>name android:exitFadeDuration</attr>
			public const int StateListDrawable_exitFadeDuration = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If true, allows the drawable's padding to change based on the
			/// current state that is selected.  If false, the padding will
			/// stay the same (based on the maximum padding of all the states).
			/// Enabling this feature requires that the owner of the drawable
			/// deal with performing layout when the state changes, which is
			/// often not supported.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.variablePadding">android.R.attr.variablePadding</see>
			/// .
			/// </attr>
			/// <attr>name android:variablePadding</attr>
			public const int StateListDrawable_variablePadding = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates whether the drawable should be initially visible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visible">android.R.attr.visible</see>
			/// .
			/// </attr>
			/// <attr>name android:visible</attr>
			public const int StateListDrawable_visible = 1;

			/// <summary>Attributes that can be used with a Storage.</summary>
			/// <remarks>
			/// Attributes that can be used with a Storage.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Storage_allowMassStorage">android:allowMassStorage</see>
			/// </code></td><td> true if the storage can be shared via USB mass storage </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_emulated">android:emulated</see>
			/// </code></td><td> true if the storage is emulated via the FUSE sdcard daemon </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_maxFileSize">android:maxFileSize</see>
			/// </code></td><td> maximum file size for the volume in megabytes, zero or unspecified if it is unbounded </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_mountPoint">android:mountPoint</see>
			/// </code></td><td> path to mount point for the storage </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_mtpReserve">android:mtpReserve</see>
			/// </code></td><td> number of megabytes of storage MTP should reserve for free storage
			/// (used for emulated storage that is shared with system's data partition) </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_primary">android:primary</see>
			/// </code></td><td> true if the storage is the primary external storage </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_removable">android:removable</see>
			/// </code></td><td> true if the storage is removable </td></tr>
			/// <tr><td><code>
			/// <see cref="Storage_storageDescription">android:storageDescription</see>
			/// </code></td><td> user visible description of the storage </td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Storage_allowMassStorage">Storage_allowMassStorage</seealso>
			/// <seealso cref="Storage_emulated">Storage_emulated</seealso>
			/// <seealso cref="Storage_maxFileSize">Storage_maxFileSize</seealso>
			/// <seealso cref="Storage_mountPoint">Storage_mountPoint</seealso>
			/// <seealso cref="Storage_mtpReserve">Storage_mtpReserve</seealso>
			/// <seealso cref="Storage_primary">Storage_primary</seealso>
			/// <seealso cref="Storage_removable">Storage_removable</seealso>
			/// <seealso cref="Storage_storageDescription">Storage_storageDescription</seealso>
			public static readonly int[] Storage = new int[] { unchecked((int)(0x01010413)), 
				unchecked((int)(0x01010414)), unchecked((int)(0x01010415)), unchecked((int)(0x01010416
				)), unchecked((int)(0x01010417)), unchecked((int)(0x01010418)), unchecked((int)(
				0x01010419)), unchecked((int)(0x0101041a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// true if the storage can be shared via USB mass storage
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:allowMassStorage</attr>
			public const int Storage_allowMassStorage = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// true if the storage is emulated via the FUSE sdcard daemon
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:emulated</attr>
			public const int Storage_emulated = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// maximum file size for the volume in megabytes, zero or unspecified if it is unbounded
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:maxFileSize</attr>
			public const int Storage_maxFileSize = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// path to mount point for the storage
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:mountPoint</attr>
			public const int Storage_mountPoint = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// number of megabytes of storage MTP should reserve for free storage
			/// (used for emulated storage that is shared with system's data partition)
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:mtpReserve</attr>
			public const int Storage_mtpReserve = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// true if the storage is the primary external storage
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:primary</attr>
			public const int Storage_primary = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// true if the storage is removable
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:removable</attr>
			public const int Storage_removable = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// user visible description of the storage
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:storageDescription</attr>
			public const int Storage_storageDescription = 1;

			/// <summary>Attributes that can be used with a SuggestionSpan.</summary>
			/// <remarks>
			/// Attributes that can be used with a SuggestionSpan.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SuggestionSpan_textUnderlineColor">android:textUnderlineColor</see>
			/// </code></td><td>  The underline color </td></tr>
			/// <tr><td><code>
			/// <see cref="SuggestionSpan_textUnderlineThickness">android:textUnderlineThickness</see>
			/// </code></td><td>  The underline thickness </td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SuggestionSpan_textUnderlineColor">SuggestionSpan_textUnderlineColor
			/// 	</seealso>
			/// <seealso cref="SuggestionSpan_textUnderlineThickness">SuggestionSpan_textUnderlineThickness
			/// 	</seealso>
			public static readonly int[] SuggestionSpan = new int[] { unchecked((int)(0x010103ab
				)), unchecked((int)(0x010103ac)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline color
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textUnderlineColor</attr>
			public const int SuggestionSpan_textUnderlineColor = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline thickness
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textUnderlineThickness</attr>
			public const int SuggestionSpan_textUnderlineThickness = 1;

			/// <summary>Attributes that can be used with a Switch.</summary>
			/// <remarks>
			/// Attributes that can be used with a Switch.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Switch_switchMinWidth">android:switchMinWidth</see>
			/// </code></td><td> Minimum width for the switch component </td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_switchPadding">android:switchPadding</see>
			/// </code></td><td> Minimum space between the switch and caption text </td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_switchTextAppearance">android:switchTextAppearance</see>
			/// </code></td><td> TextAppearance style for text displayed on the switch thumb.</td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_textOff">android:textOff</see>
			/// </code></td><td> Text to use when the switch is in the unchecked/"off" state.</td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_textOn">android:textOn</see>
			/// </code></td><td> Text to use when the switch is in the checked/"on" state.</td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_thumb">android:thumb</see>
			/// </code></td><td> Drawable to use as the "thumb" that switches back and forth.</td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_thumbTextPadding">android:thumbTextPadding</see>
			/// </code></td><td> Amount of padding on either side of text within the switch thumb.</td></tr>
			/// <tr><td><code>
			/// <see cref="Switch_track">android:track</see>
			/// </code></td><td> Drawable to use as the "track" that the switch thumb slides within.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Switch_switchMinWidth">Switch_switchMinWidth</seealso>
			/// <seealso cref="Switch_switchPadding">Switch_switchPadding</seealso>
			/// <seealso cref="Switch_switchTextAppearance">Switch_switchTextAppearance</seealso>
			/// <seealso cref="Switch_textOff">Switch_textOff</seealso>
			/// <seealso cref="Switch_textOn">Switch_textOn</seealso>
			/// <seealso cref="Switch_thumb">Switch_thumb</seealso>
			/// <seealso cref="Switch_thumbTextPadding">Switch_thumbTextPadding</seealso>
			/// <seealso cref="Switch_track">Switch_track</seealso>
			public static readonly int[] Switch = new int[] { unchecked((int)(0x01010124)), unchecked(
				(int)(0x01010125)), unchecked((int)(0x01010142)), unchecked((int)(0x0101036e)), 
				unchecked((int)(0x0101036f)), unchecked((int)(0x01010370)), unchecked((int)(0x01010371
				)), unchecked((int)(0x01010372)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum width for the switch component
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.switchMinWidth">android.R.attr.switchMinWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:switchMinWidth</attr>
			public const int Switch_switchMinWidth = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Minimum space between the switch and caption text
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.switchPadding">android.R.attr.switchPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:switchPadding</attr>
			public const int Switch_switchPadding = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// TextAppearance style for text displayed on the switch thumb.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.switchTextAppearance">android.R.attr.switchTextAppearance
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:switchTextAppearance</attr>
			public const int Switch_switchTextAppearance = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text to use when the switch is in the unchecked/"off" state.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textOff">android.R.attr.textOff</see>
			/// .
			/// </attr>
			/// <attr>name android:textOff</attr>
			public const int Switch_textOff = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text to use when the switch is in the checked/"on" state.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textOn">android.R.attr.textOn</see>
			/// .
			/// </attr>
			/// <attr>name android:textOn</attr>
			public const int Switch_textOn = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the "thumb" that switches back and forth.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thumb">android.R.attr.thumb</see>
			/// .
			/// </attr>
			/// <attr>name android:thumb</attr>
			public const int Switch_thumb = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Amount of padding on either side of text within the switch thumb.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thumbTextPadding">android.R.attr.thumbTextPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:thumbTextPadding</attr>
			public const int Switch_thumbTextPadding = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the "track" that the switch thumb slides within.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.track">android.R.attr.track</see>
			/// .
			/// </attr>
			/// <attr>name android:track</attr>
			public const int Switch_track = 4;

			/// <summary>Attributes that can be used with a SwitchPreference.</summary>
			/// <remarks>
			/// Attributes that can be used with a SwitchPreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SwitchPreference_disableDependentsState">android:disableDependentsState
			/// 	</see>
			/// </code></td><td> The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="SwitchPreference_summaryOff">android:summaryOff</see>
			/// </code></td><td> The summary for the Preference in a PreferenceActivity screen when the
			/// SwitchPreference is unchecked.</td></tr>
			/// <tr><td><code>
			/// <see cref="SwitchPreference_summaryOn">android:summaryOn</see>
			/// </code></td><td> The summary for the Preference in a PreferenceActivity screen when the
			/// SwitchPreference is checked.</td></tr>
			/// <tr><td><code>
			/// <see cref="SwitchPreference_switchTextOff">android:switchTextOff</see>
			/// </code></td><td> The text used on the switch itself when in the "off" state.</td></tr>
			/// <tr><td><code>
			/// <see cref="SwitchPreference_switchTextOn">android:switchTextOn</see>
			/// </code></td><td> The text used on the switch itself when in the "on" state.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SwitchPreference_disableDependentsState">SwitchPreference_disableDependentsState
			/// 	</seealso>
			/// <seealso cref="SwitchPreference_summaryOff">SwitchPreference_summaryOff</seealso>
			/// <seealso cref="SwitchPreference_summaryOn">SwitchPreference_summaryOn</seealso>
			/// <seealso cref="SwitchPreference_switchTextOff">SwitchPreference_switchTextOff</seealso>
			/// <seealso cref="SwitchPreference_switchTextOn">SwitchPreference_switchTextOn</seealso>
			public static readonly int[] SwitchPreference = new int[] { unchecked((int)(0x010101ef
				)), unchecked((int)(0x010101f0)), unchecked((int)(0x010101f1)), unchecked((int)(
				0x0101036b)), unchecked((int)(0x0101036c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The state (true for on, or false for off) that causes dependents to be disabled. By default,
			/// dependents will be disabled when this is unchecked, so the value of this preference is false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.disableDependentsState">android.R.attr.disableDependentsState
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:disableDependentsState</attr>
			public const int SwitchPreference_disableDependentsState = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// SwitchPreference is unchecked. If separate on/off summaries are not
			/// needed, the summary attribute can be used instead.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summaryOff">android.R.attr.summaryOff</see>
			/// .
			/// </attr>
			/// <attr>name android:summaryOff</attr>
			public const int SwitchPreference_summaryOff = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The summary for the Preference in a PreferenceActivity screen when the
			/// SwitchPreference is checked. If separate on/off summaries are not
			/// needed, the summary attribute can be used instead.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.summaryOn">android.R.attr.summaryOn</see>
			/// .
			/// </attr>
			/// <attr>name android:summaryOn</attr>
			public const int SwitchPreference_summaryOn = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text used on the switch itself when in the "off" state.
			/// This should be a very SHORT string, as it appears in a small space.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.switchTextOff">android.R.attr.switchTextOff</see>
			/// .
			/// </attr>
			/// <attr>name android:switchTextOff</attr>
			public const int SwitchPreference_switchTextOff = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text used on the switch itself when in the "on" state.
			/// This should be a very SHORT string, as it appears in a small space.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.switchTextOn">android.R.attr.switchTextOn</see>
			/// .
			/// </attr>
			/// <attr>name android:switchTextOn</attr>
			public const int SwitchPreference_switchTextOn = 3;

			/// <summary>
			/// Use <code>account-authenticator</code> as the root tag of the XML resource that
			/// describes an account authenticator.
			/// </summary>
			/// <remarks>
			/// Use <code>account-authenticator</code> as the root tag of the XML resource that
			/// describes an account authenticator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_accountType">android:accountType</see>
			/// </code></td><td> The account type this authenticator handles.</td></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_allowParallelSyncs">android:allowParallelSyncs</see>
			/// </code></td><td> Set to true to tell the SyncManager that this SyncAdapter supports
			/// multiple simultaneous syncs for the same account type and authority.</td></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_contentAuthority">android:contentAuthority</see>
			/// </code></td><td> the authority of a content provider.</td></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_isAlwaysSyncable">android:isAlwaysSyncable</see>
			/// </code></td><td> Set to true to tell the SyncManager to automatically call setIsSyncable(.</td></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> If provided, specifies the action of the settings
			/// activity for this SyncAdapter.</td></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_supportsUploading">android:supportsUploading</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="SyncAdapter_userVisible">android:userVisible</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="SyncAdapter_accountType">SyncAdapter_accountType</seealso>
			/// <seealso cref="SyncAdapter_allowParallelSyncs">SyncAdapter_allowParallelSyncs</seealso>
			/// <seealso cref="SyncAdapter_contentAuthority">SyncAdapter_contentAuthority</seealso>
			/// <seealso cref="SyncAdapter_isAlwaysSyncable">SyncAdapter_isAlwaysSyncable</seealso>
			/// <seealso cref="SyncAdapter_settingsActivity">SyncAdapter_settingsActivity</seealso>
			/// <seealso cref="SyncAdapter_supportsUploading">SyncAdapter_supportsUploading</seealso>
			/// <seealso cref="SyncAdapter_userVisible">SyncAdapter_userVisible</seealso>
			public static readonly int[] SyncAdapter = new int[] { unchecked((int)(0x01010225
				)), unchecked((int)(0x0101028f)), unchecked((int)(0x01010290)), unchecked((int)(
				0x01010291)), unchecked((int)(0x0101029b)), unchecked((int)(0x01010332)), unchecked(
				(int)(0x01010333)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The account type this authenticator handles.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.accountType">android.R.attr.accountType</see>
			/// .
			/// </attr>
			/// <attr>name android:accountType</attr>
			public const int SyncAdapter_accountType = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set to true to tell the SyncManager that this SyncAdapter supports
			/// multiple simultaneous syncs for the same account type and authority.
			/// Otherwise the SyncManager will be sure not to issue a start sync request
			/// to this SyncAdapter if the SyncAdapter is already syncing another account.
			/// Defaults to false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.allowParallelSyncs">android.R.attr.allowParallelSyncs</see>
			/// .
			/// </attr>
			/// <attr>name android:allowParallelSyncs</attr>
			public const int SyncAdapter_allowParallelSyncs = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// the authority of a content provider.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.contentAuthority">android.R.attr.contentAuthority</see>
			/// .
			/// </attr>
			/// <attr>name android:contentAuthority</attr>
			public const int SyncAdapter_contentAuthority = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
			/// for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
			/// Defaults to false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isAlwaysSyncable">android.R.attr.isAlwaysSyncable</see>
			/// .
			/// </attr>
			/// <attr>name android:isAlwaysSyncable</attr>
			public const int SyncAdapter_isAlwaysSyncable = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If provided, specifies the action of the settings
			/// activity for this SyncAdapter.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int SyncAdapter_settingsActivity = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.supportsUploading">android.R.attr.supportsUploading</see>
			/// attribute's value can be found in the
			/// <see cref="SyncAdapter">SyncAdapter</see>
			/// array.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:supportsUploading</attr>
			public const int SyncAdapter_supportsUploading = 4;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.userVisible">android.R.attr.userVisible</see>
			/// attribute's value can be found in the
			/// <see cref="SyncAdapter">SyncAdapter</see>
			/// array.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:userVisible</attr>
			public const int SyncAdapter_userVisible = 3;

			/// <summary>Attributes that can be used with a TabWidget.</summary>
			/// <remarks>
			/// Attributes that can be used with a TabWidget.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TabWidget_divider">android:divider</see>
			/// </code></td><td> Drawable used to draw the divider between tabs.</td></tr>
			/// <tr><td><code>
			/// <see cref="TabWidget_tabLayout">android:tabLayout</see>
			/// </code></td><td> Layout used to organize each tab's content.</td></tr>
			/// <tr><td><code>
			/// <see cref="TabWidget_tabStripEnabled">android:tabStripEnabled</see>
			/// </code></td><td> Determines whether the strip under the tab indicators is drawn or not.</td></tr>
			/// <tr><td><code>
			/// <see cref="TabWidget_tabStripLeft">android:tabStripLeft</see>
			/// </code></td><td> Drawable used to draw the left part of the strip underneath the tabs.</td></tr>
			/// <tr><td><code>
			/// <see cref="TabWidget_tabStripRight">android:tabStripRight</see>
			/// </code></td><td> Drawable used to draw the right part of the strip underneath the tabs.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TabWidget_divider">TabWidget_divider</seealso>
			/// <seealso cref="TabWidget_tabLayout">TabWidget_tabLayout</seealso>
			/// <seealso cref="TabWidget_tabStripEnabled">TabWidget_tabStripEnabled</seealso>
			/// <seealso cref="TabWidget_tabStripLeft">TabWidget_tabStripLeft</seealso>
			/// <seealso cref="TabWidget_tabStripRight">TabWidget_tabStripRight</seealso>
			public static readonly int[] TabWidget = new int[] { unchecked((int)(0x01010129))
				, unchecked((int)(0x010102bb)), unchecked((int)(0x010102bc)), unchecked((int)(0x010102bd
				)), unchecked((int)(0x010103ee)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used to draw the divider between tabs.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.divider">android.R.attr.divider</see>
			/// .
			/// </attr>
			/// <attr>name android:divider</attr>
			public const int TabWidget_divider = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Layout used to organize each tab's content.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:tabLayout</attr>
			public const int TabWidget_tabLayout = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Determines whether the strip under the tab indicators is drawn or not.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tabStripEnabled">android.R.attr.tabStripEnabled</see>
			/// .
			/// </attr>
			/// <attr>name android:tabStripEnabled</attr>
			public const int TabWidget_tabStripEnabled = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used to draw the left part of the strip underneath the tabs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tabStripLeft">android.R.attr.tabStripLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:tabStripLeft</attr>
			public const int TabWidget_tabStripLeft = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used to draw the right part of the strip underneath the tabs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tabStripRight">android.R.attr.tabStripRight</see>
			/// .
			/// </attr>
			/// <attr>name android:tabStripRight</attr>
			public const int TabWidget_tabStripRight = 2;

			/// <summary>Attributes that can be used with a TableLayout.</summary>
			/// <remarks>
			/// Attributes that can be used with a TableLayout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TableLayout_collapseColumns">android:collapseColumns</see>
			/// </code></td><td> The zero-based index of the columns to collapse.</td></tr>
			/// <tr><td><code>
			/// <see cref="TableLayout_shrinkColumns">android:shrinkColumns</see>
			/// </code></td><td> The zero-based index of the columns to shrink.</td></tr>
			/// <tr><td><code>
			/// <see cref="TableLayout_stretchColumns">android:stretchColumns</see>
			/// </code></td><td> The zero-based index of the columns to stretch.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TableLayout_collapseColumns">TableLayout_collapseColumns</seealso>
			/// <seealso cref="TableLayout_shrinkColumns">TableLayout_shrinkColumns</seealso>
			/// <seealso cref="TableLayout_stretchColumns">TableLayout_stretchColumns</seealso>
			public static readonly int[] TableLayout = new int[] { unchecked((int)(0x01010149
				)), unchecked((int)(0x0101014a)), unchecked((int)(0x0101014b)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The zero-based index of the columns to collapse. The column indices
			/// must be separated by a comma: 1, 2, 5. Illegal and duplicate
			/// indices are ignored.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.collapseColumns">android.R.attr.collapseColumns</see>
			/// .
			/// </attr>
			/// <attr>name android:collapseColumns</attr>
			public const int TableLayout_collapseColumns = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The zero-based index of the columns to shrink. The column indices
			/// must be separated by a comma: 1, 2, 5. Illegal and duplicate
			/// indices are ignored. You can shrink all columns by using the
			/// value "*" instead. Note that a column can be marked stretchable
			/// and shrinkable at the same time.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shrinkColumns">android.R.attr.shrinkColumns</see>
			/// .
			/// </attr>
			/// <attr>name android:shrinkColumns</attr>
			public const int TableLayout_shrinkColumns = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The zero-based index of the columns to stretch. The column indices
			/// must be separated by a comma: 1, 2, 5. Illegal and duplicate
			/// indices are ignored. You can stretch all columns by using the
			/// value "*" instead. Note that a column can be marked stretchable
			/// and shrinkable at the same time.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.stretchColumns">android.R.attr.stretchColumns</see>
			/// .
			/// </attr>
			/// <attr>name android:stretchColumns</attr>
			public const int TableLayout_stretchColumns = 0;

			/// <summary>Attributes that can be used with a TableRow.</summary>
			/// <remarks>Attributes that can be used with a TableRow.</remarks>
			public static readonly int[] TableRow = new int[] {  };

			/// <summary>Attributes that can be used with a TableRow_Cell.</summary>
			/// <remarks>
			/// Attributes that can be used with a TableRow_Cell.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TableRow_Cell_layout_column">android:layout_column</see>
			/// </code></td><td> The index of the column in which this child should be.</td></tr>
			/// <tr><td><code>
			/// <see cref="TableRow_Cell_layout_span">android:layout_span</see>
			/// </code></td><td> Defines how many columns this child should span.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TableRow_Cell_layout_column">TableRow_Cell_layout_column</seealso>
			/// <seealso cref="TableRow_Cell_layout_span">TableRow_Cell_layout_span</seealso>
			public static readonly int[] TableRow_Cell = new int[] { unchecked((int)(0x0101014c
				)), unchecked((int)(0x0101014d)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The index of the column in which this child should be.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_column">android.R.attr.layout_column</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_column</attr>
			public const int TableRow_Cell_layout_column = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines how many columns this child should span.  Must be &gt;= 1.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_span">android.R.attr.layout_span</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_span</attr>
			public const int TableRow_Cell_layout_span = 1;

			/// <summary>Attributes that can be used with a TextAppearance.</summary>
			/// <remarks>
			/// Attributes that can be used with a TextAppearance.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textAllCaps">android:textAllCaps</see>
			/// </code></td><td> Present the text in ALL CAPS.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textColor">android:textColor</see>
			/// </code></td><td> Text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textColorHighlight">android:textColorHighlight</see>
			/// </code></td><td> Color of the text selection highlight.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textColorHint">android:textColorHint</see>
			/// </code></td><td> Color of the hint text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textColorLink">android:textColorLink</see>
			/// </code></td><td> Color of the links.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textSize">android:textSize</see>
			/// </code></td><td> Size of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_textStyle">android:textStyle</see>
			/// </code></td><td> Style (bold, italic, bolditalic) for the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextAppearance_typeface">android:typeface</see>
			/// </code></td><td> Typeface (normal, sans, serif, monospace) for the text.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TextAppearance_textAllCaps">TextAppearance_textAllCaps</seealso>
			/// <seealso cref="TextAppearance_textColor">TextAppearance_textColor</seealso>
			/// <seealso cref="TextAppearance_textColorHighlight">TextAppearance_textColorHighlight
			/// 	</seealso>
			/// <seealso cref="TextAppearance_textColorHint">TextAppearance_textColorHint</seealso>
			/// <seealso cref="TextAppearance_textColorLink">TextAppearance_textColorLink</seealso>
			/// <seealso cref="TextAppearance_textSize">TextAppearance_textSize</seealso>
			/// <seealso cref="TextAppearance_textStyle">TextAppearance_textStyle</seealso>
			/// <seealso cref="TextAppearance_typeface">TextAppearance_typeface</seealso>
			public static readonly int[] TextAppearance = new int[] { unchecked((int)(0x01010095
				)), unchecked((int)(0x01010096)), unchecked((int)(0x01010097)), unchecked((int)(
				0x01010098)), unchecked((int)(0x01010099)), unchecked((int)(0x0101009a)), unchecked(
				(int)(0x0101009b)), unchecked((int)(0x0101038c)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Present the text in ALL CAPS. This may use a small-caps form when available.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAllCaps">android.R.attr.textAllCaps</see>
			/// .
			/// </attr>
			/// <attr>name android:textAllCaps</attr>
			public const int TextAppearance_textAllCaps = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColor">android.R.attr.textColor</see>
			/// .
			/// </attr>
			/// <attr>name android:textColor</attr>
			public const int TextAppearance_textColor = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the text selection highlight.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorHighlight">android.R.attr.textColorHighlight</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorHighlight</attr>
			public const int TextAppearance_textColorHighlight = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the hint text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorHint">android.R.attr.textColorHint</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorHint</attr>
			public const int TextAppearance_textColorHint = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the links.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorLink">android.R.attr.textColorLink</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorLink</attr>
			public const int TextAppearance_textColorLink = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSize">android.R.attr.textSize</see>
			/// .
			/// </attr>
			/// <attr>name android:textSize</attr>
			public const int TextAppearance_textSize = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Style (bold, italic, bolditalic) for the text.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>bold</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>italic</code></td><td>2</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textStyle">android.R.attr.textStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:textStyle</attr>
			public const int TextAppearance_textStyle = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Typeface (normal, sans, serif, monospace) for the text.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>sans</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>serif</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>monospace</code></td><td>3</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.typeface">android.R.attr.typeface</see>
			/// .
			/// </attr>
			/// <attr>name android:typeface</attr>
			public const int TextAppearance_typeface = 1;

			/// <summary>Attributes that can be used with a TextSwitcher.</summary>
			/// <remarks>Attributes that can be used with a TextSwitcher.</remarks>
			public static readonly int[] TextSwitcher = new int[] {  };

			/// <summary>
			/// Use <code>tts-engine</code> as the root tag of the XML resource that
			/// describes a text to speech engine implemented as a subclass of
			/// <see cref="android.speech.tts.TextToSpeechService">android.speech.tts.TextToSpeechService
			/// 	</see>
			/// .
			/// The XML resource must be referenced from its
			/// <see cref="android.speech.tts.TextToSpeech.Engine.SERVICE_META_DATA">android.speech.tts.TextToSpeech.Engine.SERVICE_META_DATA
			/// 	</see>
			/// meta-data
			/// entry.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TextToSpeechEngine_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> Component name of an activity that allows the user to modify
			/// the settings for this service.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="TextToSpeechEngine_settingsActivity">TextToSpeechEngine_settingsActivity
			/// 	</seealso>
			public static readonly int[] TextToSpeechEngine = new int[] { unchecked((int)(0x01010225
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int TextToSpeechEngine_settingsActivity = 0;

			/// <summary>Attributes that can be used with a TextView.</summary>
			/// <remarks>
			/// Attributes that can be used with a TextView.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TextView_autoLink">android:autoLink</see>
			/// </code></td><td> Controls whether links such as urls and email addresses are
			/// automatically found and converted to clickable links.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_autoText">android:autoText</see>
			/// </code></td><td> If set, specifies that this TextView has a textual input method
			/// and automatically corrects some common spelling errors.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_bufferType">android:bufferType</see>
			/// </code></td><td> Determines the minimum type that getText() will return.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_capitalize">android:capitalize</see>
			/// </code></td><td> If set, specifies that this TextView has a textual input method
			/// and should automatically capitalize what the user types.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_cursorVisible">android:cursorVisible</see>
			/// </code></td><td> Makes the cursor visible (the default) or invisible.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_digits">android:digits</see>
			/// </code></td><td> If set, specifies that this TextView has a numeric input method
			/// and that these specific characters are the ones that it will
			/// accept.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawableBottom">android:drawableBottom</see>
			/// </code></td><td> The drawable to be drawn below the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawableEnd">android:drawableEnd</see>
			/// </code></td><td> The drawable to be drawn to the end of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawableLeft">android:drawableLeft</see>
			/// </code></td><td> The drawable to be drawn to the left of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawablePadding">android:drawablePadding</see>
			/// </code></td><td> The padding between the drawables and the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawableRight">android:drawableRight</see>
			/// </code></td><td> The drawable to be drawn to the right of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawableStart">android:drawableStart</see>
			/// </code></td><td> The drawable to be drawn to the start of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_drawableTop">android:drawableTop</see>
			/// </code></td><td> The drawable to be drawn above the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_editable">android:editable</see>
			/// </code></td><td> If set, specifies that this TextView has an input method.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_editorExtras">android:editorExtras</see>
			/// </code></td><td> Reference to an
			/// <see cref="android.R.styleable.InputExtras">&lt;input-extras&gt;</see>
			/// XML resource containing additional data to
			/// supply to an input method, which is private to the implementation
			/// of the input method.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_ellipsize">android:ellipsize</see>
			/// </code></td><td> If set, causes words that are longer than the view is wide
			/// to be ellipsized instead of broken in the middle.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_ems">android:ems</see>
			/// </code></td><td> Makes the TextView be exactly this many ems wide.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_enabled">android:enabled</see>
			/// </code></td><td> Specifies whether the TextView is enabled or not.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_freezesText">android:freezesText</see>
			/// </code></td><td> If set, the text view will include its current complete text
			/// inside of its frozen icicle in addition to meta-data such as
			/// the current cursor position.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_gravity">android:gravity</see>
			/// </code></td><td> Specifies how to align the text by the view's x- and/or y-axis
			/// when the text is smaller than the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_height">android:height</see>
			/// </code></td><td> Makes the TextView be exactly this many pixels tall.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_hint">android:hint</see>
			/// </code></td><td> Hint text to display when the text is empty.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_imeActionId">android:imeActionId</see>
			/// </code></td><td> Supply a value for
			/// <see cref="android.view.inputmethod.EditorInfo.actionId">EditorInfo.actionId</see>
			/// used when an input method is connected to the text view.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_imeActionLabel">android:imeActionLabel</see>
			/// </code></td><td> Supply a value for
			/// <see cref="android.view.inputmethod.EditorInfo.actionLabel">EditorInfo.actionLabel
			/// 	</see>
			/// used when an input method is connected to the text view.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_imeOptions">android:imeOptions</see>
			/// </code></td><td> Additional features you can enable in an IME associated with an editor
			/// to improve the integration with your application.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_includeFontPadding">android:includeFontPadding</see>
			/// </code></td><td> Leave enough room for ascenders and descenders instead of
			/// using the font ascent and descent strictly.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_inputMethod">android:inputMethod</see>
			/// </code></td><td> If set, specifies that this TextView should use the specified
			/// input method (specified by fully-qualified class name).</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_inputType">android:inputType</see>
			/// </code></td><td> The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_lineSpacingExtra">android:lineSpacingExtra</see>
			/// </code></td><td> Extra spacing between lines of text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_lineSpacingMultiplier">android:lineSpacingMultiplier</see>
			/// </code></td><td> Extra spacing between lines of text, as a multiplier.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_lines">android:lines</see>
			/// </code></td><td> Makes the TextView be exactly this many lines tall.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_linksClickable">android:linksClickable</see>
			/// </code></td><td> If set to false, keeps the movement method from being set
			/// to the link movement method even if autoLink causes links
			/// to be found.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_marqueeRepeatLimit">android:marqueeRepeatLimit</see>
			/// </code></td><td> The number of times to repeat the marquee animation.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_maxEms">android:maxEms</see>
			/// </code></td><td> Makes the TextView be at most this many ems wide.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_maxHeight">android:maxHeight</see>
			/// </code></td><td> Makes the TextView be at most this many pixels tall.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_maxLength">android:maxLength</see>
			/// </code></td><td> Set an input filter to constrain the text length to the
			/// specified number.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_maxLines">android:maxLines</see>
			/// </code></td><td> Makes the TextView be at most this many lines tall.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_maxWidth">android:maxWidth</see>
			/// </code></td><td> Makes the TextView be at most this many pixels wide.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_minEms">android:minEms</see>
			/// </code></td><td> Makes the TextView be at least this many ems wide.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_minHeight">android:minHeight</see>
			/// </code></td><td> Makes the TextView be at least this many pixels tall.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_minLines">android:minLines</see>
			/// </code></td><td> Makes the TextView be at least this many lines tall.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_minWidth">android:minWidth</see>
			/// </code></td><td> Makes the TextView be at least this many pixels wide.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_numeric">android:numeric</see>
			/// </code></td><td> If set, specifies that this TextView has a numeric input method.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_password">android:password</see>
			/// </code></td><td> Whether the characters of the field are displayed as
			/// password dots instead of themselves.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_phoneNumber">android:phoneNumber</see>
			/// </code></td><td> If set, specifies that this TextView has a phone number input
			/// method.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_privateImeOptions">android:privateImeOptions</see>
			/// </code></td><td> An addition content type description to supply to the input
			/// method attached to the text view, which is private to the
			/// implementation of the input method.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_scrollHorizontally">android:scrollHorizontally</see>
			/// </code></td><td> Whether the text is allowed to be wider than the view (and
			/// therefore can be scrolled horizontally).</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_selectAllOnFocus">android:selectAllOnFocus</see>
			/// </code></td><td> If the text is selectable, select it all when the view takes
			/// focus instead of moving the cursor to the start or end.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_shadowColor">android:shadowColor</see>
			/// </code></td><td> Place a shadow of the specified color behind the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_shadowDx">android:shadowDx</see>
			/// </code></td><td> Horizontal offset of the shadow.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_shadowDy">android:shadowDy</see>
			/// </code></td><td> Vertical offset of the shadow.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_shadowRadius">android:shadowRadius</see>
			/// </code></td><td> Radius of the shadow.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_singleLine">android:singleLine</see>
			/// </code></td><td> Constrains the text to a single horizontally scrolling line
			/// instead of letting it wrap onto multiple lines, and advances
			/// focus instead of inserting a newline when you press the
			/// enter key.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_text">android:text</see>
			/// </code></td><td> Text to display.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textAllCaps">android:textAllCaps</see>
			/// </code></td><td> Present the text in ALL CAPS.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textAppearance">android:textAppearance</see>
			/// </code></td><td> Base text color, typeface, size, and style.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textColor">android:textColor</see>
			/// </code></td><td> Text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textColorHighlight">android:textColorHighlight</see>
			/// </code></td><td> Color of the text selection highlight.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textColorHint">android:textColorHint</see>
			/// </code></td><td> Color of the hint text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textColorLink">android:textColorLink</see>
			/// </code></td><td> Text color for links.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textCursorDrawable">android:textCursorDrawable</see>
			/// </code></td><td> Reference to a drawable that will be drawn under the insertion cursor.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textEditNoPasteWindowLayout">android:textEditNoPasteWindowLayout
			/// 	</see>
			/// </code></td><td> Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textEditPasteWindowLayout">android:textEditPasteWindowLayout</see>
			/// </code></td><td> The layout of the view that is displayed on top of the cursor to paste inside a
			/// TextEdit field.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textEditSideNoPasteWindowLayout">android:textEditSideNoPasteWindowLayout
			/// 	</see>
			/// </code></td><td> Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textEditSidePasteWindowLayout">android:textEditSidePasteWindowLayout
			/// 	</see>
			/// </code></td><td> Used instead of textEditPasteWindowLayout when the window is moved on the side of the
			/// insertion cursor because it would be clipped if it were positioned on top.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textEditSuggestionItemLayout">android:textEditSuggestionItemLayout
			/// 	</see>
			/// </code></td><td> Layout of the TextView item that will populate the suggestion popup window.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textIsSelectable">android:textIsSelectable</see>
			/// </code></td><td> Indicates that the content of a non-editable text can be selected.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textScaleX">android:textScaleX</see>
			/// </code></td><td> Sets the horizontal scaling factor for the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textSelectHandle">android:textSelectHandle</see>
			/// </code></td><td> Reference to a drawable that will be used to display a text selection
			/// anchor for positioning the cursor within text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textSelectHandleLeft">android:textSelectHandleLeft</see>
			/// </code></td><td> Reference to a drawable that will be used to display a text selection
			/// anchor on the left side of a selection region.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textSelectHandleRight">android:textSelectHandleRight</see>
			/// </code></td><td> Reference to a drawable that will be used to display a text selection
			/// anchor on the right side of a selection region.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textSize">android:textSize</see>
			/// </code></td><td> Size of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_textStyle">android:textStyle</see>
			/// </code></td><td> Style (bold, italic, bolditalic) for the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_typeface">android:typeface</see>
			/// </code></td><td> Typeface (normal, sans, serif, monospace) for the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="TextView_width">android:width</see>
			/// </code></td><td> Makes the TextView be exactly this many pixels wide.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TextView_autoLink">TextView_autoLink</seealso>
			/// <seealso cref="TextView_autoText">TextView_autoText</seealso>
			/// <seealso cref="TextView_bufferType">TextView_bufferType</seealso>
			/// <seealso cref="TextView_capitalize">TextView_capitalize</seealso>
			/// <seealso cref="TextView_cursorVisible">TextView_cursorVisible</seealso>
			/// <seealso cref="TextView_digits">TextView_digits</seealso>
			/// <seealso cref="TextView_drawableBottom">TextView_drawableBottom</seealso>
			/// <seealso cref="TextView_drawableEnd">TextView_drawableEnd</seealso>
			/// <seealso cref="TextView_drawableLeft">TextView_drawableLeft</seealso>
			/// <seealso cref="TextView_drawablePadding">TextView_drawablePadding</seealso>
			/// <seealso cref="TextView_drawableRight">TextView_drawableRight</seealso>
			/// <seealso cref="TextView_drawableStart">TextView_drawableStart</seealso>
			/// <seealso cref="TextView_drawableTop">TextView_drawableTop</seealso>
			/// <seealso cref="TextView_editable">TextView_editable</seealso>
			/// <seealso cref="TextView_editorExtras">TextView_editorExtras</seealso>
			/// <seealso cref="TextView_ellipsize">TextView_ellipsize</seealso>
			/// <seealso cref="TextView_ems">TextView_ems</seealso>
			/// <seealso cref="TextView_enabled">TextView_enabled</seealso>
			/// <seealso cref="TextView_freezesText">TextView_freezesText</seealso>
			/// <seealso cref="TextView_gravity">TextView_gravity</seealso>
			/// <seealso cref="TextView_height">TextView_height</seealso>
			/// <seealso cref="TextView_hint">TextView_hint</seealso>
			/// <seealso cref="TextView_imeActionId">TextView_imeActionId</seealso>
			/// <seealso cref="TextView_imeActionLabel">TextView_imeActionLabel</seealso>
			/// <seealso cref="TextView_imeOptions">TextView_imeOptions</seealso>
			/// <seealso cref="TextView_includeFontPadding">TextView_includeFontPadding</seealso>
			/// <seealso cref="TextView_inputMethod">TextView_inputMethod</seealso>
			/// <seealso cref="TextView_inputType">TextView_inputType</seealso>
			/// <seealso cref="TextView_lineSpacingExtra">TextView_lineSpacingExtra</seealso>
			/// <seealso cref="TextView_lineSpacingMultiplier">TextView_lineSpacingMultiplier</seealso>
			/// <seealso cref="TextView_lines">TextView_lines</seealso>
			/// <seealso cref="TextView_linksClickable">TextView_linksClickable</seealso>
			/// <seealso cref="TextView_marqueeRepeatLimit">TextView_marqueeRepeatLimit</seealso>
			/// <seealso cref="TextView_maxEms">TextView_maxEms</seealso>
			/// <seealso cref="TextView_maxHeight">TextView_maxHeight</seealso>
			/// <seealso cref="TextView_maxLength">TextView_maxLength</seealso>
			/// <seealso cref="TextView_maxLines">TextView_maxLines</seealso>
			/// <seealso cref="TextView_maxWidth">TextView_maxWidth</seealso>
			/// <seealso cref="TextView_minEms">TextView_minEms</seealso>
			/// <seealso cref="TextView_minHeight">TextView_minHeight</seealso>
			/// <seealso cref="TextView_minLines">TextView_minLines</seealso>
			/// <seealso cref="TextView_minWidth">TextView_minWidth</seealso>
			/// <seealso cref="TextView_numeric">TextView_numeric</seealso>
			/// <seealso cref="TextView_password">TextView_password</seealso>
			/// <seealso cref="TextView_phoneNumber">TextView_phoneNumber</seealso>
			/// <seealso cref="TextView_privateImeOptions">TextView_privateImeOptions</seealso>
			/// <seealso cref="TextView_scrollHorizontally">TextView_scrollHorizontally</seealso>
			/// <seealso cref="TextView_selectAllOnFocus">TextView_selectAllOnFocus</seealso>
			/// <seealso cref="TextView_shadowColor">TextView_shadowColor</seealso>
			/// <seealso cref="TextView_shadowDx">TextView_shadowDx</seealso>
			/// <seealso cref="TextView_shadowDy">TextView_shadowDy</seealso>
			/// <seealso cref="TextView_shadowRadius">TextView_shadowRadius</seealso>
			/// <seealso cref="TextView_singleLine">TextView_singleLine</seealso>
			/// <seealso cref="TextView_text">TextView_text</seealso>
			/// <seealso cref="TextView_textAllCaps">TextView_textAllCaps</seealso>
			/// <seealso cref="TextView_textAppearance">TextView_textAppearance</seealso>
			/// <seealso cref="TextView_textColor">TextView_textColor</seealso>
			/// <seealso cref="TextView_textColorHighlight">TextView_textColorHighlight</seealso>
			/// <seealso cref="TextView_textColorHint">TextView_textColorHint</seealso>
			/// <seealso cref="TextView_textColorLink">TextView_textColorLink</seealso>
			/// <seealso cref="TextView_textCursorDrawable">TextView_textCursorDrawable</seealso>
			/// <seealso cref="TextView_textEditNoPasteWindowLayout">TextView_textEditNoPasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="TextView_textEditPasteWindowLayout">TextView_textEditPasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="TextView_textEditSideNoPasteWindowLayout">TextView_textEditSideNoPasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="TextView_textEditSidePasteWindowLayout">TextView_textEditSidePasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="TextView_textEditSuggestionItemLayout">TextView_textEditSuggestionItemLayout
			/// 	</seealso>
			/// <seealso cref="TextView_textIsSelectable">TextView_textIsSelectable</seealso>
			/// <seealso cref="TextView_textScaleX">TextView_textScaleX</seealso>
			/// <seealso cref="TextView_textSelectHandle">TextView_textSelectHandle</seealso>
			/// <seealso cref="TextView_textSelectHandleLeft">TextView_textSelectHandleLeft</seealso>
			/// <seealso cref="TextView_textSelectHandleRight">TextView_textSelectHandleRight</seealso>
			/// <seealso cref="TextView_textSize">TextView_textSize</seealso>
			/// <seealso cref="TextView_textStyle">TextView_textStyle</seealso>
			/// <seealso cref="TextView_typeface">TextView_typeface</seealso>
			/// <seealso cref="TextView_width">TextView_width</seealso>
			public static readonly int[] TextView = new int[] { unchecked((int)(0x0101000e)), 
				unchecked((int)(0x01010034)), unchecked((int)(0x01010095)), unchecked((int)(0x01010096
				)), unchecked((int)(0x01010097)), unchecked((int)(0x01010098)), unchecked((int)(
				0x01010099)), unchecked((int)(0x0101009a)), unchecked((int)(0x0101009b)), unchecked(
				(int)(0x010100ab)), unchecked((int)(0x010100af)), unchecked((int)(0x010100b0)), 
				unchecked((int)(0x010100b1)), unchecked((int)(0x0101011f)), unchecked((int)(0x01010120
				)), unchecked((int)(0x0101013f)), unchecked((int)(0x01010140)), unchecked((int)(
				0x0101014e)), unchecked((int)(0x0101014f)), unchecked((int)(0x01010150)), unchecked(
				(int)(0x01010151)), unchecked((int)(0x01010152)), unchecked((int)(0x01010153)), 
				unchecked((int)(0x01010154)), unchecked((int)(0x01010155)), unchecked((int)(0x01010156
				)), unchecked((int)(0x01010157)), unchecked((int)(0x01010158)), unchecked((int)(
				0x01010159)), unchecked((int)(0x0101015a)), unchecked((int)(0x0101015b)), unchecked(
				(int)(0x0101015c)), unchecked((int)(0x0101015d)), unchecked((int)(0x0101015e)), 
				unchecked((int)(0x0101015f)), unchecked((int)(0x01010160)), unchecked((int)(0x01010161
				)), unchecked((int)(0x01010162)), unchecked((int)(0x01010163)), unchecked((int)(
				0x01010164)), unchecked((int)(0x01010165)), unchecked((int)(0x01010166)), unchecked(
				(int)(0x01010167)), unchecked((int)(0x01010168)), unchecked((int)(0x01010169)), 
				unchecked((int)(0x0101016a)), unchecked((int)(0x0101016b)), unchecked((int)(0x0101016c
				)), unchecked((int)(0x0101016d)), unchecked((int)(0x0101016e)), unchecked((int)(
				0x0101016f)), unchecked((int)(0x01010170)), unchecked((int)(0x01010171)), unchecked(
				(int)(0x01010217)), unchecked((int)(0x01010218)), unchecked((int)(0x0101021d)), 
				unchecked((int)(0x01010220)), unchecked((int)(0x01010223)), unchecked((int)(0x01010224
				)), unchecked((int)(0x01010264)), unchecked((int)(0x01010265)), unchecked((int)(
				0x01010266)), unchecked((int)(0x010102c5)), unchecked((int)(0x010102c6)), unchecked(
				(int)(0x010102c7)), unchecked((int)(0x01010314)), unchecked((int)(0x01010315)), 
				unchecked((int)(0x01010316)), unchecked((int)(0x0101035e)), unchecked((int)(0x0101035f
				)), unchecked((int)(0x01010362)), unchecked((int)(0x01010374)), unchecked((int)(
				0x0101038c)), unchecked((int)(0x01010392)), unchecked((int)(0x01010393)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Controls whether links such as urls and email addresses are
			/// automatically found and converted to clickable links.  The default
			/// value is "none", disabling this feature.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00</td><td> Match no patterns (default). </td></tr>
			/// <tr><td><code>web</code></td><td>0x01</td><td> Match Web URLs. </td></tr>
			/// <tr><td><code>email</code></td><td>0x02</td><td> Match email addresses. </td></tr>
			/// <tr><td><code>phone</code></td><td>0x04</td><td> Match phone numbers. </td></tr>
			/// <tr><td><code>map</code></td><td>0x08</td><td> Match map addresses. </td></tr>
			/// <tr><td><code>all</code></td><td>0x0f</td><td> Match all patterns (equivalent to web|email|phone|map). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoLink">android.R.attr.autoLink</see>
			/// .
			/// </attr>
			/// <attr>name android:autoLink</attr>
			public const int TextView_autoLink = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView has a textual input method
			/// and automatically corrects some common spelling errors.
			/// The default is "false".
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoText">android.R.attr.autoText</see>
			/// .
			/// </attr>
			/// <attr>name android:autoText</attr>
			[System.Obsolete]
			public const int TextView_autoText = 45;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Determines the minimum type that getText() will return.
			/// The default is "normal".
			/// Note that EditText and LogTextBox always return Editable,
			/// even if you specify something less powerful here.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td> Can return any CharSequence, possibly a
			/// Spanned one if the source text was Spanned. </td></tr>
			/// <tr><td><code>spannable</code></td><td>1</td><td> Can only return Spannable. </td></tr>
			/// <tr><td><code>editable</code></td><td>2</td><td> Can only return Spannable and Editable. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.bufferType">android.R.attr.bufferType</see>
			/// .
			/// </attr>
			/// <attr>name android:bufferType</attr>
			public const int TextView_bufferType = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView has a textual input method
			/// and should automatically capitalize what the user types.
			/// The default is "none".
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Don't automatically capitalize anything. </td></tr>
			/// <tr><td><code>sentences</code></td><td>1</td><td> Capitalize the first word of each sentence. </td></tr>
			/// <tr><td><code>words</code></td><td>2</td><td> Capitalize the first letter of every word. </td></tr>
			/// <tr><td><code>characters</code></td><td>3</td><td> Capitalize every character. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.capitalize">android.R.attr.capitalize</see>
			/// .
			/// </attr>
			/// <attr>name android:capitalize</attr>
			[System.Obsolete]
			public const int TextView_capitalize = 44;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the cursor visible (the default) or invisible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.cursorVisible">android.R.attr.cursorVisible</see>
			/// .
			/// </attr>
			/// <attr>name android:cursorVisible</attr>
			public const int TextView_cursorVisible = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView has a numeric input method
			/// and that these specific characters are the ones that it will
			/// accept.
			/// If this is set, numeric is implied to be true.
			/// The default is false.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.digits">android.R.attr.digits</see>
			/// .
			/// </attr>
			/// <attr>name android:digits</attr>
			public const int TextView_digits = 41;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to be drawn below the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawableBottom">android.R.attr.drawableBottom</see>
			/// .
			/// </attr>
			/// <attr>name android:drawableBottom</attr>
			public const int TextView_drawableBottom = 49;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to be drawn to the end of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawableEnd">android.R.attr.drawableEnd</see>
			/// .
			/// </attr>
			/// <attr>name android:drawableEnd</attr>
			public const int TextView_drawableEnd = 74;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to be drawn to the left of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawableLeft">android.R.attr.drawableLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:drawableLeft</attr>
			public const int TextView_drawableLeft = 50;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The padding between the drawables and the text.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawablePadding">android.R.attr.drawablePadding</see>
			/// .
			/// </attr>
			/// <attr>name android:drawablePadding</attr>
			public const int TextView_drawablePadding = 52;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to be drawn to the right of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawableRight">android.R.attr.drawableRight</see>
			/// .
			/// </attr>
			/// <attr>name android:drawableRight</attr>
			public const int TextView_drawableRight = 51;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to be drawn to the start of the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawableStart">android.R.attr.drawableStart</see>
			/// .
			/// </attr>
			/// <attr>name android:drawableStart</attr>
			public const int TextView_drawableStart = 73;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable to be drawn above the text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawableTop">android.R.attr.drawableTop</see>
			/// .
			/// </attr>
			/// <attr>name android:drawableTop</attr>
			public const int TextView_drawableTop = 48;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView has an input method.
			/// It will be a textual one unless it has otherwise been specified.
			/// For TextView, this is false by default.  For EditText, it is
			/// true by default.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.editable">android.R.attr.editable</see>
			/// .
			/// </attr>
			/// <attr>name android:editable</attr>
			[System.Obsolete]
			public const int TextView_editable = 46;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to an
			/// <see cref="android.R.styleable.InputExtras">&lt;input-extras&gt;</see>
			/// XML resource containing additional data to
			/// supply to an input method, which is private to the implementation
			/// of the input method.  This simply fills in
			/// the
			/// <see cref="android.view.inputmethod.EditorInfo.extras">EditorInfo.extras</see>
			/// field when the input
			/// method is connected.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.editorExtras">android.R.attr.editorExtras</see>
			/// .
			/// </attr>
			/// <attr>name android:editorExtras</attr>
			public const int TextView_editorExtras = 58;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, causes words that are longer than the view is wide
			/// to be ellipsized instead of broken in the middle.
			/// You will often also want to set scrollHorizontally or singleLine
			/// as well so that the text as a whole is also constrained to
			/// a single line instead of still allowed to be broken onto
			/// multiple lines.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>start</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>middle</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>end</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>marquee</code></td><td>4</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ellipsize">android.R.attr.ellipsize</see>
			/// .
			/// </attr>
			/// <attr>name android:ellipsize</attr>
			public const int TextView_ellipsize = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be exactly this many ems wide.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ems">android.R.attr.ems</see>
			/// .
			/// </attr>
			/// <attr>name android:ems</attr>
			public const int TextView_ems = 27;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies whether the TextView is enabled or not.
			/// <deprecated>Use state_enabled instead</deprecated>
			/// .
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.enabled">android.R.attr.enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:enabled</attr>
			[System.Obsolete]
			public const int TextView_enabled = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, the text view will include its current complete text
			/// inside of its frozen icicle in addition to meta-data such as
			/// the current cursor position.  By default this is disabled;
			/// it can be useful when the contents of a text view is not stored
			/// in a persistent place such as a content provider.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.freezesText">android.R.attr.freezesText</see>
			/// .
			/// </attr>
			/// <attr>name android:freezesText</attr>
			public const int TextView_freezesText = 47;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies how to align the text by the view's x- and/or y-axis
			/// when the text is smaller than the view.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
			/// <tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
			/// <tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
			/// <tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
			/// <tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
			/// <tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
			/// <tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
			/// <tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the vertical gravity: a top gravity will clip the bottom
			/// edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
			/// the child clipped to its container's bounds.
			/// The clip will be based on the horizontal gravity: a left gravity will clip the right
			/// edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
			/// <tr><td><code>start</code></td><td>0x00800003</td><td> Push object to the beginning of its container, not changing its size. </td></tr>
			/// <tr><td><code>end</code></td><td>0x00800005</td><td> Push object to the end of its container, not changing its size. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gravity">android.R.attr.gravity</see>
			/// .
			/// </attr>
			/// <attr>name android:gravity</attr>
			public const int TextView_gravity = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be exactly this many pixels tall.
			/// You could get the same effect by specifying this number in the
			/// layout parameters.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.height">android.R.attr.height</see>
			/// .
			/// </attr>
			/// <attr>name android:height</attr>
			public const int TextView_height = 24;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Hint text to display when the text is empty.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.hint">android.R.attr.hint</see>
			/// .
			/// </attr>
			/// <attr>name android:hint</attr>
			public const int TextView_hint = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply a value for
			/// <see cref="android.view.inputmethod.EditorInfo.actionId">EditorInfo.actionId</see>
			/// used when an input method is connected to the text view.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeActionId">android.R.attr.imeActionId</see>
			/// .
			/// </attr>
			/// <attr>name android:imeActionId</attr>
			public const int TextView_imeActionId = 61;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply a value for
			/// <see cref="android.view.inputmethod.EditorInfo.actionLabel">EditorInfo.actionLabel
			/// 	</see>
			/// used when an input method is connected to the text view.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeActionLabel">android.R.attr.imeActionLabel</see>
			/// .
			/// </attr>
			/// <attr>name android:imeActionLabel</attr>
			public const int TextView_imeActionLabel = 60;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Additional features you can enable in an IME associated with an editor
			/// to improve the integration with your application.  The constants
			/// here correspond to those defined by
			/// <see cref="android.view.inputmethod.EditorInfo.imeOptions">android.view.inputmethod.EditorInfo.imeOptions
			/// 	</see>
			/// .
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0x00000000</td><td> There are no special semantics associated with this editor. </td></tr>
			/// <tr><td><code>actionUnspecified</code></td><td>0x00000000</td><td> There is no specific action associated with this editor, let the
			/// editor come up with its own if it can.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_NULL">android.view.inputmethod.EditorInfo.IME_NULL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNone</code></td><td>0x00000001</td><td> This editor has no action associated with it.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NONE">android.view.inputmethod.EditorInfo.IME_ACTION_NONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionGo</code></td><td>0x00000002</td><td> The action key performs a "go"
			/// operation to take the user to the target of the text they typed.
			/// Typically used, for example, when entering a URL.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_GO">android.view.inputmethod.EditorInfo.IME_ACTION_GO
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSearch</code></td><td>0x00000003</td><td> The action key performs a "search"
			/// operation, taking the user to the results of searching for the text
			/// the have typed (in whatever context is appropriate).
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH">android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionSend</code></td><td>0x00000004</td><td> The action key performs a "send"
			/// operation, delivering the text to its target.  This is typically used
			/// when composing a message.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_SEND">android.view.inputmethod.EditorInfo.IME_ACTION_SEND
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionNext</code></td><td>0x00000005</td><td> The action key performs a "next"
			/// operation, taking the user to the next field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_NEXT">android.view.inputmethod.EditorInfo.IME_ACTION_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionDone</code></td><td>0x00000006</td><td> The action key performs a "done"
			/// operation, closing the soft input method.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_DONE">android.view.inputmethod.EditorInfo.IME_ACTION_DONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>actionPrevious</code></td><td>0x00000007</td><td> The action key performs a "previous"
			/// operation, taking the user to the previous field that will accept text.
			/// Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS">android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoFullscreen</code></td><td>0x2000000</td><td> Used to request that the IME never go
			/// into fullscreen mode.  Applications need to be aware that the flag is not
			/// a guarantee, and not all IMEs will respect it.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigatePrevious</code></td><td>0x4000000</td><td> Like flagNavigateNext, but
			/// specifies there is something interesting that a backward navigation
			/// can focus on.  If the user selects the IME's facility to backward
			/// navigate, this will show up in the application as an actionPrevious
			/// at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN">android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNavigateNext</code></td><td>0x8000000</td><td> Used to specify that there is something
			/// interesting that a forward navigation can focus on. This is like using
			/// actionNext, except allows the IME to be multiline (with
			/// an enter key) as well as provide forward navigation.  Note that some
			/// IMEs may not be able to do this, especially when running on a small
			/// screen where there is little space.  In that case it does not need to
			/// present a UI for this option.  Like actionNext, if the
			/// user selects the IME's facility to forward navigate, this will show up
			/// in the application at
			/// <see cref="android.view.inputmethod.InputConnection.performEditorAction(int)">InputConnection.performEditorAction(int)
			/// 	</see>
			/// .
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT">android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoExtractUi</code></td><td>0x10000000</td><td> Used to specify that the IME does not need
			/// to show its extracted text UI.  For input methods that may be fullscreen,
			/// often when in landscape mode, this allows them to be smaller and let part
			/// of the application be shown behind.  Though there will likely be limited
			/// access to the application available from the user, it can make the
			/// experience of a (mostly) fullscreen IME less jarring.  Note that when
			/// this flag is specified the IME may <em>not</em> be set up to be able
			/// to display text, so it should only be used in situations where this is
			/// not needed.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI">android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoAccessoryAction</code></td><td>0x20000000</td><td> Used in conjunction with a custom action, this indicates that the
			/// action should not be available as an accessory button when the
			/// input method is full-screen.
			/// Note that by setting this flag, there can be cases where the action
			/// is simply never available to the user.  Setting this generally means
			/// that you think showing text being edited is more important than the
			/// action you have supplied.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>flagNoEnterAction</code></td><td>0x40000000</td><td> Used in conjunction with a custom action,
			/// this indicates that the action should not be available in-line as
			/// a replacement for the "enter" key.  Typically this is
			/// because the action has such a significant impact or is not recoverable
			/// enough that accidentally hitting it should be avoided, such as sending
			/// a message.    Note that
			/// <see cref="android.widget.TextView">android.widget.TextView</see>
			/// will
			/// automatically set this flag for you on multi-line text views.
			/// <p>Corresponds to
			/// <see cref="android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION">android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imeOptions">android.R.attr.imeOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:imeOptions</attr>
			public const int TextView_imeOptions = 59;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Leave enough room for ascenders and descenders instead of
			/// using the font ascent and descent strictly.  (Normally true).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.includeFontPadding">android.R.attr.includeFontPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:includeFontPadding</attr>
			public const int TextView_includeFontPadding = 34;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView should use the specified
			/// input method (specified by fully-qualified class name).
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inputMethod">android.R.attr.inputMethod</see>
			/// .
			/// </attr>
			/// <attr>name android:inputMethod</attr>
			[System.Obsolete]
			public const int TextView_inputMethod = 43;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The type of data being placed in a text field, used to help an
			/// input method decide how to let the user enter text.  The constants
			/// here correspond to those defined by
			/// <see cref="android.text.InputType">android.text.InputType</see>
			/// .  Generally you can select
			/// a single value, though some can be combined together as
			/// indicated.  Setting this attribute to anything besides
			/// <var>none</var> also implies that the text is editable.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> There is no content type.  The text is not editable. </td></tr>
			/// <tr><td><code>text</code></td><td>0x00000001</td><td> Just plain old text.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_TEXT_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapCharacters</code></td><td>0x00001001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of all characters.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_CHARACTERS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapWords</code></td><td>0x00002001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every word.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_WORDS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textCapSentences</code></td><td>0x00004001</td><td> Can be combined with <var>text</var> and its variations to
			/// request capitalization of the first character of every sentence.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES">android.text.InputTypeClass.TYPE_TEXT_FLAG_CAP_SENTENCES
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoCorrect</code></td><td>0x00008001</td><td> Can be combined with <var>text</var> and its variations to
			/// request auto-correction of text being input.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_CORRECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textAutoComplete</code></td><td>0x00010001</td><td> Can be combined with <var>text</var> and its variations to
			/// specify that this field will be doing its own auto-completion and
			/// talking with the input method appropriately.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE">android.text.InputTypeClass.TYPE_TEXT_FLAG_AUTO_COMPLETE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textMultiLine</code></td><td>0x00020001</td><td> Can be combined with <var>text</var> and its variations to
			/// allow multiple lines of text in the field.  If this flag is not set,
			/// the text field will be constrained to a single line.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textImeMultiLine</code></td><td>0x00040001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that though the regular text view should not be multiple
			/// lines, the IME should provide multiple lines if it can.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE">android.text.InputTypeClass.TYPE_TEXT_FLAG_IME_MULTI_LINE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textNoSuggestions</code></td><td>0x00080001</td><td> Can be combined with <var>text</var> and its variations to
			/// indicate that the IME should not show any
			/// dictionary-based word suggestions.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS">android.text.InputTypeClass.TYPE_TEXT_FLAG_NO_SUGGESTIONS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textUri</code></td><td>0x00000011</td><td> Text that will be used as a URI.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI">android.text.InputTypeClass.TYPE_TEXT_VARIATION_URI
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailAddress</code></td><td>0x00000021</td><td> Text that will be used as an e-mail address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textEmailSubject</code></td><td>0x00000031</td><td> Text that is being supplied as the subject of an e-mail.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_EMAIL_SUBJECT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textShortMessage</code></td><td>0x00000041</td><td> Text that is the content of a short message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_SHORT_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textLongMessage</code></td><td>0x00000051</td><td> Text that is the content of a long message.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE">android.text.InputTypeClass.TYPE_TEXT_VARIATION_LONG_MESSAGE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPersonName</code></td><td>0x00000061</td><td> Text that is the name of a person.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PERSON_NAME
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPostalAddress</code></td><td>0x00000071</td><td> Text that is being supplied as a postal mailing address.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_POSTAL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPassword</code></td><td>0x00000081</td><td> Text that is a password.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textVisiblePassword</code></td><td>0x00000091</td><td> Text that is a password that should be visible.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEditText</code></td><td>0x000000a1</td><td> Text that is being supplied as text in a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textFilter</code></td><td>0x000000b1</td><td> Text that is filtering some other data.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER">android.text.InputTypeClass.TYPE_TEXT_VARIATION_FILTER
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textPhonetic</code></td><td>0x000000c1</td><td> Text that is for phonetic pronunciation, such as a phonetic name
			/// field in a contact entry.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC">android.text.InputTypeClass.TYPE_TEXT_VARIATION_PHONETIC
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebEmailAddress</code></td><td>0x000000d1</td><td> Text that will be used as an e-mail address on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>textWebPassword</code></td><td>0x000000e1</td><td> Text that will be used as a password on a web form.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_TEXT">android.text.InputTypeClass.TYPE_CLASS_TEXT
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD">android.text.InputTypeClass.TYPE_TEXT_VARIATION_WEB_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>number</code></td><td>0x00000002</td><td> A numeric only field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberSigned</code></td><td>0x00001002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a signed number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED">android.text.InputTypeClass.TYPE_NUMBER_FLAG_SIGNED
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberDecimal</code></td><td>0x00002002</td><td> Can be combined with <var>number</var> and its other options to
			/// allow a decimal (fractional) number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL">android.text.InputTypeClass.TYPE_NUMBER_FLAG_DECIMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>numberPassword</code></td><td>0x00000012</td><td> A numeric password field.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_NUMBER">android.text.InputTypeClass.TYPE_CLASS_NUMBER
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD">android.text.InputTypeClass.TYPE_NUMBER_VARIATION_PASSWORD
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>phone</code></td><td>0x00000003</td><td> For entering a phone number.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_PHONE">android.text.InputTypeClass.TYPE_CLASS_PHONE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>datetime</code></td><td>0x00000004</td><td> For entering a date and time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_NORMAL
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>date</code></td><td>0x00000014</td><td> For entering a date.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_DATE
			/// 	</see>
			/// . </td></tr>
			/// <tr><td><code>time</code></td><td>0x00000024</td><td> For entering a time.  Corresponds to
			/// <see cref="android.text.InputTypeClass.TYPE_CLASS_DATETIME">android.text.InputTypeClass.TYPE_CLASS_DATETIME
			/// 	</see>
			/// |
			/// <see cref="android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME">android.text.InputTypeClass.TYPE_DATETIME_VARIATION_TIME
			/// 	</see>
			/// . </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inputType">android.R.attr.inputType</see>
			/// .
			/// </attr>
			/// <attr>name android:inputType</attr>
			public const int TextView_inputType = 56;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Extra spacing between lines of text.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.lineSpacingExtra">android.R.attr.lineSpacingExtra</see>
			/// .
			/// </attr>
			/// <attr>name android:lineSpacingExtra</attr>
			public const int TextView_lineSpacingExtra = 53;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Extra spacing between lines of text, as a multiplier.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.lineSpacingMultiplier">android.R.attr.lineSpacingMultiplier
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:lineSpacingMultiplier</attr>
			public const int TextView_lineSpacingMultiplier = 54;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be exactly this many lines tall.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.lines">android.R.attr.lines</see>
			/// .
			/// </attr>
			/// <attr>name android:lines</attr>
			public const int TextView_lines = 23;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set to false, keeps the movement method from being set
			/// to the link movement method even if autoLink causes links
			/// to be found.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.linksClickable">android.R.attr.linksClickable</see>
			/// .
			/// </attr>
			/// <attr>name android:linksClickable</attr>
			public const int TextView_linksClickable = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The number of times to repeat the marquee animation. Only applied if the
			/// TextView has marquee enabled.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>marquee_forever</code></td><td>-1</td><td> Indicates that marquee should repeat indefinitely. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.marqueeRepeatLimit">android.R.attr.marqueeRepeatLimit</see>
			/// .
			/// </attr>
			/// <attr>name android:marqueeRepeatLimit</attr>
			public const int TextView_marqueeRepeatLimit = 55;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at most this many ems wide.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxEms">android.R.attr.maxEms</see>
			/// .
			/// </attr>
			/// <attr>name android:maxEms</attr>
			public const int TextView_maxEms = 26;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at most this many pixels tall.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxHeight">android.R.attr.maxHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:maxHeight</attr>
			public const int TextView_maxHeight = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set an input filter to constrain the text length to the
			/// specified number.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxLength">android.R.attr.maxLength</see>
			/// .
			/// </attr>
			/// <attr>name android:maxLength</attr>
			public const int TextView_maxLength = 35;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at most this many lines tall.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxLines">android.R.attr.maxLines</see>
			/// .
			/// </attr>
			/// <attr>name android:maxLines</attr>
			public const int TextView_maxLines = 22;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at most this many pixels wide.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.maxWidth">android.R.attr.maxWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:maxWidth</attr>
			public const int TextView_maxWidth = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at least this many ems wide.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minEms">android.R.attr.minEms</see>
			/// .
			/// </attr>
			/// <attr>name android:minEms</attr>
			public const int TextView_minEms = 29;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at least this many pixels tall.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minHeight">android.R.attr.minHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:minHeight</attr>
			public const int TextView_minHeight = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at least this many lines tall.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minLines">android.R.attr.minLines</see>
			/// .
			/// </attr>
			/// <attr>name android:minLines</attr>
			public const int TextView_minLines = 25;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be at least this many pixels wide.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minWidth">android.R.attr.minWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:minWidth</attr>
			public const int TextView_minWidth = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView has a numeric input method.
			/// The default is false.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>integer</code></td><td>0x01</td><td> Input is numeric. </td></tr>
			/// <tr><td><code>signed</code></td><td>0x003</td><td> Input is numeric, with sign allowed. </td></tr>
			/// <tr><td><code>decimal</code></td><td>0x05</td><td> Input is numeric, with decimals allowed. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.numeric">android.R.attr.numeric</see>
			/// .
			/// </attr>
			/// <attr>name android:numeric</attr>
			[System.Obsolete]
			public const int TextView_numeric = 40;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the characters of the field are displayed as
			/// password dots instead of themselves.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.password">android.R.attr.password</see>
			/// .
			/// </attr>
			/// <attr>name android:password</attr>
			[System.Obsolete]
			public const int TextView_password = 31;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If set, specifies that this TextView has a phone number input
			/// method. The default is false.
			/// <deprecated>Use inputType instead.</deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.phoneNumber">android.R.attr.phoneNumber</see>
			/// .
			/// </attr>
			/// <attr>name android:phoneNumber</attr>
			[System.Obsolete]
			public const int TextView_phoneNumber = 42;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// An addition content type description to supply to the input
			/// method attached to the text view, which is private to the
			/// implementation of the input method.  This simply fills in
			/// the
			/// <see cref="android.view.inputmethod.EditorInfo.privateImeOptions">EditorInfo.privateImeOptions
			/// 	</see>
			/// field when the input
			/// method is connected.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.privateImeOptions">android.R.attr.privateImeOptions</see>
			/// .
			/// </attr>
			/// <attr>name android:privateImeOptions</attr>
			public const int TextView_privateImeOptions = 57;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Whether the text is allowed to be wider than the view (and
			/// therefore can be scrolled horizontally).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollHorizontally">android.R.attr.scrollHorizontally</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollHorizontally</attr>
			public const int TextView_scrollHorizontally = 30;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If the text is selectable, select it all when the view takes
			/// focus instead of moving the cursor to the start or end.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.selectAllOnFocus">android.R.attr.selectAllOnFocus</see>
			/// .
			/// </attr>
			/// <attr>name android:selectAllOnFocus</attr>
			public const int TextView_selectAllOnFocus = 33;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Place a shadow of the specified color behind the text.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shadowColor">android.R.attr.shadowColor</see>
			/// .
			/// </attr>
			/// <attr>name android:shadowColor</attr>
			public const int TextView_shadowColor = 36;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Horizontal offset of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shadowDx">android.R.attr.shadowDx</see>
			/// .
			/// </attr>
			/// <attr>name android:shadowDx</attr>
			public const int TextView_shadowDx = 37;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Vertical offset of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shadowDy">android.R.attr.shadowDy</see>
			/// .
			/// </attr>
			/// <attr>name android:shadowDy</attr>
			public const int TextView_shadowDy = 38;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Radius of the shadow.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.shadowRadius">android.R.attr.shadowRadius</see>
			/// .
			/// </attr>
			/// <attr>name android:shadowRadius</attr>
			public const int TextView_shadowRadius = 39;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Constrains the text to a single horizontally scrolling line
			/// instead of letting it wrap onto multiple lines, and advances
			/// focus instead of inserting a newline when you press the
			/// enter key.  Note: for editable text views, it is better
			/// to control this using the textMultiLine flag in the inputType
			/// attribute.  (If both singleLine and inputType are supplied,
			/// the inputType flags will override the value of singleLine.)
			/// <deprecated>
			/// This attribute is deprecated and is replaced by the textMultiLine flag
			/// in the inputType attribute.  Use caution when altering existing layouts, as the
			/// default value of singeLine is false (multi-line mode), but if you specify any
			/// value for inputType, the default is single-line mode.  (If both singleLine and
			/// inputType attributes are found,  the inputType flags will override the value of
			/// singleLine.)
			/// </deprecated>
			/// 
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.singleLine">android.R.attr.singleLine</see>
			/// .
			/// </attr>
			/// <attr>name android:singleLine</attr>
			[System.Obsolete]
			public const int TextView_singleLine = 32;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text to display.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.text">android.R.attr.text</see>
			/// .
			/// </attr>
			/// <attr>name android:text</attr>
			public const int TextView_text = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Present the text in ALL CAPS. This may use a small-caps form when available.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAllCaps">android.R.attr.textAllCaps</see>
			/// .
			/// </attr>
			/// <attr>name android:textAllCaps</attr>
			public const int TextView_textAllCaps = 72;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Base text color, typeface, size, and style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearance">android.R.attr.textAppearance</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearance</attr>
			public const int TextView_textAppearance = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColor">android.R.attr.textColor</see>
			/// .
			/// </attr>
			/// <attr>name android:textColor</attr>
			public const int TextView_textColor = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the text selection highlight.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorHighlight">android.R.attr.textColorHighlight</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorHighlight</attr>
			public const int TextView_textColorHighlight = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of the hint text.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorHint">android.R.attr.textColorHint</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorHint</attr>
			public const int TextView_textColorHint = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color for links.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorLink">android.R.attr.textColorLink</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorLink</attr>
			public const int TextView_textColorLink = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be drawn under the insertion cursor.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textCursorDrawable">android.R.attr.textCursorDrawable</see>
			/// .
			/// </attr>
			/// <attr>name android:textCursorDrawable</attr>
			public const int TextView_textCursorDrawable = 70;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditNoPasteWindowLayout">android.R.attr.textEditNoPasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditNoPasteWindowLayout</attr>
			public const int TextView_textEditNoPasteWindowLayout = 66;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The layout of the view that is displayed on top of the cursor to paste inside a
			/// TextEdit field.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditPasteWindowLayout">android.R.attr.textEditPasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditPasteWindowLayout</attr>
			public const int TextView_textEditPasteWindowLayout = 65;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditSideNoPasteWindowLayout">android.R.attr.textEditSideNoPasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditSideNoPasteWindowLayout</attr>
			public const int TextView_textEditSideNoPasteWindowLayout = 69;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Used instead of textEditPasteWindowLayout when the window is moved on the side of the
			/// insertion cursor because it would be clipped if it were positioned on top.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditSidePasteWindowLayout">android.R.attr.textEditSidePasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditSidePasteWindowLayout</attr>
			public const int TextView_textEditSidePasteWindowLayout = 68;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Layout of the TextView item that will populate the suggestion popup window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditSuggestionItemLayout">android.R.attr.textEditSuggestionItemLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditSuggestionItemLayout</attr>
			public const int TextView_textEditSuggestionItemLayout = 71;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicates that the content of a non-editable text can be selected.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textIsSelectable">android.R.attr.textIsSelectable</see>
			/// .
			/// </attr>
			/// <attr>name android:textIsSelectable</attr>
			public const int TextView_textIsSelectable = 67;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the horizontal scaling factor for the text.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textScaleX">android.R.attr.textScaleX</see>
			/// .
			/// </attr>
			/// <attr>name android:textScaleX</attr>
			public const int TextView_textScaleX = 20;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be used to display a text selection
			/// anchor for positioning the cursor within text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandle">android.R.attr.textSelectHandle</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandle</attr>
			public const int TextView_textSelectHandle = 64;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the left side of a selection region.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandleLeft">android.R.attr.textSelectHandleLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandleLeft</attr>
			public const int TextView_textSelectHandleLeft = 62;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the right side of a selection region.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandleRight">android.R.attr.textSelectHandleRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandleRight</attr>
			public const int TextView_textSelectHandleRight = 63;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSize">android.R.attr.textSize</see>
			/// .
			/// </attr>
			/// <attr>name android:textSize</attr>
			public const int TextView_textSize = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Style (bold, italic, bolditalic) for the text.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>bold</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>italic</code></td><td>2</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textStyle">android.R.attr.textStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:textStyle</attr>
			public const int TextView_textStyle = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Typeface (normal, sans, serif, monospace) for the text.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>normal</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>sans</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>serif</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>monospace</code></td><td>3</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.typeface">android.R.attr.typeface</see>
			/// .
			/// </attr>
			/// <attr>name android:typeface</attr>
			public const int TextView_typeface = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Makes the TextView be exactly this many pixels wide.
			/// You could get the same effect by specifying this number in the
			/// layout parameters.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.width">android.R.attr.width</see>
			/// .
			/// </attr>
			/// <attr>name android:width</attr>
			public const int TextView_width = 28;

			/// <summary>Attributes that can be used with a TextViewAppearance.</summary>
			/// <remarks>
			/// Attributes that can be used with a TextViewAppearance.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TextViewAppearance_textAppearance">android:textAppearance</see>
			/// </code></td><td> Base text color, typeface, size, and style.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TextViewAppearance_textAppearance">TextViewAppearance_textAppearance
			/// 	</seealso>
			public static readonly int[] TextViewAppearance = new int[] { unchecked((int)(0x01010034
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Base text color, typeface, size, and style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearance">android.R.attr.textAppearance</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearance</attr>
			public const int TextViewAppearance_textAppearance = 0;

			/// <summary>Attributes that can be used with a TextViewMultiLineBackgroundState.</summary>
			/// <remarks>
			/// Attributes that can be used with a TextViewMultiLineBackgroundState.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TextViewMultiLineBackgroundState_state_multiline">android:state_multiline
			/// 	</see>
			/// </code></td><td> State identifier indicating a TextView has a multi-line layout.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TextViewMultiLineBackgroundState_state_multiline">TextViewMultiLineBackgroundState_state_multiline
			/// 	</seealso>
			public static readonly int[] TextViewMultiLineBackgroundState = new int[] { unchecked(
				(int)(0x0101034d)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State identifier indicating a TextView has a multi-line layout.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_multiline">android.R.attr.state_multiline</see>
			/// .
			/// </attr>
			/// <attr>name android:state_multiline</attr>
			public const int TextViewMultiLineBackgroundState_state_multiline = 0;

			/// <summary>These are the standard attributes that make up a complete theme.</summary>
			/// <remarks>
			/// These are the standard attributes that make up a complete theme.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Theme_absListViewStyle">android:absListViewStyle</see>
			/// </code></td><td> Default AbsListView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarDivider">android:actionBarDivider</see>
			/// </code></td><td> Custom divider drawable to use for elements in the action bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarItemBackground">android:actionBarItemBackground</see>
			/// </code></td><td> Custom item state list drawable background for action bar items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarSize">android:actionBarSize</see>
			/// </code></td><td> Size of the Action Bar, including the contextual
			/// bar used to present Action Modes.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarSplitStyle">android:actionBarSplitStyle</see>
			/// </code></td><td> Reference to a style for the split Action Bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarStyle">android:actionBarStyle</see>
			/// </code></td><td> Reference to a style for the Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarTabBarStyle">android:actionBarTabBarStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarTabStyle">android:actionBarTabStyle</see>
			/// </code></td><td> Default style for tabs within an action bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarTabTextStyle">android:actionBarTabTextStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionBarWidgetTheme">android:actionBarWidgetTheme</see>
			/// </code></td><td> Reference to a theme that should be used to inflate widgets
			/// and layouts destined for the action bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionButtonStyle">android:actionButtonStyle</see>
			/// </code></td><td> Default action button style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionDropDownStyle">android:actionDropDownStyle</see>
			/// </code></td><td> Default ActionBar dropdown style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionMenuTextAppearance">android:actionMenuTextAppearance</see>
			/// </code></td><td> TextAppearance style that will be applied to text that
			/// appears within action menu items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionMenuTextColor">android:actionMenuTextColor</see>
			/// </code></td><td> Color for text that appears within action menu items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeBackground">android:actionModeBackground</see>
			/// </code></td><td> Background drawable to use for action mode UI </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeCloseButtonStyle">android:actionModeCloseButtonStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeCloseDrawable">android:actionModeCloseDrawable</see>
			/// </code></td><td> Drawable to use for the close action mode button </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeCopyDrawable">android:actionModeCopyDrawable</see>
			/// </code></td><td> Drawable to use for the Copy action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeCutDrawable">android:actionModeCutDrawable</see>
			/// </code></td><td> Drawable to use for the Cut action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeFindDrawable">android:actionModeFindDrawable</see>
			/// </code></td><td> Drawable to use for the Find action button in WebView selection action modes </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModePasteDrawable">android:actionModePasteDrawable</see>
			/// </code></td><td> Drawable to use for the Paste action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModePopupWindowStyle">android:actionModePopupWindowStyle</see>
			/// </code></td><td> PopupWindow style to use for action modes when showing as a window overlay.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeSelectAllDrawable">android:actionModeSelectAllDrawable
			/// 	</see>
			/// </code></td><td> Drawable to use for the Select all action button in Contextual Action Bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeShareDrawable">android:actionModeShareDrawable</see>
			/// </code></td><td> Drawable to use for the Share action button in WebView selection action modes </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeSplitBackground">android:actionModeSplitBackground</see>
			/// </code></td><td> Background drawable to use for action mode UI in the lower split bar </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeStyle">android:actionModeStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionModeWebSearchDrawable">android:actionModeWebSearchDrawable
			/// 	</see>
			/// </code></td><td> Drawable to use for the Web Search action button in WebView selection action modes </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_actionOverflowButtonStyle">android:actionOverflowButtonStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_activatedBackgroundIndicator">android:activatedBackgroundIndicator
			/// 	</see>
			/// </code></td><td> Drawable used as a background for activated items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_activityChooserViewStyle">android:activityChooserViewStyle</see>
			/// </code></td><td> Default ActivityChooserView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_alertDialogButtonGroupStyle">android:alertDialogButtonGroupStyle
			/// 	</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_alertDialogCenterButtons">android:alertDialogCenterButtons</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_alertDialogIcon">android:alertDialogIcon</see>
			/// </code></td><td> Icon drawable to use for alerts </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_alertDialogStyle">android:alertDialogStyle</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_alertDialogTheme">android:alertDialogTheme</see>
			/// </code></td><td> Theme to use for alert dialogs spawned from this theme.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_autoCompleteTextViewStyle">android:autoCompleteTextViewStyle</see>
			/// </code></td><td> Default AutoCompleteTextView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_backgroundDimAmount">android:backgroundDimAmount</see>
			/// </code></td><td> Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_backgroundDimEnabled">android:backgroundDimEnabled</see>
			/// </code></td><td> Control whether dimming behind the window is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_borderlessButtonStyle">android:borderlessButtonStyle</see>
			/// </code></td><td> Style for buttons without an explicit border, often used in groups.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_buttonBarButtonStyle">android:buttonBarButtonStyle</see>
			/// </code></td><td> Style for buttons within button bars </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_buttonBarStyle">android:buttonBarStyle</see>
			/// </code></td><td> Style for button bars </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_buttonStyle">android:buttonStyle</see>
			/// </code></td><td> Normal Button style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_buttonStyleInset">android:buttonStyleInset</see>
			/// </code></td><td> Button style to inset into an EditText.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_buttonStyleSmall">android:buttonStyleSmall</see>
			/// </code></td><td> Small Button style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_buttonStyleToggle">android:buttonStyleToggle</see>
			/// </code></td><td> ToggleButton style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_calendarViewStyle">android:calendarViewStyle</see>
			/// </code></td><td> The CalendarView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_candidatesTextStyleSpans">android:candidatesTextStyleSpans</see>
			/// </code></td><td> A styled string, specifying the style to be used for showing
			/// inline candidate text when composing with an input method.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_checkBoxPreferenceStyle">android:checkBoxPreferenceStyle</see>
			/// </code></td><td> Default style for CheckBoxPreference.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_checkboxStyle">android:checkboxStyle</see>
			/// </code></td><td> Default Checkbox style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorActivatedHighlight">android:colorActivatedHighlight</see>
			/// </code></td><td> Default highlight color for items that are
			/// activated.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorBackground">android:colorBackground</see>
			/// </code></td><td> Color that matches (as closely as possible) the window background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorBackgroundCacheHint">android:colorBackgroundCacheHint</see>
			/// </code></td><td> This is a hint for a solid color that can be used for caching
			/// rendered views.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorFocusedHighlight">android:colorFocusedHighlight</see>
			/// </code></td><td> Default highlight color for items that are
			/// focused.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorForeground">android:colorForeground</see>
			/// </code></td><td> Default color of foreground imagery.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorForegroundInverse">android:colorForegroundInverse</see>
			/// </code></td><td> Default color of foreground imagery on an inverted background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorLongPressedHighlight">android:colorLongPressedHighlight</see>
			/// </code></td><td> Default highlight color for items that are long-pressed.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorMultiSelectHighlight">android:colorMultiSelectHighlight</see>
			/// </code></td><td> Default highlight color for items in multiple selection
			/// mode.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_colorPressedHighlight">android:colorPressedHighlight</see>
			/// </code></td><td> Default highlight color for items that are pressed.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_datePickerStyle">android:datePickerStyle</see>
			/// </code></td><td> The DatePicker style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_detailsElementBackground">android:detailsElementBackground</see>
			/// </code></td><td> Background that can be used behind parts of a UI that provide
			/// details on data the user is selecting.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dialogCustomTitleDecorLayout">android:dialogCustomTitleDecorLayout
			/// 	</see>
			/// </code></td><td> Window decor layout to use in dialog mode with custom titles </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dialogPreferenceStyle">android:dialogPreferenceStyle</see>
			/// </code></td><td> Default style for DialogPreference.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dialogTheme">android:dialogTheme</see>
			/// </code></td><td> Theme to use for dialogs spawned from this theme.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dialogTitleDecorLayout">android:dialogTitleDecorLayout</see>
			/// </code></td><td> Window decor layout to use in dialog mode with title only </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dialogTitleIconsDecorLayout">android:dialogTitleIconsDecorLayout
			/// 	</see>
			/// </code></td><td> Window decor layout to use in dialog mode with icons </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_disabledAlpha">android:disabledAlpha</see>
			/// </code></td><td> Default disabled alpha for widgets that set enabled/disabled alpha programmatically.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dividerHorizontal">android:dividerHorizontal</see>
			/// </code></td><td> Drawable to use for generic horizontal dividers.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dividerVertical">android:dividerVertical</see>
			/// </code></td><td> Drawable to use for generic vertical dividers.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dropDownHintAppearance">android:dropDownHintAppearance</see>
			/// </code></td><td> Default style for drop down hints.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dropDownItemStyle">android:dropDownItemStyle</see>
			/// </code></td><td> Default style for drop down items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dropDownListViewStyle">android:dropDownListViewStyle</see>
			/// </code></td><td> Default ListView style for drop downs.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dropDownSpinnerStyle">android:dropDownSpinnerStyle</see>
			/// </code></td><td> Default dropdown Spinner style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_dropdownListPreferredItemHeight">android:dropdownListPreferredItemHeight
			/// 	</see>
			/// </code></td><td> The preferred item height for dropdown lists.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_editTextBackground">android:editTextBackground</see>
			/// </code></td><td> EditText background drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_editTextColor">android:editTextColor</see>
			/// </code></td><td> EditText text foreground color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_editTextPreferenceStyle">android:editTextPreferenceStyle</see>
			/// </code></td><td> Default style for EditTextPreference.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_editTextStyle">android:editTextStyle</see>
			/// </code></td><td> Default EditText style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_errorMessageAboveBackground">android:errorMessageAboveBackground
			/// 	</see>
			/// </code></td><td> Background used instead of errorMessageBackground when the popup has to be above.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_errorMessageBackground">android:errorMessageBackground</see>
			/// </code></td><td> Popup text displayed in TextView when setError is used.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListPreferredChildIndicatorLeft">android:expandableListPreferredChildIndicatorLeft
			/// 	</see>
			/// </code></td><td> The preferred left bound for an expandable list child's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListPreferredChildIndicatorRight">android:expandableListPreferredChildIndicatorRight
			/// 	</see>
			/// </code></td><td> The preferred right bound for an expandable list child's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListPreferredChildPaddingLeft">android:expandableListPreferredChildPaddingLeft
			/// 	</see>
			/// </code></td><td> The preferred left padding for an expandable list item that is a child.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListPreferredItemIndicatorLeft">android:expandableListPreferredItemIndicatorLeft
			/// 	</see>
			/// </code></td><td> The preferred left bound for an expandable list item's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListPreferredItemIndicatorRight">android:expandableListPreferredItemIndicatorRight
			/// 	</see>
			/// </code></td><td> The preferred right bound for an expandable list item's indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListPreferredItemPaddingLeft">android:expandableListPreferredItemPaddingLeft
			/// 	</see>
			/// </code></td><td> The preferred left padding for an expandable list item (for child-specific layouts,
			/// use expandableListPreferredChildPaddingLeft).</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListViewStyle">android:expandableListViewStyle</see>
			/// </code></td><td> Default ExpandableListView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_expandableListViewWhiteStyle">android:expandableListViewWhiteStyle
			/// 	</see>
			/// </code></td><td> ExpandableListView with white background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_fastScrollOverlayPosition">android:fastScrollOverlayPosition</see>
			/// </code></td><td> Position of the fast scroll index overlay window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_fastScrollPreviewBackgroundLeft">android:fastScrollPreviewBackgroundLeft
			/// 	</see>
			/// </code></td><td> Drawable to use as the fast scroll index preview window background
			/// when shown on the left.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_fastScrollPreviewBackgroundRight">android:fastScrollPreviewBackgroundRight
			/// 	</see>
			/// </code></td><td> Drawable to use as the fast scroll index preview window background
			/// when shown on the right.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_fastScrollTextColor">android:fastScrollTextColor</see>
			/// </code></td><td> Text color for the fast scroll index overlay.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_fastScrollThumbDrawable">android:fastScrollThumbDrawable</see>
			/// </code></td><td> Drawable to use as the fast scroll thumb.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_fastScrollTrackDrawable">android:fastScrollTrackDrawable</see>
			/// </code></td><td> Drawable to use as the track for the fast scroll thumb.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_galleryItemBackground">android:galleryItemBackground</see>
			/// </code></td><td> The preferred background for gallery items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_galleryStyle">android:galleryStyle</see>
			/// </code></td><td> Default Gallery style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_gestureOverlayViewStyle">android:gestureOverlayViewStyle</see>
			/// </code></td><td> Default GestureOverlayView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_gridViewStyle">android:gridViewStyle</see>
			/// </code></td><td> Default GridView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_homeAsUpIndicator">android:homeAsUpIndicator</see>
			/// </code></td><td> Specifies a drawable to use for the 'home as up' indicator.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_horizontalScrollViewStyle">android:horizontalScrollViewStyle</see>
			/// </code></td><td> Default HorizontalScrollView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_imageButtonStyle">android:imageButtonStyle</see>
			/// </code></td><td> The style resource to use for an ImageButton.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_imageWellStyle">android:imageWellStyle</see>
			/// </code></td><td> The style resource to use for an ImageButton that is an image well.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listChoiceBackgroundIndicator">android:listChoiceBackgroundIndicator
			/// 	</see>
			/// </code></td><td> Drawable used as a background for selected list items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listChoiceIndicatorMultiple">android:listChoiceIndicatorMultiple
			/// 	</see>
			/// </code></td><td> Drawable to use for multiple choice indicators.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listChoiceIndicatorSingle">android:listChoiceIndicatorSingle</see>
			/// </code></td><td> Drawable to use for single choice indicators.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listDivider">android:listDivider</see>
			/// </code></td><td> The drawable for the list divider.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listDividerAlertDialog">android:listDividerAlertDialog</see>
			/// </code></td><td> The list divider used in alert dialogs.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listPopupWindowStyle">android:listPopupWindowStyle</see>
			/// </code></td><td> Default ListPopupWindow style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listPreferredItemHeight">android:listPreferredItemHeight</see>
			/// </code></td><td> The preferred list item height.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listPreferredItemHeightLarge">android:listPreferredItemHeightLarge
			/// 	</see>
			/// </code></td><td> A larger, more robust list item height.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listPreferredItemHeightSmall">android:listPreferredItemHeightSmall
			/// 	</see>
			/// </code></td><td> A smaller, sleeker list item height.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listPreferredItemPaddingLeft">android:listPreferredItemPaddingLeft
			/// 	</see>
			/// </code></td><td> The preferred padding along the left edge of list items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listPreferredItemPaddingRight">android:listPreferredItemPaddingRight
			/// 	</see>
			/// </code></td><td> The preferred padding along the right edge of list items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listSeparatorTextViewStyle">android:listSeparatorTextViewStyle</see>
			/// </code></td><td> TextView style for list separators.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listViewStyle">android:listViewStyle</see>
			/// </code></td><td> Default ListView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_listViewWhiteStyle">android:listViewWhiteStyle</see>
			/// </code></td><td> ListView with white background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_mapViewStyle">android:mapViewStyle</see>
			/// </code></td><td> Default MapView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_numberPickerDownButtonStyle">android:numberPickerDownButtonStyle
			/// 	</see>
			/// </code></td><td> NumberPicker down button style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_numberPickerInputTextStyle">android:numberPickerInputTextStyle</see>
			/// </code></td><td> NumberPicker input text style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_numberPickerStyle">android:numberPickerStyle</see>
			/// </code></td><td> NumberPicker style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_numberPickerUpButtonStyle">android:numberPickerUpButtonStyle</see>
			/// </code></td><td> NumberPicker up button style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelBackground">android:panelBackground</see>
			/// </code></td><td> The background of a panel when it is inset from the left and right edges of the screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelColorBackground">android:panelColorBackground</see>
			/// </code></td><td> Color that matches (as closely as possible) the panel background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelColorForeground">android:panelColorForeground</see>
			/// </code></td><td> Default color of foreground panel imagery.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelFullBackground">android:panelFullBackground</see>
			/// </code></td><td> The background of a panel when it extends to the left and right edges of the screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelMenuIsCompact">android:panelMenuIsCompact</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelMenuListTheme">android:panelMenuListTheme</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelMenuListWidth">android:panelMenuListWidth</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_panelTextAppearance">android:panelTextAppearance</see>
			/// </code></td><td> Default appearance of panel text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_pointerStyle">android:pointerStyle</see>
			/// </code></td><td> Reference to the Pointer style </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_popupMenuStyle">android:popupMenuStyle</see>
			/// </code></td><td> Default PopupMenu style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_popupWindowStyle">android:popupWindowStyle</see>
			/// </code></td><td> Default PopupWindow style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceCategoryStyle">android:preferenceCategoryStyle</see>
			/// </code></td><td> Default style for PreferenceCategory.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceFragmentStyle">android:preferenceFragmentStyle</see>
			/// </code></td><td> Default style for Headers pane in PreferenceActivity.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceFrameLayoutStyle">android:preferenceFrameLayoutStyle</see>
			/// </code></td><td> Preference frame layout styles.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceInformationStyle">android:preferenceInformationStyle</see>
			/// </code></td><td> Default style for informational Preference.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceLayoutChild">android:preferenceLayoutChild</see>
			/// </code></td><td> The preference layout that has the child/tabbed effect.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferencePanelStyle">android:preferencePanelStyle</see>
			/// </code></td><td> Preference panel style </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceScreenStyle">android:preferenceScreenStyle</see>
			/// </code></td><td> Default style for PreferenceScreen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_preferenceStyle">android:preferenceStyle</see>
			/// </code></td><td> Default style for Preference.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyle">android:progressBarStyle</see>
			/// </code></td><td> Default ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleHorizontal">android:progressBarStyleHorizontal</see>
			/// </code></td><td> Horizontal ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleInverse">android:progressBarStyleInverse</see>
			/// </code></td><td> Inverse ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleLarge">android:progressBarStyleLarge</see>
			/// </code></td><td> Large ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleLargeInverse">android:progressBarStyleLargeInverse
			/// 	</see>
			/// </code></td><td> Large inverse ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleSmall">android:progressBarStyleSmall</see>
			/// </code></td><td> Small ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleSmallInverse">android:progressBarStyleSmallInverse
			/// 	</see>
			/// </code></td><td> Small inverse ProgressBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_progressBarStyleSmallTitle">android:progressBarStyleSmallTitle</see>
			/// </code></td><td> Small ProgressBar in title style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeOverlay">android:quickContactBadgeOverlay</see>
			/// </code></td><td> Drawable used as an overlay on top of quickcontact photos.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeStyleSmallWindowLarge">android:quickContactBadgeStyleSmallWindowLarge
			/// 	</see>
			/// </code></td><td> Default quickcontact badge style with large quickcontact window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeStyleSmallWindowMedium">android:quickContactBadgeStyleSmallWindowMedium
			/// 	</see>
			/// </code></td><td> Default quickcontact badge style with medium quickcontact window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeStyleSmallWindowSmall">android:quickContactBadgeStyleSmallWindowSmall
			/// 	</see>
			/// </code></td><td> Default quickcontact badge style with small quickcontact window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeStyleWindowLarge">android:quickContactBadgeStyleWindowLarge
			/// 	</see>
			/// </code></td><td> Default quickcontact badge style with large quickcontact window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeStyleWindowMedium">android:quickContactBadgeStyleWindowMedium
			/// 	</see>
			/// </code></td><td> Default quickcontact badge style with medium quickcontact window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_quickContactBadgeStyleWindowSmall">android:quickContactBadgeStyleWindowSmall
			/// 	</see>
			/// </code></td><td> Default quickcontact badge style with small quickcontact window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_radioButtonStyle">android:radioButtonStyle</see>
			/// </code></td><td> Default RadioButton style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_ratingBarStyle">android:ratingBarStyle</see>
			/// </code></td><td> Default RatingBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_ratingBarStyleIndicator">android:ratingBarStyleIndicator</see>
			/// </code></td><td> Indicator RatingBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_ratingBarStyleSmall">android:ratingBarStyleSmall</see>
			/// </code></td><td> Small indicator RatingBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_ringtonePreferenceStyle">android:ringtonePreferenceStyle</see>
			/// </code></td><td> Default style for RingtonePreference.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_scrollViewStyle">android:scrollViewStyle</see>
			/// </code></td><td> Default ScrollView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchDialogTheme">android:searchDialogTheme</see>
			/// </code></td><td> Theme to use for Search Dialogs </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchDropdownBackground">android:searchDropdownBackground</see>
			/// </code></td><td> SearchView dropdown background </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchResultListItemHeight">android:searchResultListItemHeight</see>
			/// </code></td><td> The list item height for search results.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewCloseIcon">android:searchViewCloseIcon</see>
			/// </code></td><td> SearchView close button icon </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewEditQuery">android:searchViewEditQuery</see>
			/// </code></td><td> SearchView query refinement icon </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewEditQueryBackground">android:searchViewEditQueryBackground
			/// 	</see>
			/// </code></td><td> SearchView query refinement icon background </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewGoIcon">android:searchViewGoIcon</see>
			/// </code></td><td> SearchView Go button icon </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewSearchIcon">android:searchViewSearchIcon</see>
			/// </code></td><td> SearchView Search icon </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewTextField">android:searchViewTextField</see>
			/// </code></td><td> SearchView text field background for the left section </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewTextFieldRight">android:searchViewTextFieldRight</see>
			/// </code></td><td> SearchView text field background for the right section </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchViewVoiceIcon">android:searchViewVoiceIcon</see>
			/// </code></td><td> SearchView Voice button icon </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_searchWidgetCorpusItemBackground">android:searchWidgetCorpusItemBackground
			/// 	</see>
			/// </code></td><td> Search widget more corpus result item background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_seekBarStyle">android:seekBarStyle</see>
			/// </code></td><td> Default SeekBar style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_segmentedButtonStyle">android:segmentedButtonStyle</see>
			/// </code></td><td> Style for segmented buttons - a container that houses several buttons
			/// with the appearance of a singel button broken into segments.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_selectableItemBackground">android:selectableItemBackground</see>
			/// </code></td><td> Background drawable for standalone items that need focus/pressed states.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_spinnerDropDownItemStyle">android:spinnerDropDownItemStyle</see>
			/// </code></td><td> Default style for spinner drop down items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_spinnerItemStyle">android:spinnerItemStyle</see>
			/// </code></td><td> Default spinner item style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_spinnerStyle">android:spinnerStyle</see>
			/// </code></td><td> Default Spinner style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_stackViewStyle">android:stackViewStyle</see>
			/// </code></td><td> Default StackView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_starStyle">android:starStyle</see>
			/// </code></td><td> Default Star style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_switchPreferenceStyle">android:switchPreferenceStyle</see>
			/// </code></td><td> Default style for switch preferences.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_switchStyle">android:switchStyle</see>
			/// </code></td><td> Default style for the Switch widget.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_tabWidgetStyle">android:tabWidgetStyle</see>
			/// </code></td><td> Default TabWidget style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearance">android:textAppearance</see>
			/// </code></td><td> Default appearance of text: color, typeface, size, and style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceAutoCorrectionSuggestion">android:textAppearanceAutoCorrectionSuggestion
			/// 	</see>
			/// </code></td><td> The underline color and thickness for auto correction suggestion </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceButton">android:textAppearanceButton</see>
			/// </code></td><td> Text color, typeface, size, and style for the text inside of a button.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceEasyCorrectSuggestion">android:textAppearanceEasyCorrectSuggestion
			/// 	</see>
			/// </code></td><td> The underline color and thickness for easy correct suggestion </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceInverse">android:textAppearanceInverse</see>
			/// </code></td><td> Default appearance of text against an inverted background:
			/// color, typeface, size, and style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceLarge">android:textAppearanceLarge</see>
			/// </code></td><td> Text color, typeface, size, and style for "large" text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceLargeInverse">android:textAppearanceLargeInverse</see>
			/// </code></td><td> Text color, typeface, size, and style for "large" inverse text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceLargePopupMenu">android:textAppearanceLargePopupMenu
			/// 	</see>
			/// </code></td><td> Text color, typeface, size, and style for the text inside of a popup menu.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceListItem">android:textAppearanceListItem</see>
			/// </code></td><td> The preferred TextAppearance for the primary text of list items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceListItemSmall">android:textAppearanceListItemSmall
			/// 	</see>
			/// </code></td><td> The preferred TextAppearance for the primary text of small list items.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceMedium">android:textAppearanceMedium</see>
			/// </code></td><td> Text color, typeface, size, and style for "medium" text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceMediumInverse">android:textAppearanceMediumInverse
			/// 	</see>
			/// </code></td><td> Text color, typeface, size, and style for "medium" inverse text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceMisspelledSuggestion">android:textAppearanceMisspelledSuggestion
			/// 	</see>
			/// </code></td><td> The underline color and thickness for misspelled suggestion </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceSearchResultSubtitle">android:textAppearanceSearchResultSubtitle
			/// 	</see>
			/// </code></td><td> Text color, typeface, size, and style for system search result subtitle.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceSearchResultTitle">android:textAppearanceSearchResultTitle
			/// 	</see>
			/// </code></td><td> Text color, typeface, size, and style for system search result title.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceSmall">android:textAppearanceSmall</see>
			/// </code></td><td> Text color, typeface, size, and style for "small" text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceSmallInverse">android:textAppearanceSmallInverse</see>
			/// </code></td><td> Text color, typeface, size, and style for "small" inverse text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textAppearanceSmallPopupMenu">android:textAppearanceSmallPopupMenu
			/// 	</see>
			/// </code></td><td> Text color, typeface, size, and style for small text inside of a popup menu.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textCheckMark">android:textCheckMark</see>
			/// </code></td><td> Drawable to use for check marks.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textCheckMarkInverse">android:textCheckMarkInverse</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorAlertDialogListItem">android:textColorAlertDialogListItem
			/// 	</see>
			/// </code></td><td> Color of list item text in alert dialogs.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorHighlightInverse">android:textColorHighlightInverse</see>
			/// </code></td><td> Color of highlighted text, when used in a light theme.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorHintInverse">android:textColorHintInverse</see>
			/// </code></td><td> Inverse hint text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorLinkInverse">android:textColorLinkInverse</see>
			/// </code></td><td> Color of link text (URLs), when used in a light theme.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorPrimary">android:textColorPrimary</see>
			/// </code></td><td> The most prominent text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorPrimaryDisableOnly">android:textColorPrimaryDisableOnly
			/// 	</see>
			/// </code></td><td> Bright text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorPrimaryInverse">android:textColorPrimaryInverse</see>
			/// </code></td><td> Primary inverse text color, useful for inverted backgrounds.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorPrimaryInverseDisableOnly">android:textColorPrimaryInverseDisableOnly
			/// 	</see>
			/// </code></td><td> Bright inverse text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorPrimaryInverseNoDisable">android:textColorPrimaryInverseNoDisable
			/// 	</see>
			/// </code></td><td> Bright inverse text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorPrimaryNoDisable">android:textColorPrimaryNoDisable</see>
			/// </code></td><td> Bright text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorSearchUrl">android:textColorSearchUrl</see>
			/// </code></td><td> Text color for urls in search suggestions, used by things like global search and the browser.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorSecondary">android:textColorSecondary</see>
			/// </code></td><td> Secondary text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorSecondaryInverse">android:textColorSecondaryInverse</see>
			/// </code></td><td> Secondary inverse text color, useful for inverted backgrounds.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorSecondaryInverseNoDisable">android:textColorSecondaryInverseNoDisable
			/// 	</see>
			/// </code></td><td> Dim inverse text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorSecondaryNoDisable">android:textColorSecondaryNoDisable
			/// 	</see>
			/// </code></td><td> Dim text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorTertiary">android:textColorTertiary</see>
			/// </code></td><td> Tertiary text color.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textColorTertiaryInverse">android:textColorTertiaryInverse</see>
			/// </code></td><td> Tertiary inverse text color, useful for inverted backgrounds.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textEditNoPasteWindowLayout">android:textEditNoPasteWindowLayout
			/// 	</see>
			/// </code></td><td> Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textEditPasteWindowLayout">android:textEditPasteWindowLayout</see>
			/// </code></td><td> The layout of the view that is displayed on top of the cursor to paste inside a
			/// TextEdit field.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textEditSideNoPasteWindowLayout">android:textEditSideNoPasteWindowLayout
			/// 	</see>
			/// </code></td><td> Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textEditSidePasteWindowLayout">android:textEditSidePasteWindowLayout
			/// 	</see>
			/// </code></td><td> Used instead of textEditPasteWindowLayout when the window is moved on the side of the
			/// insertion cursor because it would be clipped if it were positioned on top.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textEditSuggestionItemLayout">android:textEditSuggestionItemLayout
			/// 	</see>
			/// </code></td><td> Layout of the TextView item that will populate the suggestion popup window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textSelectHandle">android:textSelectHandle</see>
			/// </code></td><td> Reference to a drawable that will be used to display a text selection
			/// anchor for positioning the cursor within text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textSelectHandleLeft">android:textSelectHandleLeft</see>
			/// </code></td><td> Reference to a drawable that will be used to display a text selection
			/// anchor on the left side of a selection region.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textSelectHandleRight">android:textSelectHandleRight</see>
			/// </code></td><td> Reference to a drawable that will be used to display a text selection
			/// anchor on the right side of a selection region.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textSelectHandleWindowStyle">android:textSelectHandleWindowStyle
			/// 	</see>
			/// </code></td><td> Reference to a style that will be used for the window containing a text
			/// selection anchor.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textSuggestionsWindowStyle">android:textSuggestionsWindowStyle</see>
			/// </code></td><td> Reference to a style that will be used for the window containing a list of possible
			/// text suggestions in an EditText.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textUnderlineColor">android:textUnderlineColor</see>
			/// </code></td><td>  The underline color </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textUnderlineThickness">android:textUnderlineThickness</see>
			/// </code></td><td>  The underline thickness </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_textViewStyle">android:textViewStyle</see>
			/// </code></td><td> Default TextView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_timePickerStyle">android:timePickerStyle</see>
			/// </code></td><td> The TimePicker style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_toastFrameBackground">android:toastFrameBackground</see>
			/// </code></td><td> Background to use for toasts </td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_webTextViewStyle">android:webTextViewStyle</see>
			/// </code></td><td> Default WebTextView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_webViewStyle">android:webViewStyle</see>
			/// </code></td><td> Default WebView style.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowActionBar">android:windowActionBar</see>
			/// </code></td><td> Flag indicating whether this window should have an Action Bar
			/// in place of the usual title bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowActionBarOverlay">android:windowActionBarOverlay</see>
			/// </code></td><td> Flag indicating whether this window's Action Bar should overlay
			/// application content.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowActionModeOverlay">android:windowActionModeOverlay</see>
			/// </code></td><td> Flag indicating whether action modes should overlay window content
			/// when there is not reserved space for their UI (such as an Action Bar).</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowAnimationStyle">android:windowAnimationStyle</see>
			/// </code></td><td> Reference to a style resource holding
			/// the set of window animations to use, which can be
			/// any of the attributes defined by
			/// <see cref="android.R.styleable.WindowAnimation">android.R.styleable.WindowAnimation
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowBackground">android:windowBackground</see>
			/// </code></td><td> Drawable to use as the overall window background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowCloseOnTouchOutside">android:windowCloseOnTouchOutside</see>
			/// </code></td><td> Control whether a container should automatically close itself if
			/// the user touches outside of it.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowContentOverlay">android:windowContentOverlay</see>
			/// </code></td><td> This Drawable is overlaid over the foreground of the Window's content area, usually
			/// to place a shadow below the title.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowDisablePreview">android:windowDisablePreview</see>
			/// </code></td><td> Flag allowing you to disable the preview animation for a window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowEnableSplitTouch">android:windowEnableSplitTouch</see>
			/// </code></td><td> Flag indicating that this window should allow touches to be split
			/// across other windows that also support split touch.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowFrame">android:windowFrame</see>
			/// </code></td><td> Drawable to use as a frame around the window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowFullscreen">android:windowFullscreen</see>
			/// </code></td><td> Flag indicating whether this window should fill the entire screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowIsFloating">android:windowIsFloating</see>
			/// </code></td><td> Flag indicating whether this is a floating window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowIsTranslucent">android:windowIsTranslucent</see>
			/// </code></td><td> Flag indicating whether this is a translucent window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowNoDisplay">android:windowNoDisplay</see>
			/// </code></td><td> Flag indicating that this window should not be displayed at all.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowNoTitle">android:windowNoTitle</see>
			/// </code></td><td> Flag indicating whether there should be no title on this window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowShowWallpaper">android:windowShowWallpaper</see>
			/// </code></td><td> Flag indicating that this window's background should be the
			/// user's current wallpaper.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowSoftInputMode">android:windowSoftInputMode</see>
			/// </code></td><td> Defines the default soft input state that this window would
			/// like when it is displayed.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowSplitActionBar">android:windowSplitActionBar</see>
			/// </code></td><td> Flag indicating that the action bar should be split to provide more
			/// room for elements.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowTitleBackgroundStyle">android:windowTitleBackgroundStyle</see>
			/// </code></td><td> The style resource to use for a window's title area.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowTitleSize">android:windowTitleSize</see>
			/// </code></td><td> The style resource to use for a window's title bar height.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_windowTitleStyle">android:windowTitleStyle</see>
			/// </code></td><td> The style resource to use for a window's title text.</td></tr>
			/// <tr><td><code>
			/// <see cref="Theme_yesNoPreferenceStyle">android:yesNoPreferenceStyle</see>
			/// </code></td><td> Default style for YesNoPreference.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Theme_absListViewStyle">Theme_absListViewStyle</seealso>
			/// <seealso cref="Theme_actionBarDivider">Theme_actionBarDivider</seealso>
			/// <seealso cref="Theme_actionBarItemBackground">Theme_actionBarItemBackground</seealso>
			/// <seealso cref="Theme_actionBarSize">Theme_actionBarSize</seealso>
			/// <seealso cref="Theme_actionBarSplitStyle">Theme_actionBarSplitStyle</seealso>
			/// <seealso cref="Theme_actionBarStyle">Theme_actionBarStyle</seealso>
			/// <seealso cref="Theme_actionBarTabBarStyle">Theme_actionBarTabBarStyle</seealso>
			/// <seealso cref="Theme_actionBarTabStyle">Theme_actionBarTabStyle</seealso>
			/// <seealso cref="Theme_actionBarTabTextStyle">Theme_actionBarTabTextStyle</seealso>
			/// <seealso cref="Theme_actionBarWidgetTheme">Theme_actionBarWidgetTheme</seealso>
			/// <seealso cref="Theme_actionButtonStyle">Theme_actionButtonStyle</seealso>
			/// <seealso cref="Theme_actionDropDownStyle">Theme_actionDropDownStyle</seealso>
			/// <seealso cref="Theme_actionMenuTextAppearance">Theme_actionMenuTextAppearance</seealso>
			/// <seealso cref="Theme_actionMenuTextColor">Theme_actionMenuTextColor</seealso>
			/// <seealso cref="Theme_actionModeBackground">Theme_actionModeBackground</seealso>
			/// <seealso cref="Theme_actionModeCloseButtonStyle">Theme_actionModeCloseButtonStyle
			/// 	</seealso>
			/// <seealso cref="Theme_actionModeCloseDrawable">Theme_actionModeCloseDrawable</seealso>
			/// <seealso cref="Theme_actionModeCopyDrawable">Theme_actionModeCopyDrawable</seealso>
			/// <seealso cref="Theme_actionModeCutDrawable">Theme_actionModeCutDrawable</seealso>
			/// <seealso cref="Theme_actionModeFindDrawable">Theme_actionModeFindDrawable</seealso>
			/// <seealso cref="Theme_actionModePasteDrawable">Theme_actionModePasteDrawable</seealso>
			/// <seealso cref="Theme_actionModePopupWindowStyle">Theme_actionModePopupWindowStyle
			/// 	</seealso>
			/// <seealso cref="Theme_actionModeSelectAllDrawable">Theme_actionModeSelectAllDrawable
			/// 	</seealso>
			/// <seealso cref="Theme_actionModeShareDrawable">Theme_actionModeShareDrawable</seealso>
			/// <seealso cref="Theme_actionModeSplitBackground">Theme_actionModeSplitBackground</seealso>
			/// <seealso cref="Theme_actionModeStyle">Theme_actionModeStyle</seealso>
			/// <seealso cref="Theme_actionModeWebSearchDrawable">Theme_actionModeWebSearchDrawable
			/// 	</seealso>
			/// <seealso cref="Theme_actionOverflowButtonStyle">Theme_actionOverflowButtonStyle</seealso>
			/// <seealso cref="Theme_activatedBackgroundIndicator">Theme_activatedBackgroundIndicator
			/// 	</seealso>
			/// <seealso cref="Theme_activityChooserViewStyle">Theme_activityChooserViewStyle</seealso>
			/// <seealso cref="Theme_alertDialogButtonGroupStyle">Theme_alertDialogButtonGroupStyle
			/// 	</seealso>
			/// <seealso cref="Theme_alertDialogCenterButtons">Theme_alertDialogCenterButtons</seealso>
			/// <seealso cref="Theme_alertDialogIcon">Theme_alertDialogIcon</seealso>
			/// <seealso cref="Theme_alertDialogStyle">Theme_alertDialogStyle</seealso>
			/// <seealso cref="Theme_alertDialogTheme">Theme_alertDialogTheme</seealso>
			/// <seealso cref="Theme_autoCompleteTextViewStyle">Theme_autoCompleteTextViewStyle</seealso>
			/// <seealso cref="Theme_backgroundDimAmount">Theme_backgroundDimAmount</seealso>
			/// <seealso cref="Theme_backgroundDimEnabled">Theme_backgroundDimEnabled</seealso>
			/// <seealso cref="Theme_borderlessButtonStyle">Theme_borderlessButtonStyle</seealso>
			/// <seealso cref="Theme_buttonBarButtonStyle">Theme_buttonBarButtonStyle</seealso>
			/// <seealso cref="Theme_buttonBarStyle">Theme_buttonBarStyle</seealso>
			/// <seealso cref="Theme_buttonStyle">Theme_buttonStyle</seealso>
			/// <seealso cref="Theme_buttonStyleInset">Theme_buttonStyleInset</seealso>
			/// <seealso cref="Theme_buttonStyleSmall">Theme_buttonStyleSmall</seealso>
			/// <seealso cref="Theme_buttonStyleToggle">Theme_buttonStyleToggle</seealso>
			/// <seealso cref="Theme_calendarViewStyle">Theme_calendarViewStyle</seealso>
			/// <seealso cref="Theme_candidatesTextStyleSpans">Theme_candidatesTextStyleSpans</seealso>
			/// <seealso cref="Theme_checkBoxPreferenceStyle">Theme_checkBoxPreferenceStyle</seealso>
			/// <seealso cref="Theme_checkboxStyle">Theme_checkboxStyle</seealso>
			/// <seealso cref="Theme_colorActivatedHighlight">Theme_colorActivatedHighlight</seealso>
			/// <seealso cref="Theme_colorBackground">Theme_colorBackground</seealso>
			/// <seealso cref="Theme_colorBackgroundCacheHint">Theme_colorBackgroundCacheHint</seealso>
			/// <seealso cref="Theme_colorFocusedHighlight">Theme_colorFocusedHighlight</seealso>
			/// <seealso cref="Theme_colorForeground">Theme_colorForeground</seealso>
			/// <seealso cref="Theme_colorForegroundInverse">Theme_colorForegroundInverse</seealso>
			/// <seealso cref="Theme_colorLongPressedHighlight">Theme_colorLongPressedHighlight</seealso>
			/// <seealso cref="Theme_colorMultiSelectHighlight">Theme_colorMultiSelectHighlight</seealso>
			/// <seealso cref="Theme_colorPressedHighlight">Theme_colorPressedHighlight</seealso>
			/// <seealso cref="Theme_datePickerStyle">Theme_datePickerStyle</seealso>
			/// <seealso cref="Theme_detailsElementBackground">Theme_detailsElementBackground</seealso>
			/// <seealso cref="Theme_dialogCustomTitleDecorLayout">Theme_dialogCustomTitleDecorLayout
			/// 	</seealso>
			/// <seealso cref="Theme_dialogPreferenceStyle">Theme_dialogPreferenceStyle</seealso>
			/// <seealso cref="Theme_dialogTheme">Theme_dialogTheme</seealso>
			/// <seealso cref="Theme_dialogTitleDecorLayout">Theme_dialogTitleDecorLayout</seealso>
			/// <seealso cref="Theme_dialogTitleIconsDecorLayout">Theme_dialogTitleIconsDecorLayout
			/// 	</seealso>
			/// <seealso cref="Theme_disabledAlpha">Theme_disabledAlpha</seealso>
			/// <seealso cref="Theme_dividerHorizontal">Theme_dividerHorizontal</seealso>
			/// <seealso cref="Theme_dividerVertical">Theme_dividerVertical</seealso>
			/// <seealso cref="Theme_dropDownHintAppearance">Theme_dropDownHintAppearance</seealso>
			/// <seealso cref="Theme_dropDownItemStyle">Theme_dropDownItemStyle</seealso>
			/// <seealso cref="Theme_dropDownListViewStyle">Theme_dropDownListViewStyle</seealso>
			/// <seealso cref="Theme_dropDownSpinnerStyle">Theme_dropDownSpinnerStyle</seealso>
			/// <seealso cref="Theme_dropdownListPreferredItemHeight">Theme_dropdownListPreferredItemHeight
			/// 	</seealso>
			/// <seealso cref="Theme_editTextBackground">Theme_editTextBackground</seealso>
			/// <seealso cref="Theme_editTextColor">Theme_editTextColor</seealso>
			/// <seealso cref="Theme_editTextPreferenceStyle">Theme_editTextPreferenceStyle</seealso>
			/// <seealso cref="Theme_editTextStyle">Theme_editTextStyle</seealso>
			/// <seealso cref="Theme_errorMessageAboveBackground">Theme_errorMessageAboveBackground
			/// 	</seealso>
			/// <seealso cref="Theme_errorMessageBackground">Theme_errorMessageBackground</seealso>
			/// <seealso cref="Theme_expandableListPreferredChildIndicatorLeft">Theme_expandableListPreferredChildIndicatorLeft
			/// 	</seealso>
			/// <seealso cref="Theme_expandableListPreferredChildIndicatorRight">Theme_expandableListPreferredChildIndicatorRight
			/// 	</seealso>
			/// <seealso cref="Theme_expandableListPreferredChildPaddingLeft">Theme_expandableListPreferredChildPaddingLeft
			/// 	</seealso>
			/// <seealso cref="Theme_expandableListPreferredItemIndicatorLeft">Theme_expandableListPreferredItemIndicatorLeft
			/// 	</seealso>
			/// <seealso cref="Theme_expandableListPreferredItemIndicatorRight">Theme_expandableListPreferredItemIndicatorRight
			/// 	</seealso>
			/// <seealso cref="Theme_expandableListPreferredItemPaddingLeft">Theme_expandableListPreferredItemPaddingLeft
			/// 	</seealso>
			/// <seealso cref="Theme_expandableListViewStyle">Theme_expandableListViewStyle</seealso>
			/// <seealso cref="Theme_expandableListViewWhiteStyle">Theme_expandableListViewWhiteStyle
			/// 	</seealso>
			/// <seealso cref="Theme_fastScrollOverlayPosition">Theme_fastScrollOverlayPosition</seealso>
			/// <seealso cref="Theme_fastScrollPreviewBackgroundLeft">Theme_fastScrollPreviewBackgroundLeft
			/// 	</seealso>
			/// <seealso cref="Theme_fastScrollPreviewBackgroundRight">Theme_fastScrollPreviewBackgroundRight
			/// 	</seealso>
			/// <seealso cref="Theme_fastScrollTextColor">Theme_fastScrollTextColor</seealso>
			/// <seealso cref="Theme_fastScrollThumbDrawable">Theme_fastScrollThumbDrawable</seealso>
			/// <seealso cref="Theme_fastScrollTrackDrawable">Theme_fastScrollTrackDrawable</seealso>
			/// <seealso cref="Theme_galleryItemBackground">Theme_galleryItemBackground</seealso>
			/// <seealso cref="Theme_galleryStyle">Theme_galleryStyle</seealso>
			/// <seealso cref="Theme_gestureOverlayViewStyle">Theme_gestureOverlayViewStyle</seealso>
			/// <seealso cref="Theme_gridViewStyle">Theme_gridViewStyle</seealso>
			/// <seealso cref="Theme_homeAsUpIndicator">Theme_homeAsUpIndicator</seealso>
			/// <seealso cref="Theme_horizontalScrollViewStyle">Theme_horizontalScrollViewStyle</seealso>
			/// <seealso cref="Theme_imageButtonStyle">Theme_imageButtonStyle</seealso>
			/// <seealso cref="Theme_imageWellStyle">Theme_imageWellStyle</seealso>
			/// <seealso cref="Theme_listChoiceBackgroundIndicator">Theme_listChoiceBackgroundIndicator
			/// 	</seealso>
			/// <seealso cref="Theme_listChoiceIndicatorMultiple">Theme_listChoiceIndicatorMultiple
			/// 	</seealso>
			/// <seealso cref="Theme_listChoiceIndicatorSingle">Theme_listChoiceIndicatorSingle</seealso>
			/// <seealso cref="Theme_listDivider">Theme_listDivider</seealso>
			/// <seealso cref="Theme_listDividerAlertDialog">Theme_listDividerAlertDialog</seealso>
			/// <seealso cref="Theme_listPopupWindowStyle">Theme_listPopupWindowStyle</seealso>
			/// <seealso cref="Theme_listPreferredItemHeight">Theme_listPreferredItemHeight</seealso>
			/// <seealso cref="Theme_listPreferredItemHeightLarge">Theme_listPreferredItemHeightLarge
			/// 	</seealso>
			/// <seealso cref="Theme_listPreferredItemHeightSmall">Theme_listPreferredItemHeightSmall
			/// 	</seealso>
			/// <seealso cref="Theme_listPreferredItemPaddingLeft">Theme_listPreferredItemPaddingLeft
			/// 	</seealso>
			/// <seealso cref="Theme_listPreferredItemPaddingRight">Theme_listPreferredItemPaddingRight
			/// 	</seealso>
			/// <seealso cref="Theme_listSeparatorTextViewStyle">Theme_listSeparatorTextViewStyle
			/// 	</seealso>
			/// <seealso cref="Theme_listViewStyle">Theme_listViewStyle</seealso>
			/// <seealso cref="Theme_listViewWhiteStyle">Theme_listViewWhiteStyle</seealso>
			/// <seealso cref="Theme_mapViewStyle">Theme_mapViewStyle</seealso>
			/// <seealso cref="Theme_numberPickerDownButtonStyle">Theme_numberPickerDownButtonStyle
			/// 	</seealso>
			/// <seealso cref="Theme_numberPickerInputTextStyle">Theme_numberPickerInputTextStyle
			/// 	</seealso>
			/// <seealso cref="Theme_numberPickerStyle">Theme_numberPickerStyle</seealso>
			/// <seealso cref="Theme_numberPickerUpButtonStyle">Theme_numberPickerUpButtonStyle</seealso>
			/// <seealso cref="Theme_panelBackground">Theme_panelBackground</seealso>
			/// <seealso cref="Theme_panelColorBackground">Theme_panelColorBackground</seealso>
			/// <seealso cref="Theme_panelColorForeground">Theme_panelColorForeground</seealso>
			/// <seealso cref="Theme_panelFullBackground">Theme_panelFullBackground</seealso>
			/// <seealso cref="Theme_panelMenuIsCompact">Theme_panelMenuIsCompact</seealso>
			/// <seealso cref="Theme_panelMenuListTheme">Theme_panelMenuListTheme</seealso>
			/// <seealso cref="Theme_panelMenuListWidth">Theme_panelMenuListWidth</seealso>
			/// <seealso cref="Theme_panelTextAppearance">Theme_panelTextAppearance</seealso>
			/// <seealso cref="Theme_pointerStyle">Theme_pointerStyle</seealso>
			/// <seealso cref="Theme_popupMenuStyle">Theme_popupMenuStyle</seealso>
			/// <seealso cref="Theme_popupWindowStyle">Theme_popupWindowStyle</seealso>
			/// <seealso cref="Theme_preferenceCategoryStyle">Theme_preferenceCategoryStyle</seealso>
			/// <seealso cref="Theme_preferenceFragmentStyle">Theme_preferenceFragmentStyle</seealso>
			/// <seealso cref="Theme_preferenceFrameLayoutStyle">Theme_preferenceFrameLayoutStyle
			/// 	</seealso>
			/// <seealso cref="Theme_preferenceInformationStyle">Theme_preferenceInformationStyle
			/// 	</seealso>
			/// <seealso cref="Theme_preferenceLayoutChild">Theme_preferenceLayoutChild</seealso>
			/// <seealso cref="Theme_preferencePanelStyle">Theme_preferencePanelStyle</seealso>
			/// <seealso cref="Theme_preferenceScreenStyle">Theme_preferenceScreenStyle</seealso>
			/// <seealso cref="Theme_preferenceStyle">Theme_preferenceStyle</seealso>
			/// <seealso cref="Theme_progressBarStyle">Theme_progressBarStyle</seealso>
			/// <seealso cref="Theme_progressBarStyleHorizontal">Theme_progressBarStyleHorizontal
			/// 	</seealso>
			/// <seealso cref="Theme_progressBarStyleInverse">Theme_progressBarStyleInverse</seealso>
			/// <seealso cref="Theme_progressBarStyleLarge">Theme_progressBarStyleLarge</seealso>
			/// <seealso cref="Theme_progressBarStyleLargeInverse">Theme_progressBarStyleLargeInverse
			/// 	</seealso>
			/// <seealso cref="Theme_progressBarStyleSmall">Theme_progressBarStyleSmall</seealso>
			/// <seealso cref="Theme_progressBarStyleSmallInverse">Theme_progressBarStyleSmallInverse
			/// 	</seealso>
			/// <seealso cref="Theme_progressBarStyleSmallTitle">Theme_progressBarStyleSmallTitle
			/// 	</seealso>
			/// <seealso cref="Theme_quickContactBadgeOverlay">Theme_quickContactBadgeOverlay</seealso>
			/// <seealso cref="Theme_quickContactBadgeStyleSmallWindowLarge">Theme_quickContactBadgeStyleSmallWindowLarge
			/// 	</seealso>
			/// <seealso cref="Theme_quickContactBadgeStyleSmallWindowMedium">Theme_quickContactBadgeStyleSmallWindowMedium
			/// 	</seealso>
			/// <seealso cref="Theme_quickContactBadgeStyleSmallWindowSmall">Theme_quickContactBadgeStyleSmallWindowSmall
			/// 	</seealso>
			/// <seealso cref="Theme_quickContactBadgeStyleWindowLarge">Theme_quickContactBadgeStyleWindowLarge
			/// 	</seealso>
			/// <seealso cref="Theme_quickContactBadgeStyleWindowMedium">Theme_quickContactBadgeStyleWindowMedium
			/// 	</seealso>
			/// <seealso cref="Theme_quickContactBadgeStyleWindowSmall">Theme_quickContactBadgeStyleWindowSmall
			/// 	</seealso>
			/// <seealso cref="Theme_radioButtonStyle">Theme_radioButtonStyle</seealso>
			/// <seealso cref="Theme_ratingBarStyle">Theme_ratingBarStyle</seealso>
			/// <seealso cref="Theme_ratingBarStyleIndicator">Theme_ratingBarStyleIndicator</seealso>
			/// <seealso cref="Theme_ratingBarStyleSmall">Theme_ratingBarStyleSmall</seealso>
			/// <seealso cref="Theme_ringtonePreferenceStyle">Theme_ringtonePreferenceStyle</seealso>
			/// <seealso cref="Theme_scrollViewStyle">Theme_scrollViewStyle</seealso>
			/// <seealso cref="Theme_searchDialogTheme">Theme_searchDialogTheme</seealso>
			/// <seealso cref="Theme_searchDropdownBackground">Theme_searchDropdownBackground</seealso>
			/// <seealso cref="Theme_searchResultListItemHeight">Theme_searchResultListItemHeight
			/// 	</seealso>
			/// <seealso cref="Theme_searchViewCloseIcon">Theme_searchViewCloseIcon</seealso>
			/// <seealso cref="Theme_searchViewEditQuery">Theme_searchViewEditQuery</seealso>
			/// <seealso cref="Theme_searchViewEditQueryBackground">Theme_searchViewEditQueryBackground
			/// 	</seealso>
			/// <seealso cref="Theme_searchViewGoIcon">Theme_searchViewGoIcon</seealso>
			/// <seealso cref="Theme_searchViewSearchIcon">Theme_searchViewSearchIcon</seealso>
			/// <seealso cref="Theme_searchViewTextField">Theme_searchViewTextField</seealso>
			/// <seealso cref="Theme_searchViewTextFieldRight">Theme_searchViewTextFieldRight</seealso>
			/// <seealso cref="Theme_searchViewVoiceIcon">Theme_searchViewVoiceIcon</seealso>
			/// <seealso cref="Theme_searchWidgetCorpusItemBackground">Theme_searchWidgetCorpusItemBackground
			/// 	</seealso>
			/// <seealso cref="Theme_seekBarStyle">Theme_seekBarStyle</seealso>
			/// <seealso cref="Theme_segmentedButtonStyle">Theme_segmentedButtonStyle</seealso>
			/// <seealso cref="Theme_selectableItemBackground">Theme_selectableItemBackground</seealso>
			/// <seealso cref="Theme_spinnerDropDownItemStyle">Theme_spinnerDropDownItemStyle</seealso>
			/// <seealso cref="Theme_spinnerItemStyle">Theme_spinnerItemStyle</seealso>
			/// <seealso cref="Theme_spinnerStyle">Theme_spinnerStyle</seealso>
			/// <seealso cref="Theme_stackViewStyle">Theme_stackViewStyle</seealso>
			/// <seealso cref="Theme_starStyle">Theme_starStyle</seealso>
			/// <seealso cref="Theme_switchPreferenceStyle">Theme_switchPreferenceStyle</seealso>
			/// <seealso cref="Theme_switchStyle">Theme_switchStyle</seealso>
			/// <seealso cref="Theme_tabWidgetStyle">Theme_tabWidgetStyle</seealso>
			/// <seealso cref="Theme_textAppearance">Theme_textAppearance</seealso>
			/// <seealso cref="Theme_textAppearanceAutoCorrectionSuggestion">Theme_textAppearanceAutoCorrectionSuggestion
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceButton">Theme_textAppearanceButton</seealso>
			/// <seealso cref="Theme_textAppearanceEasyCorrectSuggestion">Theme_textAppearanceEasyCorrectSuggestion
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceInverse">Theme_textAppearanceInverse</seealso>
			/// <seealso cref="Theme_textAppearanceLarge">Theme_textAppearanceLarge</seealso>
			/// <seealso cref="Theme_textAppearanceLargeInverse">Theme_textAppearanceLargeInverse
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceLargePopupMenu">Theme_textAppearanceLargePopupMenu
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceListItem">Theme_textAppearanceListItem</seealso>
			/// <seealso cref="Theme_textAppearanceListItemSmall">Theme_textAppearanceListItemSmall
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceMedium">Theme_textAppearanceMedium</seealso>
			/// <seealso cref="Theme_textAppearanceMediumInverse">Theme_textAppearanceMediumInverse
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceMisspelledSuggestion">Theme_textAppearanceMisspelledSuggestion
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceSearchResultSubtitle">Theme_textAppearanceSearchResultSubtitle
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceSearchResultTitle">Theme_textAppearanceSearchResultTitle
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceSmall">Theme_textAppearanceSmall</seealso>
			/// <seealso cref="Theme_textAppearanceSmallInverse">Theme_textAppearanceSmallInverse
			/// 	</seealso>
			/// <seealso cref="Theme_textAppearanceSmallPopupMenu">Theme_textAppearanceSmallPopupMenu
			/// 	</seealso>
			/// <seealso cref="Theme_textCheckMark">Theme_textCheckMark</seealso>
			/// <seealso cref="Theme_textCheckMarkInverse">Theme_textCheckMarkInverse</seealso>
			/// <seealso cref="Theme_textColorAlertDialogListItem">Theme_textColorAlertDialogListItem
			/// 	</seealso>
			/// <seealso cref="Theme_textColorHighlightInverse">Theme_textColorHighlightInverse</seealso>
			/// <seealso cref="Theme_textColorHintInverse">Theme_textColorHintInverse</seealso>
			/// <seealso cref="Theme_textColorLinkInverse">Theme_textColorLinkInverse</seealso>
			/// <seealso cref="Theme_textColorPrimary">Theme_textColorPrimary</seealso>
			/// <seealso cref="Theme_textColorPrimaryDisableOnly">Theme_textColorPrimaryDisableOnly
			/// 	</seealso>
			/// <seealso cref="Theme_textColorPrimaryInverse">Theme_textColorPrimaryInverse</seealso>
			/// <seealso cref="Theme_textColorPrimaryInverseDisableOnly">Theme_textColorPrimaryInverseDisableOnly
			/// 	</seealso>
			/// <seealso cref="Theme_textColorPrimaryInverseNoDisable">Theme_textColorPrimaryInverseNoDisable
			/// 	</seealso>
			/// <seealso cref="Theme_textColorPrimaryNoDisable">Theme_textColorPrimaryNoDisable</seealso>
			/// <seealso cref="Theme_textColorSearchUrl">Theme_textColorSearchUrl</seealso>
			/// <seealso cref="Theme_textColorSecondary">Theme_textColorSecondary</seealso>
			/// <seealso cref="Theme_textColorSecondaryInverse">Theme_textColorSecondaryInverse</seealso>
			/// <seealso cref="Theme_textColorSecondaryInverseNoDisable">Theme_textColorSecondaryInverseNoDisable
			/// 	</seealso>
			/// <seealso cref="Theme_textColorSecondaryNoDisable">Theme_textColorSecondaryNoDisable
			/// 	</seealso>
			/// <seealso cref="Theme_textColorTertiary">Theme_textColorTertiary</seealso>
			/// <seealso cref="Theme_textColorTertiaryInverse">Theme_textColorTertiaryInverse</seealso>
			/// <seealso cref="Theme_textEditNoPasteWindowLayout">Theme_textEditNoPasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="Theme_textEditPasteWindowLayout">Theme_textEditPasteWindowLayout</seealso>
			/// <seealso cref="Theme_textEditSideNoPasteWindowLayout">Theme_textEditSideNoPasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="Theme_textEditSidePasteWindowLayout">Theme_textEditSidePasteWindowLayout
			/// 	</seealso>
			/// <seealso cref="Theme_textEditSuggestionItemLayout">Theme_textEditSuggestionItemLayout
			/// 	</seealso>
			/// <seealso cref="Theme_textSelectHandle">Theme_textSelectHandle</seealso>
			/// <seealso cref="Theme_textSelectHandleLeft">Theme_textSelectHandleLeft</seealso>
			/// <seealso cref="Theme_textSelectHandleRight">Theme_textSelectHandleRight</seealso>
			/// <seealso cref="Theme_textSelectHandleWindowStyle">Theme_textSelectHandleWindowStyle
			/// 	</seealso>
			/// <seealso cref="Theme_textSuggestionsWindowStyle">Theme_textSuggestionsWindowStyle
			/// 	</seealso>
			/// <seealso cref="Theme_textUnderlineColor">Theme_textUnderlineColor</seealso>
			/// <seealso cref="Theme_textUnderlineThickness">Theme_textUnderlineThickness</seealso>
			/// <seealso cref="Theme_textViewStyle">Theme_textViewStyle</seealso>
			/// <seealso cref="Theme_timePickerStyle">Theme_timePickerStyle</seealso>
			/// <seealso cref="Theme_toastFrameBackground">Theme_toastFrameBackground</seealso>
			/// <seealso cref="Theme_webTextViewStyle">Theme_webTextViewStyle</seealso>
			/// <seealso cref="Theme_webViewStyle">Theme_webViewStyle</seealso>
			/// <seealso cref="Theme_windowActionBar">Theme_windowActionBar</seealso>
			/// <seealso cref="Theme_windowActionBarOverlay">Theme_windowActionBarOverlay</seealso>
			/// <seealso cref="Theme_windowActionModeOverlay">Theme_windowActionModeOverlay</seealso>
			/// <seealso cref="Theme_windowAnimationStyle">Theme_windowAnimationStyle</seealso>
			/// <seealso cref="Theme_windowBackground">Theme_windowBackground</seealso>
			/// <seealso cref="Theme_windowCloseOnTouchOutside">Theme_windowCloseOnTouchOutside</seealso>
			/// <seealso cref="Theme_windowContentOverlay">Theme_windowContentOverlay</seealso>
			/// <seealso cref="Theme_windowDisablePreview">Theme_windowDisablePreview</seealso>
			/// <seealso cref="Theme_windowEnableSplitTouch">Theme_windowEnableSplitTouch</seealso>
			/// <seealso cref="Theme_windowFrame">Theme_windowFrame</seealso>
			/// <seealso cref="Theme_windowFullscreen">Theme_windowFullscreen</seealso>
			/// <seealso cref="Theme_windowIsFloating">Theme_windowIsFloating</seealso>
			/// <seealso cref="Theme_windowIsTranslucent">Theme_windowIsTranslucent</seealso>
			/// <seealso cref="Theme_windowNoDisplay">Theme_windowNoDisplay</seealso>
			/// <seealso cref="Theme_windowNoTitle">Theme_windowNoTitle</seealso>
			/// <seealso cref="Theme_windowShowWallpaper">Theme_windowShowWallpaper</seealso>
			/// <seealso cref="Theme_windowSoftInputMode">Theme_windowSoftInputMode</seealso>
			/// <seealso cref="Theme_windowSplitActionBar">Theme_windowSplitActionBar</seealso>
			/// <seealso cref="Theme_windowTitleBackgroundStyle">Theme_windowTitleBackgroundStyle
			/// 	</seealso>
			/// <seealso cref="Theme_windowTitleSize">Theme_windowTitleSize</seealso>
			/// <seealso cref="Theme_windowTitleStyle">Theme_windowTitleStyle</seealso>
			/// <seealso cref="Theme_yesNoPreferenceStyle">Theme_yesNoPreferenceStyle</seealso>
			public static readonly int[] Theme = new int[] { unchecked((int)(0x01010030)), unchecked(
				(int)(0x01010031)), unchecked((int)(0x01010032)), unchecked((int)(0x01010033)), 
				unchecked((int)(0x01010034)), unchecked((int)(0x01010035)), unchecked((int)(0x01010036
				)), unchecked((int)(0x01010037)), unchecked((int)(0x01010038)), unchecked((int)(
				0x01010039)), unchecked((int)(0x0101003a)), unchecked((int)(0x0101003b)), unchecked(
				(int)(0x0101003c)), unchecked((int)(0x0101003d)), unchecked((int)(0x0101003e)), 
				unchecked((int)(0x0101003f)), unchecked((int)(0x01010040)), unchecked((int)(0x01010041
				)), unchecked((int)(0x01010042)), unchecked((int)(0x01010043)), unchecked((int)(
				0x01010044)), unchecked((int)(0x01010045)), unchecked((int)(0x01010046)), unchecked(
				(int)(0x01010047)), unchecked((int)(0x01010048)), unchecked((int)(0x01010049)), 
				unchecked((int)(0x0101004a)), unchecked((int)(0x0101004b)), unchecked((int)(0x0101004c
				)), unchecked((int)(0x0101004d)), unchecked((int)(0x0101004e)), unchecked((int)(
				0x0101004f)), unchecked((int)(0x01010050)), unchecked((int)(0x01010051)), unchecked(
				(int)(0x01010052)), unchecked((int)(0x01010053)), unchecked((int)(0x01010054)), 
				unchecked((int)(0x01010055)), unchecked((int)(0x01010056)), unchecked((int)(0x01010057
				)), unchecked((int)(0x01010058)), unchecked((int)(0x01010059)), unchecked((int)(
				0x0101005a)), unchecked((int)(0x0101005b)), unchecked((int)(0x0101005c)), unchecked(
				(int)(0x0101005d)), unchecked((int)(0x0101005e)), unchecked((int)(0x0101005f)), 
				unchecked((int)(0x01010060)), unchecked((int)(0x01010061)), unchecked((int)(0x01010062
				)), unchecked((int)(0x0101006a)), unchecked((int)(0x0101006b)), unchecked((int)(
				0x0101006c)), unchecked((int)(0x0101006d)), unchecked((int)(0x0101006e)), unchecked(
				(int)(0x0101006f)), unchecked((int)(0x01010070)), unchecked((int)(0x01010071)), 
				unchecked((int)(0x01010072)), unchecked((int)(0x01010073)), unchecked((int)(0x01010074
				)), unchecked((int)(0x01010075)), unchecked((int)(0x01010076)), unchecked((int)(
				0x01010077)), unchecked((int)(0x01010078)), unchecked((int)(0x01010079)), unchecked(
				(int)(0x0101007a)), unchecked((int)(0x0101007b)), unchecked((int)(0x0101007c)), 
				unchecked((int)(0x0101007d)), unchecked((int)(0x0101007e)), unchecked((int)(0x01010080
				)), unchecked((int)(0x01010081)), unchecked((int)(0x01010082)), unchecked((int)(
				0x01010083)), unchecked((int)(0x01010084)), unchecked((int)(0x01010085)), unchecked(
				(int)(0x01010086)), unchecked((int)(0x01010087)), unchecked((int)(0x01010088)), 
				unchecked((int)(0x01010089)), unchecked((int)(0x0101008a)), unchecked((int)(0x0101008b
				)), unchecked((int)(0x0101008c)), unchecked((int)(0x0101008d)), unchecked((int)(
				0x0101008e)), unchecked((int)(0x0101008f)), unchecked((int)(0x01010090)), unchecked(
				(int)(0x01010091)), unchecked((int)(0x01010092)), unchecked((int)(0x01010093)), 
				unchecked((int)(0x01010094)), unchecked((int)(0x010100ae)), unchecked((int)(0x01010206
				)), unchecked((int)(0x01010207)), unchecked((int)(0x01010208)), unchecked((int)(
				0x0101020d)), unchecked((int)(0x0101020f)), unchecked((int)(0x01010210)), unchecked(
				(int)(0x01010212)), unchecked((int)(0x01010213)), unchecked((int)(0x01010214)), 
				unchecked((int)(0x01010219)), unchecked((int)(0x0101021a)), unchecked((int)(0x0101021e
				)), unchecked((int)(0x0101021f)), unchecked((int)(0x01010222)), unchecked((int)(
				0x0101022b)), unchecked((int)(0x01010230)), unchecked((int)(0x01010267)), unchecked(
				(int)(0x01010287)), unchecked((int)(0x01010288)), unchecked((int)(0x01010289)), 
				unchecked((int)(0x0101028b)), unchecked((int)(0x01010292)), unchecked((int)(0x010102a0
				)), unchecked((int)(0x010102a1)), unchecked((int)(0x010102ab)), unchecked((int)(
				0x010102ae)), unchecked((int)(0x010102af)), unchecked((int)(0x010102b0)), unchecked(
				(int)(0x010102b1)), unchecked((int)(0x010102b2)), unchecked((int)(0x010102b3)), 
				unchecked((int)(0x010102b6)), unchecked((int)(0x010102b9)), unchecked((int)(0x010102c5
				)), unchecked((int)(0x010102c6)), unchecked((int)(0x010102c7)), unchecked((int)(
				0x010102c8)), unchecked((int)(0x010102cd)), unchecked((int)(0x010102ce)), unchecked(
				(int)(0x010102d6)), unchecked((int)(0x010102d7)), unchecked((int)(0x010102d8)), 
				unchecked((int)(0x010102db)), unchecked((int)(0x010102dc)), unchecked((int)(0x010102dd
				)), unchecked((int)(0x010102e4)), unchecked((int)(0x010102eb)), unchecked((int)(
				0x010102f0)), unchecked((int)(0x010102f3)), unchecked((int)(0x010102f4)), unchecked(
				(int)(0x010102f5)), unchecked((int)(0x010102f6)), unchecked((int)(0x010102f7)), 
				unchecked((int)(0x010102fd)), unchecked((int)(0x010102ff)), unchecked((int)(0x01010300
				)), unchecked((int)(0x01010301)), unchecked((int)(0x01010302)), unchecked((int)(
				0x01010305)), unchecked((int)(0x01010306)), unchecked((int)(0x01010308)), unchecked(
				(int)(0x01010309)), unchecked((int)(0x0101030a)), unchecked((int)(0x0101030b)), 
				unchecked((int)(0x0101030e)), unchecked((int)(0x01010311)), unchecked((int)(0x01010312
				)), unchecked((int)(0x01010313)), unchecked((int)(0x01010314)), unchecked((int)(
				0x01010315)), unchecked((int)(0x01010317)), unchecked((int)(0x0101032b)), unchecked(
				(int)(0x0101032c)), unchecked((int)(0x0101032e)), unchecked((int)(0x0101032f)), 
				unchecked((int)(0x01010330)), unchecked((int)(0x01010336)), unchecked((int)(0x01010337
				)), unchecked((int)(0x01010338)), unchecked((int)(0x01010339)), unchecked((int)(
				0x0101033a)), unchecked((int)(0x0101034e)), unchecked((int)(0x0101034f)), unchecked(
				(int)(0x01010350)), unchecked((int)(0x01010351)), unchecked((int)(0x01010352)), 
				unchecked((int)(0x01010353)), unchecked((int)(0x01010355)), unchecked((int)(0x01010359
				)), unchecked((int)(0x0101035b)), unchecked((int)(0x0101035c)), unchecked((int)(
				0x0101035d)), unchecked((int)(0x0101035e)), unchecked((int)(0x0101035f)), unchecked(
				(int)(0x01010360)), unchecked((int)(0x01010361)), unchecked((int)(0x0101036d)), 
				unchecked((int)(0x01010373)), unchecked((int)(0x01010374)), unchecked((int)(0x0101037e
				)), unchecked((int)(0x01010386)), unchecked((int)(0x01010387)), unchecked((int)(
				0x01010388)), unchecked((int)(0x0101038d)), unchecked((int)(0x0101038e)), unchecked(
				(int)(0x0101038f)), unchecked((int)(0x01010390)), unchecked((int)(0x01010391)), 
				unchecked((int)(0x01010394)), unchecked((int)(0x01010397)), unchecked((int)(0x0101039b
				)), unchecked((int)(0x0101039c)), unchecked((int)(0x0101039d)), unchecked((int)(
				0x0101039e)), unchecked((int)(0x0101039f)), unchecked((int)(0x010103a3)), unchecked(
				(int)(0x010103a4)), unchecked((int)(0x010103a7)), unchecked((int)(0x010103a8)), 
				unchecked((int)(0x010103a9)), unchecked((int)(0x010103aa)), unchecked((int)(0x010103ab
				)), unchecked((int)(0x010103ac)), unchecked((int)(0x010103ad)), unchecked((int)(
				0x010103ae)), unchecked((int)(0x010103af)), unchecked((int)(0x010103b0)), unchecked(
				(int)(0x010103b1)), unchecked((int)(0x010103b2)), unchecked((int)(0x010103b3)), 
				unchecked((int)(0x010103b4)), unchecked((int)(0x010103b5)), unchecked((int)(0x010103b6
				)), unchecked((int)(0x010103b7)), unchecked((int)(0x010103b8)), unchecked((int)(
				0x010103b9)), unchecked((int)(0x010103ba)), unchecked((int)(0x010103bb)), unchecked(
				(int)(0x010103bc)), unchecked((int)(0x010103bd)), unchecked((int)(0x010103be)), 
				unchecked((int)(0x010103bf)), unchecked((int)(0x010103c0)), unchecked((int)(0x010103c1
				)), unchecked((int)(0x010103c2)), unchecked((int)(0x010103c3)), unchecked((int)(
				0x010103c4)), unchecked((int)(0x010103c5)), unchecked((int)(0x010103c6)), unchecked(
				(int)(0x010103c7)), unchecked((int)(0x010103c8)), unchecked((int)(0x010103c9)), 
				unchecked((int)(0x010103ca)), unchecked((int)(0x010103cb)), unchecked((int)(0x010103cc
				)), unchecked((int)(0x010103cd)), unchecked((int)(0x010103ce)), unchecked((int)(
				0x010103cf)), unchecked((int)(0x010103d0)), unchecked((int)(0x010103d1)), unchecked(
				(int)(0x010103d2)), unchecked((int)(0x010103d3)), unchecked((int)(0x010103d4)), 
				unchecked((int)(0x010103d5)), unchecked((int)(0x010103d6)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default AbsListView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.absListViewStyle">android.R.attr.absListViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:absListViewStyle</attr>
			public const int Theme_absListViewStyle = 51;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Custom divider drawable to use for elements in the action bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarDivider">android.R.attr.actionBarDivider</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarDivider</attr>
			public const int Theme_actionBarDivider = 204;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Custom item state list drawable background for action bar items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarItemBackground">android.R.attr.actionBarItemBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarItemBackground</attr>
			public const int Theme_actionBarItemBackground = 205;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Size of the Action Bar, including the contextual
			/// bar used to present Action Modes.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>wrap_content</code></td><td>0</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarSize">android.R.attr.actionBarSize</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarSize</attr>
			public const int Theme_actionBarSize = 140;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a style for the split Action Bar. This style
			/// controls the split component that holds the menu/action
			/// buttons. actionBarStyle is still used for the primary
			/// bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarSplitStyle">android.R.attr.actionBarSplitStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarSplitStyle</attr>
			public const int Theme_actionBarSplitStyle = 196;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a style for the Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarStyle">android.R.attr.actionBarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarStyle</attr>
			public const int Theme_actionBarStyle = 132;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.actionBarTabBarStyle">android.R.attr.actionBarTabBarStyle
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:actionBarTabBarStyle</attr>
			public const int Theme_actionBarTabBarStyle = 143;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for tabs within an action bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarTabStyle">android.R.attr.actionBarTabStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarTabStyle</attr>
			public const int Theme_actionBarTabStyle = 142;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.actionBarTabTextStyle">android.R.attr.actionBarTabTextStyle
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:actionBarTabTextStyle</attr>
			public const int Theme_actionBarTabTextStyle = 144;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a theme that should be used to inflate widgets
			/// and layouts destined for the action bar. Most of the time
			/// this will be a reference to the current theme, but when
			/// the action bar has a significantly different contrast
			/// profile than the rest of the activity the difference
			/// can become important. If this is set to @null the current
			/// theme will be used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionBarWidgetTheme">android.R.attr.actionBarWidgetTheme
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionBarWidgetTheme</attr>
			public const int Theme_actionBarWidgetTheme = 203;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default action button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionButtonStyle">android.R.attr.actionButtonStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:actionButtonStyle</attr>
			public const int Theme_actionButtonStyle = 135;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ActionBar dropdown style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionDropDownStyle">android.R.attr.actionDropDownStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionDropDownStyle</attr>
			public const int Theme_actionDropDownStyle = 134;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// TextAppearance style that will be applied to text that
			/// appears within action menu items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionMenuTextAppearance">android.R.attr.actionMenuTextAppearance
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionMenuTextAppearance</attr>
			public const int Theme_actionMenuTextAppearance = 188;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color for text that appears within action menu items.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionMenuTextColor">android.R.attr.actionMenuTextColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionMenuTextColor</attr>
			public const int Theme_actionMenuTextColor = 189;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background drawable to use for action mode UI
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeBackground">android.R.attr.actionModeBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeBackground</attr>
			public const int Theme_actionModeBackground = 136;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.actionModeCloseButtonStyle">android.R.attr.actionModeCloseButtonStyle
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:actionModeCloseButtonStyle</attr>
			public const int Theme_actionModeCloseButtonStyle = 146;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the close action mode button
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeCloseDrawable">android.R.attr.actionModeCloseDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeCloseDrawable</attr>
			public const int Theme_actionModeCloseDrawable = 137;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Copy action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeCopyDrawable">android.R.attr.actionModeCopyDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeCopyDrawable</attr>
			public const int Theme_actionModeCopyDrawable = 160;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Cut action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeCutDrawable">android.R.attr.actionModeCutDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeCutDrawable</attr>
			public const int Theme_actionModeCutDrawable = 159;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Find action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:actionModeFindDrawable</attr>
			public const int Theme_actionModeFindDrawable = 237;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Paste action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModePasteDrawable">android.R.attr.actionModePasteDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModePasteDrawable</attr>
			public const int Theme_actionModePasteDrawable = 161;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// PopupWindow style to use for action modes when showing as a window overlay.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:actionModePopupWindowStyle</attr>
			public const int Theme_actionModePopupWindowStyle = 239;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Select all action button in Contextual Action Bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeSelectAllDrawable">android.R.attr.actionModeSelectAllDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeSelectAllDrawable</attr>
			public const int Theme_actionModeSelectAllDrawable = 193;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Share action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:actionModeShareDrawable</attr>
			public const int Theme_actionModeShareDrawable = 236;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background drawable to use for action mode UI in the lower split bar
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.actionModeSplitBackground">android.R.attr.actionModeSplitBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:actionModeSplitBackground</attr>
			public const int Theme_actionModeSplitBackground = 206;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.actionModeStyle">android.R.attr.actionModeStyle</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:actionModeStyle</attr>
			public const int Theme_actionModeStyle = 202;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for the Web Search action button in WebView selection action modes
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:actionModeWebSearchDrawable</attr>
			public const int Theme_actionModeWebSearchDrawable = 238;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.actionOverflowButtonStyle">android.R.attr.actionOverflowButtonStyle
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:actionOverflowButtonStyle</attr>
			public const int Theme_actionOverflowButtonStyle = 145;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used as a background for activated items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.activatedBackgroundIndicator">android.R.attr.activatedBackgroundIndicator
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:activatedBackgroundIndicator</attr>
			public const int Theme_activatedBackgroundIndicator = 147;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ActivityChooserView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:activityChooserViewStyle</attr>
			public const int Theme_activityChooserViewStyle = 235;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.alertDialogButtonGroupStyle">attr.alertDialogButtonGroupStyle</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:alertDialogButtonGroupStyle</attr>
			public const int Theme_alertDialogButtonGroupStyle = 222;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.alertDialogCenterButtons">attr.alertDialogCenterButtons</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:alertDialogCenterButtons</attr>
			public const int Theme_alertDialogCenterButtons = 223;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Icon drawable to use for alerts
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alertDialogIcon">android.R.attr.alertDialogIcon</see>
			/// .
			/// </attr>
			/// <attr>name android:alertDialogIcon</attr>
			public const int Theme_alertDialogIcon = 181;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.alertDialogStyle">android.R.attr.alertDialogStyle</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:alertDialogStyle</attr>
			public const int Theme_alertDialogStyle = 45;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Theme to use for alert dialogs spawned from this theme.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alertDialogTheme">android.R.attr.alertDialogTheme</see>
			/// .
			/// </attr>
			/// <attr>name android:alertDialogTheme</attr>
			public const int Theme_alertDialogTheme = 155;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default AutoCompleteTextView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoCompleteTextViewStyle">android.R.attr.autoCompleteTextViewStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:autoCompleteTextViewStyle</attr>
			public const int Theme_autoCompleteTextViewStyle = 52;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default background dim amount when a menu, dialog, or something similar pops up.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundDimAmount">android.R.attr.backgroundDimAmount
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundDimAmount</attr>
			public const int Theme_backgroundDimAmount = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Control whether dimming behind the window is enabled.  The default
			/// theme does not set this value, meaning it is based on whether the
			/// window is floating.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundDimEnabled">android.R.attr.backgroundDimEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundDimEnabled</attr>
			public const int Theme_backgroundDimEnabled = 106;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Style for buttons without an explicit border, often used in groups.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.borderlessButtonStyle">android.R.attr.borderlessButtonStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:borderlessButtonStyle</attr>
			public const int Theme_borderlessButtonStyle = 165;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Style for buttons within button bars
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.buttonBarButtonStyle">android.R.attr.buttonBarButtonStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:buttonBarButtonStyle</attr>
			public const int Theme_buttonBarButtonStyle = 168;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Style for button bars
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.buttonBarStyle">android.R.attr.buttonBarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:buttonBarStyle</attr>
			public const int Theme_buttonBarStyle = 167;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Normal Button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.buttonStyle">android.R.attr.buttonStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:buttonStyle</attr>
			public const int Theme_buttonStyle = 24;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Button style to inset into an EditText.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.buttonStyleInset">android.R.attr.buttonStyleInset</see>
			/// .
			/// </attr>
			/// <attr>name android:buttonStyleInset</attr>
			public const int Theme_buttonStyleInset = 26;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Small Button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.buttonStyleSmall">android.R.attr.buttonStyleSmall</see>
			/// .
			/// </attr>
			/// <attr>name android:buttonStyleSmall</attr>
			public const int Theme_buttonStyleSmall = 25;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// ToggleButton style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.buttonStyleToggle">android.R.attr.buttonStyleToggle</see>
			/// .
			/// </attr>
			/// <attr>name android:buttonStyleToggle</attr>
			public const int Theme_buttonStyleToggle = 27;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The CalendarView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.calendarViewStyle">android.R.attr.calendarViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:calendarViewStyle</attr>
			public const int Theme_calendarViewStyle = 185;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A styled string, specifying the style to be used for showing
			/// inline candidate text when composing with an input method.  The
			/// text itself will be ignored, but the style spans will be applied
			/// to the candidate text as it is edited.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.candidatesTextStyleSpans">android.R.attr.candidatesTextStyleSpans
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:candidatesTextStyleSpans</attr>
			public const int Theme_candidatesTextStyleSpans = 109;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for CheckBoxPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.checkBoxPreferenceStyle">android.R.attr.checkBoxPreferenceStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:checkBoxPreferenceStyle</attr>
			public const int Theme_checkBoxPreferenceStyle = 87;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default Checkbox style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.checkboxStyle">android.R.attr.checkboxStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:checkboxStyle</attr>
			public const int Theme_checkboxStyle = 53;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default highlight color for items that are
			/// activated. (Activated meaning persistent selection.)
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorActivatedHighlight">android.R.attr.colorActivatedHighlight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorActivatedHighlight</attr>
			public const int Theme_colorActivatedHighlight = 200;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color that matches (as closely as possible) the window background.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorBackground">android.R.attr.colorBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:colorBackground</attr>
			public const int Theme_colorBackground = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This is a hint for a solid color that can be used for caching
			/// rendered views.  This should be the color of the background when
			/// there is a solid background color; it should be null when the
			/// background is a texture or translucent.  When a device is able
			/// to use accelerated drawing (thus setting state_accelerated), the
			/// cache hint is ignored and always assumed to be transparent.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorBackgroundCacheHint">android.R.attr.colorBackgroundCacheHint
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorBackgroundCacheHint</attr>
			public const int Theme_colorBackgroundCacheHint = 118;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default highlight color for items that are
			/// focused. (Focused meaning cursor-based selection.)
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorFocusedHighlight">android.R.attr.colorFocusedHighlight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorFocusedHighlight</attr>
			public const int Theme_colorFocusedHighlight = 199;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default color of foreground imagery.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorForeground">android.R.attr.colorForeground</see>
			/// .
			/// </attr>
			/// <attr>name android:colorForeground</attr>
			public const int Theme_colorForeground = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default color of foreground imagery on an inverted background.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorForegroundInverse">android.R.attr.colorForegroundInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorForegroundInverse</attr>
			public const int Theme_colorForegroundInverse = 94;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default highlight color for items that are long-pressed.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorLongPressedHighlight">android.R.attr.colorLongPressedHighlight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorLongPressedHighlight</attr>
			public const int Theme_colorLongPressedHighlight = 198;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default highlight color for items in multiple selection
			/// mode.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorMultiSelectHighlight">android.R.attr.colorMultiSelectHighlight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorMultiSelectHighlight</attr>
			public const int Theme_colorMultiSelectHighlight = 201;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default highlight color for items that are pressed.
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.colorPressedHighlight">android.R.attr.colorPressedHighlight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:colorPressedHighlight</attr>
			public const int Theme_colorPressedHighlight = 197;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The DatePicker style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.datePickerStyle">android.R.attr.datePickerStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:datePickerStyle</attr>
			public const int Theme_datePickerStyle = 184;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background that can be used behind parts of a UI that provide
			/// details on data the user is selecting.  For example, this is
			/// the background element of PreferenceActivity's embedded
			/// preference fragment.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.detailsElementBackground">android.R.attr.detailsElementBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:detailsElementBackground</attr>
			public const int Theme_detailsElementBackground = 175;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Window decor layout to use in dialog mode with custom titles
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:dialogCustomTitleDecorLayout</attr>
			public const int Theme_dialogCustomTitleDecorLayout = 243;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for DialogPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dialogPreferenceStyle">android.R.attr.dialogPreferenceStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dialogPreferenceStyle</attr>
			public const int Theme_dialogPreferenceStyle = 89;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Theme to use for dialogs spawned from this theme.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dialogTheme">android.R.attr.dialogTheme</see>
			/// .
			/// </attr>
			/// <attr>name android:dialogTheme</attr>
			public const int Theme_dialogTheme = 154;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Window decor layout to use in dialog mode with title only
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:dialogTitleDecorLayout</attr>
			public const int Theme_dialogTitleDecorLayout = 244;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Window decor layout to use in dialog mode with icons
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:dialogTitleIconsDecorLayout</attr>
			public const int Theme_dialogTitleIconsDecorLayout = 242;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.disabledAlpha">android.R.attr.disabledAlpha</see>
			/// .
			/// </attr>
			/// <attr>name android:disabledAlpha</attr>
			public const int Theme_disabledAlpha = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for generic horizontal dividers.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dividerHorizontal">android.R.attr.dividerHorizontal</see>
			/// .
			/// </attr>
			/// <attr>name android:dividerHorizontal</attr>
			public const int Theme_dividerHorizontal = 166;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for generic vertical dividers.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dividerVertical">android.R.attr.dividerVertical</see>
			/// .
			/// </attr>
			/// <attr>name android:dividerVertical</attr>
			public const int Theme_dividerVertical = 156;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for drop down hints.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownHintAppearance">android.R.attr.dropDownHintAppearance
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownHintAppearance</attr>
			public const int Theme_dropDownHintAppearance = 80;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for drop down items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownItemStyle">android.R.attr.dropDownItemStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownItemStyle</attr>
			public const int Theme_dropDownItemStyle = 78;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ListView style for drop downs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownListViewStyle">android.R.attr.dropDownListViewStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownListViewStyle</attr>
			public const int Theme_dropDownListViewStyle = 54;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default dropdown Spinner style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.dropDownSpinnerStyle">android.R.attr.dropDownSpinnerStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:dropDownSpinnerStyle</attr>
			public const int Theme_dropDownSpinnerStyle = 133;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred item height for dropdown lists.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:dropdownListPreferredItemHeight</attr>
			public const int Theme_dropdownListPreferredItemHeight = 220;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// EditText background drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.editTextBackground">android.R.attr.editTextBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:editTextBackground</attr>
			public const int Theme_editTextBackground = 179;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// EditText text foreground color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.editTextColor">android.R.attr.editTextColor</see>
			/// .
			/// </attr>
			/// <attr>name android:editTextColor</attr>
			public const int Theme_editTextColor = 178;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for EditTextPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.editTextPreferenceStyle">android.R.attr.editTextPreferenceStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:editTextPreferenceStyle</attr>
			public const int Theme_editTextPreferenceStyle = 90;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default EditText style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.editTextStyle">android.R.attr.editTextStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:editTextStyle</attr>
			public const int Theme_editTextStyle = 55;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background used instead of errorMessageBackground when the popup has to be above.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:errorMessageAboveBackground</attr>
			public const int Theme_errorMessageAboveBackground = 218;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Popup text displayed in TextView when setError is used.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:errorMessageBackground</attr>
			public const int Theme_errorMessageBackground = 217;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred left bound for an expandable list child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListPreferredChildIndicatorLeft">android.R.attr.expandableListPreferredChildIndicatorLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListPreferredChildIndicatorLeft</attr>
			public const int Theme_expandableListPreferredChildIndicatorLeft = 34;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred right bound for an expandable list child's indicator.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListPreferredChildIndicatorRight">android.R.attr.expandableListPreferredChildIndicatorRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListPreferredChildIndicatorRight</attr>
			public const int Theme_expandableListPreferredChildIndicatorRight = 35;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred left padding for an expandable list item that is a child.
			/// If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListPreferredChildPaddingLeft">android.R.attr.expandableListPreferredChildPaddingLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListPreferredChildPaddingLeft</attr>
			public const int Theme_expandableListPreferredChildPaddingLeft = 31;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred left bound for an expandable list item's indicator. For a child-specific
			/// indicator, use expandableListPreferredChildIndicatorLeft.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListPreferredItemIndicatorLeft">android.R.attr.expandableListPreferredItemIndicatorLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListPreferredItemIndicatorLeft</attr>
			public const int Theme_expandableListPreferredItemIndicatorLeft = 32;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred right bound for an expandable list item's indicator. For a child-specific
			/// indicator, use expandableListPreferredChildIndicatorRight.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListPreferredItemIndicatorRight">android.R.attr.expandableListPreferredItemIndicatorRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListPreferredItemIndicatorRight</attr>
			public const int Theme_expandableListPreferredItemIndicatorRight = 33;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred left padding for an expandable list item (for child-specific layouts,
			/// use expandableListPreferredChildPaddingLeft). This takes into account
			/// the indicator that will be shown to next to the item.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListPreferredItemPaddingLeft">android.R.attr.expandableListPreferredItemPaddingLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListPreferredItemPaddingLeft</attr>
			public const int Theme_expandableListPreferredItemPaddingLeft = 30;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ExpandableListView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListViewStyle">android.R.attr.expandableListViewStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListViewStyle</attr>
			public const int Theme_expandableListViewStyle = 56;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// ExpandableListView with white background.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.expandableListViewWhiteStyle">android.R.attr.expandableListViewWhiteStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:expandableListViewWhiteStyle</attr>
			public const int Theme_expandableListViewWhiteStyle = 125;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Position of the fast scroll index overlay window.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>floating</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>atThumb</code></td><td>1</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollOverlayPosition">android.R.attr.fastScrollOverlayPosition
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollOverlayPosition</attr>
			public const int Theme_fastScrollOverlayPosition = 174;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the fast scroll index preview window background
			/// when shown on the left.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollPreviewBackgroundLeft">android.R.attr.fastScrollPreviewBackgroundLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollPreviewBackgroundLeft</attr>
			public const int Theme_fastScrollPreviewBackgroundLeft = 171;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the fast scroll index preview window background
			/// when shown on the right.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollPreviewBackgroundRight">android.R.attr.fastScrollPreviewBackgroundRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollPreviewBackgroundRight</attr>
			public const int Theme_fastScrollPreviewBackgroundRight = 172;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color for the fast scroll index overlay. Make sure it
			/// plays nicely with fastScrollPreviewBackground[Left|Right].
			/// <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollTextColor">android.R.attr.fastScrollTextColor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollTextColor</attr>
			public const int Theme_fastScrollTextColor = 182;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the fast scroll thumb.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollThumbDrawable">android.R.attr.fastScrollThumbDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollThumbDrawable</attr>
			public const int Theme_fastScrollThumbDrawable = 170;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the track for the fast scroll thumb.
			/// This may be null.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fastScrollTrackDrawable">android.R.attr.fastScrollTrackDrawable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:fastScrollTrackDrawable</attr>
			public const int Theme_fastScrollTrackDrawable = 173;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred background for gallery items. This should be set
			/// as the background of any Views you provide from the Adapter.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.galleryItemBackground">android.R.attr.galleryItemBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:galleryItemBackground</attr>
			public const int Theme_galleryItemBackground = 28;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default Gallery style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.galleryStyle">android.R.attr.galleryStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:galleryStyle</attr>
			public const int Theme_galleryStyle = 57;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default GestureOverlayView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:gestureOverlayViewStyle</attr>
			public const int Theme_gestureOverlayViewStyle = 227;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default GridView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.gridViewStyle">android.R.attr.gridViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:gridViewStyle</attr>
			public const int Theme_gridViewStyle = 58;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies a drawable to use for the 'home as up' indicator.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.homeAsUpIndicator">android.R.attr.homeAsUpIndicator</see>
			/// .
			/// </attr>
			/// <attr>name android:homeAsUpIndicator</attr>
			public const int Theme_homeAsUpIndicator = 157;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default HorizontalScrollView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.horizontalScrollViewStyle">android.R.attr.horizontalScrollViewStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:horizontalScrollViewStyle</attr>
			public const int Theme_horizontalScrollViewStyle = 180;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The style resource to use for an ImageButton.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imageButtonStyle">android.R.attr.imageButtonStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:imageButtonStyle</attr>
			public const int Theme_imageButtonStyle = 59;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The style resource to use for an ImageButton that is an image well.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.imageWellStyle">android.R.attr.imageWellStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:imageWellStyle</attr>
			public const int Theme_imageWellStyle = 60;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used as a background for selected list items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listChoiceBackgroundIndicator">android.R.attr.listChoiceBackgroundIndicator
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listChoiceBackgroundIndicator</attr>
			public const int Theme_listChoiceBackgroundIndicator = 141;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for multiple choice indicators.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listChoiceIndicatorMultiple">android.R.attr.listChoiceIndicatorMultiple
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listChoiceIndicatorMultiple</attr>
			public const int Theme_listChoiceIndicatorMultiple = 104;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for single choice indicators.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listChoiceIndicatorSingle">android.R.attr.listChoiceIndicatorSingle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listChoiceIndicatorSingle</attr>
			public const int Theme_listChoiceIndicatorSingle = 103;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The drawable for the list divider.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listDivider">android.R.attr.listDivider</see>
			/// .
			/// </attr>
			/// <attr>name android:listDivider</attr>
			public const int Theme_listDivider = 102;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The list divider used in alert dialogs.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listDividerAlertDialog">android.R.attr.listDividerAlertDialog
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listDividerAlertDialog</attr>
			public const int Theme_listDividerAlertDialog = 152;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ListPopupWindow style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listPopupWindowStyle">android.R.attr.listPopupWindowStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listPopupWindowStyle</attr>
			public const int Theme_listPopupWindowStyle = 148;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred list item height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listPreferredItemHeight">android.R.attr.listPreferredItemHeight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listPreferredItemHeight</attr>
			public const int Theme_listPreferredItemHeight = 29;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A larger, more robust list item height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listPreferredItemHeightLarge">android.R.attr.listPreferredItemHeightLarge
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listPreferredItemHeightLarge</attr>
			public const int Theme_listPreferredItemHeightLarge = 194;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A smaller, sleeker list item height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listPreferredItemHeightSmall">android.R.attr.listPreferredItemHeightSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listPreferredItemHeightSmall</attr>
			public const int Theme_listPreferredItemHeightSmall = 195;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred padding along the left edge of list items.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listPreferredItemPaddingLeft">android.R.attr.listPreferredItemPaddingLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listPreferredItemPaddingLeft</attr>
			public const int Theme_listPreferredItemPaddingLeft = 209;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred padding along the right edge of list items.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listPreferredItemPaddingRight">android.R.attr.listPreferredItemPaddingRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listPreferredItemPaddingRight</attr>
			public const int Theme_listPreferredItemPaddingRight = 210;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// TextView style for list separators.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listSeparatorTextViewStyle">android.R.attr.listSeparatorTextViewStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:listSeparatorTextViewStyle</attr>
			public const int Theme_listSeparatorTextViewStyle = 96;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ListView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listViewStyle">android.R.attr.listViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:listViewStyle</attr>
			public const int Theme_listViewStyle = 61;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// ListView with white background.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.listViewWhiteStyle">android.R.attr.listViewWhiteStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:listViewWhiteStyle</attr>
			public const int Theme_listViewWhiteStyle = 62;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default MapView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.mapViewStyle">android.R.attr.mapViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:mapViewStyle</attr>
			public const int Theme_mapViewStyle = 82;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// NumberPicker down button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:numberPickerDownButtonStyle</attr>
			public const int Theme_numberPickerDownButtonStyle = 232;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// NumberPicker input text style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:numberPickerInputTextStyle</attr>
			public const int Theme_numberPickerInputTextStyle = 233;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// NumberPicker style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:numberPickerStyle</attr>
			public const int Theme_numberPickerStyle = 230;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// NumberPicker up button style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:numberPickerUpButtonStyle</attr>
			public const int Theme_numberPickerUpButtonStyle = 231;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The background of a panel when it is inset from the left and right edges of the screen.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.panelBackground">android.R.attr.panelBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:panelBackground</attr>
			public const int Theme_panelBackground = 46;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color that matches (as closely as possible) the panel background.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.panelColorBackground">android.R.attr.panelColorBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:panelColorBackground</attr>
			public const int Theme_panelColorBackground = 49;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default color of foreground panel imagery.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.panelColorForeground">android.R.attr.panelColorForeground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:panelColorForeground</attr>
			public const int Theme_panelColorForeground = 48;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The background of a panel when it extends to the left and right edges of the screen.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.panelFullBackground">android.R.attr.panelFullBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:panelFullBackground</attr>
			public const int Theme_panelFullBackground = 47;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.panelMenuIsCompact">attr.panelMenuIsCompact</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:panelMenuIsCompact</attr>
			public const int Theme_panelMenuIsCompact = 224;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.panelMenuListTheme">attr.panelMenuListTheme</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:panelMenuListTheme</attr>
			public const int Theme_panelMenuListTheme = 226;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.panelMenuListWidth">attr.panelMenuListWidth</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:panelMenuListWidth</attr>
			public const int Theme_panelMenuListWidth = 225;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default appearance of panel text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.panelTextAppearance">android.R.attr.panelTextAppearance
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:panelTextAppearance</attr>
			public const int Theme_panelTextAppearance = 50;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to the Pointer style
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:pointerStyle</attr>
			public const int Theme_pointerStyle = 258;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default PopupMenu style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.popupMenuStyle">android.R.attr.popupMenuStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:popupMenuStyle</attr>
			public const int Theme_popupMenuStyle = 149;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default PopupWindow style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.popupWindowStyle">android.R.attr.popupWindowStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:popupWindowStyle</attr>
			public const int Theme_popupWindowStyle = 63;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for PreferenceCategory.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.preferenceCategoryStyle">android.R.attr.preferenceCategoryStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:preferenceCategoryStyle</attr>
			public const int Theme_preferenceCategoryStyle = 84;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for Headers pane in PreferenceActivity.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:preferenceFragmentStyle</attr>
			public const int Theme_preferenceFragmentStyle = 240;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Preference frame layout styles.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:preferenceFrameLayoutStyle</attr>
			public const int Theme_preferenceFrameLayoutStyle = 256;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for informational Preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.preferenceInformationStyle">android.R.attr.preferenceInformationStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:preferenceInformationStyle</attr>
			public const int Theme_preferenceInformationStyle = 85;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preference layout that has the child/tabbed effect.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.preferenceLayoutChild">android.R.attr.preferenceLayoutChild
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:preferenceLayoutChild</attr>
			public const int Theme_preferenceLayoutChild = 92;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Preference panel style
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:preferencePanelStyle</attr>
			public const int Theme_preferencePanelStyle = 241;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for PreferenceScreen.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.preferenceScreenStyle">android.R.attr.preferenceScreenStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:preferenceScreenStyle</attr>
			public const int Theme_preferenceScreenStyle = 83;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for Preference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.preferenceStyle">android.R.attr.preferenceStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:preferenceStyle</attr>
			public const int Theme_preferenceStyle = 86;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ProgressBar style. This is a medium circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyle">android.R.attr.progressBarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyle</attr>
			public const int Theme_progressBarStyle = 64;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Horizontal ProgressBar style. This is a horizontal progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleHorizontal">android.R.attr.progressBarStyleHorizontal
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleHorizontal</attr>
			public const int Theme_progressBarStyleHorizontal = 65;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Inverse ProgressBar style. This is a medium circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleInverse">android.R.attr.progressBarStyleInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleInverse</attr>
			public const int Theme_progressBarStyleInverse = 111;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Large ProgressBar style. This is a large circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleLarge">android.R.attr.progressBarStyleLarge
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleLarge</attr>
			public const int Theme_progressBarStyleLarge = 67;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Large inverse ProgressBar style. This is a large circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleLargeInverse">android.R.attr.progressBarStyleLargeInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleLargeInverse</attr>
			public const int Theme_progressBarStyleLargeInverse = 113;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Small ProgressBar style. This is a small circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleSmall">android.R.attr.progressBarStyleSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleSmall</attr>
			public const int Theme_progressBarStyleSmall = 66;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Small inverse ProgressBar style. This is a small circular progress bar.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleSmallInverse">android.R.attr.progressBarStyleSmallInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleSmallInverse</attr>
			public const int Theme_progressBarStyleSmallInverse = 112;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.progressBarStyleSmallTitle">android.R.attr.progressBarStyleSmallTitle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:progressBarStyleSmallTitle</attr>
			public const int Theme_progressBarStyleSmallTitle = 98;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable used as an overlay on top of quickcontact photos.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:quickContactBadgeOverlay</attr>
			public const int Theme_quickContactBadgeOverlay = 228;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default quickcontact badge style with large quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.quickContactBadgeStyleSmallWindowLarge">android.R.attr.quickContactBadgeStyleSmallWindowLarge
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:quickContactBadgeStyleSmallWindowLarge</attr>
			public const int Theme_quickContactBadgeStyleSmallWindowLarge = 124;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default quickcontact badge style with medium quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.quickContactBadgeStyleSmallWindowMedium">android.R.attr.quickContactBadgeStyleSmallWindowMedium
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:quickContactBadgeStyleSmallWindowMedium</attr>
			public const int Theme_quickContactBadgeStyleSmallWindowMedium = 123;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default quickcontact badge style with small quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.quickContactBadgeStyleSmallWindowSmall">android.R.attr.quickContactBadgeStyleSmallWindowSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:quickContactBadgeStyleSmallWindowSmall</attr>
			public const int Theme_quickContactBadgeStyleSmallWindowSmall = 122;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default quickcontact badge style with large quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.quickContactBadgeStyleWindowLarge">android.R.attr.quickContactBadgeStyleWindowLarge
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:quickContactBadgeStyleWindowLarge</attr>
			public const int Theme_quickContactBadgeStyleWindowLarge = 121;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default quickcontact badge style with medium quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.quickContactBadgeStyleWindowMedium">android.R.attr.quickContactBadgeStyleWindowMedium
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:quickContactBadgeStyleWindowMedium</attr>
			public const int Theme_quickContactBadgeStyleWindowMedium = 120;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default quickcontact badge style with small quickcontact window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.quickContactBadgeStyleWindowSmall">android.R.attr.quickContactBadgeStyleWindowSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:quickContactBadgeStyleWindowSmall</attr>
			public const int Theme_quickContactBadgeStyleWindowSmall = 119;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default RadioButton style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.radioButtonStyle">android.R.attr.radioButtonStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:radioButtonStyle</attr>
			public const int Theme_radioButtonStyle = 71;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default RatingBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ratingBarStyle">android.R.attr.ratingBarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:ratingBarStyle</attr>
			public const int Theme_ratingBarStyle = 69;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Indicator RatingBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ratingBarStyleIndicator">android.R.attr.ratingBarStyleIndicator
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:ratingBarStyleIndicator</attr>
			public const int Theme_ratingBarStyleIndicator = 99;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Small indicator RatingBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ratingBarStyleSmall">android.R.attr.ratingBarStyleSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:ratingBarStyleSmall</attr>
			public const int Theme_ratingBarStyleSmall = 70;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for RingtonePreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.ringtonePreferenceStyle">android.R.attr.ringtonePreferenceStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:ringtonePreferenceStyle</attr>
			public const int Theme_ringtonePreferenceStyle = 91;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default ScrollView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollViewStyle">android.R.attr.scrollViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollViewStyle</attr>
			public const int Theme_scrollViewStyle = 72;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Theme to use for Search Dialogs
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchDialogTheme</attr>
			public const int Theme_searchDialogTheme = 255;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView dropdown background
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchDropdownBackground</attr>
			public const int Theme_searchDropdownBackground = 246;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The list item height for search results. @hide
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchResultListItemHeight</attr>
			public const int Theme_searchResultListItemHeight = 219;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView close button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewCloseIcon</attr>
			public const int Theme_searchViewCloseIcon = 247;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView query refinement icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewEditQuery</attr>
			public const int Theme_searchViewEditQuery = 251;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView query refinement icon background
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewEditQueryBackground</attr>
			public const int Theme_searchViewEditQueryBackground = 252;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView Go button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewGoIcon</attr>
			public const int Theme_searchViewGoIcon = 248;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView Search icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewSearchIcon</attr>
			public const int Theme_searchViewSearchIcon = 249;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView text field background for the left section
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewTextField</attr>
			public const int Theme_searchViewTextField = 253;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView text field background for the right section
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewTextFieldRight</attr>
			public const int Theme_searchViewTextFieldRight = 254;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// SearchView Voice button icon
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchViewVoiceIcon</attr>
			public const int Theme_searchViewVoiceIcon = 250;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Search widget more corpus result item background.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:searchWidgetCorpusItemBackground</attr>
			public const int Theme_searchWidgetCorpusItemBackground = 211;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default SeekBar style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.seekBarStyle">android.R.attr.seekBarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:seekBarStyle</attr>
			public const int Theme_seekBarStyle = 68;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Style for segmented buttons - a container that houses several buttons
			/// with the appearance of a singel button broken into segments.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.segmentedButtonStyle">android.R.attr.segmentedButtonStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:segmentedButtonStyle</attr>
			public const int Theme_segmentedButtonStyle = 169;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background drawable for standalone items that need focus/pressed states.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.selectableItemBackground">android.R.attr.selectableItemBackground
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:selectableItemBackground</attr>
			public const int Theme_selectableItemBackground = 158;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for spinner drop down items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.spinnerDropDownItemStyle">android.R.attr.spinnerDropDownItemStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:spinnerDropDownItemStyle</attr>
			public const int Theme_spinnerDropDownItemStyle = 79;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default spinner item style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.spinnerItemStyle">android.R.attr.spinnerItemStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:spinnerItemStyle</attr>
			public const int Theme_spinnerItemStyle = 81;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default Spinner style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.spinnerStyle">android.R.attr.spinnerStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:spinnerStyle</attr>
			public const int Theme_spinnerStyle = 73;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default StackView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:stackViewStyle</attr>
			public const int Theme_stackViewStyle = 229;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default Star style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.starStyle">android.R.attr.starStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:starStyle</attr>
			public const int Theme_starStyle = 74;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for switch preferences.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.switchPreferenceStyle">android.R.attr.switchPreferenceStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:switchPreferenceStyle</attr>
			public const int Theme_switchPreferenceStyle = 190;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for the Switch widget.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:switchStyle</attr>
			public const int Theme_switchStyle = 257;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default TabWidget style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tabWidgetStyle">android.R.attr.tabWidgetStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:tabWidgetStyle</attr>
			public const int Theme_tabWidgetStyle = 75;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default appearance of text: color, typeface, size, and style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearance">android.R.attr.textAppearance</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearance</attr>
			public const int Theme_textAppearance = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline color and thickness for auto correction suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textAppearanceAutoCorrectionSuggestion</attr>
			public const int Theme_textAppearanceAutoCorrectionSuggestion = 214;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for the text inside of a button.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceButton">android.R.attr.textAppearanceButton
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceButton</attr>
			public const int Theme_textAppearanceButton = 95;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline color and thickness for easy correct suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textAppearanceEasyCorrectSuggestion</attr>
			public const int Theme_textAppearanceEasyCorrectSuggestion = 212;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default appearance of text against an inverted background:
			/// color, typeface, size, and style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceInverse">android.R.attr.textAppearanceInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceInverse</attr>
			public const int Theme_textAppearanceInverse = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for "large" text. Defaults to primary text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceLarge">android.R.attr.textAppearanceLarge
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceLarge</attr>
			public const int Theme_textAppearanceLarge = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceLargeInverse">android.R.attr.textAppearanceLargeInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceLargeInverse</attr>
			public const int Theme_textAppearanceLargeInverse = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for the text inside of a popup menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceLargePopupMenu">android.R.attr.textAppearanceLargePopupMenu
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceLargePopupMenu</attr>
			public const int Theme_textAppearanceLargePopupMenu = 150;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred TextAppearance for the primary text of list items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceListItem">android.R.attr.textAppearanceListItem
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceListItem</attr>
			public const int Theme_textAppearanceListItem = 207;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The preferred TextAppearance for the primary text of small list items.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceListItemSmall">android.R.attr.textAppearanceListItemSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceListItemSmall</attr>
			public const int Theme_textAppearanceListItemSmall = 208;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceMedium">android.R.attr.textAppearanceMedium
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceMedium</attr>
			public const int Theme_textAppearanceMedium = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceMediumInverse">android.R.attr.textAppearanceMediumInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceMediumInverse</attr>
			public const int Theme_textAppearanceMediumInverse = 20;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline color and thickness for misspelled suggestion
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textAppearanceMisspelledSuggestion</attr>
			public const int Theme_textAppearanceMisspelledSuggestion = 213;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceSearchResultSubtitle">android.R.attr.textAppearanceSearchResultSubtitle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceSearchResultSubtitle</attr>
			public const int Theme_textAppearanceSearchResultSubtitle = 116;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceSearchResultTitle">android.R.attr.textAppearanceSearchResultTitle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceSearchResultTitle</attr>
			public const int Theme_textAppearanceSearchResultTitle = 117;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceSmall">android.R.attr.textAppearanceSmall
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceSmall</attr>
			public const int Theme_textAppearanceSmall = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceSmallInverse">android.R.attr.textAppearanceSmallInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceSmallInverse</attr>
			public const int Theme_textAppearanceSmallInverse = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color, typeface, size, and style for small text inside of a popup menu.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textAppearanceSmallPopupMenu">android.R.attr.textAppearanceSmallPopupMenu
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textAppearanceSmallPopupMenu</attr>
			public const int Theme_textAppearanceSmallPopupMenu = 151;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use for check marks.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textCheckMark">android.R.attr.textCheckMark</see>
			/// .
			/// </attr>
			/// <attr>name android:textCheckMark</attr>
			public const int Theme_textCheckMark = 22;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.textCheckMarkInverse">android.R.attr.textCheckMarkInverse
			/// 	</see>
			/// attribute's value can be found in the
			/// <see cref="Theme">Theme</see>
			/// array.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// </summary>
			/// <attr>name android:textCheckMarkInverse</attr>
			public const int Theme_textCheckMarkInverse = 23;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of list item text in alert dialogs.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorAlertDialogListItem">android.R.attr.textColorAlertDialogListItem
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorAlertDialogListItem</attr>
			public const int Theme_textColorAlertDialogListItem = 153;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of highlighted text, when used in a light theme.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorHighlightInverse">android.R.attr.textColorHighlightInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorHighlightInverse</attr>
			public const int Theme_textColorHighlightInverse = 176;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Inverse hint text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorHintInverse">android.R.attr.textColorHintInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorHintInverse</attr>
			public const int Theme_textColorHintInverse = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of link text (URLs), when used in a light theme.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorLinkInverse">android.R.attr.textColorLinkInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorLinkInverse</attr>
			public const int Theme_textColorLinkInverse = 177;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The most prominent text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorPrimary">android.R.attr.textColorPrimary</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorPrimary</attr>
			public const int Theme_textColorPrimary = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Bright text color. Only differentiates based on the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorPrimaryDisableOnly">android.R.attr.textColorPrimaryDisableOnly
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorPrimaryDisableOnly</attr>
			public const int Theme_textColorPrimaryDisableOnly = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Primary inverse text color, useful for inverted backgrounds.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorPrimaryInverse">android.R.attr.textColorPrimaryInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorPrimaryInverse</attr>
			public const int Theme_textColorPrimaryInverse = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Bright inverse text color. Only differentiates based on the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorPrimaryInverseDisableOnly">android.R.attr.textColorPrimaryInverseDisableOnly
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorPrimaryInverseDisableOnly</attr>
			public const int Theme_textColorPrimaryInverseDisableOnly = 114;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Bright inverse text color. This does not differentiate the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorPrimaryInverseNoDisable">android.R.attr.textColorPrimaryInverseNoDisable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorPrimaryInverseNoDisable</attr>
			public const int Theme_textColorPrimaryInverseNoDisable = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Bright text color. This does not differentiate the disabled state. As an example,
			/// buttons use this since they display the disabled state via the background and not the
			/// foreground text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorPrimaryNoDisable">android.R.attr.textColorPrimaryNoDisable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorPrimaryNoDisable</attr>
			public const int Theme_textColorPrimaryNoDisable = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Text color for urls in search suggestions, used by things like global search and the browser. @hide
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textColorSearchUrl</attr>
			public const int Theme_textColorSearchUrl = 110;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Secondary text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorSecondary">android.R.attr.textColorSecondary</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorSecondary</attr>
			public const int Theme_textColorSecondary = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Secondary inverse text color, useful for inverted backgrounds.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorSecondaryInverse">android.R.attr.textColorSecondaryInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorSecondaryInverse</attr>
			public const int Theme_textColorSecondaryInverse = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Dim inverse text color. This does not differentiate the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorSecondaryInverseNoDisable">android.R.attr.textColorSecondaryInverseNoDisable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorSecondaryInverseNoDisable</attr>
			public const int Theme_textColorSecondaryInverseNoDisable = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Dim text color. This does not differentiate the disabled state.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorSecondaryNoDisable">android.R.attr.textColorSecondaryNoDisable
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorSecondaryNoDisable</attr>
			public const int Theme_textColorSecondaryNoDisable = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Tertiary text color.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorTertiary">android.R.attr.textColorTertiary</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorTertiary</attr>
			public const int Theme_textColorTertiary = 100;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Tertiary inverse text color, useful for inverted backgrounds.
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColorTertiaryInverse">android.R.attr.textColorTertiaryInverse
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textColorTertiaryInverse</attr>
			public const int Theme_textColorTertiaryInverse = 101;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditNoPasteWindowLayout">android.R.attr.textEditNoPasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditNoPasteWindowLayout</attr>
			public const int Theme_textEditNoPasteWindowLayout = 163;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The layout of the view that is displayed on top of the cursor to paste inside a
			/// TextEdit field.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditPasteWindowLayout">android.R.attr.textEditPasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditPasteWindowLayout</attr>
			public const int Theme_textEditPasteWindowLayout = 162;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditSideNoPasteWindowLayout">android.R.attr.textEditSideNoPasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditSideNoPasteWindowLayout</attr>
			public const int Theme_textEditSideNoPasteWindowLayout = 187;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Used instead of textEditPasteWindowLayout when the window is moved on the side of the
			/// insertion cursor because it would be clipped if it were positioned on top.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditSidePasteWindowLayout">android.R.attr.textEditSidePasteWindowLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditSidePasteWindowLayout</attr>
			public const int Theme_textEditSidePasteWindowLayout = 186;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Layout of the TextView item that will populate the suggestion popup window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textEditSuggestionItemLayout">android.R.attr.textEditSuggestionItemLayout
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textEditSuggestionItemLayout</attr>
			public const int Theme_textEditSuggestionItemLayout = 192;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be used to display a text selection
			/// anchor for positioning the cursor within text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandle">android.R.attr.textSelectHandle</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandle</attr>
			public const int Theme_textSelectHandle = 129;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the left side of a selection region.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandleLeft">android.R.attr.textSelectHandleLeft
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandleLeft</attr>
			public const int Theme_textSelectHandleLeft = 127;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a drawable that will be used to display a text selection
			/// anchor on the right side of a selection region.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandleRight">android.R.attr.textSelectHandleRight
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandleRight</attr>
			public const int Theme_textSelectHandleRight = 128;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a style that will be used for the window containing a text
			/// selection anchor.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSelectHandleWindowStyle">android.R.attr.textSelectHandleWindowStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textSelectHandleWindowStyle</attr>
			public const int Theme_textSelectHandleWindowStyle = 130;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a style that will be used for the window containing a list of possible
			/// text suggestions in an EditText.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textSuggestionsWindowStyle">android.R.attr.textSuggestionsWindowStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:textSuggestionsWindowStyle</attr>
			public const int Theme_textSuggestionsWindowStyle = 191;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline color
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textUnderlineColor</attr>
			public const int Theme_textUnderlineColor = 215;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The underline thickness
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textUnderlineThickness</attr>
			public const int Theme_textUnderlineThickness = 216;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default TextView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textViewStyle">android.R.attr.textViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:textViewStyle</attr>
			public const int Theme_textViewStyle = 76;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The TimePicker style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:timePickerStyle</attr>
			public const int Theme_timePickerStyle = 234;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Background to use for toasts
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:toastFrameBackground</attr>
			public const int Theme_toastFrameBackground = 245;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default WebTextView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.webTextViewStyle">android.R.attr.webTextViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:webTextViewStyle</attr>
			public const int Theme_webTextViewStyle = 126;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default WebView style.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.webViewStyle">android.R.attr.webViewStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:webViewStyle</attr>
			public const int Theme_webViewStyle = 77;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this window should have an Action Bar
			/// in place of the usual title bar.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowActionBar">android.R.attr.windowActionBar</see>
			/// .
			/// </attr>
			/// <attr>name android:windowActionBar</attr>
			public const int Theme_windowActionBar = 131;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this window's Action Bar should overlay
			/// application content. Does nothing if the window would not
			/// have an Action Bar.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowActionBarOverlay">android.R.attr.windowActionBarOverlay
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowActionBarOverlay</attr>
			public const int Theme_windowActionBarOverlay = 139;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether action modes should overlay window content
			/// when there is not reserved space for their UI (such as an Action Bar).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowActionModeOverlay">android.R.attr.windowActionModeOverlay
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowActionModeOverlay</attr>
			public const int Theme_windowActionModeOverlay = 138;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a style resource holding
			/// the set of window animations to use, which can be
			/// any of the attributes defined by
			/// <see cref="android.R.styleable.WindowAnimation">android.R.styleable.WindowAnimation
			/// 	</see>
			/// .
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowAnimationStyle">android.R.attr.windowAnimationStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowAnimationStyle</attr>
			public const int Theme_windowAnimationStyle = 93;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the overall window background.  As of
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB">android.os.Build.VERSION_CODES.HONEYCOMB
			/// 	</see>
			/// , this may
			/// be a selector that uses state_accelerated to pick a non-solid
			/// color when running on devices that can draw such a bitmap
			/// with complex compositing on top at 60fps.
			/// <p>There are a few special considerations to use when setting this
			/// drawable:
			/// <ul>
			/// <li> This information will be used to infer the pixel format
			/// for your window's surface.  If the drawable has any
			/// non-opaque pixels, your window will be translucent
			/// (32 bpp).
			/// <li> If you want to draw the entire background
			/// yourself, you should set this drawable to some solid
			/// color that closely matches that background (so the
			/// system's preview of your window will match), and
			/// then in code manually set your window's background to
			/// null so it will not be drawn.
			/// </ul>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowBackground">android.R.attr.windowBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:windowBackground</attr>
			public const int Theme_windowBackground = 36;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Control whether a container should automatically close itself if
			/// the user touches outside of it.  This only applies to activities
			/// and dialogs.
			/// <p>Note: this attribute will only be respected for applications
			/// that are targeting
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB">android.os.Build.VERSION_CODES.HONEYCOMB
			/// 	</see>
			/// or later.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowCloseOnTouchOutside">android.R.attr.windowCloseOnTouchOutside
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowCloseOnTouchOutside</attr>
			public const int Theme_windowCloseOnTouchOutside = 183;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This Drawable is overlaid over the foreground of the Window's content area, usually
			/// to place a shadow below the title.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowContentOverlay">android.R.attr.windowContentOverlay
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowContentOverlay</attr>
			public const int Theme_windowContentOverlay = 41;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag allowing you to disable the preview animation for a window.
			/// The default value is false; if set to true, the system can never
			/// use the window's theme to show a preview of it before your
			/// actual instance is shown to the user.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowDisablePreview">android.R.attr.windowDisablePreview
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowDisablePreview</attr>
			public const int Theme_windowDisablePreview = 107;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that this window should allow touches to be split
			/// across other windows that also support split touch.
			/// The default value is true for applications with a targetSdkVersion
			/// of Honeycomb or newer; false otherwise.
			/// When this flag is false, the first pointer that goes down determines
			/// the window to which all subsequent touches go until all pointers go up.
			/// When this flag is true, each pointer (not necessarily the first) that
			/// goes down determines the window to which all subsequent touches of that
			/// pointer will go until that pointers go up thereby enabling touches
			/// with multiple pointers to be split across multiple windows.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowEnableSplitTouch">android.R.attr.windowEnableSplitTouch
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowEnableSplitTouch</attr>
			public const int Theme_windowEnableSplitTouch = 164;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as a frame around the window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowFrame">android.R.attr.windowFrame</see>
			/// .
			/// </attr>
			/// <attr>name android:windowFrame</attr>
			public const int Theme_windowFrame = 37;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this window should fill the entire screen.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowFullscreen">android.R.attr.windowFullscreen</see>
			/// .
			/// </attr>
			/// <attr>name android:windowFullscreen</attr>
			public const int Theme_windowFullscreen = 97;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this is a floating window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowIsFloating">android.R.attr.windowIsFloating</see>
			/// .
			/// </attr>
			/// <attr>name android:windowIsFloating</attr>
			public const int Theme_windowIsFloating = 39;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this is a translucent window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowIsTranslucent">android.R.attr.windowIsTranslucent
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowIsTranslucent</attr>
			public const int Theme_windowIsTranslucent = 40;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that this window should not be displayed at all.
			/// The default value is false; if set to true, and this window is
			/// the main window of an Activity, then it will never actually
			/// be added to the window manager.  This means that your activity
			/// must immediately quit without waiting for user interaction,
			/// because there will be no such interaction coming.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowNoDisplay">android.R.attr.windowNoDisplay</see>
			/// .
			/// </attr>
			/// <attr>name android:windowNoDisplay</attr>
			public const int Theme_windowNoDisplay = 105;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether there should be no title on this window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowNoTitle">android.R.attr.windowNoTitle</see>
			/// .
			/// </attr>
			/// <attr>name android:windowNoTitle</attr>
			public const int Theme_windowNoTitle = 38;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that this window's background should be the
			/// user's current wallpaper.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowShowWallpaper">android.R.attr.windowShowWallpaper
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowShowWallpaper</attr>
			public const int Theme_windowShowWallpaper = 115;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the default soft input state that this window would
			/// like when it is displayed.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
			/// is the default. </td></tr>
			/// <tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
			/// last was. </td></tr>
			/// <tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
			/// the system will automatically select between resize and pan
			/// modes, depending
			/// on whether the content of the window has any layout views
			/// that can scroll their contents.  If there is such a view,
			/// then the window will be resized, with the assumption being
			/// that the resizeable area can be reduced to make room for
			/// the input UI. </td></tr>
			/// <tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
			/// reduced to make room for the soft input area. </td></tr>
			/// <tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
			/// instead pan the contents of the window as focus moves inside
			/// of it so that the user can see what they are typing.  This is
			/// generally less desireable than panning because the user may
			/// need to close the input area to get at and interact with
			/// parts of the window. </td></tr>
			/// <tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
			/// soft input area; the window is never adjusted for it. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowSoftInputMode">android.R.attr.windowSoftInputMode
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowSoftInputMode</attr>
			public const int Theme_windowSoftInputMode = 108;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that the action bar should be split to provide more
			/// room for elements.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:windowSplitActionBar</attr>
			public const int Theme_windowSplitActionBar = 221;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The style resource to use for a window's title area.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowTitleBackgroundStyle">android.R.attr.windowTitleBackgroundStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowTitleBackgroundStyle</attr>
			public const int Theme_windowTitleBackgroundStyle = 44;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The style resource to use for a window's title bar height.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowTitleSize">android.R.attr.windowTitleSize</see>
			/// .
			/// </attr>
			/// <attr>name android:windowTitleSize</attr>
			public const int Theme_windowTitleSize = 42;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The style resource to use for a window's title text.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowTitleStyle">android.R.attr.windowTitleStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:windowTitleStyle</attr>
			public const int Theme_windowTitleStyle = 43;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default style for YesNoPreference.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.yesNoPreferenceStyle">android.R.attr.yesNoPreferenceStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:yesNoPreferenceStyle</attr>
			public const int Theme_yesNoPreferenceStyle = 88;

			/// <summary>Attributes that can be used with a TimePicker.</summary>
			/// <remarks>
			/// Attributes that can be used with a TimePicker.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TimePicker_layout">android:layout</see>
			/// </code></td><td> @hide The layout of the time picker.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TimePicker_layout">TimePicker_layout</seealso>
			public static readonly int[] TimePicker = new int[] { unchecked((int)(0x010100f2)
				) };

			/// <summary><p></summary>
			/// <attr>description</attr>
			/// <hide>
			/// The layout of the time picker.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout">android.R.attr.layout</see>
			/// .
			/// </hide>
			/// <attr>name android:layout</attr>
			public const int TimePicker_layout = 0;

			/// <summary>Attributes that can be used with a ToggleButton.</summary>
			/// <remarks>
			/// Attributes that can be used with a ToggleButton.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ToggleButton_disabledAlpha">android:disabledAlpha</see>
			/// </code></td><td> The alpha to apply to the indicator when disabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="ToggleButton_textOff">android:textOff</see>
			/// </code></td><td> The text for the button when it is not checked.</td></tr>
			/// <tr><td><code>
			/// <see cref="ToggleButton_textOn">android:textOn</see>
			/// </code></td><td> The text for the button when it is checked.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ToggleButton_disabledAlpha">ToggleButton_disabledAlpha</seealso>
			/// <seealso cref="ToggleButton_textOff">ToggleButton_textOff</seealso>
			/// <seealso cref="ToggleButton_textOn">ToggleButton_textOn</seealso>
			public static readonly int[] ToggleButton = new int[] { unchecked((int)(0x01010033
				)), unchecked((int)(0x01010124)), unchecked((int)(0x01010125)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The alpha to apply to the indicator when disabled.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.disabledAlpha">android.R.attr.disabledAlpha</see>
			/// .
			/// </attr>
			/// <attr>name android:disabledAlpha</attr>
			public const int ToggleButton_disabledAlpha = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text for the button when it is not checked.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textOff">android.R.attr.textOff</see>
			/// .
			/// </attr>
			/// <attr>name android:textOff</attr>
			public const int ToggleButton_textOff = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The text for the button when it is checked.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textOn">android.R.attr.textOn</see>
			/// .
			/// </attr>
			/// <attr>name android:textOn</attr>
			public const int ToggleButton_textOn = 1;

			/// <summary>Attributes that can be used with a TranslateAnimation.</summary>
			/// <remarks>
			/// Attributes that can be used with a TranslateAnimation.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TranslateAnimation_fromXDelta">android:fromXDelta</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="TranslateAnimation_fromYDelta">android:fromYDelta</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="TranslateAnimation_toXDelta">android:toXDelta</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="TranslateAnimation_toYDelta">android:toYDelta</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TranslateAnimation_fromXDelta">TranslateAnimation_fromXDelta</seealso>
			/// <seealso cref="TranslateAnimation_fromYDelta">TranslateAnimation_fromYDelta</seealso>
			/// <seealso cref="TranslateAnimation_toXDelta">TranslateAnimation_toXDelta</seealso>
			/// <seealso cref="TranslateAnimation_toYDelta">TranslateAnimation_toYDelta</seealso>
			public static readonly int[] TranslateAnimation = new int[] { unchecked((int)(0x010101c6
				)), unchecked((int)(0x010101c7)), unchecked((int)(0x010101c8)), unchecked((int)(
				0x010101c9)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromXDelta">android.R.attr.fromXDelta</see>
			/// attribute's value can be found in the
			/// <see cref="TranslateAnimation">TranslateAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromXDelta</attr>
			public const int TranslateAnimation_fromXDelta = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.fromYDelta">android.R.attr.fromYDelta</see>
			/// attribute's value can be found in the
			/// <see cref="TranslateAnimation">TranslateAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:fromYDelta</attr>
			public const int TranslateAnimation_fromYDelta = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toXDelta">android.R.attr.toXDelta</see>
			/// attribute's value can be found in the
			/// <see cref="TranslateAnimation">TranslateAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toXDelta</attr>
			public const int TranslateAnimation_toXDelta = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.toYDelta">android.R.attr.toYDelta</see>
			/// attribute's value can be found in the
			/// <see cref="TranslateAnimation">TranslateAnimation</see>
			/// array.
			/// <p>May be a floating point value, such as "<code>1.2</code>".
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:toYDelta</attr>
			public const int TranslateAnimation_toYDelta = 3;

			/// <summary>Attributes that can be used with a TwoLineListItem.</summary>
			/// <remarks>
			/// Attributes that can be used with a TwoLineListItem.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="TwoLineListItem_mode">android:mode</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="TwoLineListItem_mode">TwoLineListItem_mode</seealso>
			public static readonly int[] TwoLineListItem = new int[] { unchecked((int)(0x0101017e
				)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.mode">android.R.attr.mode</see>
			/// attribute's value can be found in the
			/// <see cref="TwoLineListItem">TwoLineListItem</see>
			/// array.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>oneLine</code></td><td>1</td><td> Always show only the first line. </td></tr>
			/// <tr><td><code>collapsing</code></td><td>2</td><td> When selected show both lines, otherwise show only the first line.
			/// This is the default mode. </td></tr>
			/// <tr><td><code>twoLine</code></td><td>3</td><td> Always show both lines. </td></tr>
			/// </table>
			/// </summary>
			/// <attr>name android:mode</attr>
			public const int TwoLineListItem_mode = 0;

			/// <summary>Attributes that can be used with a VerticalSlider_Layout.</summary>
			/// <remarks>
			/// Attributes that can be used with a VerticalSlider_Layout.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="VerticalSlider_Layout_layout_scale">android:layout_scale</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="VerticalSlider_Layout_layout_scale">VerticalSlider_Layout_layout_scale
			/// 	</seealso>
			public static readonly int[] VerticalSlider_Layout = new int[] { unchecked((int)(
				0x01010193)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.layout_scale">android.R.attr.layout_scale</see>
			/// attribute's value can be found in the
			/// <see cref="VerticalSlider_Layout">VerticalSlider_Layout</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:layout_scale</attr>
			public const int VerticalSlider_Layout_layout_scale = 0;

			/// <summary>
			/// Attributes that can be used with
			/// <see cref="android.view.View">android.view.View</see>
			/// or
			/// any of its subclasses.  Also see
			/// <see cref="ViewGroup_Layout">ViewGroup_Layout</see>
			/// for
			/// attributes that are processed by the view's parent.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="View_alpha">android:alpha</see>
			/// </code></td><td> alpha property of the view, as a value between 0 (completely transparent) and 1
			/// (completely opaque).</td></tr>
			/// <tr><td><code>
			/// <see cref="View_background">android:background</see>
			/// </code></td><td> A drawable to use as the background.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_clickable">android:clickable</see>
			/// </code></td><td> Defines whether this view reacts to click events.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_contentDescription">android:contentDescription</see>
			/// </code></td><td> Defines text that briefly describes content of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_drawingCacheQuality">android:drawingCacheQuality</see>
			/// </code></td><td> Defines the quality of translucent drawing caches.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_duplicateParentState">android:duplicateParentState</see>
			/// </code></td><td> When this attribute is set to true, the view gets its drawable state
			/// (focused, pressed, etc.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_fadeScrollbars">android:fadeScrollbars</see>
			/// </code></td><td> Defines whether to fade out scrollbars when they are not in use.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_fadingEdge">android:fadingEdge</see>
			/// </code></td><td>
			/// <deprecated>This attribute is deprecated and will be ignored as of</deprecated>
			/// API level
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_fadingEdgeLength">android:fadingEdgeLength</see>
			/// </code></td><td> Defines the length of the fading edges.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_filterTouchesWhenObscured">android:filterTouchesWhenObscured</see>
			/// </code></td><td> Specifies whether to filter touches when the view's window is obscured by
			/// another visible window.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_fitsSystemWindows">android:fitsSystemWindows</see>
			/// </code></td><td> Boolean internal attribute to adjust view layout based on
			/// system windows such as the status bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_focusable">android:focusable</see>
			/// </code></td><td> Boolean that controls whether a view can take focus.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_focusableInTouchMode">android:focusableInTouchMode</see>
			/// </code></td><td> Boolean that controls whether a view can take focus while in touch mode.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_hapticFeedbackEnabled">android:hapticFeedbackEnabled</see>
			/// </code></td><td> Boolean that controls whether a view should have haptic feedback
			/// enabled for events such as long presses.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_id">android:id</see>
			/// </code></td><td> Supply an identifier name for this view, to later retrieve it
			/// with
			/// <see cref="android.view.View.findViewById(int)">View.findViewById()</see>
			/// or
			/// <see cref="android.app.Activity.findViewById(int)">Activity.findViewById()</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_isScrollContainer">android:isScrollContainer</see>
			/// </code></td><td> Set this if the view will serve as a scrolling container, meaing
			/// that it can be resized to shrink its overall window so that there
			/// will be space for an input method.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_keepScreenOn">android:keepScreenOn</see>
			/// </code></td><td> Controls whether the view's window should keep the screen on
			/// while visible.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_layerType">android:layerType</see>
			/// </code></td><td> Specifies the type of layer backing this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_layoutDirection">android:layoutDirection</see>
			/// </code></td><td> Defines the direction of layout drawing.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_longClickable">android:longClickable</see>
			/// </code></td><td> Defines whether this view reacts to long click events.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_minHeight">android:minHeight</see>
			/// </code></td><td> Defines the minimum height of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_minWidth">android:minWidth</see>
			/// </code></td><td> Defines the minimum width of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_nextFocusDown">android:nextFocusDown</see>
			/// </code></td><td> Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_DOWN">android.view.View.FOCUS_DOWN</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_nextFocusForward">android:nextFocusForward</see>
			/// </code></td><td> Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_FORWARD">android.view.View.FOCUS_FORWARD</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_nextFocusLeft">android:nextFocusLeft</see>
			/// </code></td><td> Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_LEFT">android.view.View.FOCUS_LEFT</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_nextFocusRight">android:nextFocusRight</see>
			/// </code></td><td> Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_RIGHT">android.view.View.FOCUS_RIGHT</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_nextFocusUp">android:nextFocusUp</see>
			/// </code></td><td> Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_UP">android.view.View.FOCUS_UP</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_onClick">android:onClick</see>
			/// </code></td><td> Name of the method in this View's context to invoke when the view is
			/// clicked.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_overScrollMode">android:overScrollMode</see>
			/// </code></td><td> Defines over-scrolling behavior.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_padding">android:padding</see>
			/// </code></td><td> Sets the padding, in pixels, of all four edges.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_paddingBottom">android:paddingBottom</see>
			/// </code></td><td> Sets the padding, in pixels, of the bottom edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_paddingEnd">android:paddingEnd</see>
			/// </code></td><td> Sets the padding, in pixels, of the end edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_paddingLeft">android:paddingLeft</see>
			/// </code></td><td> Sets the padding, in pixels, of the left edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_paddingRight">android:paddingRight</see>
			/// </code></td><td> Sets the padding, in pixels, of the right edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_paddingStart">android:paddingStart</see>
			/// </code></td><td> Sets the padding, in pixels, of the start edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_paddingTop">android:paddingTop</see>
			/// </code></td><td> Sets the padding, in pixels, of the top edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_requiresFadingEdge">android:requiresFadingEdge</see>
			/// </code></td><td> Defines which edges should be faded on scrolling.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_rotation">android:rotation</see>
			/// </code></td><td> rotation of the view, in degrees.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_rotationX">android:rotationX</see>
			/// </code></td><td> rotation of the view around the x axis, in degrees.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_rotationY">android:rotationY</see>
			/// </code></td><td> rotation of the view around the y axis, in degrees.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_saveEnabled">android:saveEnabled</see>
			/// </code></td><td> If unset, no state will be saved for this view when it is being
			/// frozen.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scaleX">android:scaleX</see>
			/// </code></td><td> scale of the view in the x direction.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scaleY">android:scaleY</see>
			/// </code></td><td> scale of the view in the y direction.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollX">android:scrollX</see>
			/// </code></td><td> The initial horizontal scroll offset, in pixels.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollY">android:scrollY</see>
			/// </code></td><td> The initial vertical scroll offset, in pixels.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarAlwaysDrawHorizontalTrack">android:scrollbarAlwaysDrawHorizontalTrack
			/// 	</see>
			/// </code></td><td> Defines whether the horizontal scrollbar track should always be drawn.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarAlwaysDrawVerticalTrack">android:scrollbarAlwaysDrawVerticalTrack
			/// 	</see>
			/// </code></td><td> Defines whether the vertical scrollbar track should always be drawn.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarDefaultDelayBeforeFade">android:scrollbarDefaultDelayBeforeFade
			/// 	</see>
			/// </code></td><td> Defines the delay in milliseconds that a scrollbar waits before fade out.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarFadeDuration">android:scrollbarFadeDuration</see>
			/// </code></td><td> Defines the delay in milliseconds that a scrollbar takes to fade out.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarSize">android:scrollbarSize</see>
			/// </code></td><td> Sets the width of vertical scrollbars and height of horizontal scrollbars.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarStyle">android:scrollbarStyle</see>
			/// </code></td><td> Controls the scrollbar style and position.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarThumbHorizontal">android:scrollbarThumbHorizontal</see>
			/// </code></td><td> Defines the horizontal scrollbar thumb drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarThumbVertical">android:scrollbarThumbVertical</see>
			/// </code></td><td> Defines the vertical scrollbar thumb drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarTrackHorizontal">android:scrollbarTrackHorizontal</see>
			/// </code></td><td> Defines the horizontal scrollbar track drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbarTrackVertical">android:scrollbarTrackVertical</see>
			/// </code></td><td> Defines the vertical scrollbar track drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_scrollbars">android:scrollbars</see>
			/// </code></td><td> Defines which scrollbars should be displayed on scrolling or not.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_soundEffectsEnabled">android:soundEffectsEnabled</see>
			/// </code></td><td> Boolean that controls whether a view should have sound effects
			/// enabled for events such as clicking and touching.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_tag">android:tag</see>
			/// </code></td><td> Supply a tag for this view containing a String, to be retrieved
			/// later with
			/// <see cref="android.view.View.getTag()">View.getTag()</see>
			/// or
			/// searched for with
			/// <see cref="android.view.View.findViewWithTag(object)">View.findViewWithTag()</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="View_textDirection">android:textDirection</see>
			/// </code></td><td> Direction of the text.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_transformPivotX">android:transformPivotX</see>
			/// </code></td><td> x location of the pivot point around which the view will rotate and scale.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_transformPivotY">android:transformPivotY</see>
			/// </code></td><td> y location of the pivot point around which the view will rotate and scale.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_translationX">android:translationX</see>
			/// </code></td><td> translation in x of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_translationY">android:translationY</see>
			/// </code></td><td> translation in y of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_verticalScrollbarPosition">android:verticalScrollbarPosition</see>
			/// </code></td><td> Determines which side the vertical scroll bar should be placed on.</td></tr>
			/// <tr><td><code>
			/// <see cref="View_visibility">android:visibility</see>
			/// </code></td><td> Controls the initial visibility of the view.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="View_alpha">View_alpha</seealso>
			/// <seealso cref="View_background">View_background</seealso>
			/// <seealso cref="View_clickable">View_clickable</seealso>
			/// <seealso cref="View_contentDescription">View_contentDescription</seealso>
			/// <seealso cref="View_drawingCacheQuality">View_drawingCacheQuality</seealso>
			/// <seealso cref="View_duplicateParentState">View_duplicateParentState</seealso>
			/// <seealso cref="View_fadeScrollbars">View_fadeScrollbars</seealso>
			/// <seealso cref="View_fadingEdge">View_fadingEdge</seealso>
			/// <seealso cref="View_fadingEdgeLength">View_fadingEdgeLength</seealso>
			/// <seealso cref="View_filterTouchesWhenObscured">View_filterTouchesWhenObscured</seealso>
			/// <seealso cref="View_fitsSystemWindows">View_fitsSystemWindows</seealso>
			/// <seealso cref="View_focusable">View_focusable</seealso>
			/// <seealso cref="View_focusableInTouchMode">View_focusableInTouchMode</seealso>
			/// <seealso cref="View_hapticFeedbackEnabled">View_hapticFeedbackEnabled</seealso>
			/// <seealso cref="View_id">View_id</seealso>
			/// <seealso cref="View_isScrollContainer">View_isScrollContainer</seealso>
			/// <seealso cref="View_keepScreenOn">View_keepScreenOn</seealso>
			/// <seealso cref="View_layerType">View_layerType</seealso>
			/// <seealso cref="View_layoutDirection">View_layoutDirection</seealso>
			/// <seealso cref="View_longClickable">View_longClickable</seealso>
			/// <seealso cref="View_minHeight">View_minHeight</seealso>
			/// <seealso cref="View_minWidth">View_minWidth</seealso>
			/// <seealso cref="View_nextFocusDown">View_nextFocusDown</seealso>
			/// <seealso cref="View_nextFocusForward">View_nextFocusForward</seealso>
			/// <seealso cref="View_nextFocusLeft">View_nextFocusLeft</seealso>
			/// <seealso cref="View_nextFocusRight">View_nextFocusRight</seealso>
			/// <seealso cref="View_nextFocusUp">View_nextFocusUp</seealso>
			/// <seealso cref="View_onClick">View_onClick</seealso>
			/// <seealso cref="View_overScrollMode">View_overScrollMode</seealso>
			/// <seealso cref="View_padding">View_padding</seealso>
			/// <seealso cref="View_paddingBottom">View_paddingBottom</seealso>
			/// <seealso cref="View_paddingEnd">View_paddingEnd</seealso>
			/// <seealso cref="View_paddingLeft">View_paddingLeft</seealso>
			/// <seealso cref="View_paddingRight">View_paddingRight</seealso>
			/// <seealso cref="View_paddingStart">View_paddingStart</seealso>
			/// <seealso cref="View_paddingTop">View_paddingTop</seealso>
			/// <seealso cref="View_requiresFadingEdge">View_requiresFadingEdge</seealso>
			/// <seealso cref="View_rotation">View_rotation</seealso>
			/// <seealso cref="View_rotationX">View_rotationX</seealso>
			/// <seealso cref="View_rotationY">View_rotationY</seealso>
			/// <seealso cref="View_saveEnabled">View_saveEnabled</seealso>
			/// <seealso cref="View_scaleX">View_scaleX</seealso>
			/// <seealso cref="View_scaleY">View_scaleY</seealso>
			/// <seealso cref="View_scrollX">View_scrollX</seealso>
			/// <seealso cref="View_scrollY">View_scrollY</seealso>
			/// <seealso cref="View_scrollbarAlwaysDrawHorizontalTrack">View_scrollbarAlwaysDrawHorizontalTrack
			/// 	</seealso>
			/// <seealso cref="View_scrollbarAlwaysDrawVerticalTrack">View_scrollbarAlwaysDrawVerticalTrack
			/// 	</seealso>
			/// <seealso cref="View_scrollbarDefaultDelayBeforeFade">View_scrollbarDefaultDelayBeforeFade
			/// 	</seealso>
			/// <seealso cref="View_scrollbarFadeDuration">View_scrollbarFadeDuration</seealso>
			/// <seealso cref="View_scrollbarSize">View_scrollbarSize</seealso>
			/// <seealso cref="View_scrollbarStyle">View_scrollbarStyle</seealso>
			/// <seealso cref="View_scrollbarThumbHorizontal">View_scrollbarThumbHorizontal</seealso>
			/// <seealso cref="View_scrollbarThumbVertical">View_scrollbarThumbVertical</seealso>
			/// <seealso cref="View_scrollbarTrackHorizontal">View_scrollbarTrackHorizontal</seealso>
			/// <seealso cref="View_scrollbarTrackVertical">View_scrollbarTrackVertical</seealso>
			/// <seealso cref="View_scrollbars">View_scrollbars</seealso>
			/// <seealso cref="View_soundEffectsEnabled">View_soundEffectsEnabled</seealso>
			/// <seealso cref="View_tag">View_tag</seealso>
			/// <seealso cref="View_textDirection">View_textDirection</seealso>
			/// <seealso cref="View_transformPivotX">View_transformPivotX</seealso>
			/// <seealso cref="View_transformPivotY">View_transformPivotY</seealso>
			/// <seealso cref="View_translationX">View_translationX</seealso>
			/// <seealso cref="View_translationY">View_translationY</seealso>
			/// <seealso cref="View_verticalScrollbarPosition">View_verticalScrollbarPosition</seealso>
			/// <seealso cref="View_visibility">View_visibility</seealso>
			public static readonly int[] View = new int[] { unchecked((int)(0x01010063)), unchecked(
				(int)(0x01010064)), unchecked((int)(0x01010065)), unchecked((int)(0x01010066)), 
				unchecked((int)(0x01010067)), unchecked((int)(0x01010068)), unchecked((int)(0x01010069
				)), unchecked((int)(0x0101007f)), unchecked((int)(0x010100d0)), unchecked((int)(
				0x010100d1)), unchecked((int)(0x010100d2)), unchecked((int)(0x010100d3)), unchecked(
				(int)(0x010100d4)), unchecked((int)(0x010100d5)), unchecked((int)(0x010100d6)), 
				unchecked((int)(0x010100d7)), unchecked((int)(0x010100d8)), unchecked((int)(0x010100d9
				)), unchecked((int)(0x010100da)), unchecked((int)(0x010100db)), unchecked((int)(
				0x010100dc)), unchecked((int)(0x010100dd)), unchecked((int)(0x010100de)), unchecked(
				(int)(0x010100df)), unchecked((int)(0x010100e0)), unchecked((int)(0x010100e1)), 
				unchecked((int)(0x010100e2)), unchecked((int)(0x010100e3)), unchecked((int)(0x010100e4
				)), unchecked((int)(0x010100e5)), unchecked((int)(0x010100e6)), unchecked((int)(
				0x010100e7)), unchecked((int)(0x010100e8)), unchecked((int)(0x010100e9)), unchecked(
				(int)(0x0101013f)), unchecked((int)(0x01010140)), unchecked((int)(0x01010215)), 
				unchecked((int)(0x01010216)), unchecked((int)(0x0101024e)), unchecked((int)(0x0101025e
				)), unchecked((int)(0x0101026f)), unchecked((int)(0x01010273)), unchecked((int)(
				0x010102a8)), unchecked((int)(0x010102a9)), unchecked((int)(0x010102aa)), unchecked(
				(int)(0x010102c1)), unchecked((int)(0x010102c4)), unchecked((int)(0x0101031f)), 
				unchecked((int)(0x01010320)), unchecked((int)(0x01010321)), unchecked((int)(0x01010322
				)), unchecked((int)(0x01010323)), unchecked((int)(0x01010324)), unchecked((int)(
				0x01010325)), unchecked((int)(0x01010326)), unchecked((int)(0x01010327)), unchecked(
				(int)(0x01010328)), unchecked((int)(0x01010334)), unchecked((int)(0x0101033c)), 
				unchecked((int)(0x01010354)), unchecked((int)(0x010103a5)), unchecked((int)(0x010103dd
				)), unchecked((int)(0x010103de)), unchecked((int)(0x010103df)), unchecked((int)(
				0x010103e0)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// alpha property of the view, as a value between 0 (completely transparent) and 1
			/// (completely opaque).
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alpha">android.R.attr.alpha</see>
			/// .
			/// </attr>
			/// <attr>name android:alpha</attr>
			public const int View_alpha = 47;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A drawable to use as the background.  This can be either a reference
			/// to a full drawable resource (such as a PNG image, 9-patch,
			/// XML state list description, etc), or a solid color such as "#ff000000"
			/// (black).
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// .
			/// </attr>
			/// <attr>name android:background</attr>
			public const int View_background = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether this view reacts to click events.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.clickable">android.R.attr.clickable</see>
			/// .
			/// </attr>
			/// <attr>name android:clickable</attr>
			public const int View_clickable = 29;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines text that briefly describes content of the view. This property is used
			/// primarily for accessibility. Since some views do not have textual
			/// representation this attribute can be used for providing such.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.contentDescription">android.R.attr.contentDescription</see>
			/// .
			/// </attr>
			/// <attr>name android:contentDescription</attr>
			public const int View_contentDescription = 41;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the quality of translucent drawing caches. This property is used
			/// only when the drawing cache is enabled and translucent. The default value is auto.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>auto</code></td><td>0</td><td> Lets the framework decide what quality level should be used
			/// for the drawing cache. </td></tr>
			/// <tr><td><code>low</code></td><td>1</td><td> Low quality. When set to low quality, the drawing cache uses a lower color
			/// depth, thus losing precision in rendering gradients, but uses less memory. </td></tr>
			/// <tr><td><code>high</code></td><td>2</td><td> High quality. When set to high quality, the drawing cache uses a higher
			/// color depth but uses more memory. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.drawingCacheQuality">android.R.attr.drawingCacheQuality
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:drawingCacheQuality</attr>
			public const int View_drawingCacheQuality = 32;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When this attribute is set to true, the view gets its drawable state
			/// (focused, pressed, etc.) from its direct parent rather than from itself.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.duplicateParentState">android.R.attr.duplicateParentState
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:duplicateParentState</attr>
			public const int View_duplicateParentState = 33;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether to fade out scrollbars when they are not in use.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fadeScrollbars">android.R.attr.fadeScrollbars</see>
			/// .
			/// </attr>
			/// <attr>name android:fadeScrollbars</attr>
			public const int View_fadeScrollbars = 44;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// <deprecated>This attribute is deprecated and will be ignored as of</deprecated>
			/// API level
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// .
			/// Using fading edges may introduce noticeable performance
			/// degradations and should be used only when required by the application's
			/// visual design. To request fading edges with API level
			/// <see cref="android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH">android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH
			/// 	</see>
			/// and above,
			/// use the <code>requiresFadingEdge</code> attribute instead.}
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
			/// <tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fadingEdge">android.R.attr.fadingEdge</see>
			/// .
			/// </attr>
			/// <attr>name android:fadingEdge</attr>
			[System.Obsolete]
			public const int View_fadingEdge = 23;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the length of the fading edges.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fadingEdgeLength">android.R.attr.fadingEdgeLength</see>
			/// .
			/// </attr>
			/// <attr>name android:fadingEdgeLength</attr>
			public const int View_fadingEdgeLength = 24;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies whether to filter touches when the view's window is obscured by
			/// another visible window.  When set to true, the view will not receive touches
			/// whenever a toast, dialog or other window appears above the view's window.
			/// Refer to the
			/// <see cref="android.view.View">android.view.View</see>
			/// security documentation for more details.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.filterTouchesWhenObscured">android.R.attr.filterTouchesWhenObscured
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:filterTouchesWhenObscured</attr>
			public const int View_filterTouchesWhenObscured = 46;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Boolean internal attribute to adjust view layout based on
			/// system windows such as the status bar.
			/// If true, adjusts the padding of this view to leave space for the system windows.
			/// Will only take effect if this view is in a non-embedded activity.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.fitsSystemWindows">android.R.attr.fitsSystemWindows</see>
			/// .
			/// </attr>
			/// <attr>name android:fitsSystemWindows</attr>
			public const int View_fitsSystemWindows = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Boolean that controls whether a view can take focus.  By default the user can not
			/// move focus to a view; by setting this attribute to true the view is
			/// allowed to take focus.  This value does not impact the behavior of
			/// directly calling
			/// <see cref="android.view.View.requestFocus()">android.view.View.requestFocus()</see>
			/// , which will
			/// always request focus regardless of this view.  It only impacts where
			/// focus navigation will try to move focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.focusable">android.R.attr.focusable</see>
			/// .
			/// </attr>
			/// <attr>name android:focusable</attr>
			public const int View_focusable = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Boolean that controls whether a view can take focus while in touch mode.
			/// If this is true for a view, that view can gain focus when clicked on, and can keep
			/// focus if another view is clicked on that doesn't have this attribute set to true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.focusableInTouchMode">android.R.attr.focusableInTouchMode
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:focusableInTouchMode</attr>
			public const int View_focusableInTouchMode = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Boolean that controls whether a view should have haptic feedback
			/// enabled for events such as long presses.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.hapticFeedbackEnabled">android.R.attr.hapticFeedbackEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:hapticFeedbackEnabled</attr>
			public const int View_hapticFeedbackEnabled = 39;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply an identifier name for this view, to later retrieve it
			/// with
			/// <see cref="android.view.View.findViewById(int)">View.findViewById()</see>
			/// or
			/// <see cref="android.app.Activity.findViewById(int)">Activity.findViewById()</see>
			/// .
			/// This must be a
			/// resource reference; typically you set this using the
			/// <code>@+</code> syntax to create a new ID resources.
			/// For example: <code>android:id="@+id/my_id"</code> which
			/// allows you to later retrieve the view
			/// with <code>findViewById(R.id.my_id)</code>.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.id">android.R.attr.id</see>
			/// .
			/// </attr>
			/// <attr>name android:id</attr>
			public const int View_id = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Set this if the view will serve as a scrolling container, meaing
			/// that it can be resized to shrink its overall window so that there
			/// will be space for an input method.  If not set, the default
			/// value will be true if "scrollbars" has the vertical scrollbar
			/// set, else it will be false.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.isScrollContainer">android.R.attr.isScrollContainer</see>
			/// .
			/// </attr>
			/// <attr>name android:isScrollContainer</attr>
			public const int View_isScrollContainer = 38;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Controls whether the view's window should keep the screen on
			/// while visible.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.keepScreenOn">android.R.attr.keepScreenOn</see>
			/// .
			/// </attr>
			/// <attr>name android:keepScreenOn</attr>
			public const int View_keepScreenOn = 37;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the type of layer backing this view. The default value is none.
			/// Refer to
			/// <see cref="android.view.View.setLayerType(int, android.graphics.Paint)">android.view.View.setLayerType(int, android.graphics.Paint)
			/// 	</see>
			/// for more information.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0</td><td> Don't use a layer. </td></tr>
			/// <tr><td><code>software</code></td><td>1</td><td> Use a software layer. Refer to
			/// <see cref="android.view.View.setLayerType(int, android.graphics.Paint)">
			/// for
			/// more information. </td></tr>
			/// <tr><td><code>hardware</code></td><td>2</td><td> Use a hardware layer. Refer to
			/// </see>
			/// {
			/// <see cref="android.view.View.setLayerType(int, android.graphics.Paint)">
			/// for
			/// more information. </td></tr>
			/// </table>
			/// </see>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layerType">android.R.attr.layerType</see>
			/// .
			/// </attr>
			/// <attr>name android:layerType</attr>
			public const int View_layerType = 59;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the direction of layout drawing. This typically is associated with writing
			/// direction of the language script used. The possible values are "ltr" for Left-to-Right,
			/// "rtl" for Right-to-Left, "locale" and "inherit" from parent view. If there is nothing
			/// to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
			/// used in "en-US". The default for this attribute is "inherit".
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>ltr</code></td><td>0</td><td> Left-to-Right </td></tr>
			/// <tr><td><code>rtl</code></td><td>1</td><td> Right-to-Left </td></tr>
			/// <tr><td><code>inherit</code></td><td>2</td><td> Inherit from parent </td></tr>
			/// <tr><td><code>locale</code></td><td>3</td><td> Locale </td></tr>
			/// </table>
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:layoutDirection</attr>
			public const int View_layoutDirection = 63;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether this view reacts to long click events.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.longClickable">android.R.attr.longClickable</see>
			/// .
			/// </attr>
			/// <attr>name android:longClickable</attr>
			public const int View_longClickable = 30;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the minimum height of the view. It is not guaranteed
			/// the view will be able to achieve this minimum height (for example,
			/// if its parent layout constrains it with less available height).
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minHeight">android.R.attr.minHeight</see>
			/// .
			/// </attr>
			/// <attr>name android:minHeight</attr>
			public const int View_minHeight = 35;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the minimum width of the view. It is not guaranteed
			/// the view will be able to achieve this minimum width (for example,
			/// if its parent layout constrains it with less available width).
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.minWidth">android.R.attr.minWidth</see>
			/// .
			/// </attr>
			/// <attr>name android:minWidth</attr>
			public const int View_minWidth = 34;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_DOWN">android.view.View.FOCUS_DOWN</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.nextFocusDown">android.R.attr.nextFocusDown</see>
			/// .
			/// </attr>
			/// <attr>name android:nextFocusDown</attr>
			public const int View_nextFocusDown = 28;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_FORWARD">android.view.View.FOCUS_FORWARD</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.nextFocusForward">android.R.attr.nextFocusForward</see>
			/// .
			/// </attr>
			/// <attr>name android:nextFocusForward</attr>
			public const int View_nextFocusForward = 58;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_LEFT">android.view.View.FOCUS_LEFT</see>
			/// .
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.nextFocusLeft">android.R.attr.nextFocusLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:nextFocusLeft</attr>
			public const int View_nextFocusLeft = 25;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_RIGHT">android.view.View.FOCUS_RIGHT</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.nextFocusRight">android.R.attr.nextFocusRight</see>
			/// .
			/// </attr>
			/// <attr>name android:nextFocusRight</attr>
			public const int View_nextFocusRight = 26;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the next view to give focus to when the next focus is
			/// <see cref="android.view.View.FOCUS_UP">android.view.View.FOCUS_UP</see>
			/// If the reference refers to a view that does not exist or is part
			/// of a hierarchy that is invisible, a
			/// <see cref="java.lang.RuntimeException">java.lang.RuntimeException</see>
			/// will result when the reference is accessed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.nextFocusUp">android.R.attr.nextFocusUp</see>
			/// .
			/// </attr>
			/// <attr>name android:nextFocusUp</attr>
			public const int View_nextFocusUp = 27;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Name of the method in this View's context to invoke when the view is
			/// clicked. This name must correspond to a public method that takes
			/// exactly one parameter of type View. For instance, if you specify
			/// <code>android:onClick="sayHello"</code>, you must declare a
			/// <code>public void sayHello(View v)</code> method of your context
			/// (typically, your Activity).
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.onClick">android.R.attr.onClick</see>
			/// .
			/// </attr>
			/// <attr>name android:onClick</attr>
			public const int View_onClick = 40;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines over-scrolling behavior. This property is used only if the
			/// View is scrollable. Over-scrolling is the ability for the user to
			/// receive feedback when attempting to scroll beyond meaningful content.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>always</code></td><td>0</td><td> Always show over-scroll effects, even if the content fits entirely
			/// within the available space. </td></tr>
			/// <tr><td><code>ifContentScrolls</code></td><td>1</td><td> Only show over-scroll effects if the content is large
			/// enough to meaningfully scroll. </td></tr>
			/// <tr><td><code>never</code></td><td>2</td><td> Never show over-scroll effects. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.overScrollMode">android.R.attr.overScrollMode</see>
			/// .
			/// </attr>
			/// <attr>name android:overScrollMode</attr>
			public const int View_overScrollMode = 45;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of all four edges.  Padding is defined as
			/// space between the edges of the view and the view's content. A views size
			/// will include it's padding.  If a
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// is provided, the padding will initially be set to that (0 if the
			/// drawable does not have padding).  Explicitly setting a padding value
			/// will override the corresponding padding found in the background.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// </attr>
			/// <attr>name android:padding</attr>
			public const int View_padding = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of the bottom edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.paddingBottom">android.R.attr.paddingBottom</see>
			/// .
			/// </attr>
			/// <attr>name android:paddingBottom</attr>
			public const int View_paddingBottom = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of the end edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:paddingEnd</attr>
			public const int View_paddingEnd = 62;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of the left edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.paddingLeft">android.R.attr.paddingLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:paddingLeft</attr>
			public const int View_paddingLeft = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of the right edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.paddingRight">android.R.attr.paddingRight</see>
			/// .
			/// </attr>
			/// <attr>name android:paddingRight</attr>
			public const int View_paddingRight = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of the start edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:paddingStart</attr>
			public const int View_paddingStart = 61;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the padding, in pixels, of the top edge; see
			/// <see cref="android.R.attr.padding">android.R.attr.padding</see>
			/// .
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.paddingTop">android.R.attr.paddingTop</see>
			/// .
			/// </attr>
			/// <attr>name android:paddingTop</attr>
			public const int View_paddingTop = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines which edges should be faded on scrolling.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> No edge is faded. </td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x00001000</td><td> Fades horizontal edges only. </td></tr>
			/// <tr><td><code>vertical</code></td><td>0x00002000</td><td> Fades vertical edges only. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.requiresFadingEdge">android.R.attr.requiresFadingEdge</see>
			/// .
			/// </attr>
			/// <attr>name android:requiresFadingEdge</attr>
			public const int View_requiresFadingEdge = 60;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// rotation of the view, in degrees.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rotation">android.R.attr.rotation</see>
			/// .
			/// </attr>
			/// <attr>name android:rotation</attr>
			public const int View_rotation = 54;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// rotation of the view around the x axis, in degrees.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rotationX">android.R.attr.rotationX</see>
			/// .
			/// </attr>
			/// <attr>name android:rotationX</attr>
			public const int View_rotationX = 55;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// rotation of the view around the y axis, in degrees.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.rotationY">android.R.attr.rotationY</see>
			/// .
			/// </attr>
			/// <attr>name android:rotationY</attr>
			public const int View_rotationY = 56;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// If unset, no state will be saved for this view when it is being
			/// frozen. The default is true, allowing the view to be saved
			/// (however it also must have an ID assigned to it for its
			/// state to be saved).  Setting this to false only disables the
			/// state for this view, not for its children which may still
			/// be saved.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.saveEnabled">android.R.attr.saveEnabled</see>
			/// .
			/// </attr>
			/// <attr>name android:saveEnabled</attr>
			public const int View_saveEnabled = 31;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// scale of the view in the x direction.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scaleX">android.R.attr.scaleX</see>
			/// .
			/// </attr>
			/// <attr>name android:scaleX</attr>
			public const int View_scaleX = 52;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// scale of the view in the y direction.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scaleY">android.R.attr.scaleY</see>
			/// .
			/// </attr>
			/// <attr>name android:scaleY</attr>
			public const int View_scaleY = 53;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The initial horizontal scroll offset, in pixels.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollX">android.R.attr.scrollX</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollX</attr>
			public const int View_scrollX = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The initial vertical scroll offset, in pixels.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollY">android.R.attr.scrollY</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollY</attr>
			public const int View_scrollY = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the horizontal scrollbar track should always be drawn.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarAlwaysDrawHorizontalTrack">android.R.attr.scrollbarAlwaysDrawHorizontalTrack
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarAlwaysDrawHorizontalTrack</attr>
			public const int View_scrollbarAlwaysDrawHorizontalTrack = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the vertical scrollbar track should always be drawn.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarAlwaysDrawVerticalTrack">android.R.attr.scrollbarAlwaysDrawVerticalTrack
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarAlwaysDrawVerticalTrack</attr>
			public const int View_scrollbarAlwaysDrawVerticalTrack = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the delay in milliseconds that a scrollbar waits before fade out.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarDefaultDelayBeforeFade">android.R.attr.scrollbarDefaultDelayBeforeFade
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarDefaultDelayBeforeFade</attr>
			public const int View_scrollbarDefaultDelayBeforeFade = 43;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the delay in milliseconds that a scrollbar takes to fade out.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarFadeDuration">android.R.attr.scrollbarFadeDuration
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarFadeDuration</attr>
			public const int View_scrollbarFadeDuration = 42;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets the width of vertical scrollbars and height of horizontal scrollbars.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarSize">android.R.attr.scrollbarSize</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarSize</attr>
			public const int View_scrollbarSize = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Controls the scrollbar style and position. The scrollbars can be overlaid or
			/// inset. When inset, they add to the padding of the view. And the
			/// scrollbars can be drawn inside the padding area or on the edge of
			/// the view. For example, if a view has a background drawable and you
			/// want to draw the scrollbars inside the padding specified by the
			/// drawable, you can use insideOverlay or insideInset. If you want them
			/// to appear at the edge of the view, ignoring the padding, then you can
			/// use outsideOverlay or outsideInset.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>insideOverlay</code></td><td>0x0</td><td> Inside the padding and overlaid </td></tr>
			/// <tr><td><code>insideInset</code></td><td>0x01000000</td><td> Inside the padding and inset </td></tr>
			/// <tr><td><code>outsideOverlay</code></td><td>0x02000000</td><td> Edge of the view and overlaid </td></tr>
			/// <tr><td><code>outsideInset</code></td><td>0x03000000</td><td> Edge of the view and inset </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarStyle">android.R.attr.scrollbarStyle</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarStyle</attr>
			public const int View_scrollbarStyle = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the horizontal scrollbar thumb drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarThumbHorizontal">android.R.attr.scrollbarThumbHorizontal
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarThumbHorizontal</attr>
			public const int View_scrollbarThumbHorizontal = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the vertical scrollbar thumb drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarThumbVertical">android.R.attr.scrollbarThumbVertical
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarThumbVertical</attr>
			public const int View_scrollbarThumbVertical = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the horizontal scrollbar track drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarTrackHorizontal">android.R.attr.scrollbarTrackHorizontal
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarTrackHorizontal</attr>
			public const int View_scrollbarTrackHorizontal = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the vertical scrollbar track drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbarTrackVertical">android.R.attr.scrollbarTrackVertical
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbarTrackVertical</attr>
			public const int View_scrollbarTrackVertical = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines which scrollbars should be displayed on scrolling or not.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x00000000</td><td> No scrollbar is displayed. </td></tr>
			/// <tr><td><code>horizontal</code></td><td>0x00000100</td><td> Displays horizontal scrollbar only. </td></tr>
			/// <tr><td><code>vertical</code></td><td>0x00000200</td><td> Displays vertical scrollbar only. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.scrollbars">android.R.attr.scrollbars</see>
			/// .
			/// </attr>
			/// <attr>name android:scrollbars</attr>
			public const int View_scrollbars = 22;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Boolean that controls whether a view should have sound effects
			/// enabled for events such as clicking and touching.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.soundEffectsEnabled">android.R.attr.soundEffectsEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:soundEffectsEnabled</attr>
			public const int View_soundEffectsEnabled = 36;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply a tag for this view containing a String, to be retrieved
			/// later with
			/// <see cref="android.view.View.getTag()">View.getTag()</see>
			/// or
			/// searched for with
			/// <see cref="android.view.View.findViewWithTag(object)">View.findViewWithTag()</see>
			/// .  It is generally preferable to use
			/// IDs (through the android:id attribute) instead of tags because
			/// they are faster and allow for compile-time type checking.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.tag">android.R.attr.tag</see>
			/// .
			/// </attr>
			/// <attr>name android:tag</attr>
			public const int View_tag = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Direction of the text. A heuristic is used to determine the resolved text direction
			/// of paragraphs.
			/// <p>May be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>inherit</code></td><td>0</td><td> Default </td></tr>
			/// <tr><td><code>firstStrong</code></td><td>1</td><td> Default for the root view. The first strong directional character determines the
			/// paragraph direction.  If there is no strong directional character, the paragraph
			/// direction is the view’s resolved layout direction. </td></tr>
			/// <tr><td><code>anyRtl</code></td><td>2</td><td> The paragraph direction is RTL if it contains any strong RTL character, otherwise
			/// it is LTR if it contains any strong LTR characters.  If there are neither, the
			/// paragraph direction is the view’s resolved layout direction. </td></tr>
			/// <tr><td><code>charCount</code></td><td>3</td><td> The paragraph direction is the same as the one held by a 60% majority of the
			/// characters. If there is no majority then the paragraph direction is the resolved
			/// layout direction of the View. </td></tr>
			/// <tr><td><code>ltr</code></td><td>4</td><td> The paragraph direction is left to right. </td></tr>
			/// <tr><td><code>rtl</code></td><td>5</td><td> The paragraph direction is right to left. </td></tr>
			/// </table>
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:textDirection</attr>
			public const int View_textDirection = 64;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// x location of the pivot point around which the view will rotate and scale.
			/// This xml attribute sets the pivotX property of the View.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.transformPivotX">android.R.attr.transformPivotX</see>
			/// .
			/// </attr>
			/// <attr>name android:transformPivotX</attr>
			public const int View_transformPivotX = 48;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// y location of the pivot point around which the view will rotate and scale.
			/// This xml attribute sets the pivotY property of the View.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.transformPivotY">android.R.attr.transformPivotY</see>
			/// .
			/// </attr>
			/// <attr>name android:transformPivotY</attr>
			public const int View_transformPivotY = 49;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// translation in x of the view. This value is added post-layout to the left
			/// property of the view, which is set by its layout.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.translationX">android.R.attr.translationX</see>
			/// .
			/// </attr>
			/// <attr>name android:translationX</attr>
			public const int View_translationX = 50;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// translation in y of the view. This value is added post-layout to the left
			/// property of the view, which is set by its layout.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.translationY">android.R.attr.translationY</see>
			/// .
			/// </attr>
			/// <attr>name android:translationY</attr>
			public const int View_translationY = 51;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Determines which side the vertical scroll bar should be placed on.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>defaultPosition</code></td><td>0</td><td> Place the scroll bar wherever the system default determines. </td></tr>
			/// <tr><td><code>left</code></td><td>1</td><td> Place the scroll bar on the left. </td></tr>
			/// <tr><td><code>right</code></td><td>2</td><td> Place the scroll bar on the right. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.verticalScrollbarPosition">android.R.attr.verticalScrollbarPosition
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:verticalScrollbarPosition</attr>
			public const int View_verticalScrollbarPosition = 57;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Controls the initial visibility of the view.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>visible</code></td><td>0</td><td> Visible on screen; the default value. </td></tr>
			/// <tr><td><code>invisible</code></td><td>1</td><td> Not displayed, but taken into account during layout (space is left for it). </td></tr>
			/// <tr><td><code>gone</code></td><td>2</td><td> Completely hidden, as if the view had not been added. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.visibility">android.R.attr.visibility</see>
			/// .
			/// </attr>
			/// <attr>name android:visibility</attr>
			public const int View_visibility = 20;

			/// <summary>Attributes that can be used with a ViewAnimator.</summary>
			/// <remarks>
			/// Attributes that can be used with a ViewAnimator.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewAnimator_animateFirstView">android:animateFirstView</see>
			/// </code></td><td> Defines whether to animate the current View when the ViewAnimation
			/// is first displayed.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewAnimator_inAnimation">android:inAnimation</see>
			/// </code></td><td> Identifier for the animation to use when a view is shown.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewAnimator_outAnimation">android:outAnimation</see>
			/// </code></td><td> Identifier for the animation to use when a view is hidden.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ViewAnimator_animateFirstView">ViewAnimator_animateFirstView</seealso>
			/// <seealso cref="ViewAnimator_inAnimation">ViewAnimator_inAnimation</seealso>
			/// <seealso cref="ViewAnimator_outAnimation">ViewAnimator_outAnimation</seealso>
			public static readonly int[] ViewAnimator = new int[] { unchecked((int)(0x01010177
				)), unchecked((int)(0x01010178)), unchecked((int)(0x010102d5)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether to animate the current View when the ViewAnimation
			/// is first displayed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animateFirstView">android.R.attr.animateFirstView</see>
			/// .
			/// </attr>
			/// <attr>name android:animateFirstView</attr>
			public const int ViewAnimator_animateFirstView = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier for the animation to use when a view is shown.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inAnimation">android.R.attr.inAnimation</see>
			/// .
			/// </attr>
			/// <attr>name android:inAnimation</attr>
			public const int ViewAnimator_inAnimation = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Identifier for the animation to use when a view is hidden.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.outAnimation">android.R.attr.outAnimation</see>
			/// .
			/// </attr>
			/// <attr>name android:outAnimation</attr>
			public const int ViewAnimator_outAnimation = 1;

			/// <summary>Attributes that can be used with a ViewDrawableStates.</summary>
			/// <remarks>
			/// Attributes that can be used with a ViewDrawableStates.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_accelerated">android:state_accelerated</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_activated">android:state_activated</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view or its parent has been "activated" meaning the user has currently
			/// marked it as being of interest.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_drag_can_accept">android:state_drag_can_accept
			/// 	</see>
			/// </code></td><td> State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that the Drawable is in a view that is capable of accepting a drop of
			/// the content currently being manipulated in a drag-and-drop operation.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_drag_hovered">android:state_drag_hovered</see>
			/// </code></td><td> State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that a drag operation (for which the Drawable's view is a valid recipient)
			/// is currently positioned over the Drawable.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_enabled">android:state_enabled</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_focused">android:state_focused</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_hovered">android:state_hovered</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a pointer is hovering over the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_pressed">android:state_pressed</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when the user is pressing down in a view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_selected">android:state_selected</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view (or one of its parents) is currently selected.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewDrawableStates_state_window_focused">android:state_window_focused</see>
			/// </code></td><td> State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view's window has input focus.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ViewDrawableStates_state_accelerated">ViewDrawableStates_state_accelerated
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_activated">ViewDrawableStates_state_activated
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_drag_can_accept">ViewDrawableStates_state_drag_can_accept
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_drag_hovered">ViewDrawableStates_state_drag_hovered
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_enabled">ViewDrawableStates_state_enabled
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_focused">ViewDrawableStates_state_focused
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_hovered">ViewDrawableStates_state_hovered
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_pressed">ViewDrawableStates_state_pressed
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_selected">ViewDrawableStates_state_selected
			/// 	</seealso>
			/// <seealso cref="ViewDrawableStates_state_window_focused">ViewDrawableStates_state_window_focused
			/// 	</seealso>
			public static readonly int[] ViewDrawableStates = new int[] { unchecked((int)(0x0101009c
				)), unchecked((int)(0x0101009d)), unchecked((int)(0x0101009e)), unchecked((int)(
				0x010100a1)), unchecked((int)(0x010100a7)), unchecked((int)(0x010102fe)), unchecked(
				(int)(0x0101031b)), unchecked((int)(0x01010367)), unchecked((int)(0x01010368)), 
				unchecked((int)(0x01010369)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// indicating that the Drawable is in a view that is hardware accelerated.
			/// This means that the device can at least render a full-screen scaled
			/// bitmap with one layer of text and bitmaps composited on top of it
			/// at 60fps.  When this is set, the colorBackgroundCacheHint will be
			/// ignored even if it specifies a solid color, since that optimization
			/// is not needed.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_accelerated">android.R.attr.state_accelerated</see>
			/// .
			/// </attr>
			/// <attr>name android:state_accelerated</attr>
			public const int ViewDrawableStates_state_accelerated = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view or its parent has been "activated" meaning the user has currently
			/// marked it as being of interest.  This is an alternative representation of
			/// state_checked for when the state should be propagated down the view hierarchy.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_activated">android.R.attr.state_activated</see>
			/// .
			/// </attr>
			/// <attr>name android:state_activated</attr>
			public const int ViewDrawableStates_state_activated = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that the Drawable is in a view that is capable of accepting a drop of
			/// the content currently being manipulated in a drag-and-drop operation.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_drag_can_accept">android.R.attr.state_drag_can_accept
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:state_drag_can_accept</attr>
			public const int ViewDrawableStates_state_drag_can_accept = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// indicating that a drag operation (for which the Drawable's view is a valid recipient)
			/// is currently positioned over the Drawable.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_drag_hovered">android.R.attr.state_drag_hovered</see>
			/// .
			/// </attr>
			/// <attr>name android:state_drag_hovered</attr>
			public const int ViewDrawableStates_state_drag_hovered = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view is enabled.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_enabled">android.R.attr.state_enabled</see>
			/// .
			/// </attr>
			/// <attr>name android:state_enabled</attr>
			public const int ViewDrawableStates_state_enabled = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_focused">android.R.attr.state_focused</see>
			/// .
			/// </attr>
			/// <attr>name android:state_focused</attr>
			public const int ViewDrawableStates_state_focused = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a pointer is hovering over the view.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_hovered">android.R.attr.state_hovered</see>
			/// .
			/// </attr>
			/// <attr>name android:state_hovered</attr>
			public const int ViewDrawableStates_state_hovered = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when the user is pressing down in a view.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_pressed">android.R.attr.state_pressed</see>
			/// .
			/// </attr>
			/// <attr>name android:state_pressed</attr>
			public const int ViewDrawableStates_state_pressed = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view (or one of its parents) is currently selected.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_selected">android.R.attr.state_selected</see>
			/// .
			/// </attr>
			/// <attr>name android:state_selected</attr>
			public const int ViewDrawableStates_state_selected = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// State value for
			/// <see cref="android.graphics.drawable.StateListDrawable">StateListDrawable</see>
			/// ,
			/// set when a view's window has input focus.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.state_window_focused">android.R.attr.state_window_focused
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:state_window_focused</attr>
			public const int ViewDrawableStates_state_window_focused = 1;

			/// <summary>Attributes that can be used with a ViewFlipper.</summary>
			/// <remarks>
			/// Attributes that can be used with a ViewFlipper.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewFlipper_autoStart">android:autoStart</see>
			/// </code></td><td> When true, automatically start animating </td></tr>
			/// <tr><td><code>
			/// <see cref="ViewFlipper_flipInterval">android:flipInterval</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ViewFlipper_autoStart">ViewFlipper_autoStart</seealso>
			/// <seealso cref="ViewFlipper_flipInterval">ViewFlipper_flipInterval</seealso>
			public static readonly int[] ViewFlipper = new int[] { unchecked((int)(0x01010179
				)), unchecked((int)(0x010102b5)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When true, automatically start animating
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.autoStart">android.R.attr.autoStart</see>
			/// .
			/// </attr>
			/// <attr>name android:autoStart</attr>
			public const int ViewFlipper_autoStart = 1;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="android.R.attr.flipInterval">android.R.attr.flipInterval</see>
			/// attribute's value can be found in the
			/// <see cref="ViewFlipper">ViewFlipper</see>
			/// array.
			/// <p>Must be an integer value, such as "<code>100</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:flipInterval</attr>
			public const int ViewFlipper_flipInterval = 0;

			/// <summary>
			/// Attributes that can be used with a
			/// <see cref="android.view.ViewGroup">android.view.ViewGroup</see>
			/// or any
			/// of its subclasses.  Also see
			/// <see cref="ViewGroup_Layout">ViewGroup_Layout</see>
			/// for
			/// attributes that this class processes in its children.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_addStatesFromChildren">android:addStatesFromChildren</see>
			/// </code></td><td> Sets whether this ViewGroup's drawable states also include
			/// its children's drawable states.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_alwaysDrawnWithCache">android:alwaysDrawnWithCache</see>
			/// </code></td><td> Defines whether the ViewGroup should always draw its children using their
			/// drawing cache or not.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_animateLayoutChanges">android:animateLayoutChanges</see>
			/// </code></td><td> Defines whether changes in layout (caused by adding and removing items) should
			/// cause a LayoutTransition to run.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_animationCache">android:animationCache</see>
			/// </code></td><td> Defines whether layout animations should create a drawing cache for their
			/// children.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_clipChildren">android:clipChildren</see>
			/// </code></td><td> Defines whether a child is limited to draw inside of its bounds or not.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_clipToPadding">android:clipToPadding</see>
			/// </code></td><td> Defines whether the ViewGroup will clip its drawing surface so as to exclude
			/// the padding area.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_descendantFocusability">android:descendantFocusability</see>
			/// </code></td><td> Defines the relationship between the ViewGroup and its descendants
			/// when looking for a View to take focus.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_layoutAnimation">android:layoutAnimation</see>
			/// </code></td><td> Defines the layout animation to use the first time the ViewGroup is laid out.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_persistentDrawingCache">android:persistentDrawingCache</see>
			/// </code></td><td> Defines the persistence of the drawing cache.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_splitMotionEvents">android:splitMotionEvents</see>
			/// </code></td><td> Sets whether this ViewGroup should split MotionEvents
			/// to separate child views during touch event dispatch.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="ViewGroup_addStatesFromChildren">ViewGroup_addStatesFromChildren</seealso>
			/// <seealso cref="ViewGroup_alwaysDrawnWithCache">ViewGroup_alwaysDrawnWithCache</seealso>
			/// <seealso cref="ViewGroup_animateLayoutChanges">ViewGroup_animateLayoutChanges</seealso>
			/// <seealso cref="ViewGroup_animationCache">ViewGroup_animationCache</seealso>
			/// <seealso cref="ViewGroup_clipChildren">ViewGroup_clipChildren</seealso>
			/// <seealso cref="ViewGroup_clipToPadding">ViewGroup_clipToPadding</seealso>
			/// <seealso cref="ViewGroup_descendantFocusability">ViewGroup_descendantFocusability
			/// 	</seealso>
			/// <seealso cref="ViewGroup_layoutAnimation">ViewGroup_layoutAnimation</seealso>
			/// <seealso cref="ViewGroup_persistentDrawingCache">ViewGroup_persistentDrawingCache
			/// 	</seealso>
			/// <seealso cref="ViewGroup_splitMotionEvents">ViewGroup_splitMotionEvents</seealso>
			public static readonly int[] ViewGroup = new int[] { unchecked((int)(0x010100ea))
				, unchecked((int)(0x010100eb)), unchecked((int)(0x010100ec)), unchecked((int)(0x010100ed
				)), unchecked((int)(0x010100ee)), unchecked((int)(0x010100ef)), unchecked((int)(
				0x010100f0)), unchecked((int)(0x010100f1)), unchecked((int)(0x010102ef)), unchecked(
				(int)(0x010102f2)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets whether this ViewGroup's drawable states also include
			/// its children's drawable states.  This is used, for example, to
			/// make a group appear to be focused when its child EditText or button
			/// is focused.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.addStatesFromChildren">android.R.attr.addStatesFromChildren
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:addStatesFromChildren</attr>
			public const int ViewGroup_addStatesFromChildren = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the ViewGroup should always draw its children using their
			/// drawing cache or not. The default value is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.alwaysDrawnWithCache">android.R.attr.alwaysDrawnWithCache
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:alwaysDrawnWithCache</attr>
			public const int ViewGroup_alwaysDrawnWithCache = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether changes in layout (caused by adding and removing items) should
			/// cause a LayoutTransition to run. When this flag is set to true, a default
			/// LayoutTransition object will be set on the ViewGroup container and default
			/// animations will run when these layout changes occur.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animateLayoutChanges">android.R.attr.animateLayoutChanges
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:animateLayoutChanges</attr>
			public const int ViewGroup_animateLayoutChanges = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether layout animations should create a drawing cache for their
			/// children. Enabling the animation cache consumes more memory and requires
			/// a longer initialization but provides better performance. The animation
			/// cache is enabled by default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.animationCache">android.R.attr.animationCache</see>
			/// .
			/// </attr>
			/// <attr>name android:animationCache</attr>
			public const int ViewGroup_animationCache = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether a child is limited to draw inside of its bounds or not.
			/// This is useful with animations that scale the size of the children to more
			/// than 100% for instance. In such a case, this property should be set to false
			/// to allow the children to draw outside of their bounds. The default value of
			/// this property is true.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.clipChildren">android.R.attr.clipChildren</see>
			/// .
			/// </attr>
			/// <attr>name android:clipChildren</attr>
			public const int ViewGroup_clipChildren = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines whether the ViewGroup will clip its drawing surface so as to exclude
			/// the padding area. This property is set to true by default.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.clipToPadding">android.R.attr.clipToPadding</see>
			/// .
			/// </attr>
			/// <attr>name android:clipToPadding</attr>
			public const int ViewGroup_clipToPadding = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the relationship between the ViewGroup and its descendants
			/// when looking for a View to take focus.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>beforeDescendants</code></td><td>0</td><td> The ViewGroup will get focus before any of its descendants. </td></tr>
			/// <tr><td><code>afterDescendants</code></td><td>1</td><td> The ViewGroup will get focus only if none of its descendants want it. </td></tr>
			/// <tr><td><code>blocksDescendants</code></td><td>2</td><td> The ViewGroup will block its descendants from receiving focus. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.descendantFocusability">android.R.attr.descendantFocusability
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:descendantFocusability</attr>
			public const int ViewGroup_descendantFocusability = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the layout animation to use the first time the ViewGroup is laid out.
			/// Layout animations can also be started manually after the first layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layoutAnimation">android.R.attr.layoutAnimation</see>
			/// .
			/// </attr>
			/// <attr>name android:layoutAnimation</attr>
			public const int ViewGroup_layoutAnimation = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the persistence of the drawing cache. The drawing cache might be
			/// enabled by a ViewGroup for all its children in specific situations (for
			/// instance during a scrolling.) This property lets you persist the cache
			/// in memory after its initial usage. Persisting the cache consumes more
			/// memory but may prevent frequent garbage collection is the cache is created
			/// over and over again. By default the persistence is set to scrolling.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>none</code></td><td>0x0</td><td> The drawing cache is not persisted after use. </td></tr>
			/// <tr><td><code>animation</code></td><td>0x1</td><td> The drawing cache is persisted after a layout animation. </td></tr>
			/// <tr><td><code>scrolling</code></td><td>0x2</td><td> The drawing cache is persisted after a scroll. </td></tr>
			/// <tr><td><code>all</code></td><td>0x3</td><td> The drawing cache is always persisted. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.persistentDrawingCache">android.R.attr.persistentDrawingCache
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:persistentDrawingCache</attr>
			public const int ViewGroup_persistentDrawingCache = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Sets whether this ViewGroup should split MotionEvents
			/// to separate child views during touch event dispatch.
			/// If false (default), touch events will be dispatched to
			/// the child view where the first pointer went down until
			/// the last pointer goes up.
			/// If true, touch events may be dispatched to multiple children.
			/// MotionEvents for each pointer will be dispatched to the child
			/// view where the initial ACTION_DOWN event happened.
			/// See
			/// <see cref="android.view.ViewGroup.setMotionEventSplittingEnabled(bool)">android.view.ViewGroup.setMotionEventSplittingEnabled(bool)
			/// 	</see>
			/// for more information.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.splitMotionEvents">android.R.attr.splitMotionEvents</see>
			/// .
			/// </attr>
			/// <attr>name android:splitMotionEvents</attr>
			public const int ViewGroup_splitMotionEvents = 8;

			/// <summary>
			/// This is the basic set of layout attributes that are common to all
			/// layout managers.
			/// </summary>
			/// <remarks>
			/// This is the basic set of layout attributes that are common to all
			/// layout managers.  These attributes are specified with the rest of
			/// a view's normal attributes (such as
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// ,
			/// but will be parsed by the view's parent and ignored by the child.
			/// <p>The values defined here correspond to the base layout attribute
			/// class
			/// <see cref="android.view.ViewGroup.LayoutParams">android.view.ViewGroup.LayoutParams
			/// 	</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_Layout_layout_height">android:layout_height</see>
			/// </code></td><td> Specifies the basic height of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_Layout_layout_width">android:layout_width</see>
			/// </code></td><td> Specifies the basic width of the view.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ViewGroup_Layout_layout_height">ViewGroup_Layout_layout_height</seealso>
			/// <seealso cref="ViewGroup_Layout_layout_width">ViewGroup_Layout_layout_width</seealso>
			public static readonly int[] ViewGroup_Layout = new int[] { unchecked((int)(0x010100f4
				)), unchecked((int)(0x010100f5)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic height of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant height or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_height">android.R.attr.layout_height</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_height</attr>
			public const int ViewGroup_Layout_layout_height = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic width of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant width or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_width">android.R.attr.layout_width</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_width</attr>
			public const int ViewGroup_Layout_layout_width = 0;

			/// <summary>
			/// This is the basic set of layout attributes for layout managers that
			/// wish to place margins around their child views.
			/// </summary>
			/// <remarks>
			/// This is the basic set of layout attributes for layout managers that
			/// wish to place margins around their child views.
			/// These attributes are specified with the rest of
			/// a view's normal attributes (such as
			/// <see cref="android.R.attr.background">android.R.attr.background</see>
			/// ,
			/// but will be parsed by the view's parent and ignored by the child.
			/// <p>The values defined here correspond to the base layout attribute
			/// class
			/// <see cref="android.view.ViewGroup.MarginLayoutParams">android.view.ViewGroup.MarginLayoutParams
			/// 	</see>
			/// .
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_height">android:layout_height</see>
			/// </code></td><td> Specifies the basic height of the view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_margin">android:layout_margin</see>
			/// </code></td><td>  Specifies extra space on the left, top, right and bottom
			/// sides of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_marginBottom">android:layout_marginBottom
			/// 	</see>
			/// </code></td><td>  Specifies extra space on the bottom side of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_marginEnd">android:layout_marginEnd</see>
			/// </code></td><td>  Specifies extra space on the end side of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_marginLeft">android:layout_marginLeft</see>
			/// </code></td><td>  Specifies extra space on the left side of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_marginRight">android:layout_marginRight</see>
			/// </code></td><td>  Specifies extra space on the right side of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_marginStart">android:layout_marginStart</see>
			/// </code></td><td>  Specifies extra space on the start side of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_marginTop">android:layout_marginTop</see>
			/// </code></td><td>  Specifies extra space on the top side of this view.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewGroup_MarginLayout_layout_width">android:layout_width</see>
			/// </code></td><td> Specifies the basic width of the view.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="ViewGroup_MarginLayout_layout_height">ViewGroup_MarginLayout_layout_height
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_margin">ViewGroup_MarginLayout_layout_margin
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_marginBottom">ViewGroup_MarginLayout_layout_marginBottom
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_marginEnd">ViewGroup_MarginLayout_layout_marginEnd
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_marginLeft">ViewGroup_MarginLayout_layout_marginLeft
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_marginRight">ViewGroup_MarginLayout_layout_marginRight
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_marginStart">ViewGroup_MarginLayout_layout_marginStart
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_marginTop">ViewGroup_MarginLayout_layout_marginTop
			/// 	</seealso>
			/// <seealso cref="ViewGroup_MarginLayout_layout_width">ViewGroup_MarginLayout_layout_width
			/// 	</seealso>
			public static readonly int[] ViewGroup_MarginLayout = new int[] { unchecked((int)
				(0x010100f4)), unchecked((int)(0x010100f5)), unchecked((int)(0x010100f6)), unchecked(
				(int)(0x010100f7)), unchecked((int)(0x010100f8)), unchecked((int)(0x010100f9)), 
				unchecked((int)(0x010100fa)), unchecked((int)(0x010103e1)), unchecked((int)(0x010103e2
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic height of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant height or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_height">android.R.attr.layout_height</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_height</attr>
			public const int ViewGroup_MarginLayout_layout_height = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the left, top, right and bottom
			/// sides of this view. This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_margin">android.R.attr.layout_margin</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_margin</attr>
			public const int ViewGroup_MarginLayout_layout_margin = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the bottom side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_marginBottom">android.R.attr.layout_marginBottom
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_marginBottom</attr>
			public const int ViewGroup_MarginLayout_layout_marginBottom = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the end side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:layout_marginEnd</attr>
			public const int ViewGroup_MarginLayout_layout_marginEnd = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the left side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_marginLeft">android.R.attr.layout_marginLeft</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_marginLeft</attr>
			public const int ViewGroup_MarginLayout_layout_marginLeft = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the right side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_marginRight">android.R.attr.layout_marginRight</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_marginRight</attr>
			public const int ViewGroup_MarginLayout_layout_marginRight = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the start side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:layout_marginStart</attr>
			public const int ViewGroup_MarginLayout_layout_marginStart = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies extra space on the top side of this view.
			/// This space is outside this view's bounds.
			/// <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_marginTop">android.R.attr.layout_marginTop</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_marginTop</attr>
			public const int ViewGroup_MarginLayout_layout_marginTop = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Specifies the basic width of the view.  This is a required attribute
			/// for any view inside of a containing layout manager.  Its value may
			/// be a dimension (such as "12dip") for a constant width or one of
			/// the special constants.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>May be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>fill_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// This constant is deprecated starting from API Level 8 and
			/// is replaced by
			/// <code>match_parent</code>
			/// . </td></tr>
			/// <tr><td><code>match_parent</code></td><td>-1</td><td> The view should be as big as its parent (minus padding).
			/// Introduced in API Level 8. </td></tr>
			/// <tr><td><code>wrap_content</code></td><td>-2</td><td> The view should be only big enough to enclose its content (plus padding). </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout_width">android.R.attr.layout_width</see>
			/// .
			/// </attr>
			/// <attr>name android:layout_width</attr>
			public const int ViewGroup_MarginLayout_layout_width = 0;

			/// <summary>
			/// A
			/// <see cref="android.view.ViewStub">android.view.ViewStub</see>
			/// lets you lazily include other XML layouts
			/// inside your application at runtime.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="ViewStub_inflatedId">android:inflatedId</see>
			/// </code></td><td> Overrides the id of the inflated View with this value.</td></tr>
			/// <tr><td><code>
			/// <see cref="ViewStub_layout">android:layout</see>
			/// </code></td><td> Supply an identifier for the layout resource to inflate when the ViewStub
			/// becomes visible or when forced to do so.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="ViewStub_inflatedId">ViewStub_inflatedId</seealso>
			/// <seealso cref="ViewStub_layout">ViewStub_layout</seealso>
			public static readonly int[] ViewStub = new int[] { unchecked((int)(0x010100f2)), 
				unchecked((int)(0x010100f3)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Overrides the id of the inflated View with this value.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.inflatedId">android.R.attr.inflatedId</see>
			/// .
			/// </attr>
			/// <attr>name android:inflatedId</attr>
			public const int ViewStub_inflatedId = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Supply an identifier for the layout resource to inflate when the ViewStub
			/// becomes visible or when forced to do so. The layout resource must be a
			/// valid reference to a layout.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.layout">android.R.attr.layout</see>
			/// .
			/// </attr>
			/// <attr>name android:layout</attr>
			public const int ViewStub_layout = 0;

			/// <summary>Attributes that can be used with a ViewSwitcher.</summary>
			/// <remarks>Attributes that can be used with a ViewSwitcher.</remarks>
			public static readonly int[] ViewSwitcher = new int[] {  };

			/// <summary>Base attributes available to VolumePreference.</summary>
			/// <remarks>
			/// Base attributes available to VolumePreference.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="VolumePreference_streamType">android:streamType</see>
			/// </code></td><td> Different audio stream types.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="VolumePreference_streamType">VolumePreference_streamType</seealso>
			public static readonly int[] VolumePreference = new int[] { unchecked((int)(0x01010209
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Different audio stream types.
			/// <p>Must be one of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>voice</code></td><td>0</td><td></td></tr>
			/// <tr><td><code>system</code></td><td>1</td><td></td></tr>
			/// <tr><td><code>ring</code></td><td>2</td><td></td></tr>
			/// <tr><td><code>music</code></td><td>3</td><td></td></tr>
			/// <tr><td><code>alarm</code></td><td>4</td><td></td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.streamType">android.R.attr.streamType</see>
			/// .
			/// </attr>
			/// <attr>name android:streamType</attr>
			public const int VolumePreference_streamType = 0;

			/// <summary>
			/// Use <code>wallpaper</code> as the root tag of the XML resource that
			/// describes an
			/// <see cref="android.service.wallpaper.WallpaperService">android.service.wallpaper.WallpaperService
			/// 	</see>
			/// , which is
			/// referenced from its
			/// <see cref="android.service.wallpaper.WallpaperService.SERVICE_META_DATA">android.service.wallpaper.WallpaperService.SERVICE_META_DATA
			/// 	</see>
			/// meta-data entry.  Described here are the attributes that can be
			/// included in that tag.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Wallpaper_author">android:author</see>
			/// </code></td><td> Name of the author of this component, e.</td></tr>
			/// <tr><td><code>
			/// <see cref="Wallpaper_description">android:description</see>
			/// </code></td><td> Short description of the component's purpose or behavior.</td></tr>
			/// <tr><td><code>
			/// <see cref="Wallpaper_settingsActivity">android:settingsActivity</see>
			/// </code></td><td> Component name of an activity that allows the user to modify
			/// the settings for this service.</td></tr>
			/// <tr><td><code>
			/// <see cref="Wallpaper_thumbnail">android:thumbnail</see>
			/// </code></td><td> Reference to a the wallpaper's thumbnail bitmap.</td></tr>
			/// </table>
			/// </summary>
			/// <seealso cref="Wallpaper_author">Wallpaper_author</seealso>
			/// <seealso cref="Wallpaper_description">Wallpaper_description</seealso>
			/// <seealso cref="Wallpaper_settingsActivity">Wallpaper_settingsActivity</seealso>
			/// <seealso cref="Wallpaper_thumbnail">Wallpaper_thumbnail</seealso>
			public static readonly int[] Wallpaper = new int[] { unchecked((int)(0x01010020))
				, unchecked((int)(0x01010225)), unchecked((int)(0x010102a5)), unchecked((int)(0x010102b4
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Name of the author of this component, e.g. Google.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.author">android.R.attr.author</see>
			/// .
			/// </attr>
			/// <attr>name android:author</attr>
			public const int Wallpaper_author = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Short description of the component's purpose or behavior.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.description">android.R.attr.description</see>
			/// .
			/// </attr>
			/// <attr>name android:description</attr>
			public const int Wallpaper_description = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Component name of an activity that allows the user to modify
			/// the settings for this service.
			/// <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.settingsActivity">android.R.attr.settingsActivity</see>
			/// .
			/// </attr>
			/// <attr>name android:settingsActivity</attr>
			public const int Wallpaper_settingsActivity = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a the wallpaper's thumbnail bitmap.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.thumbnail">android.R.attr.thumbnail</see>
			/// .
			/// </attr>
			/// <attr>name android:thumbnail</attr>
			public const int Wallpaper_thumbnail = 2;

			/// <summary>
			/// Use <code>wallpaper-preview</code> as the root tag of the XML resource that
			/// describes a wallpaper preview.
			/// </summary>
			/// <remarks>
			/// Use <code>wallpaper-preview</code> as the root tag of the XML resource that
			/// describes a wallpaper preview.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="WallpaperPreviewInfo_staticWallpaperPreview">android:staticWallpaperPreview
			/// 	</see>
			/// </code></td><td> A resource id of a static drawable.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="WallpaperPreviewInfo_staticWallpaperPreview">WallpaperPreviewInfo_staticWallpaperPreview
			/// 	</seealso>
			public static readonly int[] WallpaperPreviewInfo = new int[] { unchecked((int)(0x01010331
				)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// A resource id of a static drawable.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.staticWallpaperPreview">android.R.attr.staticWallpaperPreview
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:staticWallpaperPreview</attr>
			public const int WallpaperPreviewInfo_staticWallpaperPreview = 0;

			/// <hide>
			/// 
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="WeightedLinearLayout_majorWeightMax">android:majorWeightMax</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="WeightedLinearLayout_majorWeightMin">android:majorWeightMin</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="WeightedLinearLayout_minorWeightMax">android:minorWeightMax</see>
			/// </code></td><td></td></tr>
			/// <tr><td><code>
			/// <see cref="WeightedLinearLayout_minorWeightMin">android:minorWeightMin</see>
			/// </code></td><td></td></tr>
			/// </table>
			/// </hide>
			/// <seealso cref="WeightedLinearLayout_majorWeightMax">WeightedLinearLayout_majorWeightMax
			/// 	</seealso>
			/// <seealso cref="WeightedLinearLayout_majorWeightMin">WeightedLinearLayout_majorWeightMin
			/// 	</seealso>
			/// <seealso cref="WeightedLinearLayout_minorWeightMax">WeightedLinearLayout_minorWeightMax
			/// 	</seealso>
			/// <seealso cref="WeightedLinearLayout_minorWeightMin">WeightedLinearLayout_minorWeightMin
			/// 	</seealso>
			public static readonly int[] WeightedLinearLayout = new int[] { unchecked((int)(0x010103f1
				)), unchecked((int)(0x010103f2)), unchecked((int)(0x010103f3)), unchecked((int)(
				0x010103f4)) };

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.majorWeightMax">attr.majorWeightMax</see>
			/// attribute's value can be found in the
			/// <see cref="WeightedLinearLayout">WeightedLinearLayout</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:majorWeightMax</attr>
			public const int WeightedLinearLayout_majorWeightMax = 2;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.majorWeightMin">attr.majorWeightMin</see>
			/// attribute's value can be found in the
			/// <see cref="WeightedLinearLayout">WeightedLinearLayout</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:majorWeightMin</attr>
			public const int WeightedLinearLayout_majorWeightMin = 0;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.minorWeightMax">attr.minorWeightMax</see>
			/// attribute's value can be found in the
			/// <see cref="WeightedLinearLayout">WeightedLinearLayout</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:minorWeightMax</attr>
			public const int WeightedLinearLayout_minorWeightMax = 3;

			/// <summary>
			/// <p>This symbol is the offset where the
			/// <see cref="attr.minorWeightMin">attr.minorWeightMin</see>
			/// attribute's value can be found in the
			/// <see cref="WeightedLinearLayout">WeightedLinearLayout</see>
			/// array.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// </summary>
			/// <attr>name android:minorWeightMin</attr>
			public const int WeightedLinearLayout_minorWeightMin = 1;

			/// <summary>The set of attributes that describe a Windows's theme.</summary>
			/// <remarks>
			/// The set of attributes that describe a Windows's theme.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="Window_backgroundDimAmount">android:backgroundDimAmount</see>
			/// </code></td><td> Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_backgroundDimEnabled">android:backgroundDimEnabled</see>
			/// </code></td><td> Control whether dimming behind the window is enabled.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_textColor">android:textColor</see>
			/// </code></td><td> Color of text (usually same as colorForeground).</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowActionBar">android:windowActionBar</see>
			/// </code></td><td> Flag indicating whether this window should have an Action Bar
			/// in place of the usual title bar.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowActionBarOverlay">android:windowActionBarOverlay</see>
			/// </code></td><td> Flag indicating whether this window's Action Bar should overlay
			/// application content.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowActionModeOverlay">android:windowActionModeOverlay</see>
			/// </code></td><td> Flag indicating whether action modes should overlay window content
			/// when there is not reserved space for their UI (such as an Action Bar).</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowAnimationStyle">android:windowAnimationStyle</see>
			/// </code></td><td> Reference to a style resource holding
			/// the set of window animations to use, which can be
			/// any of the attributes defined by
			/// <see cref="android.R.styleable.WindowAnimation">android.R.styleable.WindowAnimation
			/// 	</see>
			/// .</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowBackground">android:windowBackground</see>
			/// </code></td><td> Drawable to use as the overall window background.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowCloseOnTouchOutside">android:windowCloseOnTouchOutside</see>
			/// </code></td><td> Control whether a container should automatically close itself if
			/// the user touches outside of it.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowContentOverlay">android:windowContentOverlay</see>
			/// </code></td><td> This Drawable is overlaid over the foreground of the Window's content area, usually
			/// to place a shadow below the title.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowDisablePreview">android:windowDisablePreview</see>
			/// </code></td><td> Flag allowing you to disable the preview animation for a window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowEnableSplitTouch">android:windowEnableSplitTouch</see>
			/// </code></td><td> Flag indicating that this window should allow touches to be split
			/// across other windows that also support split touch.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowFrame">android:windowFrame</see>
			/// </code></td><td> Drawable to use as a frame around the window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowFullscreen">android:windowFullscreen</see>
			/// </code></td><td> Flag indicating whether this window should fill the entire screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowIsFloating">android:windowIsFloating</see>
			/// </code></td><td> Flag indicating whether this is a floating window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowIsTranslucent">android:windowIsTranslucent</see>
			/// </code></td><td> Flag indicating whether this is a translucent window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowMinWidthMajor">android:windowMinWidthMajor</see>
			/// </code></td><td> The minimum width the window is allowed to be, along the major
			/// axis of the screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowMinWidthMinor">android:windowMinWidthMinor</see>
			/// </code></td><td> The minimum width the window is allowed to be, along the minor
			/// axis of the screen.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowNoDisplay">android:windowNoDisplay</see>
			/// </code></td><td> Flag indicating that this window should not be displayed at all.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowNoTitle">android:windowNoTitle</see>
			/// </code></td><td> Flag indicating whether there should be no title on this window.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowShowWallpaper">android:windowShowWallpaper</see>
			/// </code></td><td> Flag indicating that this window's background should be the
			/// user's current wallpaper.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowSoftInputMode">android:windowSoftInputMode</see>
			/// </code></td><td> Defines the default soft input state that this window would
			/// like when it is displayed.</td></tr>
			/// <tr><td><code>
			/// <see cref="Window_windowSplitActionBar">android:windowSplitActionBar</see>
			/// </code></td><td> Flag indicating that the action bar should be split to provide more
			/// room for elements.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="Window_backgroundDimAmount">Window_backgroundDimAmount</seealso>
			/// <seealso cref="Window_backgroundDimEnabled">Window_backgroundDimEnabled</seealso>
			/// <seealso cref="Window_textColor">Window_textColor</seealso>
			/// <seealso cref="Window_windowActionBar">Window_windowActionBar</seealso>
			/// <seealso cref="Window_windowActionBarOverlay">Window_windowActionBarOverlay</seealso>
			/// <seealso cref="Window_windowActionModeOverlay">Window_windowActionModeOverlay</seealso>
			/// <seealso cref="Window_windowAnimationStyle">Window_windowAnimationStyle</seealso>
			/// <seealso cref="Window_windowBackground">Window_windowBackground</seealso>
			/// <seealso cref="Window_windowCloseOnTouchOutside">Window_windowCloseOnTouchOutside
			/// 	</seealso>
			/// <seealso cref="Window_windowContentOverlay">Window_windowContentOverlay</seealso>
			/// <seealso cref="Window_windowDisablePreview">Window_windowDisablePreview</seealso>
			/// <seealso cref="Window_windowEnableSplitTouch">Window_windowEnableSplitTouch</seealso>
			/// <seealso cref="Window_windowFrame">Window_windowFrame</seealso>
			/// <seealso cref="Window_windowFullscreen">Window_windowFullscreen</seealso>
			/// <seealso cref="Window_windowIsFloating">Window_windowIsFloating</seealso>
			/// <seealso cref="Window_windowIsTranslucent">Window_windowIsTranslucent</seealso>
			/// <seealso cref="Window_windowMinWidthMajor">Window_windowMinWidthMajor</seealso>
			/// <seealso cref="Window_windowMinWidthMinor">Window_windowMinWidthMinor</seealso>
			/// <seealso cref="Window_windowNoDisplay">Window_windowNoDisplay</seealso>
			/// <seealso cref="Window_windowNoTitle">Window_windowNoTitle</seealso>
			/// <seealso cref="Window_windowShowWallpaper">Window_windowShowWallpaper</seealso>
			/// <seealso cref="Window_windowSoftInputMode">Window_windowSoftInputMode</seealso>
			/// <seealso cref="Window_windowSplitActionBar">Window_windowSplitActionBar</seealso>
			public static readonly int[] Window = new int[] { unchecked((int)(0x01010032)), unchecked(
				(int)(0x01010054)), unchecked((int)(0x01010055)), unchecked((int)(0x01010056)), 
				unchecked((int)(0x01010057)), unchecked((int)(0x01010058)), unchecked((int)(0x01010059
				)), unchecked((int)(0x01010098)), unchecked((int)(0x010100ae)), unchecked((int)(
				0x0101020d)), unchecked((int)(0x0101021e)), unchecked((int)(0x0101021f)), unchecked(
				(int)(0x01010222)), unchecked((int)(0x0101022b)), unchecked((int)(0x01010292)), 
				unchecked((int)(0x010102cd)), unchecked((int)(0x010102dd)), unchecked((int)(0x010102e4
				)), unchecked((int)(0x01010317)), unchecked((int)(0x01010356)), unchecked((int)(
				0x01010357)), unchecked((int)(0x0101035b)), unchecked((int)(0x010103b1)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Default background dim amount when a menu, dialog, or something similar pops up.
			/// <p>Must be a floating point value, such as "<code>1.2</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundDimAmount">android.R.attr.backgroundDimAmount
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundDimAmount</attr>
			public const int Window_backgroundDimAmount = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Control whether dimming behind the window is enabled.  The default
			/// theme does not set this value, meaning it is based on whether the
			/// window is floating.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.backgroundDimEnabled">android.R.attr.backgroundDimEnabled
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:backgroundDimEnabled</attr>
			public const int Window_backgroundDimEnabled = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Color of text (usually same as colorForeground).
			/// <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
			/// "<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.textColor">android.R.attr.textColor</see>
			/// .
			/// </attr>
			/// <attr>name android:textColor</attr>
			public const int Window_textColor = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this window should have an Action Bar
			/// in place of the usual title bar.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowActionBar">android.R.attr.windowActionBar</see>
			/// .
			/// </attr>
			/// <attr>name android:windowActionBar</attr>
			public const int Window_windowActionBar = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this window's Action Bar should overlay
			/// application content. Does nothing if the window would not
			/// have an Action Bar.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowActionBarOverlay">android.R.attr.windowActionBarOverlay
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowActionBarOverlay</attr>
			public const int Window_windowActionBarOverlay = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether action modes should overlay window content
			/// when there is not reserved space for their UI (such as an Action Bar).
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowActionModeOverlay">android.R.attr.windowActionModeOverlay
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowActionModeOverlay</attr>
			public const int Window_windowActionModeOverlay = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Reference to a style resource holding
			/// the set of window animations to use, which can be
			/// any of the attributes defined by
			/// <see cref="android.R.styleable.WindowAnimation">android.R.styleable.WindowAnimation
			/// 	</see>
			/// .
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowAnimationStyle">android.R.attr.windowAnimationStyle
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowAnimationStyle</attr>
			public const int Window_windowAnimationStyle = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as the overall window background.  As of
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB">android.os.Build.VERSION_CODES.HONEYCOMB
			/// 	</see>
			/// , this may
			/// be a selector that uses state_accelerated to pick a non-solid
			/// color when running on devices that can draw such a bitmap
			/// with complex compositing on top at 60fps.
			/// <p>There are a few special considerations to use when setting this
			/// drawable:
			/// <ul>
			/// <li> This information will be used to infer the pixel format
			/// for your window's surface.  If the drawable has any
			/// non-opaque pixels, your window will be translucent
			/// (32 bpp).
			/// <li> If you want to draw the entire background
			/// yourself, you should set this drawable to some solid
			/// color that closely matches that background (so the
			/// system's preview of your window will match), and
			/// then in code manually set your window's background to
			/// null so it will not be drawn.
			/// </ul>
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowBackground">android.R.attr.windowBackground</see>
			/// .
			/// </attr>
			/// <attr>name android:windowBackground</attr>
			public const int Window_windowBackground = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Control whether a container should automatically close itself if
			/// the user touches outside of it.  This only applies to activities
			/// and dialogs.
			/// <p>Note: this attribute will only be respected for applications
			/// that are targeting
			/// <see cref="android.os.Build.VERSION_CODES.HONEYCOMB">android.os.Build.VERSION_CODES.HONEYCOMB
			/// 	</see>
			/// or later.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowCloseOnTouchOutside">android.R.attr.windowCloseOnTouchOutside
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowCloseOnTouchOutside</attr>
			public const int Window_windowCloseOnTouchOutside = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// This Drawable is overlaid over the foreground of the Window's content area, usually
			/// to place a shadow below the title.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowContentOverlay">android.R.attr.windowContentOverlay
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowContentOverlay</attr>
			public const int Window_windowContentOverlay = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag allowing you to disable the preview animation for a window.
			/// The default value is false; if set to true, the system can never
			/// use the window's theme to show a preview of it before your
			/// actual instance is shown to the user.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowDisablePreview">android.R.attr.windowDisablePreview
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowDisablePreview</attr>
			public const int Window_windowDisablePreview = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that this window should allow touches to be split
			/// across other windows that also support split touch.
			/// The default value is true for applications with a targetSdkVersion
			/// of Honeycomb or newer; false otherwise.
			/// When this flag is false, the first pointer that goes down determines
			/// the window to which all subsequent touches go until all pointers go up.
			/// When this flag is true, each pointer (not necessarily the first) that
			/// goes down determines the window to which all subsequent touches of that
			/// pointer will go until that pointers go up thereby enabling touches
			/// with multiple pointers to be split across multiple windows.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowEnableSplitTouch">android.R.attr.windowEnableSplitTouch
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowEnableSplitTouch</attr>
			public const int Window_windowEnableSplitTouch = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Drawable to use as a frame around the window.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowFrame">android.R.attr.windowFrame</see>
			/// .
			/// </attr>
			/// <attr>name android:windowFrame</attr>
			public const int Window_windowFrame = 2;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this window should fill the entire screen.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowFullscreen">android.R.attr.windowFullscreen</see>
			/// .
			/// </attr>
			/// <attr>name android:windowFullscreen</attr>
			public const int Window_windowFullscreen = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this is a floating window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowIsFloating">android.R.attr.windowIsFloating</see>
			/// .
			/// </attr>
			/// <attr>name android:windowIsFloating</attr>
			public const int Window_windowIsFloating = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether this is a translucent window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowIsTranslucent">android.R.attr.windowIsTranslucent
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowIsTranslucent</attr>
			public const int Window_windowIsTranslucent = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimum width the window is allowed to be, along the major
			/// axis of the screen.  That is, when in landscape.  Can be either
			/// an absolute dimension or a fraction of the screen size in that
			/// dimension.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowMinWidthMajor">android.R.attr.windowMinWidthMajor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowMinWidthMajor</attr>
			public const int Window_windowMinWidthMajor = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The minimum width the window is allowed to be, along the minor
			/// axis of the screen.  That is, when in portrait.  Can be either
			/// an absolute dimension or a fraction of the screen size in that
			/// dimension.
			/// <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
			/// Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
			/// in (inches), mm (millimeters).
			/// <p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
			/// The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
			/// some parent container.
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowMinWidthMinor">android.R.attr.windowMinWidthMinor
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowMinWidthMinor</attr>
			public const int Window_windowMinWidthMinor = 20;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that this window should not be displayed at all.
			/// The default value is false; if set to true, and this window is
			/// the main window of an Activity, then it will never actually
			/// be added to the window manager.  This means that your activity
			/// must immediately quit without waiting for user interaction,
			/// because there will be no such interaction coming.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowNoDisplay">android.R.attr.windowNoDisplay</see>
			/// .
			/// </attr>
			/// <attr>name android:windowNoDisplay</attr>
			public const int Window_windowNoDisplay = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating whether there should be no title on this window.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowNoTitle">android.R.attr.windowNoTitle</see>
			/// .
			/// </attr>
			/// <attr>name android:windowNoTitle</attr>
			public const int Window_windowNoTitle = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that this window's background should be the
			/// user's current wallpaper.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowShowWallpaper">android.R.attr.windowShowWallpaper
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowShowWallpaper</attr>
			public const int Window_windowShowWallpaper = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Defines the default soft input state that this window would
			/// like when it is displayed.
			/// <p>Must be one or more (separated by '|') of the following constant values.</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
			/// <tr><td><code>stateUnspecified</code></td><td>0</td><td> Not specified, use what the system thinks is best.  This
			/// is the default. </td></tr>
			/// <tr><td><code>stateUnchanged</code></td><td>1</td><td> Leave the soft input window as-is, in whatever state it
			/// last was. </td></tr>
			/// <tr><td><code>stateHidden</code></td><td>2</td><td> Make the soft input area hidden when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysHidden</code></td><td>3</td><td> Always make the soft input area hidden when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>stateVisible</code></td><td>4</td><td> Make the soft input area visible when normally appropriate
			/// (when the user is navigating forward to your window). </td></tr>
			/// <tr><td><code>stateAlwaysVisible</code></td><td>5</td><td> Always make the soft input area visible when this window
			/// has input focus. </td></tr>
			/// <tr><td><code>adjustUnspecified</code></td><td>0x00</td><td> The window resize/pan adjustment has not been specified,
			/// the system will automatically select between resize and pan
			/// modes, depending
			/// on whether the content of the window has any layout views
			/// that can scroll their contents.  If there is such a view,
			/// then the window will be resized, with the assumption being
			/// that the resizeable area can be reduced to make room for
			/// the input UI. </td></tr>
			/// <tr><td><code>adjustResize</code></td><td>0x10</td><td> Always resize the window: the content area of the window is
			/// reduced to make room for the soft input area. </td></tr>
			/// <tr><td><code>adjustPan</code></td><td>0x20</td><td> Don't resize the window to make room for the soft input area;
			/// instead pan the contents of the window as focus moves inside
			/// of it so that the user can see what they are typing.  This is
			/// generally less desireable than panning because the user may
			/// need to close the input area to get at and interact with
			/// parts of the window. </td></tr>
			/// <tr><td><code>adjustNothing</code></td><td>0x30</td><td> Don't resize <em>or</em> pan the window to make room for the
			/// soft input area; the window is never adjusted for it. </td></tr>
			/// </table>
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowSoftInputMode">android.R.attr.windowSoftInputMode
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowSoftInputMode</attr>
			public const int Window_windowSoftInputMode = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// Flag indicating that the action bar should be split to provide more
			/// room for elements.
			/// <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
			/// <p>This may also be a reference to a resource (in the form
			/// "<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
			/// theme attribute (in the form
			/// "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
			/// containing a value of this type.
			/// <p>This is a private symbol.
			/// </attr>
			/// <attr>name android:windowSplitActionBar</attr>
			public const int Window_windowSplitActionBar = 22;

			/// <summary>Window animation class attributes.</summary>
			/// <remarks>
			/// Window animation class attributes.
			/// <p>Includes the following attributes:</p>
			/// <table>
			/// <colgroup align="left" />
			/// <colgroup align="left" />
			/// <tr><th>Attribute</th><th>Description</th></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_activityCloseEnterAnimation">android:activityCloseEnterAnimation
			/// 	</see>
			/// </code></td><td>  When closing the current activity, this is the animation that is
			/// run on the next activity (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_activityCloseExitAnimation">android:activityCloseExitAnimation
			/// 	</see>
			/// </code></td><td>  When closing the current activity, this is the animation that is
			/// run on the current activity (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_activityOpenEnterAnimation">android:activityOpenEnterAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity, this is the animation that is
			/// run on the next activity (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_activityOpenExitAnimation">android:activityOpenExitAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity, this is the animation that is
			/// run on the previous activity (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskCloseEnterAnimation">android:taskCloseEnterAnimation
			/// 	</see>
			/// </code></td><td>  When closing the last activity of a task, this is the animation that is
			/// run on the activity of the next task (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskCloseExitAnimation">android:taskCloseExitAnimation
			/// 	</see>
			/// </code></td><td>  When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskOpenEnterAnimation">android:taskOpenEnterAnimation
			/// 	</see>
			/// </code></td><td>  When opening an activity in a new task, this is the animation that is
			/// run on the activity of the new task (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskOpenExitAnimation">android:taskOpenExitAnimation</see>
			/// </code></td><td>  When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskToBackEnterAnimation">android:taskToBackEnterAnimation
			/// 	</see>
			/// </code></td><td>  When sending the current task to the background, this is the
			/// animation that is run on the top activity of the task behind
			/// it (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskToBackExitAnimation">android:taskToBackExitAnimation
			/// 	</see>
			/// </code></td><td>  When sending the current task to the background, this is the
			/// animation that is run on the top activity of the current task
			/// (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskToFrontEnterAnimation">android:taskToFrontEnterAnimation
			/// 	</see>
			/// </code></td><td>  When bringing an existing task to the foreground, this is the
			/// animation that is run on the top activity of the task being brought
			/// to the foreground (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_taskToFrontExitAnimation">android:taskToFrontExitAnimation
			/// 	</see>
			/// </code></td><td>  When bringing an existing task to the foreground, this is the
			/// animation that is run on the current foreground activity
			/// (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperCloseEnterAnimation">android:wallpaperCloseEnterAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the new activity (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperCloseExitAnimation">android:wallpaperCloseExitAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the old wallpaper activity (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperIntraCloseEnterAnimation">android:wallpaperIntraCloseEnterAnimation
			/// 	</see>
			/// </code></td><td>  When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the previous activity
			/// (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperIntraCloseExitAnimation">android:wallpaperIntraCloseExitAnimation
			/// 	</see>
			/// </code></td><td>  When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperIntraOpenEnterAnimation">android:wallpaperIntraOpenEnterAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the new activity
			/// (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperIntraOpenExitAnimation">android:wallpaperIntraOpenExitAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperOpenEnterAnimation">android:wallpaperOpenEnterAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the new wallpaper activity (which is entering the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_wallpaperOpenExitAnimation">android:wallpaperOpenExitAnimation
			/// 	</see>
			/// </code></td><td>  When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the current activity (which is exiting the screen).</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_windowEnterAnimation">android:windowEnterAnimation</see>
			/// </code></td><td> The animation used when a window is being added.</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_windowExitAnimation">android:windowExitAnimation</see>
			/// </code></td><td> The animation used when a window is being removed.</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_windowHideAnimation">android:windowHideAnimation</see>
			/// </code></td><td> The animation used when a window is going from VISIBLE to INVISIBLE.</td></tr>
			/// <tr><td><code>
			/// <see cref="WindowAnimation_windowShowAnimation">android:windowShowAnimation</see>
			/// </code></td><td> The animation used when a window is going from INVISIBLE to VISIBLE.</td></tr>
			/// </table>
			/// </remarks>
			/// <seealso cref="WindowAnimation_activityCloseEnterAnimation">WindowAnimation_activityCloseEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_activityCloseExitAnimation">WindowAnimation_activityCloseExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_activityOpenEnterAnimation">WindowAnimation_activityOpenEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_activityOpenExitAnimation">WindowAnimation_activityOpenExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskCloseEnterAnimation">WindowAnimation_taskCloseEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskCloseExitAnimation">WindowAnimation_taskCloseExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskOpenEnterAnimation">WindowAnimation_taskOpenEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskOpenExitAnimation">WindowAnimation_taskOpenExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskToBackEnterAnimation">WindowAnimation_taskToBackEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskToBackExitAnimation">WindowAnimation_taskToBackExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskToFrontEnterAnimation">WindowAnimation_taskToFrontEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_taskToFrontExitAnimation">WindowAnimation_taskToFrontExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperCloseEnterAnimation">WindowAnimation_wallpaperCloseEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperCloseExitAnimation">WindowAnimation_wallpaperCloseExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperIntraCloseEnterAnimation">WindowAnimation_wallpaperIntraCloseEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperIntraCloseExitAnimation">WindowAnimation_wallpaperIntraCloseExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperIntraOpenEnterAnimation">WindowAnimation_wallpaperIntraOpenEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperIntraOpenExitAnimation">WindowAnimation_wallpaperIntraOpenExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperOpenEnterAnimation">WindowAnimation_wallpaperOpenEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_wallpaperOpenExitAnimation">WindowAnimation_wallpaperOpenExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_windowEnterAnimation">WindowAnimation_windowEnterAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_windowExitAnimation">WindowAnimation_windowExitAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_windowHideAnimation">WindowAnimation_windowHideAnimation
			/// 	</seealso>
			/// <seealso cref="WindowAnimation_windowShowAnimation">WindowAnimation_windowShowAnimation
			/// 	</seealso>
			public static readonly int[] WindowAnimation = new int[] { unchecked((int)(0x010100b4
				)), unchecked((int)(0x010100b5)), unchecked((int)(0x010100b6)), unchecked((int)(
				0x010100b7)), unchecked((int)(0x010100b8)), unchecked((int)(0x010100b9)), unchecked(
				(int)(0x010100ba)), unchecked((int)(0x010100bb)), unchecked((int)(0x010100bc)), 
				unchecked((int)(0x010100bd)), unchecked((int)(0x010100be)), unchecked((int)(0x010100bf
				)), unchecked((int)(0x010100c0)), unchecked((int)(0x010100c1)), unchecked((int)(
				0x010100c2)), unchecked((int)(0x010100c3)), unchecked((int)(0x01010293)), unchecked(
				(int)(0x01010294)), unchecked((int)(0x01010295)), unchecked((int)(0x01010296)), 
				unchecked((int)(0x01010297)), unchecked((int)(0x01010298)), unchecked((int)(0x01010299
				)), unchecked((int)(0x0101029a)) };

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When closing the current activity, this is the animation that is
			/// run on the next activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.activityCloseEnterAnimation">android.R.attr.activityCloseEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:activityCloseEnterAnimation</attr>
			public const int WindowAnimation_activityCloseEnterAnimation = 6;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When closing the current activity, this is the animation that is
			/// run on the current activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.activityCloseExitAnimation">android.R.attr.activityCloseExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:activityCloseExitAnimation</attr>
			public const int WindowAnimation_activityCloseExitAnimation = 7;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity, this is the animation that is
			/// run on the next activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.activityOpenEnterAnimation">android.R.attr.activityOpenEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:activityOpenEnterAnimation</attr>
			public const int WindowAnimation_activityOpenEnterAnimation = 4;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity, this is the animation that is
			/// run on the previous activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.activityOpenExitAnimation">android.R.attr.activityOpenExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:activityOpenExitAnimation</attr>
			public const int WindowAnimation_activityOpenExitAnimation = 5;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When closing the last activity of a task, this is the animation that is
			/// run on the activity of the next task (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskCloseEnterAnimation">android.R.attr.taskCloseEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskCloseEnterAnimation</attr>
			public const int WindowAnimation_taskCloseEnterAnimation = 10;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskCloseExitAnimation">android.R.attr.taskCloseExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskCloseExitAnimation</attr>
			public const int WindowAnimation_taskCloseExitAnimation = 11;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the new task (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskOpenEnterAnimation">android.R.attr.taskOpenEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskOpenEnterAnimation</attr>
			public const int WindowAnimation_taskOpenEnterAnimation = 8;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening an activity in a new task, this is the animation that is
			/// run on the activity of the old task (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskOpenExitAnimation">android.R.attr.taskOpenExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskOpenExitAnimation</attr>
			public const int WindowAnimation_taskOpenExitAnimation = 9;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When sending the current task to the background, this is the
			/// animation that is run on the top activity of the task behind
			/// it (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskToBackEnterAnimation">android.R.attr.taskToBackEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskToBackEnterAnimation</attr>
			public const int WindowAnimation_taskToBackEnterAnimation = 14;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When sending the current task to the background, this is the
			/// animation that is run on the top activity of the current task
			/// (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskToBackExitAnimation">android.R.attr.taskToBackExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskToBackExitAnimation</attr>
			public const int WindowAnimation_taskToBackExitAnimation = 15;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When bringing an existing task to the foreground, this is the
			/// animation that is run on the top activity of the task being brought
			/// to the foreground (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskToFrontEnterAnimation">android.R.attr.taskToFrontEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskToFrontEnterAnimation</attr>
			public const int WindowAnimation_taskToFrontEnterAnimation = 12;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When bringing an existing task to the foreground, this is the
			/// animation that is run on the current foreground activity
			/// (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.taskToFrontExitAnimation">android.R.attr.taskToFrontExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:taskToFrontExitAnimation</attr>
			public const int WindowAnimation_taskToFrontExitAnimation = 13;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the new activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperCloseEnterAnimation">android.R.attr.wallpaperCloseEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperCloseEnterAnimation</attr>
			public const int WindowAnimation_wallpaperCloseEnterAnimation = 18;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity that hides the wallpaper, while
			/// currently showing the wallpaper, this is the animation that
			/// is run on the old wallpaper activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperCloseExitAnimation">android.R.attr.wallpaperCloseExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperCloseExitAnimation</attr>
			public const int WindowAnimation_wallpaperCloseExitAnimation = 19;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the previous activity
			/// (which is entering the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperIntraCloseEnterAnimation">android.R.attr.wallpaperIntraCloseEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperIntraCloseEnterAnimation</attr>
			public const int WindowAnimation_wallpaperIntraCloseEnterAnimation = 22;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When closing a foreround activity that is on top of the wallpaper
			/// when the previous activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperIntraCloseExitAnimation">android.R.attr.wallpaperIntraCloseExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperIntraCloseExitAnimation</attr>
			public const int WindowAnimation_wallpaperIntraCloseExitAnimation = 23;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the new activity
			/// (which is entering the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperIntraOpenEnterAnimation">android.R.attr.wallpaperIntraOpenEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperIntraOpenEnterAnimation</attr>
			public const int WindowAnimation_wallpaperIntraOpenEnterAnimation = 20;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity that is on top of the wallpaper
			/// when the current activity is also on top of the wallpaper,
			/// this is the animation that is run on the current activity
			/// (which is exiting the screen).  The wallpaper remains
			/// static behind the animation.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperIntraOpenExitAnimation">android.R.attr.wallpaperIntraOpenExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperIntraOpenExitAnimation</attr>
			public const int WindowAnimation_wallpaperIntraOpenExitAnimation = 21;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the new wallpaper activity (which is entering the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperOpenEnterAnimation">android.R.attr.wallpaperOpenEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperOpenEnterAnimation</attr>
			public const int WindowAnimation_wallpaperOpenEnterAnimation = 16;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// When opening a new activity that shows the wallpaper, while
			/// currently not showing the wallpaper, this is the animation that
			/// is run on the current activity (which is exiting the screen).
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.wallpaperOpenExitAnimation">android.R.attr.wallpaperOpenExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:wallpaperOpenExitAnimation</attr>
			public const int WindowAnimation_wallpaperOpenExitAnimation = 17;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The animation used when a window is being added.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowEnterAnimation">android.R.attr.windowEnterAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowEnterAnimation</attr>
			public const int WindowAnimation_windowEnterAnimation = 0;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The animation used when a window is being removed.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowExitAnimation">android.R.attr.windowExitAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowExitAnimation</attr>
			public const int WindowAnimation_windowExitAnimation = 1;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The animation used when a window is going from VISIBLE to INVISIBLE.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowHideAnimation">android.R.attr.windowHideAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowHideAnimation</attr>
			public const int WindowAnimation_windowHideAnimation = 3;

			/// <summary><p></summary>
			/// <attr>
			/// description
			/// The animation used when a window is going from INVISIBLE to VISIBLE.
			/// <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
			/// or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
			/// <p>This corresponds to the global attribute          resource symbol
			/// <see cref="android.R.attr.windowShowAnimation">android.R.attr.windowShowAnimation
			/// 	</see>
			/// .
			/// </attr>
			/// <attr>name android:windowShowAnimation</attr>
			public const int WindowAnimation_windowShowAnimation = 2;
		}
	}
}
