using Sharpen;

namespace android.util
{
	/// <summary>
	/// A collection of attributes, as found associated with a tag in an XML
	/// document.
	/// </summary>
	/// <remarks>
	/// A collection of attributes, as found associated with a tag in an XML
	/// document.  Often you will not want to use this interface directly, instead
	/// passing it to
	/// <see cref="android.content.res.Resources.Theme.obtainStyledAttributes(AttributeSet, int[], int, int)
	/// 	">Resources.Theme.obtainStyledAttributes()</see>
	/// which will take care of parsing the attributes for you.  In particular,
	/// the Resources API will convert resource references (attribute values such as
	/// "@string/my_label" in the original XML) to the desired type
	/// for you; if you use AttributeSet directly then you will need to manually
	/// check for resource references
	/// (with
	/// <see cref="getAttributeResourceValue(int, int)">getAttributeResourceValue(int, int)
	/// 	</see>
	/// ) and do the resource
	/// lookup yourself if needed.  Direct use of AttributeSet also prevents the
	/// application of themes and styles when retrieving attribute values.
	/// <p>This interface provides an efficient mechanism for retrieving
	/// data from compiled XML files, which can be retrieved for a particular
	/// XmlPullParser through
	/// <see cref="Xml.asAttributeSet(org.xmlpull.v1.XmlPullParser)">Xml.asAttributeSet()
	/// 	</see>
	/// .  Normally this will return an implementation
	/// of the interface that works on top of a generic XmlPullParser, however it
	/// is more useful in conjunction with compiled XML resources:
	/// <pre>
	/// XmlPullParser parser = resources.getXml(myResouce);
	/// AttributeSet attributes = Xml.asAttributeSet(parser);</pre>
	/// <p>The implementation returned here, unlike using
	/// the implementation on top of a generic XmlPullParser,
	/// is highly optimized by retrieving pre-computed information that was
	/// generated by aapt when compiling your resources.  For example,
	/// the
	/// <see cref="getAttributeFloatValue(int, float)">getAttributeFloatValue(int, float)
	/// 	</see>
	/// method returns a floating
	/// point number previous stored in the compiled resource instead of parsing
	/// at runtime the string originally in the XML file.
	/// <p>This interface also provides additional information contained in the
	/// compiled XML resource that is not available in a normal XML file, such
	/// as
	/// <see cref="getAttributeNameResource(int)">getAttributeNameResource(int)</see>
	/// which returns the resource
	/// identifier associated with a particular XML attribute name.
	/// </remarks>
	[Sharpen.Sharpened]
	public interface AttributeSet
	{
		/// <summary>Returns the number of attributes available in the set.</summary>
		/// <remarks>Returns the number of attributes available in the set.</remarks>
		/// <returns>A positive integer, or 0 if the set is empty.</returns>
		int getAttributeCount();

		/// <summary>Returns the name of the specified attribute.</summary>
		/// <remarks>Returns the name of the specified attribute.</remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <returns>
		/// A String containing the name of the attribute, or null if the
		/// attribute cannot be found.
		/// </returns>
		string getAttributeName(int index);

		/// <summary>Returns the value of the specified attribute as a string representation.
		/// 	</summary>
		/// <remarks>Returns the value of the specified attribute as a string representation.
		/// 	</remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <returns>
		/// A String containing the value of the attribute, or null if the
		/// attribute cannot be found.
		/// </returns>
		string getAttributeValue(int index);

		/// <summary>Returns the value of the specified attribute as a string representation.
		/// 	</summary>
		/// <remarks>
		/// Returns the value of the specified attribute as a string representation.
		/// The lookup is performed using the attribute name.
		/// </remarks>
		/// <param name="namespace">The namespace of the attribute to get the value from.</param>
		/// <param name="name">The name of the attribute to get the value from.</param>
		/// <returns>
		/// A String containing the value of the attribute, or null if the
		/// attribute cannot be found.
		/// </returns>
		string getAttributeValue(string @namespace, string name);

		/// <summary>Returns a description of the current position of the attribute set.</summary>
		/// <remarks>
		/// Returns a description of the current position of the attribute set.
		/// For instance, if the attribute set is loaded from an XML document,
		/// the position description could indicate the current line number.
		/// </remarks>
		/// <returns>
		/// A string representation of the current position in the set,
		/// may be null.
		/// </returns>
		string getPositionDescription();

		/// <summary>Return the resource ID associated with the given attribute name.</summary>
		/// <remarks>
		/// Return the resource ID associated with the given attribute name.  This
		/// will be the identifier for an attribute resource, which can be used by
		/// styles.  Returns 0 if there is no resource associated with this
		/// attribute.
		/// <p>Note that this is different than
		/// <see cref="getAttributeResourceValue(int, int)">getAttributeResourceValue(int, int)
		/// 	</see>
		/// in that it returns a resource identifier for the attribute name; the
		/// other method returns this attribute's value as a resource identifier.
		/// </remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <returns>The resource identifier, 0 if none.</returns>
		int getAttributeNameResource(int index);

		/// <summary>Return the index of the value of 'attribute' in the list 'options'.</summary>
		/// <remarks>Return the index of the value of 'attribute' in the list 'options'.</remarks>
		/// <param name="namespace">Namespace of attribute to retrieve.</param>
		/// <param name="attribute">Name of attribute to retrieve.</param>
		/// <param name="options">List of strings whose values we are checking against.</param>
		/// <param name="defaultValue">
		/// Value returned if attribute doesn't exist or no
		/// match is found.
		/// </param>
		/// <returns>Index in to 'options' or defaultValue.</returns>
		int getAttributeListValue(string @namespace, string attribute, string[] options, 
			int defaultValue);

		/// <summary>Return the boolean value of 'attribute'.</summary>
		/// <remarks>Return the boolean value of 'attribute'.</remarks>
		/// <param name="namespace">Namespace of attribute to retrieve.</param>
		/// <param name="attribute">The attribute to retrieve.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		bool getAttributeBooleanValue(string @namespace, string attribute, bool defaultValue
			);

		/// <summary>Return the value of 'attribute' as a resource identifier.</summary>
		/// <remarks>
		/// Return the value of 'attribute' as a resource identifier.
		/// <p>Note that this is different than
		/// <see cref="getAttributeNameResource(int)">getAttributeNameResource(int)</see>
		/// in that it returns a the value contained in this attribute as a
		/// resource identifier (i.e., a value originally of the form
		/// "@package:type/resource"); the other method returns a resource
		/// identifier that identifies the name of the attribute.
		/// </remarks>
		/// <param name="namespace">Namespace of attribute to retrieve.</param>
		/// <param name="attribute">The attribute to retrieve.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		int getAttributeResourceValue(string @namespace, string attribute, int defaultValue
			);

		/// <summary>Return the integer value of 'attribute'.</summary>
		/// <remarks>Return the integer value of 'attribute'.</remarks>
		/// <param name="namespace">Namespace of attribute to retrieve.</param>
		/// <param name="attribute">The attribute to retrieve.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		int getAttributeIntValue(string @namespace, string attribute, int defaultValue);

		/// <summary>
		/// Return the boolean value of 'attribute' that is formatted as an
		/// unsigned value.
		/// </summary>
		/// <remarks>
		/// Return the boolean value of 'attribute' that is formatted as an
		/// unsigned value.  In particular, the formats 0xn...n and #n...n are
		/// handled.
		/// </remarks>
		/// <param name="namespace">Namespace of attribute to retrieve.</param>
		/// <param name="attribute">The attribute to retrieve.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		int getAttributeUnsignedIntValue(string @namespace, string attribute, int defaultValue
			);

		/// <summary>Return the float value of 'attribute'.</summary>
		/// <remarks>Return the float value of 'attribute'.</remarks>
		/// <param name="namespace">Namespace of attribute to retrieve.</param>
		/// <param name="attribute">The attribute to retrieve.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		float getAttributeFloatValue(string @namespace, string attribute, float defaultValue
			);

		/// <summary>
		/// Return the index of the value of attribute at 'index' in the list
		/// 'options'.
		/// </summary>
		/// <remarks>
		/// Return the index of the value of attribute at 'index' in the list
		/// 'options'.
		/// </remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <param name="options">List of strings whose values we are checking against.</param>
		/// <param name="defaultValue">
		/// Value returned if attribute doesn't exist or no
		/// match is found.
		/// </param>
		/// <returns>Index in to 'options' or defaultValue.</returns>
		int getAttributeListValue(int index, string[] options, int defaultValue);

		/// <summary>Return the boolean value of attribute at 'index'.</summary>
		/// <remarks>Return the boolean value of attribute at 'index'.</remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		bool getAttributeBooleanValue(int index, bool defaultValue);

		/// <summary>Return the value of attribute at 'index' as a resource identifier.</summary>
		/// <remarks>
		/// Return the value of attribute at 'index' as a resource identifier.
		/// <p>Note that this is different than
		/// <see cref="getAttributeNameResource(int)">getAttributeNameResource(int)</see>
		/// in that it returns a the value contained in this attribute as a
		/// resource identifier (i.e., a value originally of the form
		/// "@package:type/resource"); the other method returns a resource
		/// identifier that identifies the name of the attribute.
		/// </remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		int getAttributeResourceValue(int index, int defaultValue);

		/// <summary>Return the integer value of attribute at 'index'.</summary>
		/// <remarks>Return the integer value of attribute at 'index'.</remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		int getAttributeIntValue(int index, int defaultValue);

		/// <summary>
		/// Return the integer value of attribute at 'index' that is formatted as an
		/// unsigned value.
		/// </summary>
		/// <remarks>
		/// Return the integer value of attribute at 'index' that is formatted as an
		/// unsigned value.  In particular, the formats 0xn...n and #n...n are
		/// handled.
		/// </remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		int getAttributeUnsignedIntValue(int index, int defaultValue);

		/// <summary>Return the float value of attribute at 'index'.</summary>
		/// <remarks>Return the float value of attribute at 'index'.</remarks>
		/// <param name="index">Index of the desired attribute, 0...count-1.</param>
		/// <param name="defaultValue">What to return if the attribute isn't found.</param>
		/// <returns>Resulting value.</returns>
		float getAttributeFloatValue(int index, float defaultValue);

		/// <summary>Return the value of the "id" attribute or null if there is not one.</summary>
		/// <remarks>
		/// Return the value of the "id" attribute or null if there is not one.
		/// Equivalent to getAttributeValue(null, "id").
		/// </remarks>
		/// <returns>The id attribute's value or null.</returns>
		string getIdAttribute();

		/// <summary>Return the value of the "class" attribute or null if there is not one.</summary>
		/// <remarks>
		/// Return the value of the "class" attribute or null if there is not one.
		/// Equivalent to getAttributeValue(null, "class").
		/// </remarks>
		/// <returns>The class attribute's value or null.</returns>
		string getClassAttribute();

		/// <summary>
		/// Return the integer value of the "id" attribute or defaultValue if there
		/// is none.
		/// </summary>
		/// <remarks>
		/// Return the integer value of the "id" attribute or defaultValue if there
		/// is none.
		/// Equivalent to getAttributeResourceValue(null, "id", defaultValue);
		/// </remarks>
		/// <param name="defaultValue">What to return if the "id" attribute isn't found.</param>
		/// <returns>int Resulting value.</returns>
		int getIdAttributeResourceValue(int defaultValue);

		/// <summary>Return the value of the "style" attribute or 0 if there is not one.</summary>
		/// <remarks>
		/// Return the value of the "style" attribute or 0 if there is not one.
		/// Equivalent to getAttributeResourceValue(null, "style").
		/// </remarks>
		/// <returns>The style attribute's resource identifier or 0.</returns>
		int getStyleAttribute();
	}
}
