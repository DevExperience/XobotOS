/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.inputmethod.latin;

public final class R {
    public static final class anim {
        public static final int mini_keyboard_fadein=0x7f040000;
        public static final int mini_keyboard_fadeout=0x7f040001;
    }
    public static final class array {
        public static final int auto_correction_threshold_mode_indexes=0x7f0c0003;
        public static final int auto_correction_threshold_modes=0x7f0c0004;
        public static final int auto_correction_threshold_values=0x7f0c0000;
        /**  For keyboard theme switcher dialog 
         */
        public static final int keyboard_layout_modes=0x7f0c0008;
        public static final int keyboard_layout_modes_values=0x7f0c0009;
        public static final int keypress_vibration_durations=0x7f0c000c;
        public static final int keypress_volumes=0x7f0c000d;
        public static final int prefs_suggestion_visibilities=0x7f0c0002;
        /**   Option to show/hide the suggestion strip 
         */
        public static final int prefs_suggestion_visibility_values=0x7f0c0001;
        /**  Subtype locale name exceptions 
         */
        public static final int subtype_locale_exception_keys=0x7f0c000a;
        public static final int subtype_locale_exception_values=0x7f0c000b;
        public static final int sudden_jumping_touch_event_device_list=0x7f0c000e;
        /** 
        An entry of the touch_position_correction word should be:
        1. (float) (touch_center_x - key_center_x) / key_width
        2. (float) (touch_center_y - key_center_y) / key_height
        3. (float) sweet_spot_radius / (key_width^2 + key_height^2)
     
 empty 
         */
        public static final int touch_position_correction_data_empty=0x7f0c000f;
        public static final int touch_position_correction_data_gingerbread=0x7f0c0010;
        public static final int touch_position_correction_data_ice_cream_sandwich=0x7f0c0011;
        /**  Array of Voice Input modes 
         */
        public static final int voice_input_modes=0x7f0c0006;
        /**  Array of Voice Input modes summary 
         */
        public static final int voice_input_modes_summary=0x7f0c0007;
        public static final int voice_input_modes_values=0x7f0c0005;
        /** 
        An entry of the whitelist word should be:
        1. (int)frequency
        2. (String)before
        3. (String)after
     

        An entry of the whitelist word should be:
        1. (int)frequency
        2. (String)before
        3. (String)after
     
         */
        public static final int wordlist_whitelist=0x7f0c0012;
    }
    public static final class attr {
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int alphaAutoCorrect=0x7f010033;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int alphaObsoleted=0x7f010035;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int alphaSuggested=0x7f010034;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int alphaTypedWord=0x7f010032;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int autoCorrectionSpacebarLedEnabled=0x7f010076;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int autoCorrectionSpacebarLedIcon=0x7f010077;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int backgroundDimAmount=0x7f01002c;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> This should be aligned with Key.BACKGROUND_TYPE_* </td></tr>
<tr><td><code>functional</code></td><td>1</td><td></td></tr>
<tr><td><code>action</code></td><td>2</td><td></td></tr>
<tr><td><code>sticky</code></td><td>3</td><td></td></tr>
</table>
         */
        public static final int backgroundType=0x7f010058;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int centerSuggestionPercentile=0x7f010037;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int clobberSettingsKey=0x7f01006d;
        /**  The unicode value that this key outputs. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int code=0x7f010055;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int colorAutoCorrect=0x7f010030;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int colorSuggested=0x7f010031;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int colorTypedWord=0x7f01002f;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int countryCode=0x7f010073;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int disabledShortcutIcon=0x7f010078;
        /**  The key is enabled and responds on press. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int enabled=0x7f010062;
        /**  This should be aligned with KeyboardID.F2KEY_MODE_* 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>settings</code></td><td>1</td><td></td></tr>
<tr><td><code>shortcutIme</code></td><td>2</td><td></td></tr>
<tr><td><code>shortcutImeOrSettings</code></td><td>3</td><td></td></tr>
</table>
         */
        public static final int f2KeyMode=0x7f01006c;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int hasSettingsKey=0x7f01006b;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int hasShortcutKey=0x7f01006f;
        /**  Default horizontal gap between keys. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int horizontalGap=0x7f010043;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconDeleteKey=0x7f010049;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconPreviewSettingsKey=0x7f010053;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconPreviewShortcutKey=0x7f010054;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconPreviewTabKey=0x7f010052;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconReturnKey=0x7f01004c;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconSearchKey=0x7f01004d;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconSettingsKey=0x7f01004a;
        /**  Icon set for key top and key preview. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconShiftKey=0x7f010048;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconShiftedShiftKey=0x7f010051;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconShortcutForLabel=0x7f010050;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconShortcutKey=0x7f01004f;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconSpaceKey=0x7f01004b;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int iconTabKey=0x7f01004e;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>actionUnspecified</code></td><td>0</td><td> This should be aligned with EditorInfo.IME_ACTION_* </td></tr>
<tr><td><code>actionNone</code></td><td>1</td><td></td></tr>
<tr><td><code>actionGo</code></td><td>2</td><td></td></tr>
<tr><td><code>actionSearch</code></td><td>3</td><td></td></tr>
<tr><td><code>actionSend</code></td><td>4</td><td></td></tr>
<tr><td><code>actionNext</code></td><td>5</td><td></td></tr>
<tr><td><code>actionDone</code></td><td>6</td><td></td></tr>
<tr><td><code>actionPrevious</code></td><td>7</td><td></td></tr>
</table>
         */
        public static final int imeAction=0x7f010070;
        /**  Whether long-pressing on this key will make it repeat. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int isRepeatable=0x7f010059;
        /**  True if the keyboard is Right-To-Left 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int isRtlKeyboard=0x7f010047;
        /**  Image for the key. This image needs to be a StateListDrawable, with the following
             possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
             checkable+checked+pressed. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyBackground=0x7f01000b;
        /**  The hint label to display on the key in conjunction with the label. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHintLabel=0x7f01005c;
        /**  Key hint label color 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHintLabelColor=0x7f01001b;
        /**  Size of the text for hint label, in the proportion of key height. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHintLabelRatio=0x7f010012;
        /**  Key hint letter (= one character hint label) color 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHintLetterColor=0x7f01001a;
        /**  Top and right padding of hint letter to the edge of the key.
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHintLetterPadding=0x7f010015;
        /**  Size of the text for hint letter (= one character hint label), in the proportion of
             key height. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyHintLetterRatio=0x7f010011;
        /**  The icon to display on the key instead of the label. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>iconShiftKey</code></td><td>1</td><td> This should be aligned with KeyboardIcons.ICON_* </td></tr>
<tr><td><code>iconDeleteKey</code></td><td>2</td><td></td></tr>
<tr><td><code>iconSettingsKey</code></td><td>3</td><td></td></tr>
<tr><td><code>iconSpaceKey</code></td><td>4</td><td></td></tr>
<tr><td><code>iconReturnKey</code></td><td>5</td><td></td></tr>
<tr><td><code>iconSearchKey</code></td><td>6</td><td></td></tr>
<tr><td><code>iconTabKey</code></td><td>7</td><td></td></tr>
<tr><td><code>iconShortcutKey</code></td><td>8</td><td></td></tr>
<tr><td><code>iconShortcutForLabel</code></td><td>9</td><td></td></tr>
</table>
         */
        public static final int keyIcon=0x7f01005e;
        /**  The icon to show in the popup preview. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>iconPreviewTabKey</code></td><td>11</td><td> This should be aligned with KeyboardIcons.ICON_PREVIEW_* </td></tr>
<tr><td><code>iconPreviewSettingsKey</code></td><td>12</td><td></td></tr>
<tr><td><code>iconPreviewShortcutKey</code></td><td>13</td><td></td></tr>
</table>
         */
        public static final int keyIconPreview=0x7f010060;
        /**  Shift key icon for shifted state 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>iconShiftedShiftKey</code></td><td>10</td><td> This should be aligned with KeyboardIcons.ICON_SHIFTED_* </td></tr>
</table>
         */
        public static final int keyIconShifted=0x7f01005f;
        /**  The label to display on the key. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLabel=0x7f01005b;
        /**  Horizontal padding of left/right aligned key label to the edge of the key. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLabelHorizontalPadding=0x7f010014;
        /**  The key label option. 
         <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>alignLeft</code></td><td>0x01</td><td> This should be aligned with Key.LABEL_OPTION_* </td></tr>
<tr><td><code>alignRight</code></td><td>0x02</td><td></td></tr>
<tr><td><code>alignLeftOfCenter</code></td><td>0x08</td><td></td></tr>
<tr><td><code>largeLetter</code></td><td>0x10</td><td></td></tr>
<tr><td><code>fontNormal</code></td><td>0x20</td><td></td></tr>
<tr><td><code>fontMonoSpace</code></td><td>0x40</td><td></td></tr>
<tr><td><code>followKeyLetterRatio</code></td><td>0x80</td><td></td></tr>
<tr><td><code>followKeyHintLabelRatio</code></td><td>0x100</td><td></td></tr>
<tr><td><code>hasPopupHint</code></td><td>0x200</td><td></td></tr>
<tr><td><code>hasUppercaseLetter</code></td><td>0x400</td><td></td></tr>
<tr><td><code>hasHintLabel</code></td><td>0x800</td><td></td></tr>
<tr><td><code>withIconLeft</code></td><td>0x1000</td><td></td></tr>
<tr><td><code>withIconRight</code></td><td>0x2000</td><td></td></tr>
<tr><td><code>autoXScale</code></td><td>0x4000</td><td></td></tr>
</table>
         */
        public static final int keyLabelOption=0x7f01005d;
        /**  Size of the text for keys with multiple letters, in the proportion of key height. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLabelRatio=0x7f010010;
        /**  Size of the text for keys with multiple letters. If not defined, keyLabelRatio takes
             effect. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLabelSize=0x7f01000d;
        /**  Large size of the text for one letter keys, in the proportion of key height. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLargeLetterRatio=0x7f01000f;
        /**  Size of the text for one letter keys, in the proportion of key height. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLetterRatio=0x7f01000e;
        /**  Size of the text for one letter keys. If not defined, keyLetterRatio takes effect. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyLetterSize=0x7f01000c;
        /**  The string of characters to output when this key is pressed. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyOutputText=0x7f01005a;
        /**  Bottom padding of popup hint letter "..." to the edge of the key.
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPopupHintLetterPadding=0x7f010016;
        /**  The background for key press feedback. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyPreviewBackground=0x7f01001f;
        /**  The height of rectangle part of the key press feedback background. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewBackgroundHeight=0x7f010023;
        /**  The width of rectangle part of the key press feedback background. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewBackgroundWidth=0x7f010022;
        /**  Height of the key press feedback popup. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewHeight=0x7f010026;
        /**  Layout resource for key press feedback.
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyPreviewLayout=0x7f01001e;
        /**  The background for the left edge key press feedback. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyPreviewLeftBackground=0x7f010020;
        /**  Vertical offset of the key press feedback from the key. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewOffset=0x7f010025;
        /**  The background for the right edge key press feedback. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyPreviewRightBackground=0x7f010021;
        /**  The text color for key press feedback. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewTextColor=0x7f010024;
        /**  Size of the text for key press feedback popup, int the proportion of key height 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyPreviewTextRatio=0x7f010027;
        /**  The key style to specify a set of key attributes defined by <key_style/> 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyStyle=0x7f010061;
        /**  Color to use for the label in a key. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyTextColor=0x7f010018;
        /**  Color to use for the label in a key when in inactivated state. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyTextInactivatedColor=0x7f010019;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> This should be aligned with Typeface.NORMAL etc. </td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
<tr><td><code>boldItalic</code></td><td>3</td><td></td></tr>
</table>
         */
        public static final int keyTextStyle=0x7f01002d;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyUppercaseLetterActivatedColor=0x7f01001d;
        /**  Upper case letter colors 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyUppercaseLetterInactivatedColor=0x7f01001c;
        /**  Top and right padding of upper case letter to the edge of the key.
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyUppercaseLetterPadding=0x7f010017;
        /**  Size of the text for upper case letter, in the proportion of key height. 
         <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyUppercaseLetterRatio=0x7f010013;
        /**  Width of the key, in pixels or percentage of display width.
             If the value is fillRight, the actual key width will be determined to fill out the area
             up to the right edge of the keyboard.
             If the value is fillBoth, the actual key width will be determined to fill out the
             area between the nearest key on the left hand side and the right edge of the keyboard.
             
 This should be aligned with KeyboardBuilder.Row.KEYWIDTH_* 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fillRight</code></td><td>-1</td><td></td></tr>
<tr><td><code>fillBoth</code></td><td>-2</td><td></td></tr>
</table>
         */
        public static final int keyWidth=0x7f010065;
        /**  The X-coordinate of upper right corner of this key including horizontal gap.
             If the value is negative, the origin is the right edge of the keyboard. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyXPos=0x7f010066;
        /** <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyboardBottomPadding=0x7f010040;
        /**  Default keyboard height 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyboardHeight=0x7f01003c;
        /** <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyboardHorizontalEdgesPadding=0x7f010041;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyboardLayout=0x7f010067;
        /**  Locale of the keyboard layout 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyboardLocale=0x7f010046;
        /**  Keyboard style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyboardStyle=0x7f010000;
        /**  Keyboard top, bottom, both horizontal edges paddings. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int keyboardTopPadding=0x7f01003f;
        /**  KeyboardView style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int keyboardViewStyle=0x7f010002;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int languageCode=0x7f010072;
        /**  LatinKeyboard style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int latinKeyboardStyle=0x7f010001;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int localeCode=0x7f010071;
        /**  Maximum keyboard height, in pixels or percentage of display height 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int maxKeyboardHeight=0x7f01003d;
        /**  Maximum column of more keys keyboard 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int maxMoreKeysColumn=0x7f010057;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int maxMoreSuggestionsRow=0x7f010038;
        /**  Minimum keyboard height represented in pixels, percentage of display height if fraction
             is positive, or percentage of display width if fraction is negative. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int minKeyboardHeight=0x7f01003e;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int minMoreSuggestionsWidth=0x7f010039;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int miniKeyboardPanelStyle=0x7f010005;
        /**  MiniKeyboard style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int miniKeyboardStyle=0x7f010003;
        /**  MiniKeyboardView style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int miniKeyboardViewStyle=0x7f010004;
        /**  This should be aligned with KeyboardId.MODE_* 
         <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>text</code></td><td>0</td><td></td></tr>
<tr><td><code>url</code></td><td>1</td><td></td></tr>
<tr><td><code>email</code></td><td>2</td><td></td></tr>
<tr><td><code>im</code></td><td>3</td><td></td></tr>
<tr><td><code>phone</code></td><td>4</td><td></td></tr>
<tr><td><code>number</code></td><td>5</td><td></td></tr>
</table>
         */
        public static final int mode=0x7f010068;
        /**  The keys to display in the more keys keyboard. 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int moreKeys=0x7f010056;
        /**  Layout resource for more keys panel 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int moreKeysLayout=0x7f010029;
        /**  More keys keyboard layout template 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int moreKeysTemplate=0x7f010045;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int moreSuggestionsViewStyle=0x7f010008;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int navigateAction=0x7f010069;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int parentStyle=0x7f010075;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int passwordInput=0x7f01006a;
        /**  Default height of a row (key height + vertical gap), in pixels or percentage of
             keyboard height. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int rowHeight=0x7f010042;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int shadowColor=0x7f01002a;
        /** <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int shadowRadius=0x7f01002b;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int shortcutKeyEnabled=0x7f01006e;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int spacebarTextColor=0x7f010079;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int spacebarTextShadowColor=0x7f01007a;
        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int styleName=0x7f010074;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int suggestionBackgroundStyle=0x7f010009;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int suggestionPreviewBackgroundStyle=0x7f01000a;
        /** <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>autoCorrectBold</code></td><td>0x01</td><td> This should be aligned with SuggestionsViewParams.AUTO_CORRECT_* and etc. </td></tr>
<tr><td><code>autoCorrectUnderline</code></td><td>0x02</td><td></td></tr>
<tr><td><code>validTypedWordBold</code></td><td>0x04</td><td></td></tr>
</table>
         */
        public static final int suggestionStripOption=0x7f01002e;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int suggestionsCountInStrip=0x7f010036;
        /**  Suggestions strip style 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int suggestionsStripBackgroundStyle=0x7f010006;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int suggestionsViewStyle=0x7f010007;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int themeId=0x7f01003a;
        /**  Touch position correction 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int touchPositionCorrectionData=0x7f01003b;
        /**  Amount to offset the touch Y coordinate by, for bias correction. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int verticalCorrection=0x7f010028;
        /**  Default vertical gap between rows of keys. 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int verticalGap=0x7f010044;
        /**  Visual insets 
         <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int visualInsetsLeft=0x7f010063;
        /** <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int visualInsetsRight=0x7f010064;
    }
    public static final class bool {
        public static final int config_auto_correction_spacebar_led_enabled=0x7f08000f;
        /**  Default value for bigram prediction: after entering a word and a space only, should we look
         at input history to suggest a hopefully helpful suggestions for the next word? 
         */
        public static final int config_default_bigram_prediction=0x7f08000c;
        /**  Default value for bigram suggestion: while showing suggestions for a word should we weigh
         in the previous word? 
         */
        public static final int config_default_bigram_suggestions=0x7f08000b;
        /**  Whether or not Popup on key press is enabled by default 
 Whether or not Popup on key press is enabled by default 
 Whether or not Popup on key press is enabled by default 
         */
        public static final int config_default_popup_preview=0x7f08000a;
        public static final int config_default_show_settings_key=0x7f080003;
        public static final int config_default_sound_enabled=0x7f08000d;
        public static final int config_default_vibration_enabled=0x7f08000e;
        public static final int config_digit_more_keys_enabled=0x7f080009;
        public static final int config_enable_bigram_suggestions_option=0x7f080006;
        public static final int config_enable_show_popup_on_keypress_option=0x7f080005;
        public static final int config_enable_show_settings_key_option=0x7f080002;
        public static final int config_enable_show_voice_key_option=0x7f080004;
        public static final int config_enable_usability_study_mode_option=0x7f080007;
        public static final int config_require_umlaut_processing=0x7f080011;
        /**  Showing mini keyboard, just above the touched point if true, aligned to the key if false 
 Showing mini keyboard, just above the touched point if true, aligned to the key if false 
 Showing mini keyboard, just above the touched point if true, aligned to the key if false 
         */
        public static final int config_show_mini_keyboard_at_touched_point=0x7f080010;
        public static final int config_sliding_key_input_enabled=0x7f080008;
        public static final int config_use_fullscreen_mode=0x7f080001;
        /**  Whether this input method should be used as the default for a locale. Override it
         for latin languages. 
         */
        public static final int im_is_default=0x7f080000;
    }
    public static final class dimen {
        public static final int config_touch_noise_threshold_distance=0x7f0a0000;
        public static final int key_hint_letter_padding=0x7f0a000d;
        public static final int key_hysteresis_distance=0x7f0a001e;
        /**  left or right padding of label alignment 
 left or right padding of label alignment 
 left or right padding of label alignment 
 left or right padding of label alignment 
 left or right padding of label alignment 
         */
        public static final int key_label_horizontal_padding=0x7f0a000c;
        public static final int key_popup_hint_letter_padding=0x7f0a000e;
        /**  key_preview_backing_height = more_suggestions_row_height * max_more_suggestions_row 
 key_preview_backing_height = more_suggestions_row_height * max_more_suggestions_row 
 key_preview_backing_height = more_suggestions_row_height * max_more_suggestions_row 
 key_preview_backing_height = more_suggestions_row_height * max_more_suggestions_row 
 key_preview_backing_height = more_suggestions_row_height * max_more_suggestions_row 
         */
        public static final int key_preview_backing_height=0x7f0a0018;
        public static final int key_preview_height=0x7f0a000a;
        public static final int key_preview_height_ics=0x7f0a0010;
        public static final int key_preview_offset=0x7f0a000b;
        public static final int key_preview_offset_ics=0x7f0a0011;
        public static final int key_uppercase_letter_padding=0x7f0a000f;
        /**  keyboardHeight = row_height*4 + key_bottom_gap*3 
 keyboardHeight = key_height*4 + key_bottom_gap*3, key_height=0.260in 
 keyboardHeight = key_height*4 + key_bottom_gap*3 
 keyboardHeight = key_height*4 + key_bottom_gap*3 
 keyboardHeight = key_height*4 + key_bottom_gap*3, key_height=12mm 
 keyboardHeight = key_height*4 + key_bottom_gap*3, key_height=14.5mm 
         */
        public static final int keyboardHeight=0x7f0a0001;
        public static final int keyboardHeight_stone=0x7f0a0005;
        public static final int keyboard_key_feedback_background_holo_height=0x7f0a0020;
        public static final int keyboard_key_feedback_background_holo_width=0x7f0a001f;
        /**  We use "inch", not "dip" because this value tries dealing with physical distance related
         to user's finger. 
         */
        public static final int keyboard_vertical_correction=0x7f0a0009;
        public static final int mini_keyboard_horizontal_edges_padding=0x7f0a0003;
        public static final int mini_keyboard_horizontal_edges_padding_ics=0x7f0a0006;
        public static final int mini_keyboard_key_horizontal_padding=0x7f0a0004;
        /**  Amount of allowance for selecting keys in a mini popup keyboard by sliding finger. 
 popup_key_height x 1.2 
 Amount of allowance for selecting keys in a mini popup keyboard by sliding finger. 
 popup_key_height x 1.2 
 Amount of allowance for selecting keys in a mini popup keyboard by sliding finger. 
 popup_key_height x 1.2 
 Amount of allowance for selecting keys in a mini popup keyboard by sliding finger. 
 popup_key_height x 1.2 
         */
        public static final int mini_keyboard_slide_allowance=0x7f0a0007;
        /**  popup_key_height x -1.0 
 popup_key_height x -1.0 
 popup_key_height x -1.0 
 popup_key_height x -1.0 
         */
        public static final int mini_keyboard_vertical_correction=0x7f0a0008;
        public static final int more_suggestions_bottom_gap=0x7f0a0015;
        public static final int more_suggestions_hint_text_size=0x7f0a001d;
        public static final int more_suggestions_key_horizontal_padding=0x7f0a0013;
        public static final int more_suggestions_modal_tolerance=0x7f0a0016;
        public static final int more_suggestions_row_height=0x7f0a0014;
        public static final int more_suggestions_slide_allowance=0x7f0a0017;
        /**  key_height + key_bottom_gap = popup_key_height 
    <dimen name="key_height">0.260in</dimen>
         */
        public static final int popup_key_height=0x7f0a0002;
        public static final int suggestion_min_width=0x7f0a001a;
        public static final int suggestion_padding=0x7f0a001b;
        public static final int suggestion_text_size=0x7f0a001c;
        public static final int suggestions_strip_height=0x7f0a0012;
        public static final int suggestions_strip_padding=0x7f0a0019;
    }
    public static final class drawable {
        public static final int background_voice=0x7f020000;
        public static final int btn_center=0x7f020001;
        public static final int btn_center_default=0x7f020002;
        public static final int btn_center_pressed=0x7f020003;
        public static final int btn_center_selected=0x7f020004;
        public static final int btn_keyboard_key=0x7f020005;
        public static final int btn_keyboard_key3=0x7f020006;
        public static final int btn_keyboard_key_dark_active_holo=0x7f020007;
        public static final int btn_keyboard_key_dark_normal=0x7f020008;
        public static final int btn_keyboard_key_dark_normal_holo=0x7f020009;
        public static final int btn_keyboard_key_dark_normal_off=0x7f02000a;
        public static final int btn_keyboard_key_dark_normal_off_holo=0x7f02000b;
        public static final int btn_keyboard_key_dark_normal_on=0x7f02000c;
        public static final int btn_keyboard_key_dark_normal_on_holo=0x7f02000d;
        public static final int btn_keyboard_key_dark_pressed=0x7f02000e;
        public static final int btn_keyboard_key_dark_pressed_holo=0x7f02000f;
        public static final int btn_keyboard_key_dark_pressed_off=0x7f020010;
        public static final int btn_keyboard_key_dark_pressed_off_holo=0x7f020011;
        public static final int btn_keyboard_key_dark_pressed_on=0x7f020012;
        public static final int btn_keyboard_key_dark_pressed_on_holo=0x7f020013;
        public static final int btn_keyboard_key_fulltrans_normal=0x7f020014;
        public static final int btn_keyboard_key_fulltrans_pressed=0x7f020015;
        public static final int btn_keyboard_key_gingerbread=0x7f020016;
        public static final int btn_keyboard_key_ics=0x7f020017;
        public static final int btn_keyboard_key_light_normal=0x7f020018;
        public static final int btn_keyboard_key_light_normal_holo=0x7f020019;
        public static final int btn_keyboard_key_light_popup_selected=0x7f02001a;
        public static final int btn_keyboard_key_light_pressed=0x7f02001b;
        public static final int btn_keyboard_key_light_pressed_holo=0x7f02001c;
        public static final int btn_keyboard_key_normal=0x7f02001d;
        public static final int btn_keyboard_key_normal_off=0x7f02001e;
        public static final int btn_keyboard_key_normal_off_stone=0x7f02001f;
        public static final int btn_keyboard_key_normal_on=0x7f020020;
        public static final int btn_keyboard_key_normal_on_stone=0x7f020021;
        public static final int btn_keyboard_key_normal_stone=0x7f020022;
        public static final int btn_keyboard_key_popup=0x7f020023;
        public static final int btn_keyboard_key_popup_ics=0x7f020024;
        public static final int btn_keyboard_key_popup_selected_holo=0x7f020025;
        public static final int btn_keyboard_key_pressed=0x7f020026;
        public static final int btn_keyboard_key_pressed_off=0x7f020027;
        public static final int btn_keyboard_key_pressed_on=0x7f020028;
        public static final int btn_keyboard_key_stone=0x7f020029;
        public static final int btn_suggestion=0x7f02002a;
        public static final int btn_suggestion_ics=0x7f02002b;
        public static final int btn_suggestion_pressed=0x7f02002c;
        public static final int caution=0x7f02002d;
        public static final int ic_ime_settings=0x7f02002e;
        public static final int ic_mic_dialog=0x7f02002f;
        public static final int ic_subtype_keyboard=0x7f020030;
        public static final int ic_suggest_strip_microphone=0x7f020031;
        public static final int ic_suggest_strip_microphone_swipe=0x7f020032;
        public static final int keyboard_background=0x7f020033;
        public static final int keyboard_background_holo=0x7f020034;
        public static final int keyboard_dark_background=0x7f020035;
        public static final int keyboard_key_feedback=0x7f020036;
        public static final int keyboard_key_feedback_background=0x7f020037;
        public static final int keyboard_key_feedback_background_holo=0x7f020038;
        public static final int keyboard_key_feedback_ics=0x7f020039;
        public static final int keyboard_key_feedback_left_background_holo=0x7f02003a;
        public static final int keyboard_key_feedback_left_ics=0x7f02003b;
        public static final int keyboard_key_feedback_left_more_background_holo=0x7f02003c;
        public static final int keyboard_key_feedback_more_background=0x7f02003d;
        public static final int keyboard_key_feedback_more_background_holo=0x7f02003e;
        public static final int keyboard_key_feedback_right_background_holo=0x7f02003f;
        public static final int keyboard_key_feedback_right_ics=0x7f020040;
        public static final int keyboard_key_feedback_right_more_background_holo=0x7f020041;
        public static final int keyboard_popup_panel_background=0x7f020042;
        public static final int keyboard_popup_panel_background_holo=0x7f020043;
        public static final int keyboard_suggest_strip=0x7f020044;
        public static final int keyboard_suggest_strip_holo=0x7f020045;
        public static final int mic_base=0x7f020046;
        public static final int mic_full=0x7f020047;
        public static final int mic_slash=0x7f020048;
        public static final int more_suggestions_divider=0x7f020049;
        public static final int suggestion_feedback_background=0x7f02004a;
        public static final int suggestions_strip_divider=0x7f02004b;
        public static final int sym_bkeyboard_delete=0x7f02004c;
        public static final int sym_bkeyboard_label_mic=0x7f02004d;
        public static final int sym_bkeyboard_mic=0x7f02004e;
        public static final int sym_bkeyboard_return=0x7f02004f;
        public static final int sym_bkeyboard_search=0x7f020050;
        public static final int sym_bkeyboard_settings=0x7f020051;
        public static final int sym_bkeyboard_shift=0x7f020052;
        public static final int sym_bkeyboard_shift_locked=0x7f020053;
        public static final int sym_bkeyboard_space=0x7f020054;
        public static final int sym_bkeyboard_tab=0x7f020055;
        public static final int sym_bkeyboard_voice_off=0x7f020056;
        public static final int sym_keyboard_delete=0x7f020057;
        public static final int sym_keyboard_delete_holo=0x7f020058;
        public static final int sym_keyboard_feedback_mic=0x7f020059;
        public static final int sym_keyboard_feedback_settings=0x7f02005a;
        public static final int sym_keyboard_feedback_settings_holo=0x7f02005b;
        public static final int sym_keyboard_feedback_tab=0x7f02005c;
        public static final int sym_keyboard_label_mic=0x7f02005d;
        public static final int sym_keyboard_label_mic_holo=0x7f02005e;
        public static final int sym_keyboard_mic=0x7f02005f;
        public static final int sym_keyboard_return=0x7f020060;
        public static final int sym_keyboard_return_holo=0x7f020061;
        public static final int sym_keyboard_search=0x7f020062;
        public static final int sym_keyboard_search_holo=0x7f020063;
        public static final int sym_keyboard_settings=0x7f020064;
        public static final int sym_keyboard_settings_holo=0x7f020065;
        public static final int sym_keyboard_shift=0x7f020066;
        public static final int sym_keyboard_shift_holo=0x7f020067;
        public static final int sym_keyboard_shift_locked=0x7f020068;
        public static final int sym_keyboard_shift_locked_holo=0x7f020069;
        public static final int sym_keyboard_space=0x7f02006a;
        public static final int sym_keyboard_space_holo=0x7f02006b;
        public static final int sym_keyboard_space_led=0x7f02006c;
        public static final int sym_keyboard_space_led_holo=0x7f02006d;
        public static final int sym_keyboard_tab=0x7f02006e;
        public static final int sym_keyboard_tab_holo=0x7f02006f;
        public static final int sym_keyboard_voice_holo=0x7f020070;
        public static final int sym_keyboard_voice_off_holo=0x7f020071;
        public static final int transparent=0x7f020072;
        public static final int vs_dialog_blue=0x7f020073;
        public static final int vs_dialog_red=0x7f020074;
        public static final int vs_dialog_yellow=0x7f020075;
        public static final int vs_popup_mic_edge=0x7f020076;
    }
    public static final class fraction {
        public static final int key_bottom_gap=0x7f0d0005;
        public static final int key_bottom_gap_gb=0x7f0d000b;
        public static final int key_bottom_gap_ics=0x7f0d000f;
        public static final int key_bottom_gap_stone=0x7f0d0009;
        public static final int key_hint_label_ratio=0x7f0d0015;
        public static final int key_hint_letter_ratio=0x7f0d0014;
        public static final int key_horizontal_gap=0x7f0d0006;
        public static final int key_horizontal_gap_gb=0x7f0d000c;
        public static final int key_horizontal_gap_ics=0x7f0d0010;
        public static final int key_horizontal_gap_stone=0x7f0d000a;
        public static final int key_label_ratio=0x7f0d0013;
        public static final int key_large_letter_ratio=0x7f0d0012;
        public static final int key_letter_ratio=0x7f0d0011;
        public static final int key_preview_text_ratio=0x7f0d0017;
        public static final int key_uppercase_letter_ratio=0x7f0d0016;
        public static final int keyboard_bottom_padding=0x7f0d0003;
        public static final int keyboard_bottom_padding_ics=0x7f0d000e;
        public static final int keyboard_bottom_padding_stone=0x7f0d0008;
        public static final int keyboard_horizontal_edges_padding=0x7f0d0004;
        public static final int keyboard_top_padding=0x7f0d0002;
        public static final int keyboard_top_padding_ics=0x7f0d000d;
        public static final int keyboard_top_padding_stone=0x7f0d0007;
        public static final int maxKeyboardHeight=0x7f0d0000;
        public static final int minKeyboardHeight=0x7f0d0001;
        public static final int min_more_suggestions_width=0x7f0d0018;
        public static final int more_suggestions_info_ratio=0x7f0d0019;
    }
    public static final class id {
        public static final int action=0x7f070008;
        public static final int actionDone=0x7f070037;
        public static final int actionGo=0x7f070033;
        public static final int actionNext=0x7f070036;
        public static final int actionNone=0x7f070032;
        public static final int actionPrevious=0x7f070038;
        public static final int actionSearch=0x7f070034;
        public static final int actionSend=0x7f070035;
        public static final int actionUnspecified=0x7f070031;
        public static final int alignLeft=0x7f07000a;
        public static final int alignLeftOfCenter=0x7f07000c;
        public static final int alignRight=0x7f07000b;
        public static final int autoCorrectBold=0x7f070004;
        public static final int autoCorrectUnderline=0x7f070005;
        public static final int autoXScale=0x7f070017;
        public static final int bold=0x7f070001;
        public static final int boldItalic=0x7f070003;
        public static final int button=0x7f070044;
        public static final int email=0x7f070029;
        public static final int fillBoth=0x7f070026;
        public static final int fillRight=0x7f070025;
        public static final int followKeyHintLabelRatio=0x7f070011;
        public static final int followKeyLetterRatio=0x7f070010;
        public static final int fontMonoSpace=0x7f07000f;
        public static final int fontNormal=0x7f07000e;
        public static final int functional=0x7f070007;
        public static final int hasHintLabel=0x7f070014;
        public static final int hasPopupHint=0x7f070012;
        public static final int hasUppercaseLetter=0x7f070013;
        public static final int iconDeleteKey=0x7f070019;
        public static final int iconPreviewSettingsKey=0x7f070023;
        public static final int iconPreviewShortcutKey=0x7f070024;
        public static final int iconPreviewTabKey=0x7f070022;
        public static final int iconReturnKey=0x7f07001c;
        public static final int iconSearchKey=0x7f07001d;
        public static final int iconSettingsKey=0x7f07001a;
        public static final int iconShiftKey=0x7f070018;
        public static final int iconShiftedShiftKey=0x7f070021;
        public static final int iconShortcutForLabel=0x7f070020;
        public static final int iconShortcutKey=0x7f07001f;
        public static final int iconSpaceKey=0x7f07001b;
        public static final int iconTabKey=0x7f07001e;
        public static final int im=0x7f07002a;
        public static final int image=0x7f070041;
        public static final int italic=0x7f070002;
        public static final int key_preview_backing=0x7f070039;
        public static final int keyboard_view=0x7f07003c;
        public static final int language=0x7f070043;
        public static final int largeLetter=0x7f07000d;
        public static final int mini_keyboard_view=0x7f07003d;
        public static final int more_suggestions_view=0x7f07003e;
        public static final int none=0x7f07002d;
        public static final int normal=0x7f070000;
        public static final int number=0x7f07002c;
        public static final int phone=0x7f07002b;
        public static final int popup_layout=0x7f07003f;
        public static final int progress=0x7f070042;
        public static final int settings=0x7f07002e;
        public static final int shortcutIme=0x7f07002f;
        public static final int shortcutImeOrSettings=0x7f070030;
        public static final int sound_indicator=0x7f070040;
        public static final int sticky=0x7f070009;
        public static final int suggestions_container=0x7f07003a;
        public static final int suggestions_strip=0x7f070045;
        public static final int suggestions_view=0x7f07003b;
        public static final int text=0x7f070027;
        public static final int url=0x7f070028;
        public static final int validTypedWordBold=0x7f070006;
        public static final int vibration_settings=0x7f070047;
        public static final int vibration_value=0x7f070046;
        public static final int withIconLeft=0x7f070015;
        public static final int withIconRight=0x7f070016;
    }
    public static final class integer {
        public static final int center_suggestion_percentile=0x7f090017;
        public static final int config_delay_after_preview=0x7f090007;
        /**  The language is never displayed if == 0, always displayed if < 0 
 The language is never displayed if == 0, always displayed if < 0 
         */
        public static final int config_delay_before_fadeout_language_on_spacebar=0x7f090000;
        public static final int config_delay_before_key_repeat_start=0x7f09000a;
        public static final int config_delay_before_preview=0x7f090006;
        public static final int config_delay_update_old_suggestions=0x7f090002;
        public static final int config_delay_update_shift_state=0x7f090003;
        public static final int config_delay_update_suggestions=0x7f090001;
        public static final int config_double_spaces_turn_into_period_timeout=0x7f090012;
        public static final int config_duration_of_fadeout_language_on_spacebar=0x7f090004;
        public static final int config_final_fadeout_percentage_of_language_on_spacebar=0x7f090005;
        public static final int config_key_repeat_interval=0x7f09000b;
        public static final int config_keyboard_grid_height=0x7f09000d;
        public static final int config_keyboard_grid_width=0x7f09000c;
        public static final int config_long_press_key_timeout=0x7f09000e;
        /**  Long pressing shift will invoke caps-lock if > 0, never invoke caps-lock if == 0 
         */
        public static final int config_long_press_shift_key_timeout=0x7f09000f;
        /**  Long pressing space will invoke IME switcher if > 0, never invoke IME switcher if == 0 
 Long pressing space will invoke IME switcher if > 0, never invoke IME switcher if == 0 
 Long pressing space will invoke IME switcher if > 0, never invoke IME switcher if == 0 
         */
        public static final int config_long_press_space_key_timeout=0x7f090010;
        public static final int config_max_more_keys_column=0x7f090013;
        public static final int config_mini_keyboard_fadein_anim_time=0x7f090008;
        public static final int config_mini_keyboard_fadeout_anim_time=0x7f090009;
        public static final int config_touch_noise_threshold_millis=0x7f090011;
        public static final int key_delete=0x7f09001e;
        public static final int key_return=0x7f09001a;
        public static final int key_settings=0x7f09001f;
        public static final int key_shift=0x7f09001c;
        public static final int key_shortcut=0x7f090020;
        public static final int key_space=0x7f09001b;
        public static final int key_switch_alpha_symbol=0x7f09001d;
        /**  These code should be aligned with Keyboard.CODE_*. 
         */
        public static final int key_tab=0x7f090019;
        /**   Screen metrics for logging.
            0 = "mdpi phone screen"
            1 = "hdpi phone screen"
            2 = "mdpi 11 inch tablet screen"
            3 = "xhdpi phone screen?"
            4 = ?
    
  Screen metrics for logging.
            0 = "mdpi phone screen"
            1 = "hdpi phone screen"
            2 = "mdpi 11 inch tablet screen"
            3 = "xhdpi phone screen?"
            4 = ?
    
  Screen metrics for logging.
            0 = "mdpi phone screen"
            1 = "hdpi phone screen"
            2 = "mdpi 11 inch tablet screen"
            3 = "xhdpi phone screen?"
            4 = ?
    
         */
        public static final int log_screen_metrics=0x7f090014;
        public static final int max_more_suggestions_row=0x7f090015;
        public static final int mini_keyboard_column_for_punctuation=0x7f090018;
        public static final int suggestions_count_in_strip=0x7f090016;
    }
    public static final class layout {
        public static final int input_view=0x7f030000;
        public static final int key_preview=0x7f030001;
        public static final int mini_keyboard=0x7f030002;
        public static final int more_suggestions=0x7f030003;
        public static final int recognition_status=0x7f030004;
        public static final int suggestion_divider=0x7f030005;
        public static final int suggestion_info=0x7f030006;
        public static final int suggestion_preview=0x7f030007;
        public static final int suggestion_word=0x7f030008;
        public static final int suggestions_strip=0x7f030009;
        public static final int vibration_settings_dialog=0x7f03000a;
        public static final int voice_punctuation_hint=0x7f03000b;
        public static final int voice_swipe_hint=0x7f03000c;
    }
    public static final class raw {
        public static final int main=0x7f060000;
    }
    public static final class string {
        /**  Indicates that a word has been added to the dictionary 
         */
        public static final int added_word=0x7f0b009c;
        /**  Option name for advanced settings screen [CHAR LIMIT=25] 
         */
        public static final int advanced_settings=0x7f0b0080;
        /**  Option summary for advanced settings screen [CHAR LIMIT=65 (two lines) or 30 (fits on one line, preferable)] 
         */
        public static final int advanced_settings_summary=0x7f0b0081;
        /**  Title for the spell checking service settings screen 
         */
        public static final int android_spell_checker_settings=0x7f0b0077;
        /**  Option to enable auto capitalization of sentences 
         */
        public static final int auto_cap=0x7f0b0089;
        /**  Option to decide the auto correction threshold score 
 Option to enable auto correction [CHAR LIMIT=20]
 outdated translation 7911639788808958255 
         */
        public static final int auto_correction=0x7f0b0092;
        /**  Description for auto correction [CHAR LIMIT=65 (two lines) or 30 (fits on one line, preferable)] 
 outdated translation 6881047311475758267 
         */
        public static final int auto_correction_summary=0x7f0b0093;
        /**  Option to suggest auto correction suggestions aggressively. Auto-corrects to a word which has even large edit distance from typed word. [CHAR LIMIT=20] 
         */
        public static final int auto_correction_threshold_mode_aggeressive=0x7f0b0096;
        public static final int auto_correction_threshold_mode_index_aggeressive=0x7f0b0062;
        public static final int auto_correction_threshold_mode_index_modest=0x7f0b0061;
        public static final int auto_correction_threshold_mode_index_off=0x7f0b0060;
        public static final int auto_correction_threshold_mode_index_very_aggeressive=0x7f0b0063;
        /**  Option to suggest auto correction suggestions modestly. Auto-corrects only to a word which has small edit distance from typed word. [CHAR LIMIT=20] 
         */
        public static final int auto_correction_threshold_mode_modest=0x7f0b0095;
        /**  Option to disable auto correction. [CHAR LIMIT=20] 
         */
        public static final int auto_correction_threshold_mode_off=0x7f0b0094;
        /**  Option to suggest auto correction suggestions very aggressively. Auto-corrects to a word which has even large edit distance from typed word. [CHAR LIMIT=20] 
         */
        public static final int auto_correction_threshold_mode_very_aggeressive=0x7f0b0097;
        /**  Option to enable using user-history bigram when no input 
         */
        public static final int bigram_prediction=0x7f0b009a;
        /**  Description for auto correction 
         */
        public static final int bigram_prediction_summary=0x7f0b009b;
        /**  Option to enable bigram correction 
 outdated translation 1323347224043514969 
         */
        public static final int bigram_suggestion=0x7f0b0098;
        /**  Description for auto correction 
         */
        public static final int bigram_suggestion_summary=0x7f0b0099;
        /**  Label on button to stop recognition. Must be short to fit on button. 
         */
        public static final int cancel=0x7f0b00dd;
        /**  This configuration is the index of the array {@link KeyboardSwitcher.KEYBOARD_THEMES}. 
 This configuration is the index of the array {@link KeyboardSwitcher.KEYBOARD_THEMES}. 
 This configuration is the index of the array {@link KeyboardSwitcher.KEYBOARD_THEMES}. 
         */
        public static final int config_default_keyboard_theme_id=0x7f0b0000;
        public static final int config_text_size_of_language_on_spacebar=0x7f0b0001;
        /**  Option to configure dictionaries 
         */
        public static final int configure_dictionaries_title=0x7f0b008a;
        /**  Title for configuring input method settings [CHAR LIMIT=35] 
         */
        public static final int configure_input_method=0x7f0b00e7;
        /**  Category title for text prediction 
         */
        public static final int correction_category=0x7f0b007e;
        /**  dictionary pack package name /settings activity (for shared prefs and settings) 
         */
        public static final int dictionary_pack_package_name=0x7f0b0070;
        public static final int dictionary_pack_settings_activity=0x7f0b0071;
        /**  Option name for enabling insertion of suggestion spans (advanced option) [CHAR LIMIT=25] 
         */
        public static final int enable_span_insert=0x7f0b0087;
        /**  Option summary for enabling insertion of suggestion spans (advanced option) [CHAR LIMIT=65] 
         */
        public static final int enable_span_insert_summary=0x7f0b0088;
        /**  Title for Latin keyboard debug settings activity / dialog 
         */
        public static final int english_ime_debug_settings=0x7f0b0067;
        /**  Title for Latin keyboard input options dialog [CHAR LIMIT=25] 
         */
        public static final int english_ime_input_options=0x7f0b0075;
        /**  Title for Latin keyboard  
         */
        public static final int english_ime_name=0x7f0b0073;
        /**  Title for Latin keyboard settings activity / dialog 
         */
        public static final int english_ime_settings=0x7f0b0074;
        /**  Category title for general settings for Android keyboard 
         */
        public static final int general_category=0x7f0b007d;
        /**  Inform the user that a particular language has an available dictionary 
         */
        public static final int has_dictionary=0x7f0b00eb;
        /**  Add to dictionary hint 
 outdated translation 8058519710062071085 
         */
        public static final int hint_add_to_dictionary=0x7f0b00ea;
        /**  Description for delay for dismissing a popup on screen: default value of the delay [CHAR LIMIT=15] 
         */
        public static final int key_preview_popup_dismiss_default_delay=0x7f0b0084;
        /**  Option for the dismiss delay of the key popup [CHAR LIMIT=25] 
         */
        public static final int key_preview_popup_dismiss_delay=0x7f0b0082;
        /**  Description for delay for dismissing a popup on keypress: no delay [CHAR LIMIT=15] 
         */
        public static final int key_preview_popup_dismiss_no_delay=0x7f0b0083;
        /**  Title of the item to change the keyboard theme [CHAR LIMIT=20]
 outdated translation 437433231038683666 
         */
        public static final int keyboard_layout=0x7f0b00ee;
        public static final int keyhintlabel_for_apostrophe=0x7f0b004a;
        public static final int keyhintlabel_for_dash=0x7f0b004b;
        public static final int keyhintlabel_for_punctuation=0x7f0b0025;
        /**  \u060c: ARABIC COMMA
         \u061b: ARABIC SEMICOLON
         \u061f: ARABIC QUESTION MARK 
         */
        public static final int keylabel_for_apostrophe=0x7f0b0048;
        public static final int keylabel_for_comma=0x7f0b003c;
        public static final int keylabel_for_dash=0x7f0b0049;
        public static final int keylabel_for_f1=0x7f0b003d;
        public static final int keylabel_for_popular_domain=0x7f0b0026;
        public static final int keylabel_for_scandinavia_row2_10=0x7f0b0018;
        public static final int keylabel_for_scandinavia_row2_11=0x7f0b0019;
        public static final int keylabel_for_symbols_0=0x7f0b0031;
        public static final int keylabel_for_symbols_1=0x7f0b0028;
        public static final int keylabel_for_symbols_2=0x7f0b0029;
        public static final int keylabel_for_symbols_3=0x7f0b002a;
        public static final int keylabel_for_symbols_4=0x7f0b002b;
        public static final int keylabel_for_symbols_5=0x7f0b002c;
        public static final int keylabel_for_symbols_6=0x7f0b002d;
        public static final int keylabel_for_symbols_7=0x7f0b002e;
        public static final int keylabel_for_symbols_8=0x7f0b002f;
        public static final int keylabel_for_symbols_9=0x7f0b0030;
        /**  \u066a: ARABIC PERCENT SIGN 
         */
        public static final int keylabel_for_symbols_percent=0x7f0b0040;
        public static final int keylabel_for_symbols_question=0x7f0b003e;
        public static final int keylabel_for_symbols_semicolon=0x7f0b003f;
        /**  Label for soft enter key when it performs DONE action.  Must be short to fit on key! [CHAR LIMIT=5] 
         */
        public static final int label_done_key=0x7f0b009f;
        /**  Label for soft enter key when it performs GO action.  Must be short to fit on key! [CHAR LIMIT=5] 
         */
        public static final int label_go_key=0x7f0b009d;
        /**  Label for soft enter key when it performs NEXT action.  Must be short to fit on key! [CHAR LIMIT=5] 
         */
        public static final int label_next_key=0x7f0b009e;
        /**  Label for "Pause" key of phone number keyboard.  Must be short to fit on key! [CHAR LIMIT=5] 
         */
        public static final int label_pause_key=0x7f0b00a4;
        /**  Label for soft enter key when it performs SEND action.  Must be short to fit on key! [CHAR LIMIT=5] 
         */
        public static final int label_send_key=0x7f0b00a0;
        /**  Label for "Tab" key.  Must be short to fit on key! 
         */
        public static final int label_tab_key=0x7f0b0059;
        /**  Label for "switch to alphabetic" key.  Must be short to fit on key! [CHAR LIMIT=3] 
         */
        public static final int label_to_alpha_key=0x7f0b00a1;
        /**  Label for "switch to more symbol" modifier key on tablets.  Must be short to fit on key! 
         */
        public static final int label_to_more_symbol_for_tablet_key=0x7f0b0058;
        /**  Label for "switch to more symbol" modifier key.  Must be short to fit on key! 
         */
        public static final int label_to_more_symbol_key=0x7f0b0057;
        /**  Label for "switch to phone numeric" key.  Must be short to fit on key! 
         */
        public static final int label_to_phone_numeric_key=0x7f0b005a;
        /**  Label for "switch to phone symbols" key.  Must be short to fit on key! 
         */
        public static final int label_to_phone_symbols_key=0x7f0b005b;
        /**  Label for "switch to symbols" key.  Must be short to fit on key! [CHAR LIMIT=4] 
         */
        public static final int label_to_symbol_key=0x7f0b00a2;
        /**  Label for "switch to symbols with microphone" key. This string shouldn't include the "mic"
         part because it'll be appended by the code. Must be short to fit on key! [CHAR LIMIT=3] 
         */
        public static final int label_to_symbol_with_microphone_key=0x7f0b00a3;
        /**  Label for "Wait" key of phone number keyboard.  Must be short to fit on key! [CHAR LIMIT=5]
         */
        public static final int label_wait_key=0x7f0b00a5;
        /**  Title for input language selection screen 
         */
        public static final int language_selection_title=0x7f0b00e8;
        /**  Keyboard theme names 
         */
        public static final int layout_basic=0x7f0b0069;
        public static final int layout_gingerbread=0x7f0b006d;
        public static final int layout_high_contrast=0x7f0b006a;
        public static final int layout_ics=0x7f0b006e;
        public static final int layout_stone_bold=0x7f0b006b;
        public static final int layout_stone_normal=0x7f0b006c;
        /**  Word separator list is the union of all symbols except those that are not separators:
    magic_space_swapping_symbols | magic_space_stripping_symbols |
            magic_space_neutral_symbols \ symbols_excluded_from_word_separators 
 Symbol characters list that should switch back to the main layout 
  \u0022: Quotation mark (double quotation mark)
          \u0027: Apostrophe (single quotation mark)
          \u2018: Left single quotation mark
          \u2019: Right single quotation mark
          \u201a: Single low-9 quotation mark
          \u201b: Single high-reversed-9 quotation mark
          \u201c: Left double quotation mark
          \u201d: Right double quotation mark
          \u201e: Double low-9 quotation mark
          \u201f: Double high-reversed-9 quotation mark
          \u00ab: Left-pointing double angle quotation mark
          \u00bb: Right-pointing double angle quotation mark  
 string name="layout_switch_back_symbols">\u0022\u0027\u2018\u2019\u201a\u201b\u201c\u201d\u201e\u201f\u00ab\u00bb</string> 
         */
        public static final int layout_switch_back_symbols=0x7f0b0056;
        /**  Symbols that should convert magic spaces into real space 
 Symbols that should promote magic spaces into real space 
         */
        public static final int magic_space_promoting_symbols=0x7f0b0054;
        /**  Symbols that should strip a magic space 
 Symbols that should strip a magic space 
         */
        public static final int magic_space_stripping_symbols=0x7f0b0053;
        /**  Symbols that should be swapped with a magic space 
 Symbols that should be swapped with a magic space 
         */
        public static final int magic_space_swapping_symbols=0x7f0b0052;
        /**  Name of the main dictionary, as opposed to auxiliary dictionaries (medical/entertainment/sports...) 
         */
        public static final int main_dictionary=0x7f0b008b;
        /**  Category title for misc options  
         */
        public static final int misc_category=0x7f0b007f;
        public static final int more_keys_for_a=0x7f0b0004;
        public static final int more_keys_for_apostrophe=0x7f0b004c;
        public static final int more_keys_for_bullet=0x7f0b004e;
        public static final int more_keys_for_c=0x7f0b000b;
        public static final int more_keys_for_comma=0x7f0b0041;
        public static final int more_keys_for_currency_dollar=0x7f0b001f;
        public static final int more_keys_for_currency_euro=0x7f0b0020;
        public static final int more_keys_for_currency_general=0x7f0b0022;
        public static final int more_keys_for_currency_pound=0x7f0b0021;
        public static final int more_keys_for_cyrillic_e=0x7f0b001c;
        public static final int more_keys_for_cyrillic_ha=0x7f0b001e;
        public static final int more_keys_for_cyrillic_soft_sign=0x7f0b001d;
        public static final int more_keys_for_d=0x7f0b000f;
        /**  \u0651: ARABIC SHADDA
         \u0652: ARABIC SUKUN
         \u064c: ARABIC DAMMATAN
         \u0653: ARABIC MADDAH ABOVE
         \u064f: ARABIC DAMMA 
 \u0650: ARABIC KASRA
         \u064e: ARABIC FATHA
         \u064b: ARABIC FATHATAN
         \u0640: ARABIC TATWEEL
         \u064d: ARABIC KASRATAN 
 \u0670: ARABIC LETTER SUPERSCRIPT ALEF
         \u0656: ARABIC SUBSCRIPT ALEF
         \u0654: ARABIC HAMZA ABOVE
         \u0655: ARABIC HAMZA BELOW 
 In order to make Tatweel easily distinguishable from other punctuations, we use consecutive Tatweels only for its displayed label. 
         */
        public static final int more_keys_for_dash=0x7f0b004d;
        public static final int more_keys_for_e=0x7f0b0005;
        public static final int more_keys_for_f1=0x7f0b0042;
        /**  @icon/7 is iconTabKey 
 @icon/7 is iconTabKey 
         */
        public static final int more_keys_for_f1_navigate=0x7f0b0044;
        /**  @icon/3 is iconSettingsKey 
 @icon/3 is iconSettingsKey 
         */
        public static final int more_keys_for_f1_settings=0x7f0b0043;
        public static final int more_keys_for_g=0x7f0b0015;
        public static final int more_keys_for_i=0x7f0b0006;
        public static final int more_keys_for_k=0x7f0b0013;
        public static final int more_keys_for_l=0x7f0b0014;
        public static final int more_keys_for_n=0x7f0b000a;
        public static final int more_keys_for_o=0x7f0b0007;
        public static final int more_keys_for_p=0x7f0b0016;
        public static final int more_keys_for_plus=0x7f0b0050;
        /**  popular web domains for the locale - most popular, displayed on the keyboard 
         */
        public static final int more_keys_for_popular_domain=0x7f0b0027;
        /**  \u060c: ARABIC COMMA
         \u061b: ARABIC SEMICOLON
         \u061f: ARABIC QUESTION MARK 
 \u0650: ARABIC KASRA
         \u064e: ARABIC FATHA
         \u064b: ARABIC FATHATAN
         \u0640: ARABIC TATWEEL
         \u064d: ARABIC KASRATAN
         \u0670: ARABIC LETTER SUPERSCRIPT ALEF
         \u0656: ARABIC SUBSCRIPT ALEF
         \u0654: ARABIC HAMZA ABOVE
         \u0655: ARABIC HAMZA BELOW 
 \u0651: ARABIC SHADDA
         \u0652: ARABIC SUKUN
         \u064c: ARABIC DAMMATAN
         \u0653: ARABIC MADDAH ABOVE
         \u064f: ARABIC DAMMA 
 In order to make Tatweel easily distinguishable from other punctuations, we use consecutive Tatweels only for its displayed label. 
 TODO: Will introduce "grouping marks" to the more characters specification. 
         */
        public static final int more_keys_for_punctuation=0x7f0b0024;
        public static final int more_keys_for_q=0x7f0b000d;
        public static final int more_keys_for_r=0x7f0b0010;
        public static final int more_keys_for_s=0x7f0b0009;
        public static final int more_keys_for_scandinavia_row2_10=0x7f0b001a;
        public static final int more_keys_for_scandinavia_row2_11=0x7f0b001b;
        public static final int more_keys_for_smiley=0x7f0b0023;
        public static final int more_keys_for_star=0x7f0b004f;
        /**  \u066b: ARABIC DECIMAL SEPARATOR
         \u066c: ARABIC THOUSANDS SEPARATOR 
         */
        public static final int more_keys_for_symbols_0=0x7f0b003b;
        public static final int more_keys_for_symbols_1=0x7f0b0032;
        public static final int more_keys_for_symbols_2=0x7f0b0033;
        public static final int more_keys_for_symbols_3=0x7f0b0034;
        public static final int more_keys_for_symbols_4=0x7f0b0035;
        public static final int more_keys_for_symbols_5=0x7f0b0036;
        public static final int more_keys_for_symbols_6=0x7f0b0037;
        public static final int more_keys_for_symbols_7=0x7f0b0038;
        public static final int more_keys_for_symbols_8=0x7f0b0039;
        public static final int more_keys_for_symbols_9=0x7f0b003a;
        public static final int more_keys_for_symbols_percent=0x7f0b0047;
        public static final int more_keys_for_symbols_question=0x7f0b0045;
        public static final int more_keys_for_symbols_semicolon=0x7f0b0046;
        public static final int more_keys_for_t=0x7f0b0011;
        public static final int more_keys_for_u=0x7f0b0008;
        public static final int more_keys_for_v=0x7f0b0017;
        public static final int more_keys_for_w=0x7f0b000e;
        public static final int more_keys_for_y=0x7f0b000c;
        public static final int more_keys_for_z=0x7f0b0012;
        /**  Label on button when an error occurs 
         */
        public static final int ok=0x7f0b00de;
        /**  Option to control whether or not to show a popup with a larger font on each key press. 
         */
        public static final int popup_on_keypress=0x7f0b007c;
        public static final int prefs_debug_mode=0x7f0b0068;
        /**  Description for enabling to send user statistics to Google 
         */
        public static final int prefs_description_log=0x7f0b00ed;
        /**  Preferences item for enabling to send user statistics to Google 
         */
        public static final int prefs_enable_log=0x7f0b00ec;
        /**  Option to show/hide the settings key 
         */
        public static final int prefs_settings_key=0x7f0b0091;
        /**  Option to enable showing suggestions 
         */
        public static final int prefs_show_suggestions=0x7f0b008c;
        /**  Description for show suggestions 
         */
        public static final int prefs_show_suggestions_summary=0x7f0b008d;
        /**   Default value of the visibility of the suggestion strip 
         */
        public static final int prefs_suggestion_visibility_default_value=0x7f0b005f;
        public static final int prefs_suggestion_visibility_hide_name=0x7f0b0090;
        /**   Always hide the suggestion strip 
         */
        public static final int prefs_suggestion_visibility_hide_value=0x7f0b005e;
        public static final int prefs_suggestion_visibility_show_name=0x7f0b008e;
        public static final int prefs_suggestion_visibility_show_only_portrait_name=0x7f0b008f;
        /**   Show the suggestion strip only on portrait mode 
         */
        public static final int prefs_suggestion_visibility_show_only_portrait_value=0x7f0b005d;
        /**   Always show the suggestion strip 
         */
        public static final int prefs_suggestion_visibility_show_value=0x7f0b005c;
        /**  Title of an option for usability study mode 
         */
        public static final int prefs_usability_study_mode=0x7f0b00f2;
        /**  Title of the settings for vibration duration 
         */
        public static final int prefs_vibration_duration_settings=0x7f0b00f3;
        /**  Title of the dialog for selecting input methods. [CHAR LIMIT=20] 
         */
        public static final int selectInputMethod=0x7f0b00e6;
        /**  Preference for input language selection 
         */
        public static final int select_language=0x7f0b00e9;
        public static final int settings_ms=0x7f0b0072;
        /**  Option to play back sound on keypress in soft keyboard 
         */
        public static final int sound_on_keypress=0x7f0b007b;
        /**  Title for Latin Keyboard spell checker service 
         */
        public static final int spell_checker_service_name=0x7f0b0076;
        /**  Threshold of the normalized score of the best suggestion for the spell checker to declare a word to be "likely" 
         */
        public static final int spellchecker_likely_threshold_value=0x7f0b0002;
        /**  Threshold of the normalized score of any dictionary lookup to be offered as a suggestion by the spell checker 
         */
        public static final int spellchecker_suggestion_threshold_value=0x7f0b0003;
        /**  Spoken description for the currently entered text 
         */
        public static final int spoken_current_text_is=0x7f0b00a7;
        /**  Spoken description for the "Shift" keyboard key's pressed state. 
         */
        public static final int spoken_description_caps_lock=0x7f0b00ac;
        /**  Spoken description for the "\u2105" (CARE OF) keyboard key. 
         */
        public static final int spoken_description_care_of=0x7f0b00c6;
        /**  Spoken description for the ":" keyboard key. 
         */
        public static final int spoken_description_colon=0x7f0b00bb;
        /**  Spoken description for the "," keyboard key. 
         */
        public static final int spoken_description_comma=0x7f0b00b7;
        /**  Spoken description for the "Delete" keyboard key. 
         */
        public static final int spoken_description_delete=0x7f0b00ad;
        /**  Spoken description for the "\u0394" (GREEK CAPITAL LETTER DELTA) keyboard key. 
         */
        public static final int spoken_description_delta=0x7f0b00c4;
        /**  Spoken description for the "\u2022" (BULLET) keyboard key. 
         */
        public static final int spoken_description_dot=0x7f0b00c1;
        /**  Spoken description for the """ keyboard key. 
         */
        public static final int spoken_description_double_quote=0x7f0b00bf;
        /**  Spoken description for the "\u2026" (HORIZONTAL ELLIPSIS) keyboard key. 
         */
        public static final int spoken_description_ellipsis=0x7f0b00c9;
        /**  Spoken description for the "!" keyboard key. 
         */
        public static final int spoken_description_exclamation_mark=0x7f0b00bd;
        /**  Spoken description for the "(" keyboard key. 
         */
        public static final int spoken_description_left_parenthesis=0x7f0b00b9;
        /**  Spoken description for the "\u201E" (DOUBLE LOW-9 QUOTATION MARK) keyboard key. 
         */
        public static final int spoken_description_low_double_quote=0x7f0b00ca;
        /**  Spoken description for the "Mic" keyboard key. 
         */
        public static final int spoken_description_mic=0x7f0b00b4;
        /**  Spoken description for the "." keyboard key. 
         */
        public static final int spoken_description_period=0x7f0b00b8;
        /**  Spoken description for the "\u03C0" (GREEK SMALL LETTER PI) keyboard key. 
         */
        public static final int spoken_description_pi=0x7f0b00c3;
        /**  Spoken description for the "#" keyboard key. 
         */
        public static final int spoken_description_pound=0x7f0b00c8;
        /**  Spoken description for the "?" keyboard key. 
         */
        public static final int spoken_description_question_mark=0x7f0b00be;
        /**  Spoken description for the "Return" keyboard key. 
         */
        public static final int spoken_description_return=0x7f0b00b6;
        /**  Spoken description for the ")" keyboard key. 
         */
        public static final int spoken_description_right_parenthesis=0x7f0b00ba;
        /**  Spoken description for the ";" keyboard key. 
         */
        public static final int spoken_description_semicolon=0x7f0b00bc;
        /**  Spoken description for the "Settings" keyboard key. 
         */
        public static final int spoken_description_settings=0x7f0b00b1;
        /**  Spoken description for the "Shift" keyboard key. 
         */
        public static final int spoken_description_shift=0x7f0b00aa;
        /**  Spoken description for the "Shift" keyboard key's pressed state. 
         */
        public static final int spoken_description_shift_shifted=0x7f0b00ab;
        /**  Spoken description for the "'" keyboard key. 
         */
        public static final int spoken_description_single_quote=0x7f0b00c0;
        /**  Spoken description for the "Smiley" keyboard key. 
         */
        public static final int spoken_description_smiley=0x7f0b00b5;
        /**  Spoken description for the "Space" keyboard key. 
         */
        public static final int spoken_description_space=0x7f0b00b3;
        /**  Spoken description for the "\u221a" (SQUARE ROOT) keyboard key. 
         */
        public static final int spoken_description_square_root=0x7f0b00c2;
        /**  Spoken description for the "*" keyboard key. 
         */
        public static final int spoken_description_star=0x7f0b00c7;
        /**  Spoken description for the "Tab" keyboard key. 
         */
        public static final int spoken_description_tab=0x7f0b00b2;
        /**  Spoken description for the "To Alpha" keyboard key. 
         */
        public static final int spoken_description_to_alpha=0x7f0b00af;
        /**  Spoken description for the "To Numbers" keyboard key. 
         */
        public static final int spoken_description_to_numeric=0x7f0b00b0;
        /**  Spoken description for the "To Symbol" keyboard key. 
         */
        public static final int spoken_description_to_symbol=0x7f0b00ae;
        /**  Spoken description for the "\u2122" (TRADE MARK SIGN) keyboard key. 
         */
        public static final int spoken_description_trademark=0x7f0b00c5;
        /**  Spoken description for unknown keyboard keys. 
         */
        public static final int spoken_description_unknown=0x7f0b00a9;
        /**  Spoken description when there is no text entered 
         */
        public static final int spoken_no_text_entered=0x7f0b00a8;
        /**  Spoken description to let the user know that when typing in a password, they can plug in a headset in to hear spoken descriptions of the keys they type. [CHAR LIMIT=NONE] 
         */
        public static final int spoken_use_headphones=0x7f0b00a6;
        /**  Description for German QWERTY keyboard subtype [CHAR LIMIT=22] 
         */
        public static final int subtype_de_qwerty=0x7f0b00ef;
        /**  Description for English (United Kingdom) keyboard subtype [CHAR LIMIT=22] 
         */
        public static final int subtype_en_GB=0x7f0b00f0;
        /**  Description for English (United States) keyboard subtype [CHAR LIMIT=22] 
         */
        public static final int subtype_en_US=0x7f0b00f1;
        /**  Generic subtype label 
         */
        public static final int subtype_generic=0x7f0b006f;
        /**  Symbols that are suggested between words 
         */
        public static final int suggested_punctuations=0x7f0b0051;
        /**  Symbols that do NOT separate words 
 Symbols that do NOT separate words 
 Symbols that do NOT separate words 
         */
        public static final int symbols_excluded_from_word_separators=0x7f0b0055;
        /**  Option name for enabling or disabling the use of names of people in Contacts for suggestion and correction [CHAR LIMIT=25] 
         */
        public static final int use_contacts_dict=0x7f0b0085;
        /**  Description for option enabling or disabling the use of names of people in Contacts for suggestion and correction [CHAR LIMIT=65] 
         */
        public static final int use_contacts_dict_summary=0x7f0b0086;
        /**  Description for the "use proximity" option for spell checking [CHAR LIMIT=65] 
         */
        public static final int use_proximity_option_summary=0x7f0b0079;
        /**  Title for the "use proximity" option for spell checking [CHAR LIMIT=25] 
         */
        public static final int use_proximity_option_title=0x7f0b0078;
        /**  Option to provide vibrate/haptic feedback on keypress 
         */
        public static final int vibrate_on_keypress=0x7f0b007a;
        /**  Short message shown for an audio error. 
         */
        public static final int voice_audio_error=0x7f0b00d6;
        /**  Short message shown when a generic error occurs. 
         */
        public static final int voice_error=0x7f0b00d3;
        /**  Message to show when user enables the voice input settings (which says
        "Press the microphone button"). [CHAR LIMIT=100] 
 outdated translation 6892342981545727994 
         */
        public static final int voice_hint_dialog_message=0x7f0b00cf;
        /**  Short message shown before the user should speak. 
         */
        public static final int voice_initializing=0x7f0b00d2;
        /**  Preferences item for enabling speech input 
 outdated translation 2466640768843347841 
         */
        public static final int voice_input=0x7f0b00df;
        /**  Voice Input modes 
 On settings screen, voice input pop-up menu option to show voice key on main keyboard [CHAR LIMIT=20] 
         */
        public static final int voice_input_modes_main_keyboard=0x7f0b00e0;
        /**  On settings screen, voice input pop-up menu option to never show voice key [CHAR LIMIT=20] 
         */
        public static final int voice_input_modes_off=0x7f0b00e2;
        /**  Voice Input modes summary 
 On settings screen, voice input pop-up menu summary text to show voice key on main keyboard [CHAR LIMIT=20] 
         */
        public static final int voice_input_modes_summary_main_keyboard=0x7f0b00e3;
        /**  On settings screen, voice input pop-up menu summary text to never show voice key [CHAR LIMIT=20] 
         */
        public static final int voice_input_modes_summary_off=0x7f0b00e5;
        /**  On settings screen, voice input pop-up menu summary text to show voice key on symbols keyboard [CHAR LIMIT=20] 
         */
        public static final int voice_input_modes_summary_symbols_keyboard=0x7f0b00e4;
        /**  On settings screen, voice input pop-up menu option to show voice key on symbols keyboard [CHAR LIMIT=20] 
         */
        public static final int voice_input_modes_symbols_keyboard=0x7f0b00e1;
        /**  Short message to tell the user the system is ready for them to speak. 
         */
        public static final int voice_listening=0x7f0b00d0;
        public static final int voice_mode_main=0x7f0b0064;
        public static final int voice_mode_off=0x7f0b0066;
        public static final int voice_mode_symbols=0x7f0b0065;
        /**  Short message shown for a network error. 
         */
        public static final int voice_network_error=0x7f0b00d4;
        /**  Short message shown when the server couldn't parse any speech. 
         */
        public static final int voice_no_match=0x7f0b00d9;
        /**  Short message shown when the user initiates voice and voice search is not installed. 
         */
        public static final int voice_not_installed=0x7f0b00da;
        /**  Short hint shown in candidate view to explain that user can speak punctuation. 
         */
        public static final int voice_punctuation_hint=0x7f0b00dc;
        /**  Short message shown for an error with the voice server. 
         */
        public static final int voice_server_error=0x7f0b00d7;
        /**  Short message shown when no speech is heard. 
         */
        public static final int voice_speech_timeout=0x7f0b00d8;
        /**  Short hint shown in candidate view to explain voice input. 
         */
        public static final int voice_swipe_hint=0x7f0b00db;
        /**  Short message shown for a network error where the utterance was really long,
         in which case we should suggest that the user speak less. 
         */
        public static final int voice_too_much_speech=0x7f0b00d5;
        /**  An additional part of the warning dialog for voice input that only shows when the user
         actually initiates voice input, rather than just turning it on in settings. [CHAR LIMIT=200] 
 outdated translation 5652369578498701761 
         */
        public static final int voice_warning_how_to_turn_off=0x7f0b00ce;
        /**  Message that gets put at the top of the warning dialog if the user is attempting to use
         voice input in a currently unsupported locale. Voice input will work for such a user,
         but it will only recognize them in English. 
         */
        public static final int voice_warning_locale_not_supported=0x7f0b00cc;
        /**  Message of the warning dialog that shows when a user initiates voice input for
         the first time, or turns it on in settings. [CHAR LIMIT=200] 
 outdated translation 4611518823070986445 
         */
        public static final int voice_warning_may_not_understand=0x7f0b00cd;
        /**  Voice related labels 
 Title of the warning dialog that shows when a user initiates voice input for
         the first time. 
         */
        public static final int voice_warning_title=0x7f0b00cb;
        /**  Short message shown after the user finishes speaking. 
         */
        public static final int voice_working=0x7f0b00d1;
    }
    public static final class style {
        /**  Theme "Basic" 
         */
        public static final int Keyboard=0x7f0e0003;
        /**  Theme "Gingerbread" 
         */
        public static final int Keyboard_Gingerbread=0x7f0e0017;
        /**  Theme "Basic high contrast" 
         */
        public static final int Keyboard_HighContrast=0x7f0e000e;
        /**  Theme "IceCreamSandwich" 
         */
        public static final int Keyboard_IceCreamSandwich=0x7f0e001b;
        /**  Theme "Stone" 
         */
        public static final int Keyboard_Stone=0x7f0e0010;
        /**  Theme "Stone bold" 
         */
        public static final int Keyboard_Stone_Bold=0x7f0e0015;
        public static final int KeyboardIcons=0x7f0e0002;
        public static final int KeyboardIcons_Black=0x7f0e0000;
        public static final int KeyboardIcons_IceCreamSandwich=0x7f0e0001;
        public static final int KeyboardTheme=0x7f0e0028;
        public static final int KeyboardTheme_Gingerbread=0x7f0e0029;
        public static final int KeyboardTheme_HighContrast=0x7f0e0027;
        public static final int KeyboardTheme_IceCreamSandwich=0x7f0e002a;
        public static final int KeyboardTheme_Stone=0x7f0e002c;
        public static final int KeyboardTheme_Stone_Bold=0x7f0e002b;
        public static final int KeyboardView=0x7f0e0005;
        public static final int KeyboardView_Gingerbread=0x7f0e0018;
        public static final int KeyboardView_HighContrast=0x7f0e000f;
        public static final int KeyboardView_IceCreamSandwich=0x7f0e001d;
        public static final int KeyboardView_Stone=0x7f0e0012;
        public static final int KeyboardView_Stone_Bold=0x7f0e0016;
        public static final int LatinKeyboard=0x7f0e0004;
        public static final int LatinKeyboard_IceCreamSandwich=0x7f0e001c;
        public static final int LatinKeyboard_Stone=0x7f0e0011;
        public static final int MiniKeyboard=0x7f0e0006;
        public static final int MiniKeyboard_Gingerbread=0x7f0e0019;
        public static final int MiniKeyboard_IceCreamSandwich=0x7f0e001e;
        public static final int MiniKeyboard_Stone=0x7f0e0013;
        public static final int MiniKeyboardAnimation=0x7f0e0026;
        public static final int MiniKeyboardPanelStyle=0x7f0e0008;
        public static final int MiniKeyboardPanelStyle_IceCreamSandwich=0x7f0e0020;
        public static final int MiniKeyboardView=0x7f0e0007;
        public static final int MiniKeyboardView_Gingerbread=0x7f0e001a;
        public static final int MiniKeyboardView_IceCreamSandwich=0x7f0e001f;
        public static final int MiniKeyboardView_Stone=0x7f0e0014;
        public static final int MoreSuggestionsViewStyle=0x7f0e000b;
        public static final int MoreSuggestionsViewStyle_IceCreamSandwich=0x7f0e0023;
        public static final int SuggestionBackgroundStyle=0x7f0e000c;
        public static final int SuggestionBackgroundStyle_IceCreamSandwich=0x7f0e0024;
        public static final int SuggestionPreviewBackgroundStyle=0x7f0e000d;
        public static final int SuggestionPreviewBackgroundStyle_IceCreamSandwich=0x7f0e0025;
        public static final int SuggestionsStripBackgroundStyle=0x7f0e0009;
        public static final int SuggestionsStripBackgroundStyle_IceCreamSandwich=0x7f0e0021;
        public static final int SuggestionsViewStyle=0x7f0e000a;
        public static final int SuggestionsViewStyle_IceCreamSandwich=0x7f0e0022;
    }
    public static final class xml {
        public static final int kbd_currency_dollar_key_styles=0x7f050000;
        public static final int kbd_currency_euro_key_styles=0x7f050001;
        public static final int kbd_currency_key_styles=0x7f050002;
        public static final int kbd_key_styles=0x7f050003;
        public static final int kbd_mini_keyboard_template=0x7f050004;
        public static final int kbd_number=0x7f050005;
        public static final int kbd_numkey_styles=0x7f050006;
        public static final int kbd_phone=0x7f050007;
        public static final int kbd_phone_shift=0x7f050008;
        public static final int kbd_qwerty=0x7f050009;
        public static final int kbd_qwerty_f1=0x7f05000a;
        public static final int kbd_qwerty_f2=0x7f05000b;
        public static final int kbd_qwerty_row1=0x7f05000c;
        public static final int kbd_qwerty_row2=0x7f05000d;
        public static final int kbd_qwerty_row3=0x7f05000e;
        public static final int kbd_qwerty_row4=0x7f05000f;
        public static final int kbd_row3_comma_period=0x7f050010;
        public static final int kbd_row3_smiley=0x7f050011;
        public static final int kbd_row4_apostrophe_dash=0x7f050012;
        public static final int kbd_rows_arabic=0x7f050013;
        public static final int kbd_rows_azerty=0x7f050014;
        public static final int kbd_rows_hebrew=0x7f050015;
        public static final int kbd_rows_number=0x7f050016;
        public static final int kbd_rows_phone=0x7f050017;
        public static final int kbd_rows_phone_shift=0x7f050018;
        public static final int kbd_rows_qwerty=0x7f050019;
        public static final int kbd_rows_qwertz=0x7f05001a;
        public static final int kbd_rows_russian=0x7f05001b;
        public static final int kbd_rows_scandinavian=0x7f05001c;
        public static final int kbd_rows_serbian=0x7f05001d;
        public static final int kbd_rows_spanish=0x7f05001e;
        public static final int kbd_rows_symbols=0x7f05001f;
        public static final int kbd_rows_symbols_shift=0x7f050020;
        public static final int kbd_settings_or_tab=0x7f050021;
        public static final int kbd_suggestions_pane_template=0x7f050022;
        public static final int kbd_symbols=0x7f050023;
        public static final int kbd_symbols_f1=0x7f050024;
        public static final int kbd_symbols_row4=0x7f050025;
        public static final int kbd_symbols_shift=0x7f050026;
        public static final int kbd_symbols_shift_row4=0x7f050027;
        public static final int language_prefs=0x7f050028;
        public static final int method=0x7f050029;
        public static final int prefs=0x7f05002a;
        public static final int prefs_for_debug=0x7f05002b;
        public static final int spell_checker_settings=0x7f05002c;
        public static final int spellchecker=0x7f05002d;
    }
    public static final class styleable {
        /** Attributes that can be used with a Keyboard.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_horizontalGap com.android.inputmethod.latin:horizontalGap}</code></td><td> Default horizontal gap between keys.</td></tr>
           <tr><td><code>{@link #Keyboard_iconDeleteKey com.android.inputmethod.latin:iconDeleteKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconPreviewSettingsKey com.android.inputmethod.latin:iconPreviewSettingsKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconPreviewShortcutKey com.android.inputmethod.latin:iconPreviewShortcutKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconPreviewTabKey com.android.inputmethod.latin:iconPreviewTabKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconReturnKey com.android.inputmethod.latin:iconReturnKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconSearchKey com.android.inputmethod.latin:iconSearchKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconSettingsKey com.android.inputmethod.latin:iconSettingsKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconShiftKey com.android.inputmethod.latin:iconShiftKey}</code></td><td> Icon set for key top and key preview.</td></tr>
           <tr><td><code>{@link #Keyboard_iconShiftedShiftKey com.android.inputmethod.latin:iconShiftedShiftKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconShortcutForLabel com.android.inputmethod.latin:iconShortcutForLabel}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconShortcutKey com.android.inputmethod.latin:iconShortcutKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconSpaceKey com.android.inputmethod.latin:iconSpaceKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_iconTabKey com.android.inputmethod.latin:iconTabKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_isRtlKeyboard com.android.inputmethod.latin:isRtlKeyboard}</code></td><td> True if the keyboard is Right-To-Left </td></tr>
           <tr><td><code>{@link #Keyboard_keyboardBottomPadding com.android.inputmethod.latin:keyboardBottomPadding}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_keyboardHeight com.android.inputmethod.latin:keyboardHeight}</code></td><td> Default keyboard height </td></tr>
           <tr><td><code>{@link #Keyboard_keyboardHorizontalEdgesPadding com.android.inputmethod.latin:keyboardHorizontalEdgesPadding}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_keyboardLocale com.android.inputmethod.latin:keyboardLocale}</code></td><td> Locale of the keyboard layout </td></tr>
           <tr><td><code>{@link #Keyboard_keyboardTopPadding com.android.inputmethod.latin:keyboardTopPadding}</code></td><td> Keyboard top, bottom, both horizontal edges paddings.</td></tr>
           <tr><td><code>{@link #Keyboard_maxKeyboardHeight com.android.inputmethod.latin:maxKeyboardHeight}</code></td><td> Maximum keyboard height, in pixels or percentage of display height </td></tr>
           <tr><td><code>{@link #Keyboard_minKeyboardHeight com.android.inputmethod.latin:minKeyboardHeight}</code></td><td> Minimum keyboard height represented in pixels, percentage of display height if fraction
             is positive, or percentage of display width if fraction is negative.</td></tr>
           <tr><td><code>{@link #Keyboard_moreKeysTemplate com.android.inputmethod.latin:moreKeysTemplate}</code></td><td> More keys keyboard layout template </td></tr>
           <tr><td><code>{@link #Keyboard_rowHeight com.android.inputmethod.latin:rowHeight}</code></td><td> Default height of a row (key height + vertical gap), in pixels or percentage of
             keyboard height.</td></tr>
           <tr><td><code>{@link #Keyboard_themeId com.android.inputmethod.latin:themeId}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_touchPositionCorrectionData com.android.inputmethod.latin:touchPositionCorrectionData}</code></td><td> Touch position correction </td></tr>
           <tr><td><code>{@link #Keyboard_verticalGap com.android.inputmethod.latin:verticalGap}</code></td><td> Default vertical gap between rows of keys.</td></tr>
           </table>
           @see #Keyboard_horizontalGap
           @see #Keyboard_iconDeleteKey
           @see #Keyboard_iconPreviewSettingsKey
           @see #Keyboard_iconPreviewShortcutKey
           @see #Keyboard_iconPreviewTabKey
           @see #Keyboard_iconReturnKey
           @see #Keyboard_iconSearchKey
           @see #Keyboard_iconSettingsKey
           @see #Keyboard_iconShiftKey
           @see #Keyboard_iconShiftedShiftKey
           @see #Keyboard_iconShortcutForLabel
           @see #Keyboard_iconShortcutKey
           @see #Keyboard_iconSpaceKey
           @see #Keyboard_iconTabKey
           @see #Keyboard_isRtlKeyboard
           @see #Keyboard_keyboardBottomPadding
           @see #Keyboard_keyboardHeight
           @see #Keyboard_keyboardHorizontalEdgesPadding
           @see #Keyboard_keyboardLocale
           @see #Keyboard_keyboardTopPadding
           @see #Keyboard_maxKeyboardHeight
           @see #Keyboard_minKeyboardHeight
           @see #Keyboard_moreKeysTemplate
           @see #Keyboard_rowHeight
           @see #Keyboard_themeId
           @see #Keyboard_touchPositionCorrectionData
           @see #Keyboard_verticalGap
         */
        public static final int[] Keyboard = {
            0x7f01003a, 0x7f01003b, 0x7f01003c, 0x7f01003d,
            0x7f01003e, 0x7f01003f, 0x7f010040, 0x7f010041,
            0x7f010042, 0x7f010043, 0x7f010044, 0x7f010045,
            0x7f010046, 0x7f010047, 0x7f010048, 0x7f010049,
            0x7f01004a, 0x7f01004b, 0x7f01004c, 0x7f01004d,
            0x7f01004e, 0x7f01004f, 0x7f010050, 0x7f010051,
            0x7f010052, 0x7f010053, 0x7f010054
        };
        /**
          <p>
          @attr description
           Default horizontal gap between keys. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:horizontalGap
        */
        public static final int Keyboard_horizontalGap = 9;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconDeleteKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconDeleteKey
        */
        public static final int Keyboard_iconDeleteKey = 15;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconPreviewSettingsKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconPreviewSettingsKey
        */
        public static final int Keyboard_iconPreviewSettingsKey = 25;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconPreviewShortcutKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconPreviewShortcutKey
        */
        public static final int Keyboard_iconPreviewShortcutKey = 26;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconPreviewTabKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconPreviewTabKey
        */
        public static final int Keyboard_iconPreviewTabKey = 24;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconReturnKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconReturnKey
        */
        public static final int Keyboard_iconReturnKey = 18;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSearchKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconSearchKey
        */
        public static final int Keyboard_iconSearchKey = 19;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSettingsKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconSettingsKey
        */
        public static final int Keyboard_iconSettingsKey = 16;
        /**
          <p>
          @attr description
           Icon set for key top and key preview. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:iconShiftKey
        */
        public static final int Keyboard_iconShiftKey = 14;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconShiftedShiftKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconShiftedShiftKey
        */
        public static final int Keyboard_iconShiftedShiftKey = 23;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconShortcutForLabel}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconShortcutForLabel
        */
        public static final int Keyboard_iconShortcutForLabel = 22;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconShortcutKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconShortcutKey
        */
        public static final int Keyboard_iconShortcutKey = 21;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconSpaceKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconSpaceKey
        */
        public static final int Keyboard_iconSpaceKey = 17;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#iconTabKey}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:iconTabKey
        */
        public static final int Keyboard_iconTabKey = 20;
        /**
          <p>
          @attr description
           True if the keyboard is Right-To-Left 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:isRtlKeyboard
        */
        public static final int Keyboard_isRtlKeyboard = 13;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardBottomPadding}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:keyboardBottomPadding
        */
        public static final int Keyboard_keyboardBottomPadding = 6;
        /**
          <p>
          @attr description
           Default keyboard height 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyboardHeight
        */
        public static final int Keyboard_keyboardHeight = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardHorizontalEdgesPadding}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:keyboardHorizontalEdgesPadding
        */
        public static final int Keyboard_keyboardHorizontalEdgesPadding = 7;
        /**
          <p>
          @attr description
           Locale of the keyboard layout 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyboardLocale
        */
        public static final int Keyboard_keyboardLocale = 12;
        /**
          <p>
          @attr description
           Keyboard top, bottom, both horizontal edges paddings. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyboardTopPadding
        */
        public static final int Keyboard_keyboardTopPadding = 5;
        /**
          <p>
          @attr description
           Maximum keyboard height, in pixels or percentage of display height 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxKeyboardHeight
        */
        public static final int Keyboard_maxKeyboardHeight = 3;
        /**
          <p>
          @attr description
           Minimum keyboard height represented in pixels, percentage of display height if fraction
             is positive, or percentage of display width if fraction is negative. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:minKeyboardHeight
        */
        public static final int Keyboard_minKeyboardHeight = 4;
        /**
          <p>
          @attr description
           More keys keyboard layout template 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:moreKeysTemplate
        */
        public static final int Keyboard_moreKeysTemplate = 11;
        /**
          <p>
          @attr description
           Default height of a row (key height + vertical gap), in pixels or percentage of
             keyboard height. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:rowHeight
        */
        public static final int Keyboard_rowHeight = 8;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#themeId}
          attribute's value can be found in the {@link #Keyboard} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:themeId
        */
        public static final int Keyboard_themeId = 0;
        /**
          <p>
          @attr description
           Touch position correction 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:touchPositionCorrectionData
        */
        public static final int Keyboard_touchPositionCorrectionData = 1;
        /**
          <p>
          @attr description
           Default vertical gap between rows of keys. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:verticalGap
        */
        public static final int Keyboard_verticalGap = 10;
        /** Attributes that can be used with a KeyboardTheme.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyboardTheme_keyboardStyle com.android.inputmethod.latin:keyboardStyle}</code></td><td> Keyboard style </td></tr>
           <tr><td><code>{@link #KeyboardTheme_keyboardViewStyle com.android.inputmethod.latin:keyboardViewStyle}</code></td><td> KeyboardView style </td></tr>
           <tr><td><code>{@link #KeyboardTheme_latinKeyboardStyle com.android.inputmethod.latin:latinKeyboardStyle}</code></td><td> LatinKeyboard style </td></tr>
           <tr><td><code>{@link #KeyboardTheme_miniKeyboardPanelStyle com.android.inputmethod.latin:miniKeyboardPanelStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardTheme_miniKeyboardStyle com.android.inputmethod.latin:miniKeyboardStyle}</code></td><td> MiniKeyboard style </td></tr>
           <tr><td><code>{@link #KeyboardTheme_miniKeyboardViewStyle com.android.inputmethod.latin:miniKeyboardViewStyle}</code></td><td> MiniKeyboardView style </td></tr>
           <tr><td><code>{@link #KeyboardTheme_moreSuggestionsViewStyle com.android.inputmethod.latin:moreSuggestionsViewStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardTheme_suggestionBackgroundStyle com.android.inputmethod.latin:suggestionBackgroundStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardTheme_suggestionPreviewBackgroundStyle com.android.inputmethod.latin:suggestionPreviewBackgroundStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardTheme_suggestionsStripBackgroundStyle com.android.inputmethod.latin:suggestionsStripBackgroundStyle}</code></td><td> Suggestions strip style </td></tr>
           <tr><td><code>{@link #KeyboardTheme_suggestionsViewStyle com.android.inputmethod.latin:suggestionsViewStyle}</code></td><td></td></tr>
           </table>
           @see #KeyboardTheme_keyboardStyle
           @see #KeyboardTheme_keyboardViewStyle
           @see #KeyboardTheme_latinKeyboardStyle
           @see #KeyboardTheme_miniKeyboardPanelStyle
           @see #KeyboardTheme_miniKeyboardStyle
           @see #KeyboardTheme_miniKeyboardViewStyle
           @see #KeyboardTheme_moreSuggestionsViewStyle
           @see #KeyboardTheme_suggestionBackgroundStyle
           @see #KeyboardTheme_suggestionPreviewBackgroundStyle
           @see #KeyboardTheme_suggestionsStripBackgroundStyle
           @see #KeyboardTheme_suggestionsViewStyle
         */
        public static final int[] KeyboardTheme = {
            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
            0x7f010008, 0x7f010009, 0x7f01000a
        };
        /**
          <p>
          @attr description
           Keyboard style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyboardStyle
        */
        public static final int KeyboardTheme_keyboardStyle = 0;
        /**
          <p>
          @attr description
           KeyboardView style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyboardViewStyle
        */
        public static final int KeyboardTheme_keyboardViewStyle = 2;
        /**
          <p>
          @attr description
           LatinKeyboard style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:latinKeyboardStyle
        */
        public static final int KeyboardTheme_latinKeyboardStyle = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#miniKeyboardPanelStyle}
          attribute's value can be found in the {@link #KeyboardTheme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:miniKeyboardPanelStyle
        */
        public static final int KeyboardTheme_miniKeyboardPanelStyle = 5;
        /**
          <p>
          @attr description
           MiniKeyboard style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:miniKeyboardStyle
        */
        public static final int KeyboardTheme_miniKeyboardStyle = 3;
        /**
          <p>
          @attr description
           MiniKeyboardView style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:miniKeyboardViewStyle
        */
        public static final int KeyboardTheme_miniKeyboardViewStyle = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#moreSuggestionsViewStyle}
          attribute's value can be found in the {@link #KeyboardTheme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:moreSuggestionsViewStyle
        */
        public static final int KeyboardTheme_moreSuggestionsViewStyle = 8;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionBackgroundStyle}
          attribute's value can be found in the {@link #KeyboardTheme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:suggestionBackgroundStyle
        */
        public static final int KeyboardTheme_suggestionBackgroundStyle = 9;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionPreviewBackgroundStyle}
          attribute's value can be found in the {@link #KeyboardTheme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:suggestionPreviewBackgroundStyle
        */
        public static final int KeyboardTheme_suggestionPreviewBackgroundStyle = 10;
        /**
          <p>
          @attr description
           Suggestions strip style 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:suggestionsStripBackgroundStyle
        */
        public static final int KeyboardTheme_suggestionsStripBackgroundStyle = 6;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionsViewStyle}
          attribute's value can be found in the {@link #KeyboardTheme} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:suggestionsViewStyle
        */
        public static final int KeyboardTheme_suggestionsViewStyle = 7;
        /** Attributes that can be used with a KeyboardView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyboardView_backgroundDimAmount com.android.inputmethod.latin:backgroundDimAmount}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardView_keyBackground com.android.inputmethod.latin:keyBackground}</code></td><td> Image for the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyHintLabelColor com.android.inputmethod.latin:keyHintLabelColor}</code></td><td> Key hint label color </td></tr>
           <tr><td><code>{@link #KeyboardView_keyHintLabelRatio com.android.inputmethod.latin:keyHintLabelRatio}</code></td><td> Size of the text for hint label, in the proportion of key height.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyHintLetterColor com.android.inputmethod.latin:keyHintLetterColor}</code></td><td> Key hint letter (= one character hint label) color </td></tr>
           <tr><td><code>{@link #KeyboardView_keyHintLetterPadding com.android.inputmethod.latin:keyHintLetterPadding}</code></td><td> Top and right padding of hint letter to the edge of the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyHintLetterRatio com.android.inputmethod.latin:keyHintLetterRatio}</code></td><td> Size of the text for hint letter (= one character hint label), in the proportion of
             key height.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyLabelHorizontalPadding com.android.inputmethod.latin:keyLabelHorizontalPadding}</code></td><td> Horizontal padding of left/right aligned key label to the edge of the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyLabelRatio com.android.inputmethod.latin:keyLabelRatio}</code></td><td> Size of the text for keys with multiple letters, in the proportion of key height.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyLabelSize com.android.inputmethod.latin:keyLabelSize}</code></td><td> Size of the text for keys with multiple letters.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyLargeLetterRatio com.android.inputmethod.latin:keyLargeLetterRatio}</code></td><td> Large size of the text for one letter keys, in the proportion of key height.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyLetterRatio com.android.inputmethod.latin:keyLetterRatio}</code></td><td> Size of the text for one letter keys, in the proportion of key height.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyLetterSize com.android.inputmethod.latin:keyLetterSize}</code></td><td> Size of the text for one letter keys.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPopupHintLetterPadding com.android.inputmethod.latin:keyPopupHintLetterPadding}</code></td><td> Bottom padding of popup hint letter ".</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewBackground com.android.inputmethod.latin:keyPreviewBackground}</code></td><td> The background for key press feedback.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewBackgroundHeight com.android.inputmethod.latin:keyPreviewBackgroundHeight}</code></td><td> The height of rectangle part of the key press feedback background.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewBackgroundWidth com.android.inputmethod.latin:keyPreviewBackgroundWidth}</code></td><td> The width of rectangle part of the key press feedback background.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewHeight com.android.inputmethod.latin:keyPreviewHeight}</code></td><td> Height of the key press feedback popup.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewLayout com.android.inputmethod.latin:keyPreviewLayout}</code></td><td> Layout resource for key press feedback.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewLeftBackground com.android.inputmethod.latin:keyPreviewLeftBackground}</code></td><td> The background for the left edge key press feedback.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewOffset com.android.inputmethod.latin:keyPreviewOffset}</code></td><td> Vertical offset of the key press feedback from the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewRightBackground com.android.inputmethod.latin:keyPreviewRightBackground}</code></td><td> The background for the right edge key press feedback.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewTextColor com.android.inputmethod.latin:keyPreviewTextColor}</code></td><td> The text color for key press feedback.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyPreviewTextRatio com.android.inputmethod.latin:keyPreviewTextRatio}</code></td><td> Size of the text for key press feedback popup, int the proportion of key height </td></tr>
           <tr><td><code>{@link #KeyboardView_keyTextColor com.android.inputmethod.latin:keyTextColor}</code></td><td> Color to use for the label in a key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyTextInactivatedColor com.android.inputmethod.latin:keyTextInactivatedColor}</code></td><td> Color to use for the label in a key when in inactivated state.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyTextStyle com.android.inputmethod.latin:keyTextStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardView_keyUppercaseLetterActivatedColor com.android.inputmethod.latin:keyUppercaseLetterActivatedColor}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardView_keyUppercaseLetterInactivatedColor com.android.inputmethod.latin:keyUppercaseLetterInactivatedColor}</code></td><td> Upper case letter colors </td></tr>
           <tr><td><code>{@link #KeyboardView_keyUppercaseLetterPadding com.android.inputmethod.latin:keyUppercaseLetterPadding}</code></td><td> Top and right padding of upper case letter to the edge of the key.</td></tr>
           <tr><td><code>{@link #KeyboardView_keyUppercaseLetterRatio com.android.inputmethod.latin:keyUppercaseLetterRatio}</code></td><td> Size of the text for upper case letter, in the proportion of key height.</td></tr>
           <tr><td><code>{@link #KeyboardView_moreKeysLayout com.android.inputmethod.latin:moreKeysLayout}</code></td><td> Layout resource for more keys panel </td></tr>
           <tr><td><code>{@link #KeyboardView_shadowColor com.android.inputmethod.latin:shadowColor}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardView_shadowRadius com.android.inputmethod.latin:shadowRadius}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyboardView_verticalCorrection com.android.inputmethod.latin:verticalCorrection}</code></td><td> Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
           </table>
           @see #KeyboardView_backgroundDimAmount
           @see #KeyboardView_keyBackground
           @see #KeyboardView_keyHintLabelColor
           @see #KeyboardView_keyHintLabelRatio
           @see #KeyboardView_keyHintLetterColor
           @see #KeyboardView_keyHintLetterPadding
           @see #KeyboardView_keyHintLetterRatio
           @see #KeyboardView_keyLabelHorizontalPadding
           @see #KeyboardView_keyLabelRatio
           @see #KeyboardView_keyLabelSize
           @see #KeyboardView_keyLargeLetterRatio
           @see #KeyboardView_keyLetterRatio
           @see #KeyboardView_keyLetterSize
           @see #KeyboardView_keyPopupHintLetterPadding
           @see #KeyboardView_keyPreviewBackground
           @see #KeyboardView_keyPreviewBackgroundHeight
           @see #KeyboardView_keyPreviewBackgroundWidth
           @see #KeyboardView_keyPreviewHeight
           @see #KeyboardView_keyPreviewLayout
           @see #KeyboardView_keyPreviewLeftBackground
           @see #KeyboardView_keyPreviewOffset
           @see #KeyboardView_keyPreviewRightBackground
           @see #KeyboardView_keyPreviewTextColor
           @see #KeyboardView_keyPreviewTextRatio
           @see #KeyboardView_keyTextColor
           @see #KeyboardView_keyTextInactivatedColor
           @see #KeyboardView_keyTextStyle
           @see #KeyboardView_keyUppercaseLetterActivatedColor
           @see #KeyboardView_keyUppercaseLetterInactivatedColor
           @see #KeyboardView_keyUppercaseLetterPadding
           @see #KeyboardView_keyUppercaseLetterRatio
           @see #KeyboardView_moreKeysLayout
           @see #KeyboardView_shadowColor
           @see #KeyboardView_shadowRadius
           @see #KeyboardView_verticalCorrection
         */
        public static final int[] KeyboardView = {
            0x7f01000b, 0x7f01000c, 0x7f01000d, 0x7f01000e,
            0x7f01000f, 0x7f010010, 0x7f010011, 0x7f010012,
            0x7f010013, 0x7f010014, 0x7f010015, 0x7f010016,
            0x7f010017, 0x7f010018, 0x7f010019, 0x7f01001a,
            0x7f01001b, 0x7f01001c, 0x7f01001d, 0x7f01001e,
            0x7f01001f, 0x7f010020, 0x7f010021, 0x7f010022,
            0x7f010023, 0x7f010024, 0x7f010025, 0x7f010026,
            0x7f010027, 0x7f010028, 0x7f010029, 0x7f01002a,
            0x7f01002b, 0x7f01002c, 0x7f01002d
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#backgroundDimAmount}
          attribute's value can be found in the {@link #KeyboardView} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:backgroundDimAmount
        */
        public static final int KeyboardView_backgroundDimAmount = 33;
        /**
          <p>
          @attr description
           Image for the key. This image needs to be a StateListDrawable, with the following
             possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
             checkable+checked+pressed. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyBackground
        */
        public static final int KeyboardView_keyBackground = 0;
        /**
          <p>
          @attr description
           Key hint label color 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHintLabelColor
        */
        public static final int KeyboardView_keyHintLabelColor = 16;
        /**
          <p>
          @attr description
           Size of the text for hint label, in the proportion of key height. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHintLabelRatio
        */
        public static final int KeyboardView_keyHintLabelRatio = 7;
        /**
          <p>
          @attr description
           Key hint letter (= one character hint label) color 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHintLetterColor
        */
        public static final int KeyboardView_keyHintLetterColor = 15;
        /**
          <p>
          @attr description
           Top and right padding of hint letter to the edge of the key.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHintLetterPadding
        */
        public static final int KeyboardView_keyHintLetterPadding = 10;
        /**
          <p>
          @attr description
           Size of the text for hint letter (= one character hint label), in the proportion of
             key height. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHintLetterRatio
        */
        public static final int KeyboardView_keyHintLetterRatio = 6;
        /**
          <p>
          @attr description
           Horizontal padding of left/right aligned key label to the edge of the key. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLabelHorizontalPadding
        */
        public static final int KeyboardView_keyLabelHorizontalPadding = 9;
        /**
          <p>
          @attr description
           Size of the text for keys with multiple letters, in the proportion of key height. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLabelRatio
        */
        public static final int KeyboardView_keyLabelRatio = 5;
        /**
          <p>
          @attr description
           Size of the text for keys with multiple letters. If not defined, keyLabelRatio takes
             effect. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLabelSize
        */
        public static final int KeyboardView_keyLabelSize = 2;
        /**
          <p>
          @attr description
           Large size of the text for one letter keys, in the proportion of key height. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLargeLetterRatio
        */
        public static final int KeyboardView_keyLargeLetterRatio = 4;
        /**
          <p>
          @attr description
           Size of the text for one letter keys, in the proportion of key height. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLetterRatio
        */
        public static final int KeyboardView_keyLetterRatio = 3;
        /**
          <p>
          @attr description
           Size of the text for one letter keys. If not defined, keyLetterRatio takes effect. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLetterSize
        */
        public static final int KeyboardView_keyLetterSize = 1;
        /**
          <p>
          @attr description
           Bottom padding of popup hint letter "..." to the edge of the key.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPopupHintLetterPadding
        */
        public static final int KeyboardView_keyPopupHintLetterPadding = 11;
        /**
          <p>
          @attr description
           The background for key press feedback. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyPreviewBackground
        */
        public static final int KeyboardView_keyPreviewBackground = 20;
        /**
          <p>
          @attr description
           The height of rectangle part of the key press feedback background. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewBackgroundHeight
        */
        public static final int KeyboardView_keyPreviewBackgroundHeight = 24;
        /**
          <p>
          @attr description
           The width of rectangle part of the key press feedback background. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewBackgroundWidth
        */
        public static final int KeyboardView_keyPreviewBackgroundWidth = 23;
        /**
          <p>
          @attr description
           Height of the key press feedback popup. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewHeight
        */
        public static final int KeyboardView_keyPreviewHeight = 27;
        /**
          <p>
          @attr description
           Layout resource for key press feedback.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyPreviewLayout
        */
        public static final int KeyboardView_keyPreviewLayout = 19;
        /**
          <p>
          @attr description
           The background for the left edge key press feedback. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyPreviewLeftBackground
        */
        public static final int KeyboardView_keyPreviewLeftBackground = 21;
        /**
          <p>
          @attr description
           Vertical offset of the key press feedback from the key. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewOffset
        */
        public static final int KeyboardView_keyPreviewOffset = 26;
        /**
          <p>
          @attr description
           The background for the right edge key press feedback. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:keyPreviewRightBackground
        */
        public static final int KeyboardView_keyPreviewRightBackground = 22;
        /**
          <p>
          @attr description
           The text color for key press feedback. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewTextColor
        */
        public static final int KeyboardView_keyPreviewTextColor = 25;
        /**
          <p>
          @attr description
           Size of the text for key press feedback popup, int the proportion of key height 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyPreviewTextRatio
        */
        public static final int KeyboardView_keyPreviewTextRatio = 28;
        /**
          <p>
          @attr description
           Color to use for the label in a key. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyTextColor
        */
        public static final int KeyboardView_keyTextColor = 13;
        /**
          <p>
          @attr description
           Color to use for the label in a key when in inactivated state. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyTextInactivatedColor
        */
        public static final int KeyboardView_keyTextInactivatedColor = 14;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyTextStyle}
          attribute's value can be found in the {@link #KeyboardView} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> This should be aligned with Typeface.NORMAL etc. </td></tr>
<tr><td><code>bold</code></td><td>1</td><td></td></tr>
<tr><td><code>italic</code></td><td>2</td><td></td></tr>
<tr><td><code>boldItalic</code></td><td>3</td><td></td></tr>
</table>
          @attr name android:keyTextStyle
        */
        public static final int KeyboardView_keyTextStyle = 34;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyUppercaseLetterActivatedColor}
          attribute's value can be found in the {@link #KeyboardView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:keyUppercaseLetterActivatedColor
        */
        public static final int KeyboardView_keyUppercaseLetterActivatedColor = 18;
        /**
          <p>
          @attr description
           Upper case letter colors 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyUppercaseLetterInactivatedColor
        */
        public static final int KeyboardView_keyUppercaseLetterInactivatedColor = 17;
        /**
          <p>
          @attr description
           Top and right padding of upper case letter to the edge of the key.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyUppercaseLetterPadding
        */
        public static final int KeyboardView_keyUppercaseLetterPadding = 12;
        /**
          <p>
          @attr description
           Size of the text for upper case letter, in the proportion of key height. 


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyUppercaseLetterRatio
        */
        public static final int KeyboardView_keyUppercaseLetterRatio = 8;
        /**
          <p>
          @attr description
           Layout resource for more keys panel 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name android:moreKeysLayout
        */
        public static final int KeyboardView_moreKeysLayout = 30;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#shadowColor}
          attribute's value can be found in the {@link #KeyboardView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:shadowColor
        */
        public static final int KeyboardView_shadowColor = 31;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#shadowRadius}
          attribute's value can be found in the {@link #KeyboardView} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:shadowRadius
        */
        public static final int KeyboardView_shadowRadius = 32;
        /**
          <p>
          @attr description
           Amount to offset the touch Y coordinate by, for bias correction. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:verticalCorrection
        */
        public static final int KeyboardView_verticalCorrection = 29;
        /** Attributes that can be used with a Keyboard_Case.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_Case_clobberSettingsKey com.android.inputmethod.latin:clobberSettingsKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_countryCode com.android.inputmethod.latin:countryCode}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_f2KeyMode com.android.inputmethod.latin:f2KeyMode}</code></td><td> This should be aligned with KeyboardID.</td></tr>
           <tr><td><code>{@link #Keyboard_Case_hasSettingsKey com.android.inputmethod.latin:hasSettingsKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_hasShortcutKey com.android.inputmethod.latin:hasShortcutKey}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_imeAction com.android.inputmethod.latin:imeAction}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_languageCode com.android.inputmethod.latin:languageCode}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_localeCode com.android.inputmethod.latin:localeCode}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_mode com.android.inputmethod.latin:mode}</code></td><td> This should be aligned with KeyboardId.</td></tr>
           <tr><td><code>{@link #Keyboard_Case_navigateAction com.android.inputmethod.latin:navigateAction}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_passwordInput com.android.inputmethod.latin:passwordInput}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Case_shortcutKeyEnabled com.android.inputmethod.latin:shortcutKeyEnabled}</code></td><td></td></tr>
           </table>
           @see #Keyboard_Case_clobberSettingsKey
           @see #Keyboard_Case_countryCode
           @see #Keyboard_Case_f2KeyMode
           @see #Keyboard_Case_hasSettingsKey
           @see #Keyboard_Case_hasShortcutKey
           @see #Keyboard_Case_imeAction
           @see #Keyboard_Case_languageCode
           @see #Keyboard_Case_localeCode
           @see #Keyboard_Case_mode
           @see #Keyboard_Case_navigateAction
           @see #Keyboard_Case_passwordInput
           @see #Keyboard_Case_shortcutKeyEnabled
         */
        public static final int[] Keyboard_Case = {
            0x7f010068, 0x7f010069, 0x7f01006a, 0x7f01006b,
            0x7f01006c, 0x7f01006d, 0x7f01006e, 0x7f01006f,
            0x7f010070, 0x7f010071, 0x7f010072, 0x7f010073
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#clobberSettingsKey}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:clobberSettingsKey
        */
        public static final int Keyboard_Case_clobberSettingsKey = 5;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#countryCode}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:countryCode
        */
        public static final int Keyboard_Case_countryCode = 11;
        /**
          <p>
          @attr description
           This should be aligned with KeyboardID.F2KEY_MODE_* 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>settings</code></td><td>1</td><td></td></tr>
<tr><td><code>shortcutIme</code></td><td>2</td><td></td></tr>
<tr><td><code>shortcutImeOrSettings</code></td><td>3</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:f2KeyMode
        */
        public static final int Keyboard_Case_f2KeyMode = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#hasSettingsKey}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:hasSettingsKey
        */
        public static final int Keyboard_Case_hasSettingsKey = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#hasShortcutKey}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:hasShortcutKey
        */
        public static final int Keyboard_Case_hasShortcutKey = 7;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#imeAction}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>actionUnspecified</code></td><td>0</td><td> This should be aligned with EditorInfo.IME_ACTION_* </td></tr>
<tr><td><code>actionNone</code></td><td>1</td><td></td></tr>
<tr><td><code>actionGo</code></td><td>2</td><td></td></tr>
<tr><td><code>actionSearch</code></td><td>3</td><td></td></tr>
<tr><td><code>actionSend</code></td><td>4</td><td></td></tr>
<tr><td><code>actionNext</code></td><td>5</td><td></td></tr>
<tr><td><code>actionDone</code></td><td>6</td><td></td></tr>
<tr><td><code>actionPrevious</code></td><td>7</td><td></td></tr>
</table>
          @attr name android:imeAction
        */
        public static final int Keyboard_Case_imeAction = 8;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#languageCode}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:languageCode
        */
        public static final int Keyboard_Case_languageCode = 10;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#localeCode}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:localeCode
        */
        public static final int Keyboard_Case_localeCode = 9;
        /**
          <p>
          @attr description
           This should be aligned with KeyboardId.MODE_* 


          <p>May be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>text</code></td><td>0</td><td></td></tr>
<tr><td><code>url</code></td><td>1</td><td></td></tr>
<tr><td><code>email</code></td><td>2</td><td></td></tr>
<tr><td><code>im</code></td><td>3</td><td></td></tr>
<tr><td><code>phone</code></td><td>4</td><td></td></tr>
<tr><td><code>number</code></td><td>5</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:mode
        */
        public static final int Keyboard_Case_mode = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#navigateAction}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:navigateAction
        */
        public static final int Keyboard_Case_navigateAction = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#passwordInput}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:passwordInput
        */
        public static final int Keyboard_Case_passwordInput = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#shortcutKeyEnabled}
          attribute's value can be found in the {@link #Keyboard_Case} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:shortcutKeyEnabled
        */
        public static final int Keyboard_Case_shortcutKeyEnabled = 6;
        /** Attributes that can be used with a Keyboard_Include.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_Include_keyboardLayout com.android.inputmethod.latin:keyboardLayout}</code></td><td></td></tr>
           </table>
           @see #Keyboard_Include_keyboardLayout
         */
        public static final int[] Keyboard_Include = {
            0x7f010067
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#keyboardLayout}
          attribute's value can be found in the {@link #Keyboard_Include} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:keyboardLayout
        */
        public static final int Keyboard_Include_keyboardLayout = 0;
        /** Attributes that can be used with a Keyboard_Key.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_Key_backgroundType com.android.inputmethod.latin:backgroundType}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_Key_code com.android.inputmethod.latin:code}</code></td><td> The unicode value that this key outputs.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_enabled com.android.inputmethod.latin:enabled}</code></td><td> The key is enabled and responds on press.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_isRepeatable com.android.inputmethod.latin:isRepeatable}</code></td><td> Whether long-pressing on this key will make it repeat.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyHintLabel com.android.inputmethod.latin:keyHintLabel}</code></td><td> The hint label to display on the key in conjunction with the label.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyIcon com.android.inputmethod.latin:keyIcon}</code></td><td> The icon to display on the key instead of the label.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyIconPreview com.android.inputmethod.latin:keyIconPreview}</code></td><td> The icon to show in the popup preview.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyIconShifted com.android.inputmethod.latin:keyIconShifted}</code></td><td> Shift key icon for shifted state </td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyLabel com.android.inputmethod.latin:keyLabel}</code></td><td> The label to display on the key.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyLabelOption com.android.inputmethod.latin:keyLabelOption}</code></td><td> The key label option.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyOutputText com.android.inputmethod.latin:keyOutputText}</code></td><td> The string of characters to output when this key is pressed.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyStyle com.android.inputmethod.latin:keyStyle}</code></td><td> The key style to specify a set of key attributes defined by <key_style/> </td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyWidth com.android.inputmethod.latin:keyWidth}</code></td><td> Width of the key, in pixels or percentage of display width.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_keyXPos com.android.inputmethod.latin:keyXPos}</code></td><td> The X-coordinate of upper right corner of this key including horizontal gap.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_maxMoreKeysColumn com.android.inputmethod.latin:maxMoreKeysColumn}</code></td><td> Maximum column of more keys keyboard </td></tr>
           <tr><td><code>{@link #Keyboard_Key_moreKeys com.android.inputmethod.latin:moreKeys}</code></td><td> The keys to display in the more keys keyboard.</td></tr>
           <tr><td><code>{@link #Keyboard_Key_visualInsetsLeft com.android.inputmethod.latin:visualInsetsLeft}</code></td><td> Visual insets </td></tr>
           <tr><td><code>{@link #Keyboard_Key_visualInsetsRight com.android.inputmethod.latin:visualInsetsRight}</code></td><td></td></tr>
           </table>
           @see #Keyboard_Key_backgroundType
           @see #Keyboard_Key_code
           @see #Keyboard_Key_enabled
           @see #Keyboard_Key_isRepeatable
           @see #Keyboard_Key_keyHintLabel
           @see #Keyboard_Key_keyIcon
           @see #Keyboard_Key_keyIconPreview
           @see #Keyboard_Key_keyIconShifted
           @see #Keyboard_Key_keyLabel
           @see #Keyboard_Key_keyLabelOption
           @see #Keyboard_Key_keyOutputText
           @see #Keyboard_Key_keyStyle
           @see #Keyboard_Key_keyWidth
           @see #Keyboard_Key_keyXPos
           @see #Keyboard_Key_maxMoreKeysColumn
           @see #Keyboard_Key_moreKeys
           @see #Keyboard_Key_visualInsetsLeft
           @see #Keyboard_Key_visualInsetsRight
         */
        public static final int[] Keyboard_Key = {
            0x7f010055, 0x7f010056, 0x7f010057, 0x7f010058,
            0x7f010059, 0x7f01005a, 0x7f01005b, 0x7f01005c,
            0x7f01005d, 0x7f01005e, 0x7f01005f, 0x7f010060,
            0x7f010061, 0x7f010062, 0x7f010063, 0x7f010064,
            0x7f010065, 0x7f010066
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#backgroundType}
          attribute's value can be found in the {@link #Keyboard_Key} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>normal</code></td><td>0</td><td> This should be aligned with Key.BACKGROUND_TYPE_* </td></tr>
<tr><td><code>functional</code></td><td>1</td><td></td></tr>
<tr><td><code>action</code></td><td>2</td><td></td></tr>
<tr><td><code>sticky</code></td><td>3</td><td></td></tr>
</table>
          @attr name android:backgroundType
        */
        public static final int Keyboard_Key_backgroundType = 3;
        /**
          <p>
          @attr description
           The unicode value that this key outputs. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:code
        */
        public static final int Keyboard_Key_code = 0;
        /**
          <p>
          @attr description
           The key is enabled and responds on press. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:enabled
        */
        public static final int Keyboard_Key_enabled = 13;
        /**
          <p>
          @attr description
           Whether long-pressing on this key will make it repeat. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:isRepeatable
        */
        public static final int Keyboard_Key_isRepeatable = 4;
        /**
          <p>
          @attr description
           The hint label to display on the key in conjunction with the label. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyHintLabel
        */
        public static final int Keyboard_Key_keyHintLabel = 7;
        /**
          <p>
          @attr description
           The icon to display on the key instead of the label. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>iconShiftKey</code></td><td>1</td><td> This should be aligned with KeyboardIcons.ICON_* </td></tr>
<tr><td><code>iconDeleteKey</code></td><td>2</td><td></td></tr>
<tr><td><code>iconSettingsKey</code></td><td>3</td><td></td></tr>
<tr><td><code>iconSpaceKey</code></td><td>4</td><td></td></tr>
<tr><td><code>iconReturnKey</code></td><td>5</td><td></td></tr>
<tr><td><code>iconSearchKey</code></td><td>6</td><td></td></tr>
<tr><td><code>iconTabKey</code></td><td>7</td><td></td></tr>
<tr><td><code>iconShortcutKey</code></td><td>8</td><td></td></tr>
<tr><td><code>iconShortcutForLabel</code></td><td>9</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:keyIcon
        */
        public static final int Keyboard_Key_keyIcon = 9;
        /**
          <p>
          @attr description
           The icon to show in the popup preview. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>iconPreviewTabKey</code></td><td>11</td><td> This should be aligned with KeyboardIcons.ICON_PREVIEW_* </td></tr>
<tr><td><code>iconPreviewSettingsKey</code></td><td>12</td><td></td></tr>
<tr><td><code>iconPreviewShortcutKey</code></td><td>13</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:keyIconPreview
        */
        public static final int Keyboard_Key_keyIconPreview = 11;
        /**
          <p>
          @attr description
           Shift key icon for shifted state 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>iconShiftedShiftKey</code></td><td>10</td><td> This should be aligned with KeyboardIcons.ICON_SHIFTED_* </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:keyIconShifted
        */
        public static final int Keyboard_Key_keyIconShifted = 10;
        /**
          <p>
          @attr description
           The label to display on the key. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyLabel
        */
        public static final int Keyboard_Key_keyLabel = 6;
        /**
          <p>
          @attr description
           The key label option. 


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>alignLeft</code></td><td>0x01</td><td> This should be aligned with Key.LABEL_OPTION_* </td></tr>
<tr><td><code>alignRight</code></td><td>0x02</td><td></td></tr>
<tr><td><code>alignLeftOfCenter</code></td><td>0x08</td><td></td></tr>
<tr><td><code>largeLetter</code></td><td>0x10</td><td></td></tr>
<tr><td><code>fontNormal</code></td><td>0x20</td><td></td></tr>
<tr><td><code>fontMonoSpace</code></td><td>0x40</td><td></td></tr>
<tr><td><code>followKeyLetterRatio</code></td><td>0x80</td><td></td></tr>
<tr><td><code>followKeyHintLabelRatio</code></td><td>0x100</td><td></td></tr>
<tr><td><code>hasPopupHint</code></td><td>0x200</td><td></td></tr>
<tr><td><code>hasUppercaseLetter</code></td><td>0x400</td><td></td></tr>
<tr><td><code>hasHintLabel</code></td><td>0x800</td><td></td></tr>
<tr><td><code>withIconLeft</code></td><td>0x1000</td><td></td></tr>
<tr><td><code>withIconRight</code></td><td>0x2000</td><td></td></tr>
<tr><td><code>autoXScale</code></td><td>0x4000</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:keyLabelOption
        */
        public static final int Keyboard_Key_keyLabelOption = 8;
        /**
          <p>
          @attr description
           The string of characters to output when this key is pressed. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyOutputText
        */
        public static final int Keyboard_Key_keyOutputText = 5;
        /**
          <p>
          @attr description
           The key style to specify a set of key attributes defined by <key_style/> 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyStyle
        */
        public static final int Keyboard_Key_keyStyle = 12;
        /**
          <p>
          @attr description
           Width of the key, in pixels or percentage of display width.
             If the value is fillRight, the actual key width will be determined to fill out the area
             up to the right edge of the keyboard.
             If the value is fillBoth, the actual key width will be determined to fill out the
             area between the nearest key on the left hand side and the right edge of the keyboard.
             
 This should be aligned with KeyboardBuilder.Row.KEYWIDTH_* 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>fillRight</code></td><td>-1</td><td></td></tr>
<tr><td><code>fillBoth</code></td><td>-2</td><td></td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:keyWidth
        */
        public static final int Keyboard_Key_keyWidth = 16;
        /**
          <p>
          @attr description
           The X-coordinate of upper right corner of this key including horizontal gap.
             If the value is negative, the origin is the right edge of the keyboard. 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:keyXPos
        */
        public static final int Keyboard_Key_keyXPos = 17;
        /**
          <p>
          @attr description
           Maximum column of more keys keyboard 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:maxMoreKeysColumn
        */
        public static final int Keyboard_Key_maxMoreKeysColumn = 2;
        /**
          <p>
          @attr description
           The keys to display in the more keys keyboard. 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:moreKeys
        */
        public static final int Keyboard_Key_moreKeys = 1;
        /**
          <p>
          @attr description
           Visual insets 


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:visualInsetsLeft
        */
        public static final int Keyboard_Key_visualInsetsLeft = 14;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#visualInsetsRight}
          attribute's value can be found in the {@link #Keyboard_Key} array.


          <p>May be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>May be a fractional value, which is a floating point number appended with either % or %p, such as "<code>14.5%</code>".
The % suffix always means a percentage of the base size; the optional %p suffix provides a size relative to
some parent container.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:visualInsetsRight
        */
        public static final int Keyboard_Key_visualInsetsRight = 15;
        /** Attributes that can be used with a Keyboard_KeyStyle.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #Keyboard_KeyStyle_parentStyle com.android.inputmethod.latin:parentStyle}</code></td><td></td></tr>
           <tr><td><code>{@link #Keyboard_KeyStyle_styleName com.android.inputmethod.latin:styleName}</code></td><td></td></tr>
           </table>
           @see #Keyboard_KeyStyle_parentStyle
           @see #Keyboard_KeyStyle_styleName
         */
        public static final int[] Keyboard_KeyStyle = {
            0x7f010074, 0x7f010075
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#parentStyle}
          attribute's value can be found in the {@link #Keyboard_KeyStyle} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:parentStyle
        */
        public static final int Keyboard_KeyStyle_parentStyle = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#styleName}
          attribute's value can be found in the {@link #Keyboard_KeyStyle} array.


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:styleName
        */
        public static final int Keyboard_KeyStyle_styleName = 0;
        /** Attributes that can be used with a LatinKeyboard.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #LatinKeyboard_autoCorrectionSpacebarLedEnabled com.android.inputmethod.latin:autoCorrectionSpacebarLedEnabled}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboard_autoCorrectionSpacebarLedIcon com.android.inputmethod.latin:autoCorrectionSpacebarLedIcon}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboard_disabledShortcutIcon com.android.inputmethod.latin:disabledShortcutIcon}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboard_spacebarTextColor com.android.inputmethod.latin:spacebarTextColor}</code></td><td></td></tr>
           <tr><td><code>{@link #LatinKeyboard_spacebarTextShadowColor com.android.inputmethod.latin:spacebarTextShadowColor}</code></td><td></td></tr>
           </table>
           @see #LatinKeyboard_autoCorrectionSpacebarLedEnabled
           @see #LatinKeyboard_autoCorrectionSpacebarLedIcon
           @see #LatinKeyboard_disabledShortcutIcon
           @see #LatinKeyboard_spacebarTextColor
           @see #LatinKeyboard_spacebarTextShadowColor
         */
        public static final int[] LatinKeyboard = {
            0x7f010076, 0x7f010077, 0x7f010078, 0x7f010079,
            0x7f01007a
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#autoCorrectionSpacebarLedEnabled}
          attribute's value can be found in the {@link #LatinKeyboard} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:autoCorrectionSpacebarLedEnabled
        */
        public static final int LatinKeyboard_autoCorrectionSpacebarLedEnabled = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#autoCorrectionSpacebarLedIcon}
          attribute's value can be found in the {@link #LatinKeyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:autoCorrectionSpacebarLedIcon
        */
        public static final int LatinKeyboard_autoCorrectionSpacebarLedIcon = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#disabledShortcutIcon}
          attribute's value can be found in the {@link #LatinKeyboard} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name android:disabledShortcutIcon
        */
        public static final int LatinKeyboard_disabledShortcutIcon = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#spacebarTextColor}
          attribute's value can be found in the {@link #LatinKeyboard} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:spacebarTextColor
        */
        public static final int LatinKeyboard_spacebarTextColor = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#spacebarTextShadowColor}
          attribute's value can be found in the {@link #LatinKeyboard} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:spacebarTextShadowColor
        */
        public static final int LatinKeyboard_spacebarTextShadowColor = 4;
        /** Attributes that can be used with a SuggestionsView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #SuggestionsView_alphaAutoCorrect com.android.inputmethod.latin:alphaAutoCorrect}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_alphaObsoleted com.android.inputmethod.latin:alphaObsoleted}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_alphaSuggested com.android.inputmethod.latin:alphaSuggested}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_alphaTypedWord com.android.inputmethod.latin:alphaTypedWord}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_centerSuggestionPercentile com.android.inputmethod.latin:centerSuggestionPercentile}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_colorAutoCorrect com.android.inputmethod.latin:colorAutoCorrect}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_colorSuggested com.android.inputmethod.latin:colorSuggested}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_colorTypedWord com.android.inputmethod.latin:colorTypedWord}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_maxMoreSuggestionsRow com.android.inputmethod.latin:maxMoreSuggestionsRow}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_minMoreSuggestionsWidth com.android.inputmethod.latin:minMoreSuggestionsWidth}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_suggestionStripOption com.android.inputmethod.latin:suggestionStripOption}</code></td><td></td></tr>
           <tr><td><code>{@link #SuggestionsView_suggestionsCountInStrip com.android.inputmethod.latin:suggestionsCountInStrip}</code></td><td></td></tr>
           </table>
           @see #SuggestionsView_alphaAutoCorrect
           @see #SuggestionsView_alphaObsoleted
           @see #SuggestionsView_alphaSuggested
           @see #SuggestionsView_alphaTypedWord
           @see #SuggestionsView_centerSuggestionPercentile
           @see #SuggestionsView_colorAutoCorrect
           @see #SuggestionsView_colorSuggested
           @see #SuggestionsView_colorTypedWord
           @see #SuggestionsView_maxMoreSuggestionsRow
           @see #SuggestionsView_minMoreSuggestionsWidth
           @see #SuggestionsView_suggestionStripOption
           @see #SuggestionsView_suggestionsCountInStrip
         */
        public static final int[] SuggestionsView = {
            0x7f01002e, 0x7f01002f, 0x7f010030, 0x7f010031,
            0x7f010032, 0x7f010033, 0x7f010034, 0x7f010035,
            0x7f010036, 0x7f010037, 0x7f010038, 0x7f010039
        };
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#alphaAutoCorrect}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:alphaAutoCorrect
        */
        public static final int SuggestionsView_alphaAutoCorrect = 5;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#alphaObsoleted}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:alphaObsoleted
        */
        public static final int SuggestionsView_alphaObsoleted = 7;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#alphaSuggested}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:alphaSuggested
        */
        public static final int SuggestionsView_alphaSuggested = 6;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#alphaTypedWord}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:alphaTypedWord
        */
        public static final int SuggestionsView_alphaTypedWord = 4;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#centerSuggestionPercentile}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:centerSuggestionPercentile
        */
        public static final int SuggestionsView_centerSuggestionPercentile = 9;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorAutoCorrect}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:colorAutoCorrect
        */
        public static final int SuggestionsView_colorAutoCorrect = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorSuggested}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:colorSuggested
        */
        public static final int SuggestionsView_colorSuggested = 3;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#colorTypedWord}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:colorTypedWord
        */
        public static final int SuggestionsView_colorTypedWord = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#maxMoreSuggestionsRow}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:maxMoreSuggestionsRow
        */
        public static final int SuggestionsView_maxMoreSuggestionsRow = 10;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#minMoreSuggestionsWidth}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be a floating point value, such as "<code>1.2</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:minMoreSuggestionsWidth
        */
        public static final int SuggestionsView_minMoreSuggestionsWidth = 11;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionStripOption}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>autoCorrectBold</code></td><td>0x01</td><td> This should be aligned with SuggestionsViewParams.AUTO_CORRECT_* and etc. </td></tr>
<tr><td><code>autoCorrectUnderline</code></td><td>0x02</td><td></td></tr>
<tr><td><code>validTypedWordBold</code></td><td>0x04</td><td></td></tr>
</table>
          @attr name android:suggestionStripOption
        */
        public static final int SuggestionsView_suggestionStripOption = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.inputmethod.latin.R.attr#suggestionsCountInStrip}
          attribute's value can be found in the {@link #SuggestionsView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:suggestionsCountInStrip
        */
        public static final int SuggestionsView_suggestionsCountInStrip = 8;
    };
}
